{
    "docs": [
        {
            "location": "/", 
            "text": "\u6b22\u8fce\u9605\u8bfb\uff01\uff01\uff01\n\n\n\u6b22\u8fce\u8d21\u732e\uff01\uff01\uff01\n\n\n\u7b80\u4ecb\n\n\nHyperledger\u56fd\u9645\u5316\u5de5\u4f5c\u7ec4\n\u662fHyperledger\u4e2d\u56fd\u5de5\u4f5c\u7ec4(TWGC)\u4e0b\u5c5e\u7684\u4e00\u4e2a\u5c0f\u7ec4\uff0c\u4e3b\u8981\u8d1f\u8d23\u76f8\u5173\u6587\u6863\u7684\u4e2d\u6587\u7f16\u5199\u548c\u7ffb\u8bd1\uff0c\u4ee5\u53ca\u7ec4\u7ec7\u8ba8\u8bba\u3001\u6559\u80b2\u57f9\u8bad\u6d3b\u52a8\u7b49\u3002\n\n\n\u76ee\u524d\u5c0f\u7ec4\u6709\u6210\u5458100\u4f59\u540d\uff0c\u6d3b\u8dc3\u8d21\u732e\u800520\u4f59\u540d\uff0c\u5df2\u5b8c\u6210\u6587\u7ae030\u4f59\u7bc7\u3002\n\n\n\u5982\u4f55\u8d21\u732e\n\n\n\u4ee5\u524d\u6211\u4eec\u7528\nHyperledger Wiki\n\u7ba1\u7406\u6587\u7ae0\uff0c\u4f46Wiki\u8bfb\u5199\u64cd\u4f5c\u6709\u8bf8\u591a\u4e0d\u4fbf\uff0c\u4e3a\u6b64\u6211\u4eec\u5c06\u6587\u6863\u8f6c\u79fb\u5230\ngithub\u4e0a\n\uff0c\u4ee5\u4f7f\u5927\u5bb6\u66f4\u65b9\u4fbf\u5730\u9605\u8bfb\u548c\u7f16\u8f91\u8d21\u732e\u8d44\u6e90\u3002\n\n\n\u8d21\u732e\u5185\u5bb9\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a\u6587\u6863\u7ffb\u8bd1\u3001\u77e5\u8bc6\u603b\u7ed3\u3001\u7ecf\u9a8c\u6559\u8bad\u3001\u597d\u6587\u94fe\u63a5\u3001\u5947\u601d\u5999\u60f3\n\n\n\u5982\u679c\u60a8\u4e0d\u60f3\u4f5c\u5982\u4e0b\u64cd\u4f5c\uff0c\u53ef\u5c06\u76f4\u63a5\u5185\u5bb9\u90ae\u4ef6\uff08\u89c1\u9875\u9762\u6700\u4e0b\u65b9\uff09\u53d1\u9001\u7ed9\u5de5\u4f5c\u7ec4\uff0c\u6211\u4eec\u4e3a\u60a8\u53d1\u5e03\n\n\n\u52a0\u5165\u7ec4\u7ec7\n\n\n\n\n\n\n\u52a0\u5165\u5fae\u4fe1\u7fa4\n\n\n\u76ee\u524d\u5fae\u4fe1\u7fa4\u5df2\u8d85\u4e00\u767e\u4eba\uff0c\u53ea\u80fd\u901a\u8fc7\u9080\u8bf7\u65b9\u5f0f\u52a0\u5165\u3002\u60a8\u53ef\u4ee5\u8bf7\u8ba4\u8bc6\u7684\u5c0f\u4f19\u4f34\u62c9\u4f60\u5165\u7fa4\uff0c\u4e5f\u53ef\u4ee5\u8054\u7cfb\u7ba1\u7406\u5458\uff08\u89c1\u9875\u9762\u6700\u4e0b\u65b9\uff09\u3002\n\n\n\n\n\n\n\u52a0\u5165wiki\n\n\nHyperledger Wiki\u662f\u5b98\u65b9\u7684\u4fe1\u606f\u6e20\u9053\uff0c\u6240\u4ee5\u8bf7\u5c06\u60a8\u7684\u4fe1\u606f\u52a0\u5165\u5176\u4e2d\u3002\n\u70b9\u51fb\u8fdb\u5165\n\uff0c\u767b\u9646\uff0c\u7136\u540e\u7f16\u8f91\nVolunteers\n\u8868\u683c\uff0c\u5c06\u81ea\u5df1\u7684\u4fe1\u606f\u5199\u5165\u5e76\u4fdd\u5b58\u3002\n\n\n\n\n\n\n\u8d21\u732e\u8d44\u6e90\n\n\n\u76ee\u524d\u4ee5\ngithub\n\u7ba1\u7406\u6587\u6863\uff0c\u4ee5\ngithub pages\n\u5c55\u793a\u6587\u6863\uff0c\u4ee5\nMkDocs\n\u6784\u5efa\u6587\u6863\u3002\u5176\u4e2d\u6587\u6863\u90fd\u662f\u4ee5Markdown\u7f16\u5199\u3002\n\n\n\u51c6\u5907\n\n\n\n\ngithub\u8d26\u53f7\n\n\n\u5b89\u88c5git\n\n\n\u5b89\u88c5\nMkDocs\n\uff08\u53ef\u53c2\u7167\n\u4e2d\u6587\u6587\u6863\n\uff09\n\n\n\n\n\u672c\u5730\u7f16\u8f91\n\u9884\u89c8\n\n\n\n\n\n\n\u4e0b\u8f7d\u6e90\u7801\n\n\ngit clone https://github.com/HyperledgerCN/hyperledgerDocs.git\n\n\n\n\n\n\n\n\u7f16\u8f91\u9884\u89c8\n\n\n\u6ce8\u610f\uff1a\n\u6587\u6863\u5f00\u5934\u56fa\u5b9a\u4ee5\u4e0b\u683c\u5f0f\uff1a\n\n\n| \u539f\u6587 | \u4f5c\u8005 | \u5ba1\u6838\u4fee\u6b63 |\n| --- | --- | \u2014--- |\n| [\u539f\u6587](\n\u539f\u6587\u8def\u5f84\n) | \n\u5982\u679c\u4f60\u662f\u4f5c\u8005\uff0c\u8bf7\u5728\u6b64\u7559\u540d\n | \n\u5982\u679c\u4f60\u662f\u4fee\u6539\u8005\uff0c\u8bf7\u5728\u6b64\u7559\u540d\uff0c\u53ef\u4ee5\u591a\u4e2a\n |\n\n\n\n\u56fe\u7247\u653e\u5230\nhyperledgerDocs/docs/img\n\u91cc\uff0c\u6587\u6863\u4e2d\u4ee5\nimg/xx.png\n\u5f15\u7528\u3002\n\n\n\n\n\n\n\u4fee\u6539\u5df2\u6709\u6587\u6863\uff1a\u8fdb\u5165\nhyperledgerDocs/docs\n\u76ee\u5f55\uff0c\u7f16\u8f91\u5bf9\u5e94\u6587\u4ef6\u3002\n\n\n\n\n\n\n\u6dfb\u52a0\u65b0\u6587\u6863\uff1a\u8fdb\u5165\nhyperledgerDocs/docs\n\u76ee\u5f55\uff0c\u6dfb\u52a0\u65b0\u7684\nMarkdown\u6587\u4ef6\n\u5e76\u7f16\u8f91\u5185\u5bb9\uff1b\u7136\u540e\u7f16\u8f91\nmkdocs.yml\n\uff0c\u5c06\u65b0\u52a0\u6587\u6863\u6309\u5982\u4e0b\u683c\u5f0f\u6dfb\u52a0\u5230\u914d\u7f6e\u6587\u4ef6\u4e2d\u3002\n\n\npages:\n    - \u6b22\u8fce: index.md\n    - \u8bcd\u6c47\u8868: glossary.md\n    - \u5feb\u901f\u5165\u95e8: getting_started.md\n    - \u534f\u8bae\u89c4\u8303: protocol-spec_zh.md\n    - Fabric\u6559\u7a0b:\n        - \u6784\u5efa\u7b2c\u4e00\u4e2afabric\u7f51\u7edc: build_network_zh.md\n        - \u7f16\u5199\u7b2c\u4e00\u4e2a\u5e94\u7528: write_first_app_zh.md\n        - Chaincode: chaincode_zh.md\n\n\n\n\n\n\n\n\u672c\u5730\u9884\u89c8\uff1a\u5728\nhyperledgerDocs\n\u76ee\u5f55\u4e0b\u6267\u884c\n\n\nmkdocs serve\n\n\n\n\u7136\u540e\u6d4f\u89c8\u5668\u6253\u5f00\nhttp://127.0.0.1:8000/\n\u627e\u5230\u76f8\u5e94\u9875\u9762\u3002\n\n\n\n\n\n\n\n\n\n\n\u7ebf\u4e0a\u63d0\u4ea4\n\u90e8\u7f72\n\n\n\u672c\u5730\u9884\u89c8\u65e0\u8bef\u540e\uff0c\u5373\u53ef\u63d0\u4ea4\u5230\u7ebf\u4e0a\u4f9b\u5927\u5bb6\u9605\u8bfb\u3002\n\n\n\u5728\nhyperledgerDocs\n\u76ee\u5f55\u4e0b\u6267\u884c\n\n\n./build.sh\n\n\n\n\u5982\u65e0\u62a5\u9519\uff0c\u6d4f\u89c8\u5668\u6253\u5f00\nhttps://hyperledgercn.github.io/hyperledgerDocs/\n\u67e5\u770b\u4fee\u6539\u7ed3\u679c\u3002\n\n\n\u7ebf\u4e0a\u786e\u8ba4\u6210\u529f\u540e\uff0c\u5343\u4e07\u4e0d\u8981\u5fd8\u4e86\u5c06\u672c\u5730\u4fee\u6539\u7684\u6e90\u6587\u4ef6\u63d0\u4ea4\u5230github\u4ed3\u5e93\uff1a\n\n\ngit add .\ngit commit -m \"your message\"\ngit push", 
            "title": "\u6b22\u8fce"
        }, 
        {
            "location": "/#_1", 
            "text": "Hyperledger\u56fd\u9645\u5316\u5de5\u4f5c\u7ec4 \u662fHyperledger\u4e2d\u56fd\u5de5\u4f5c\u7ec4(TWGC)\u4e0b\u5c5e\u7684\u4e00\u4e2a\u5c0f\u7ec4\uff0c\u4e3b\u8981\u8d1f\u8d23\u76f8\u5173\u6587\u6863\u7684\u4e2d\u6587\u7f16\u5199\u548c\u7ffb\u8bd1\uff0c\u4ee5\u53ca\u7ec4\u7ec7\u8ba8\u8bba\u3001\u6559\u80b2\u57f9\u8bad\u6d3b\u52a8\u7b49\u3002  \u76ee\u524d\u5c0f\u7ec4\u6709\u6210\u5458100\u4f59\u540d\uff0c\u6d3b\u8dc3\u8d21\u732e\u800520\u4f59\u540d\uff0c\u5df2\u5b8c\u6210\u6587\u7ae030\u4f59\u7bc7\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/#_2", 
            "text": "\u4ee5\u524d\u6211\u4eec\u7528 Hyperledger Wiki \u7ba1\u7406\u6587\u7ae0\uff0c\u4f46Wiki\u8bfb\u5199\u64cd\u4f5c\u6709\u8bf8\u591a\u4e0d\u4fbf\uff0c\u4e3a\u6b64\u6211\u4eec\u5c06\u6587\u6863\u8f6c\u79fb\u5230 github\u4e0a \uff0c\u4ee5\u4f7f\u5927\u5bb6\u66f4\u65b9\u4fbf\u5730\u9605\u8bfb\u548c\u7f16\u8f91\u8d21\u732e\u8d44\u6e90\u3002  \u8d21\u732e\u5185\u5bb9\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a\u6587\u6863\u7ffb\u8bd1\u3001\u77e5\u8bc6\u603b\u7ed3\u3001\u7ecf\u9a8c\u6559\u8bad\u3001\u597d\u6587\u94fe\u63a5\u3001\u5947\u601d\u5999\u60f3  \u5982\u679c\u60a8\u4e0d\u60f3\u4f5c\u5982\u4e0b\u64cd\u4f5c\uff0c\u53ef\u5c06\u76f4\u63a5\u5185\u5bb9\u90ae\u4ef6\uff08\u89c1\u9875\u9762\u6700\u4e0b\u65b9\uff09\u53d1\u9001\u7ed9\u5de5\u4f5c\u7ec4\uff0c\u6211\u4eec\u4e3a\u60a8\u53d1\u5e03", 
            "title": "\u5982\u4f55\u8d21\u732e"
        }, 
        {
            "location": "/#_3", 
            "text": "\u52a0\u5165\u5fae\u4fe1\u7fa4  \u76ee\u524d\u5fae\u4fe1\u7fa4\u5df2\u8d85\u4e00\u767e\u4eba\uff0c\u53ea\u80fd\u901a\u8fc7\u9080\u8bf7\u65b9\u5f0f\u52a0\u5165\u3002\u60a8\u53ef\u4ee5\u8bf7\u8ba4\u8bc6\u7684\u5c0f\u4f19\u4f34\u62c9\u4f60\u5165\u7fa4\uff0c\u4e5f\u53ef\u4ee5\u8054\u7cfb\u7ba1\u7406\u5458\uff08\u89c1\u9875\u9762\u6700\u4e0b\u65b9\uff09\u3002    \u52a0\u5165wiki  Hyperledger Wiki\u662f\u5b98\u65b9\u7684\u4fe1\u606f\u6e20\u9053\uff0c\u6240\u4ee5\u8bf7\u5c06\u60a8\u7684\u4fe1\u606f\u52a0\u5165\u5176\u4e2d\u3002 \u70b9\u51fb\u8fdb\u5165 \uff0c\u767b\u9646\uff0c\u7136\u540e\u7f16\u8f91 Volunteers \u8868\u683c\uff0c\u5c06\u81ea\u5df1\u7684\u4fe1\u606f\u5199\u5165\u5e76\u4fdd\u5b58\u3002", 
            "title": "\u52a0\u5165\u7ec4\u7ec7"
        }, 
        {
            "location": "/#_4", 
            "text": "\u76ee\u524d\u4ee5 github \u7ba1\u7406\u6587\u6863\uff0c\u4ee5 github pages \u5c55\u793a\u6587\u6863\uff0c\u4ee5 MkDocs \u6784\u5efa\u6587\u6863\u3002\u5176\u4e2d\u6587\u6863\u90fd\u662f\u4ee5Markdown\u7f16\u5199\u3002", 
            "title": "\u8d21\u732e\u8d44\u6e90"
        }, 
        {
            "location": "/#_5", 
            "text": "github\u8d26\u53f7  \u5b89\u88c5git  \u5b89\u88c5 MkDocs \uff08\u53ef\u53c2\u7167 \u4e2d\u6587\u6587\u6863 \uff09", 
            "title": "\u51c6\u5907"
        }, 
        {
            "location": "/#_6", 
            "text": "\u4e0b\u8f7d\u6e90\u7801  git clone https://github.com/HyperledgerCN/hyperledgerDocs.git    \u7f16\u8f91\u9884\u89c8  \u6ce8\u610f\uff1a \u6587\u6863\u5f00\u5934\u56fa\u5b9a\u4ee5\u4e0b\u683c\u5f0f\uff1a  | \u539f\u6587 | \u4f5c\u8005 | \u5ba1\u6838\u4fee\u6b63 |\n| --- | --- | \u2014--- |\n| [\u539f\u6587]( \u539f\u6587\u8def\u5f84 ) |  \u5982\u679c\u4f60\u662f\u4f5c\u8005\uff0c\u8bf7\u5728\u6b64\u7559\u540d  |  \u5982\u679c\u4f60\u662f\u4fee\u6539\u8005\uff0c\u8bf7\u5728\u6b64\u7559\u540d\uff0c\u53ef\u4ee5\u591a\u4e2a  |  \u56fe\u7247\u653e\u5230 hyperledgerDocs/docs/img \u91cc\uff0c\u6587\u6863\u4e2d\u4ee5 img/xx.png \u5f15\u7528\u3002    \u4fee\u6539\u5df2\u6709\u6587\u6863\uff1a\u8fdb\u5165 hyperledgerDocs/docs \u76ee\u5f55\uff0c\u7f16\u8f91\u5bf9\u5e94\u6587\u4ef6\u3002    \u6dfb\u52a0\u65b0\u6587\u6863\uff1a\u8fdb\u5165 hyperledgerDocs/docs \u76ee\u5f55\uff0c\u6dfb\u52a0\u65b0\u7684 Markdown\u6587\u4ef6 \u5e76\u7f16\u8f91\u5185\u5bb9\uff1b\u7136\u540e\u7f16\u8f91 mkdocs.yml \uff0c\u5c06\u65b0\u52a0\u6587\u6863\u6309\u5982\u4e0b\u683c\u5f0f\u6dfb\u52a0\u5230\u914d\u7f6e\u6587\u4ef6\u4e2d\u3002  pages:\n    - \u6b22\u8fce: index.md\n    - \u8bcd\u6c47\u8868: glossary.md\n    - \u5feb\u901f\u5165\u95e8: getting_started.md\n    - \u534f\u8bae\u89c4\u8303: protocol-spec_zh.md\n    - Fabric\u6559\u7a0b:\n        - \u6784\u5efa\u7b2c\u4e00\u4e2afabric\u7f51\u7edc: build_network_zh.md\n        - \u7f16\u5199\u7b2c\u4e00\u4e2a\u5e94\u7528: write_first_app_zh.md\n        - Chaincode: chaincode_zh.md    \u672c\u5730\u9884\u89c8\uff1a\u5728 hyperledgerDocs \u76ee\u5f55\u4e0b\u6267\u884c  mkdocs serve  \u7136\u540e\u6d4f\u89c8\u5668\u6253\u5f00 http://127.0.0.1:8000/ \u627e\u5230\u76f8\u5e94\u9875\u9762\u3002", 
            "title": "\u672c\u5730\u7f16\u8f91&amp;\u9884\u89c8"
        }, 
        {
            "location": "/#_7", 
            "text": "\u672c\u5730\u9884\u89c8\u65e0\u8bef\u540e\uff0c\u5373\u53ef\u63d0\u4ea4\u5230\u7ebf\u4e0a\u4f9b\u5927\u5bb6\u9605\u8bfb\u3002  \u5728 hyperledgerDocs \u76ee\u5f55\u4e0b\u6267\u884c  ./build.sh  \u5982\u65e0\u62a5\u9519\uff0c\u6d4f\u89c8\u5668\u6253\u5f00 https://hyperledgercn.github.io/hyperledgerDocs/ \u67e5\u770b\u4fee\u6539\u7ed3\u679c\u3002  \u7ebf\u4e0a\u786e\u8ba4\u6210\u529f\u540e\uff0c\u5343\u4e07\u4e0d\u8981\u5fd8\u4e86\u5c06\u672c\u5730\u4fee\u6539\u7684\u6e90\u6587\u4ef6\u63d0\u4ea4\u5230github\u4ed3\u5e93\uff1a  git add .\ngit commit -m \"your message\"\ngit push", 
            "title": "\u7ebf\u4e0a\u63d0\u4ea4&amp;\u90e8\u7f72"
        }, 
        {
            "location": "/glossary/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nLinsheng Yu\n\n\nBaohua Yang\n\n\n\n\n\n\n\n\nTerminology is important, so that all Fabric users and developers agree on what we mean by each specific term. What is chaincode, for example. So we\u2019ll point you there, whenever you want to reassure yourself. Of course, feel free to read the entire thing in one sitting if you like, it\u2019s pretty enlightening!\n\n\n\u4e13\u4e1a\u672f\u8bed\u5f88\u91cd\u8981\uff0c\u6240\u4ee5\u6240\u6709\u201dFabric\u201d\u9879\u76ee\u7528\u6237\u548c\u5f00\u53d1\u4eba\u5458\u540c\u610f\u6211\u4eec\u6240\u8bf4\u7684\u6bcf\u4e2a\u7279\u5b9a\u672f\u8bed\u7684\u542b\u4e49\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5982\u4ec0\u4e48\u662f\u94fe\u7801\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u5f15\u5bfc\u4f60\u5230\u672f\u8bed\u8bf4\u660e\uff0c\u8ba9\u4f60\u968f\u65f6\u53ef\u4ee5\u6d88\u9664\u5bf9\u672f\u8bed\u7406\u89e3\u7684\u7591\u8651\uff0c\u5f53\u7136\uff0c\u5982\u679c\u4f60\u613f\u610f\u7684\u8bdd\u53ef\u4ee5\u81ea\u7531\u7684\u9605\u8bfb\u6574\u4e2a\u6587\u6863\uff0c\u975e\u5e38\u6709\u542f\u53d1\uff01\n\n\nAnchor Peer - \u951a\u8282\u70b9\n\n\nA peer node on a channel that all other peers can discover and communicate with. Each \nMember\n on a channel has an anchor peer (or multiple anchor peers to prevent single point of failure), allowing for peers belonging to different Members to discover all existing peers on a channel.\n\n\n\u951a\u8282\u70b9\u662f\u901a\u9053\u4e2d\u80fd\u88ab\u6240\u6709\u5bf9\u7b49\u8282\u70b9\u63a2\u6d4b\u3001\u5e76\u80fd\u4e0e\u4e4b\u8fdb\u884c\u901a\u4fe1\u7684\u4e00\u79cd\u5bf9\u7b49\u8282\u70b9\u3002\u901a\u9053\u4e2d\u7684\u6bcf\u4e2a\u6210\u5458\u90fd\u6709\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff0c\u4ee5\u9632\u5355\u70b9\u6545\u969c\uff09\u951a\u8282\u70b9\uff0c\u5141\u8bb8\u5c5e\u4e8e\u4e0d\u540c\u6210\u5458\u8eab\u4efd\u7684\u8282\u70b9\u6765\u53d1\u73b0\u901a\u9053\u4e2d\u5b58\u5728\u7684\u5176\u5b83\u8282\u70b9\u3002\n\n\nBlock - \u533a\u5757\n\n\nAn ordered set of transactions that is cryptographically linked to the preceding block(s) on a channel.\n\n\n\u5728\u4e00\u4e2a\u901a\u9053\u4e0a\uff0c\uff08\u533a\u5757\u662f\uff09\u4e00\u7ec4\u6709\u5e8f\u4ea4\u6613\u7684\u96c6\u5408\u3002\u533a\u5757\u5f80\u5f80\u901a\u8fc7\u5bc6\u7801\u5b66\u624b\u6bb5\uff08Hash \u503c\uff09\u8fde\u63a5\u5230\u524d\u5bfc\u533a\u5757\u3002\n\n\nZhu Jiang\uff1a\u533a\u5757\u662f\u4e00\u7ec4\u6709\u5e8f\u7684\u4ea4\u6613\u96c6\u5408\uff0c\u5728\u901a\u9053\u4e2d\u7ecf\u8fc7\u52a0\u5bc6\uff08\u54c8\u5e0c\u52a0\u5bc6\uff09\u540e\u4e0e\u524d\u5e8f\u533a\u5757\u8fde\u63a5\u3002\n\n\nChain - \u94fe\n\n\nThe ledger\u2019s chain is a transaction log structured as hash-linked blocks of transactions. Peers receive blocks of transactions from the ordering service, mark the block\u2019s transactions as valid or invalid based on endorsement policies and concurrency violations, and append the block to the hash chain on the peer\u2019s file system.\n\n\nchain\u5c31\u662fblock\u4e4b\u95f4\u4ee5hash\u8fde\u63a5\u4e3a\u7ed3\u6784\u7684\u4ea4\u6613\u65e5\u5fd7\u3002peer\u4eceorder service\u63a5\u6536\u4ea4\u6613block\uff0c\u5e76\u6839\u636e\u80cc\u4e66\u7b56\u7565\u548c\u5e76\u53d1\u51b2\u7a81\u6807\u8bb0block\u4e0a\u7684\u4ea4\u6613\u662f\u5426\u6709\u6548\uff0c\u7136\u540e\u5c06\u8be5block\u8ffd\u52a0\u5230peer\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684hash chain\u4e0a\u3002\n\n\nZhu Jiang:\u8d26\u672c\u7684\u94fe\u662f\u4e00\u4e2a\u4ea4\u6613\u533a\u5757\u7ecf\u8fc7\u201c\u54c8\u5e0c\u8fde\u63a5\u201d\u7ed3\u6784\u5316\u7684\u4ea4\u6613\u65e5\u5fd7\u3002\u5bf9\u7b49\u8282\u70b9\u4ece\u6392\u5e8f\u670d\u52a1\u6536\u5230\u4ea4\u6613\u533a\u5757\uff0c\u57fa\u4e8e\u80cc\u4e66\u7b56\u7565\u548c\u5e76\u53d1\u51b2\u7a81\u6765\u6807\u6ce8\u533a\u5757\u7684\u4ea4\u6613\u4e3a\u6709\u6548\u6216\u8005\u65e0\u6548\u72b6\u6001\uff0c\u5e76\u4e14\u5c06\u533a\u5757\u8ffd\u52a0\u5230\u5bf9\u7b49\u8282\u70b9\u6587\u4ef6\u7cfb\u7edf\u7684\u54c8\u5e0c\u94fe\u4e2d\u3002\n\n\nChaincode - \u94fe\u7801\n\n\nChaincode is software, running on a ledger, to encode assets and the transaction instructions (business logic) for modifying the assets.\n\n\n\u94fe\u7801\u662f\u4e00\u4e2a\u8fd0\u884c\u5728\u8d26\u672c\u4e0a\u7684\u8f6f\u4ef6\uff0c\u5b83\u53ef\u4ee5\u5bf9\u8d44\u4ea7\u8fdb\u884c\u7f16\u7801\uff0c\u5176\u4e2d\u7684\u4ea4\u6613\u6307\u4ee4\uff08\u6216\u8005\u53eb\u4e1a\u52a1\u903b\u8f91\uff09\u4e5f\u53ef\u4ee5\u7528\u6765\u4fee\u6539\u8d44\u4ea7\u3002\n\n\nChannel - \u901a\u9053\n\n\nA channel is a private blockchain overlay on a Fabric network, allowing for data isolation and confidentiality. A channel-specific ledger is shared across the peers in the channel, and transacting parties must be properly authenticated to a channel in order to interact with it. Channels are defined by a \nConfiguration-Block\n.\n\n\n\u901a\u9053\u662f\u6784\u5efa\u5728\u201cFabric\u201d\u7f51\u7edc\u4e0a\u7684\u79c1\u6709\u533a\u5757\u94fe\uff0c\u5b9e\u73b0\u4e86\u6570\u636e\u7684\u9694\u79bb\u548c\u4fdd\u5bc6\u3002\u901a\u9053\u7279\u5b9a\u7684\u8d26\u672c\u5728\u901a\u9053\u4e2d\u662f\u4e0e\u6240\u6709\u5bf9\u7b49\u8282\u70b9\u5171\u4eab\u7684\uff0c\u5e76\u4e14\u4ea4\u6613\u65b9\u5fc5\u987b\u901a\u8fc7\u8be5\u901a\u9053\u7684\u6b63\u786e\u9a8c\u8bc1\u624d\u80fd\u4e0e\u8d26\u672c\u8fdb\u884c\u4ea4\u4e92\u3002\u901a\u9053\u662f\u7531\u4e00\u4e2a\u201c\u914d\u7f6e\u5757\u201d\u6765\u5b9a\u4e49\u7684\u3002\n\n\nCommitment - \u63d0\u4ea4\n\n\nEach \nPeer\n on a channel validates ordered blocks of transactions and then commits (writes-appends) the blocks to its replica of the channel \nLedger\n. Peers also mark each transaction in each block as valid or invalid.\n\n\n\u4e00\u4e2a\u901a\u9053\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u7b49\u8282\u70b9\u90fd\u4f1a\u9a8c\u8bc1\u4ea4\u6613\u7684\u6709\u5e8f\u533a\u5757\uff0c\u7136\u540e\u5c06\u533a\u5757\u63d0\u4ea4\uff08\u5199\u6216\u8ffd\u52a0\uff09\u81f3\u8be5\u901a\u9053\u4e0a\u8d26\u672c\u7684\u5404\u4e2a\u526f\u672c\u3002\u5bf9\u7b49\u8282\u70b9\u4e5f\u4f1a\u6807\u8bb0\u6bcf\u4e2a\u533a\u5757\u4e2d\u7684\u6bcf\u7b14\u4ea4\u6613\u7684\u72b6\u6001\u662f\u6709\u6548\u6216\u8005\u65e0\u6548\u3002\n\n\nConcurrency Control Version Check - \u5e76\u53d1\u63a7\u5236\u7248\u672c\u68c0\u67e5\uff08CCVC\uff09\n\n\nConcurrency Control Version Check is a method of keeping state in sync across peers on a channel. Peers execute transactions in parallel, and before commitment to the ledger, peers check that the data read at execution time has not changed. If the data read for the transaction has changed between execution time and commitment time, then a Concurrency Control Version Check violation has occurred, and the transaction is marked as invalid on the ledger and values are not updated in the state database.\n\n\nCCVC\u662f\u4fdd\u6301\u901a\u9053\u4e2d\u5404\u5bf9\u7b49\u8282\u70b9\u95f4\u72b6\u6001\u540c\u6b65\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u5bf9\u7b49\u8282\u70b9\u5e76\u884c\u7684\u6267\u884c\u4ea4\u6613\uff0c\u5728\u4ea4\u6613\u63d0\u4ea4\u81f3\u8d26\u672c\u4e4b\u524d\uff0c\u5bf9\u7b49\u8282\u70b9\u4f1a\u68c0\u67e5\u4ea4\u6613\u5728\u6267\u884c\u671f\u95f4\u8bfb\u5230\u7684\u6570\u636e\u662f\u5426\u88ab\u4fee\u6539\u3002\u5982\u679c\u8bfb\u53d6\u7684\u6570\u636e\u5728\u6267\u884c\u548c\u63d0\u4ea4\u4e4b\u95f4\u88ab\u6539\u53d8\uff0c\u5c31\u4f1a\u5f15\u53d1CCVC\u51b2\u7a81\uff0c\u8be5\u4ea4\u6613\u5c31\u4f1a\u5728\u8d26\u672c\u4e2d\u88ab\u6807\u8bb0\u4e3a\u65e0\u6548\uff0c\u800c\u4e14\u503c\u4e0d\u4f1a\u66f4\u65b0\u5230\u72b6\u6001\u6570\u636e\u5e93\u4e2d\u3002\n\n\nConfiguration Block - \u914d\u7f6e\u533a\u5757\n\n\nContains the configuration data defining members and policies for a system chain (ordering service) or channel. Any configuration modifications to a channel or overall network (e.g. a member leaving or joining) will result in a new configuration block being appended to the appropriate chain. This block will contain the contents of the genesis block, plus the delta.\n\n\n\u5305\u542b\u4e3a\u7cfb\u7edf\u94fe\uff08\u6392\u5e8f\u670d\u52a1\uff09\u6216\u901a\u9053\u5b9a\u4e49\u6210\u5458\u548c\u7b56\u7565\u7684\u914d\u7f6e\u6570\u636e\u3002\u5bf9\u67d0\u4e2a\u901a\u9053\u6216\u6574\u4e2a\u7f51\u7edc\u7684\u914d\u7f6e\u4fee\u6539\uff08\u6bd4\u5982\uff0c\u6210\u5458\u79bb\u5f00\u6216\u52a0\u5165\uff09\u90fd\u5c06\u5bfc\u81f4\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u914d\u7f6e\u533a\u5757\u5e76\u8ffd\u52a0\u5230\u9002\u5f53\u7684\u94fe\u4e0a\u3002\u8fd9\u4e2a\u914d\u7f6e\u533a\u5757\u4f1a\u5305\u542b\u521b\u59cb\u533a\u5757\u7684\u5185\u5bb9\u52a0\u4e0a\u589e\u91cf\u3002\n\n\nConsensus - \u5171\u8bc6\n\n\nA broader term overarching the entire transactional flow, which serves to generate an agreement on the order and to confirm the correctness of the set of transactions constituting a block.\n\n\n\u5171\u8bc6\u662f\u8d2f\u7a7f\u6574\u4e2a\u4ea4\u6613\u6d41\u7a0b\u7684\u5e7f\u4e49\u672f\u8bed\uff0c\u5176\u7528\u4e8e\u4ea7\u751f\u4e00\u4e2a\u5bf9\u4e8e\u6392\u5e8f\u7684\u540c\u610f\u4e66\u548c\u786e\u8ba4\u6784\u6210\u533a\u5757\u7684\u4ea4\u6613\u96c6\u7684\u6b63\u786e\u6027\u3002\n\n\nCurrent State - \u5f53\u524d\u72b6\u6001\n\n\nThe current state of the ledger represents the latest values for all keys ever included in its chain transaction log. Peers commit the latest values to ledger current state for each valid transaction included in a processed block. Since current state represents all latest key values known to the channel, it is sometimes referred to as World State. Chaincode executes transaction proposals against current state data.\n\n\nledger\u7684current state\u8868\u793a\u5176chain\u4ea4\u6613log\u4e2d\u6240\u6709key\u7684\u6700\u65b0\u503c\u3002peer\u4f1a\u5c06\u5904\u7406\u8fc7\u7684block\u4e2d\u7684\u6bcf\u4e2a\u4ea4\u6613\u5bf9\u5e94\u7684\u4fee\u6539value\u63d0\u4ea4\u5230ledger\u7684current state\uff0c\u7531\u4e8ecurrent state\u8868\u793achannel\u6240\u77e5\u7684\u6240\u6709\u6700\u65b0\u7684k-v\uff0c\u6240\u4ee5current state\u4e5f\u88ab\u79f0\u4e3aWorld State\u3002Chaincode\u6267\u884c\u4ea4\u6613proposal\u5c31\u662f\u9488\u5bf9\u7684current state\u3002\n\n\nDynamic Membership - \u52a8\u6001\u6210\u5458\n\n\nFabric supports the addition-removal of members, peers, and ordering service nodes, without compromising the operationality of the overall network. Dynamic membership is critical when business relationships adjust and entities need to be added-removed for various reasons.\n\n\nFabric\u652f\u6301\u52a8\u6001\u6dfb\u52a0-\u79fb\u9664members\u3001peers\u548cordering\u670d\u52a1\u8282\u70b9\uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd\u6574\u4e2a\u7f51\u7edc\u7684\u64cd\u4f5c\u6027\u3002\u5f53\u4e1a\u52a1\u5173\u7cfb\u8c03\u6574\u6216\u56e0\u5404\u79cd\u539f\u56e0\u9700\u6dfb\u52a0-\u79fb\u9664\u5b9e\u4f53\u65f6\uff0cDynamic Membership\u81f3\u5173\u91cd\u8981\u3002\n\n\nEndorsement - \u80cc\u4e66\n\n\nRefers to the process where specific peer nodes execute a transaction and return a \nYES-NO\n response to the client application that generated the transaction proposal. Chaincode applications have corresponding endorsement policies, in which the endorsing peers are specified.\n\n\nEndorsement \u662f\u6307\u4e00\u4e2apeer\u6267\u884c\u4e00\u4e2a\u4ea4\u6613\u5e76\u8fd4\u56de\nYES-NO\n\u7ed9\u751f\u6210\u4ea4\u6613proposal\u7684client app \u7684\u8fc7\u7a0b\u3002chaincode\u5177\u6709\u76f8\u5e94\u7684endorsement policies\uff0c\u5176\u4e2d\u6307\u5b9a\u4e86endorsing peer\u3002\n\n\nEndorsement policy - \u80cc\u4e66\u7b56\u7565\n\n\nDefines the peer nodes on a channel that must execute transactions attached to a specific chaincode application, and the required combination of responses (endorsements). A policy could require that a transaction be endorsed by a minimum number of endorsing peers, a minimum percentage of endorsing peers, or by all endorsing peers that are assigned to a specific chaincode application. Policies can be curated based on the application and the desired level of resilience against misbehavior (deliberate or not) by the endorsing peers. A distinct endorsement policy for install and instantiate transactions is also required.\n\n\nEndorsement policy\u5b9a\u4e49\u4e86\u4f9d\u8d56\u4e8e\u7279\u5b9achaincode\u6267\u884c\u4ea4\u6613\u7684channel\u4e0a\u7684peer\u548c\u54cd\u5e94\u7ed3\u679c\uff08endorsements\uff09\u7684\u5fc5\u8981\u7ec4\u5408\u6761\u4ef6\uff08\u5373\u8fd4\u56deYes\u6216No\u7684\u6761\u4ef6\uff09\u3002Endorsement policy\u53ef\u6307\u5b9a\u5bf9\u4e8e\u67d0\u4e00chaincode\uff0c\u53ef\u4ee5\u5bf9\u4ea4\u6613\u80cc\u4e66\u7684\u6700\u5c0f\u80cc\u4e66\u8282\u70b9\u6570\u6216\u8005\u6700\u5c0f\u80cc\u4e66\u8282\u70b9\u767e\u5206\u6bd4\u3002\u80cc\u4e66\u7b56\u7565\u7531\u80cc\u4e66\u8282\u70b9\u57fa\u4e8e\u5e94\u7528\u7a0b\u5e8f\u548c\u5bf9\u62b5\u5fa1\u4e0d\u826f\u884c\u4e3a\u7684\u671f\u671b\u6c34\u5e73\u6765\u7ec4\u7ec7\u7ba1\u7406\u3002\u5728install\u548cinstantiate Chaincode\uff08deploy tx\uff09\u65f6\u9700\u8981\u6307\u5b9a\u80cc\u4e66\u7b56\u7565\u3002\n\n\nFabric-ca\n\n\nFabric-ca is the default Certificate Authority component, which issues PKI-based certificates to network member organizations and their users. The CA issues one root certificate (rootCert) to each member, one enrollment certificate (eCert) to each authorized user, and a number of transaction certificates (tCerts) for each eCert.\n\n\nFabric-ca\u662f\u9ed8\u8ba4\u7684\u8bc1\u4e66\u7ba1\u7406\u7ec4\u4ef6\uff0c\u5b83\u5411\u7f51\u7edc\u6210\u5458\u53ca\u5176\u7528\u6237\u9881\u53d1\u57fa\u4e8ePKI\u7684\u8bc1\u4e66\u3002CA\u4e3a\u6bcf\u4e2a\u6210\u5458\u9881\u53d1\u4e00\u4e2a\u6839\u8bc1\u4e66\uff08rootCert\uff09\uff0c\u4e3a\u6bcf\u4e2a\u6388\u6743\u7528\u6237\u9881\u53d1\u4e00\u4e2a\u6ce8\u518c\u8bc1\u4e66\uff08eCert\uff09\uff0c\u4e3a\u6bcf\u4e2a\u6ce8\u518c\u8bc1\u4e66\u9881\u53d1\u5927\u91cf\u4ea4\u6613\u8bc1\u4e66\uff08tCerts\uff09\u3002\n\n\nGenesis Block - \u521d\u59cb\u533a\u5757\n\n\nThe configuration block that initializes a blockchain network or channel, and also serves as the first block on a chain.\n\n\nGenesis Block\u662f\u521d\u59cb\u5316\u533a\u5757\u94fe\u7f51\u7edc\u6216channel\u7684\u914d\u7f6e\u533a\u5757\uff0c\u4e5f\u662f\u94fe\u4e0a\u7684\u7b2c\u4e00\u4e2a\u533a\u5757\u3002\n\n\nGossip Protocol - Gossip\u534f\u8bae\n\n\nThe gossip data dissemination protocol performs three functions: 1) manages peer discovery and channel membership; 2) disseminates ledger data across all peers on the channel; 3) syncs ledger state across all peers on the channel. Refer to the \nGossip\n topic for more details.\n\n\nGossip\u6570\u636e\u4f20\u8f93\u534f\u8bae\u6709\u4e09\u9879\u529f\u80fd\uff1a1\uff09\u7ba1\u7406peer\u53d1\u73b0\u548cchannel\u6210\u5458\uff1b2\uff09channel\u4e0a\u7684\u6240\u6709peer\u95f4\u5e7f\u64ad\u8d26\u672c\u6570\u636e\uff1b3\uff09channel\u4e0a\u7684\u6240\u6709peer\u95f4\u540c\u6b65\u8d26\u672c\u6570\u636e\u3002\n\n\nInitialize - \u521d\u59cb\u5316\n\n\nA method to initialize a chaincode application.\n\n\n\u4e00\u4e2a\u521d\u59cb\u5316chaincode\u7a0b\u5e8f\u7684\u65b9\u6cd5\u3002\n\n\nInstall - \u5b89\u88c5\n\n\nThe process of placing a chaincode on a peer\u2019s file system.\n\n\n\u5c06chaincode\u653e\u5230peer\u7684\u6587\u4ef6\u7cfb\u7edf\u7684\u8fc7\u7a0b\u3002\n\uff08\u8bd1\u6ce8\uff1a\u5373\u5c06ChaincodeDeploymentSpec\u4fe1\u606f\u5b58\u5230chaincodeInstallPath-chaincodeName.chainVersion\u6587\u4ef6\u4e2d\uff09\n\n\nInstantiate - \u5b9e\u4f8b\u5316\n\n\nThe process of starting a chaincode container.\n\n\n\u542f\u52a8chaincode\u5bb9\u5668\u7684\u8fc7\u7a0b\u3002\n\uff08\u8bd1\u6ce8\uff1a\u5728lccc\u4e2d\u5c06ChaincodeData\u4fdd\u5b58\u5230state\u4e2d\uff0c\u7136\u540edeploy Chaincode\u5e76\u6267\u884cInit\u65b9\u6cd5\uff09\n\n\nInvoke - \u8c03\u7528\n\n\nUsed to call chaincode functions. Invocations are captured as transaction proposals, which then pass through a modular flow of endorsement, ordering, validation, committal. The structure of invoke is a function and an array of arguments.\n\n\n\u7528\u4e8e\u8c03\u7528chaincode\u5185\u7684\u51fd\u6570\u3002Chaincode invoke\u5c31\u662f\u4e00\u4e2a\u4ea4\u6613proposal\uff0c\u7136\u540e\u6267\u884c\u6a21\u5757\u5316\u7684\u6d41\u7a0b\uff08\u80cc\u4e66\u3001\u5171\u8bc6\u3001 \u9a8c\u8bc1\u3001 \u63d0\u4ea4\uff09\u3002invoke\u7684\u7ed3\u6784\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u53c2\u6570\u6570\u7ec4\u3002\n\n\nLeading Peer - \u4e3b\u5bfc\u8282\u70b9\n\n\nEach \nMember\n can own multiple peers on each channel that it subscribes to. One of these peers is serves as the leading peer for the channel, in order to communicate with the network ordering service on behalf of the member. The ordering service \u201cdelivers\u201d blocks to the leading peer(s) on a channel, who then distribute them to other peers within the same member cluster.\n\n\n\u6bcf\u4e00\u4e2aMember\u5728\u5176\u8ba2\u9605\u7684channel\u4e0a\u53ef\u4ee5\u62e5\u6709\u591a\u4e2apeer\uff0c\u5176\u4e2d\u4e00\u4e2apeer\u4f1a\u4f5c\u4e3achannel\u7684leading peer\u4ee3\u8868\u8be5Member\u4e0eordering service\u901a\u4fe1\u3002ordering service\u5c06block\u4f20\u9012\u7ed9leading peer\uff0c\u8be5peer\u518d\u5c06\u6b64block\u5206\u53d1\u7ed9\u540c\u4e00member\u4e0b\u7684\u5176\u4ed6peer\u3002\n\n\nLedger - \u8d26\u672c\n\n\nA ledger is a channel\u2019s chain and current state data which is maintained by each peer on the channel.\n\n\nLedger\u662f\u4e2achannel\u7684chain\u548c\u7531channel\u4e2d\u6bcf\u4e2apeer\u7ef4\u62a4\u7684world state\u3002\n\uff08\u8fd9\u4e2a\u89e3\u91ca\u6709\u70b9\u602a\uff09\n\n\nMember - \u6210\u5458\n\n\nA legally separate entity that owns a unique root certificate for the network. Network components such as peer nodes and application clients will be linked to a member.\n\n\n\u62e5\u6709\u7f51\u7edc\u552f\u4e00\u6839\u8bc1\u4e66\u7684\u5408\u6cd5\u72ec\u7acb\u5b9e\u4f53\u3002\u50cfpeer\u8282\u70b9\u548capp client\u8fd9\u6837\u7684\u7f51\u7edc\u7ec4\u4ef6\u4f1a\u94fe\u63a5\u5230\u4e00\u4e2aMember\u3002\n\n\nMembership Service Provider - MSP\n\n\nThe Membership Service Provider (MSP) refers to an abstract component of the system that provides credentials to clients, and peers for them to participate in a Hyperledger Fabric network. Clients use these credentials to authenticate their transactions, and peers use these credentials to authenticate transaction processing results (endorsements). While strongly connected to the transaction processing components of the systems, this interface aims to have membership services components defined, in such a way that alternate implementations of this can be smoothly plugged in without modifying the core of transaction processing components of the system.\n\n\nMSP\u662f\u6307\u4e3aclient\u548cpeer\u63d0\u4f9b\u8bc1\u4e66\u7684\u7cfb\u7edf\u62bd\u8c61\u7ec4\u4ef6\u3002Client\u7528\u8bc1\u4e66\u6765\u8ba4\u8bc1\u4ed6\u4eec\u7684\u4ea4\u6613\uff1bpeer\u7528\u8bc1\u4e66\u8ba4\u8bc1\u5176\u4ea4\u6613\u80cc\u4e66\u3002\u8be5\u63a5\u53e3\u4e0e\u7cfb\u7edf\u7684\u4ea4\u6613\u5904\u7406\u7ec4\u4ef6\u5bc6\u5207\u76f8\u5173\uff0c\u65e8\u5728\u4f7f\u5df2\u5b9a\u4e49\u7684\u6210\u5458\u8eab\u4efd\u670d\u52a1\u7ec4\u4ef6\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u987a\u5229\u63d2\u5165\u800c\u4e0d\u4f1a\u4fee\u6539\u7cfb\u7edf\u7684\u4ea4\u6613\u5904\u7406\u7ec4\u4ef6\u7684\u6838\u5fc3\u3002\n\n\nMembership Services - \u6210\u5458\u670d\u52a1\n\n\nMembership Services authenticates, authorizes, and manages identities on a permissioned blockchain network. The membership services code that runs in peers and orderers both authenticates and authorizes blockchain operations. It is a PKI-based implementation of the Membership Services Provider (MSP) abstraction.\n\n\n\u6210\u5458\u670d\u52a1\u5728\u8bb8\u53ef\u7684\u533a\u5757\u94fe\u7f51\u7edc\u4e0a\u8ba4\u8bc1\u3001\u6388\u6743\u548c\u7ba1\u7406\u8eab\u4efd\u3002\u5728peer\u548corder\u4e2d\u8fd0\u884c\u7684\u6210\u5458\u670d\u52a1\u7684\u4ee3\u7801\u90fd\u4f1a\u8ba4\u8bc1\u548c\u6388\u6743\u533a\u5757\u94fe\u64cd\u4f5c\u3002\u5b83\u662f\u57fa\u4e8ePKI\u7684MSP\u5b9e\u73b0\u3002\n\n\nThe \nfabric-ca\n component is an implementation of membership services to manage identities. In particular, it handles the issuance and revocation of enrollment certificates and transaction certificates.\n\n\nfabric-ca\n\u7ec4\u4ef6\u5b9e\u73b0\u4e86\u6210\u5458\u670d\u52a1\uff0c\u6765\u7ba1\u7406\u8eab\u4efd\u3002\u7279\u522b\u7684\uff0c\u5b83\u5904\u7406ECert\u548cTCert\u7684\u9881\u53d1\u548c\u64a4\u9500\u3002\n\n\nAn enrollment certificate is a long-term identity credential; a transaction certificate is a short-term identity credential which is both anonymous and un-linkable.\n\n\nECert\u662f\u957f\u671f\u7684\u8eab\u4efd\u51ed\u8bc1\uff1bTCert\u662f\u77ed\u671f\u7684\u8eab\u4efd\u51ed\u8bc1\uff0c\u662f\u533f\u540d\u548c\u4e0d\u53ef\u94fe\u63a5\u7684\u3002\n\n\nOrdering Service - \u6392\u5e8f\u670d\u52a1\u6216\u5171\u8bc6\u670d\u52a1\n\n\nA defined collective of nodes that orders transactions into a block. The ordering service exists independent of the peer processes and orders transactions on a first-come-first-serve basis for all channel\u2019s on the network. The ordering service is designed to support pluggable implementations beyond the out-of-the-box SOLO and Kafka varieties. The ordering service is a common binding for the overall network; it contains the cryptographic identity material tied to each \nMember\n.\n\n\n\u5c06\u4ea4\u6613\u6392\u5e8f\u653e\u5165block\u7684\u8282\u70b9\u7684\u96c6\u5408\u3002ordering service\u72ec\u7acb\u4e8epeer\u6d41\u7a0b\u4e4b\u5916\uff0c\u5e76\u4ee5\u5148\u5230\u5148\u5f97\u7684\u65b9\u5f0f\u4e3a\u7f51\u7edc\u4e0a\u6240\u6709\u7684channel\u4f5c\u4ea4\u6613\u6392\u5e8f\u3002ordering service\u652f\u6301\u53ef\u63d2\u62d4\u5b9e\u73b0\uff0c\u76ee\u524d\u9ed8\u8ba4\u5b9e\u73b0\u4e86SOLO\u548cKafka\u3002ordering service\u662f\u6574\u4e2a\u7f51\u7edc\u7684\u516c\u7528binding\uff0c\u5305\u542b\u4e0e\u6bcf\u4e2aMember\u76f8\u5173\u7684\u52a0\u5bc6\u6750\u6599\u3002\n\n\nPeer - \u8282\u70b9\n\n\nA network entity that maintains a ledger and runs chaincode containers in order to perform read-write operations to the ledger. Peers are owned and maintained by members.\n\n\n\u4e00\u4e2a\u7f51\u7edc\u5b9e\u4f53\uff0c\u7ef4\u62a4ledger\u5e76\u8fd0\u884cChaincode\u5bb9\u5668\u6765\u5bf9ledger\u6267\u884cread-write\u64cd\u4f5c\u3002peer\u7531Member\u62e5\u6709\u548c\u7ef4\u62a4\u3002\n\n\nPolicy - \u7b56\u7565\n\n\nThere are policies for endorsement, validation, block committal, chaincode management and network-channel management.\n\n\n\u6709\u80cc\u4e66\u7b56\u7565\uff0c\u6821\u9a8c\u7b56\u7565\uff0c\u533a\u5757\u63d0\u4ea4\u7b56\u7565\uff0cChaincode\u7ba1\u7406\u7b56\u7565\u548c\u7f51\u7edc-\u901a\u9053\u7ba1\u7406\u7b56\u7565\u3002\n\n\nProposal - \u63d0\u6848\n\n\nA request for endorsement that is aimed at specific peers on a channel. Each proposal is either an instantiate or an invoke (read-write) request.\n\n\n\u4e00\u79cd\u9488\u5bf9channel\u4e2d\u67d0peer\u7684\u80cc\u4e66\u8bf7\u6c42\u3002\u6bcf\u4e2aproposal\u8981\u4e48\u662fChaincode instantiate\u8981\u4e48\u662fChaincode invoke\u3002\n\n\nQuery - \u67e5\u8be2\n\n\nA query requests the value of a key(s) against the current state.\n\n\n\u5bf9\u4e8ecurrent state\u4e2d\u67d0\u4e2akey\u7684value\u7684\u67e5\u8be2\u8bf7\u6c42\u3002\n\n\nSoftware Development Kit - SDK\n\n\nThe Hyperledger Fabric client SDK provides a structured environment of libraries for developers to write and test chaincode applications. The SDK is fully configurable and extensible through a standard interface. Components, including cryptographic algorithms for signatures, logging frameworks and state stores, are easily swapped in and out of the SDK. The SDK API uses protocol buffers over gRPC for transaction processing, membership services, node traversal and event handling applications to communicate across the fabric. The SDK comes in multiple flavors - Node.js, Java. and Python.\n\n\nSDK\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7ed3\u6784\u5316\u7684\u5e93\u73af\u5883\uff0c\u7528\u4e8e\u7f16\u5199\u548c\u6d4b\u8bd5\u94fe\u7801\u5e94\u7528\u7a0b\u5e8f\u3002SDK\u5b8c\u5168\u53ef\u4ee5\u901a\u8fc7\u6807\u51c6\u63a5\u53e3\u5b9e\u73b0\u914d\u7f6e\u548c\u6269\u5c55\uff0c\u50cf\u7b7e\u540d\u7684\u52a0\u5bc6\u7b97\u6cd5\u3001\u65e5\u5fd7\u6846\u67b6\u548cstate\u5b58\u50a8\u8fd9\u6837\u7684\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u8f7b\u677e\u5730\u5b9e\u73b0\u66ff\u6362\u3002SDK API\u4f7f\u7528gRPC\u8fdb\u884c\u4ea4\u6613\u5904\u7406\uff0c\u6210\u5458\u670d\u52a1\u3001\u8282\u70b9\u904d\u5386\u4ee5\u53ca\u4e8b\u4ef6\u5904\u7406\u90fd\u662f\u636e\u6b64\u4e0efabric\u901a\u4fe1\u3002\u76ee\u524dSDK\u652f\u6301Node.js\u3001Java\u548cPython\u3002\n\n\nState Database - stateDB\n\n\nCurrent state data is stored in a state database for efficient reads and queries from chaincode. These databases include levelDB and couchDB.\n\n\n\u4e3a\u4e86\u4eceChaincode\u4e2d\u9ad8\u6548\u7684\u8bfb\u5199\uff0cCurrent state \u6570\u636e\u5b58\u50a8\u5728stateDB\u4e2d\uff0c\u5305\u62eclevelDB\u548ccouchDB\u3002\n\n\nSystem Chain - \u7cfb\u7edf\u94fe\n\n\nContains a configuration block defining the network at a system level. The system chain lives within the ordering service, and similar to a channel, has an initial configuration containing information such as: MSP information, policies, and configuration details. Any change to the overall network (e.g. a new org joining or a new ordering node being added) will result in a new configuration block being added to the system chain.\n\n\n\u5305\u542b\u5728\u7cfb\u7edf\u7ea7\u5b9a\u4e49\u7f51\u7edc\u7684\u914d\u7f6e\u533a\u5757\u3002\u7cfb\u7edf\u94fe\u5b58\u5728\u4e8eordering service\u4e2d\uff0c\u4e0echannel\u7c7b\u4f3c\uff0c\u5177\u6709\u5305\u542b\u4ee5\u4e0b\u4fe1\u606f\u7684\u521d\u59cb\u914d\u7f6e\uff1aMSP\u4fe1\u606f\u3001\u7b56\u7565\u548c\u4fe1\u606f\u914d\u7f6e\u3002\u5bf9\u6574\u4e2a\u7f51\u7edc\u7684\u4efb\u4f55\u53d8\u5316\uff08\u4f8b\u5982\u65b0\u7684Org\u52a0\u5165\u6216\u8005\u6dfb\u52a0\u65b0\u7684Ordering\u8282\u70b9\uff09\u5c06\u5bfc\u81f4\u65b0\u7684\u914d\u7f6e\u533a\u5757\u88ab\u6dfb\u52a0\u5230\u7cfb\u7edf\u94fe\u3002\n\n\nThe system chain can be thought of as the common binding for a channel or group of channels. For instance, a collection of financial institutions may form a consortium (represented through the system chain), and then proceed to create channels relative to their aligned and varying business agendas.\n\n\n\u7cfb\u7edf\u94fe\u53ef\u770b\u505a\u662f\u4e00\u4e2achannel\u6216\u4e00\u7ec4channel\u7684\u516c\u7528binding\u3002\u4f8b\u5982\uff0c\u91d1\u878d\u673a\u6784\u7684\u96c6\u5408\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u8d22\u56e2\uff08\u4ee5system chain\u8868\u793a\uff09\uff0c\u7136\u540e\u6839\u636e\u5176\u76f8\u540c\u6216\u4e0d\u540c\u7684\u4e1a\u52a1\u521b\u5efachannel\u3002\n\n\nTransaction - \u4ea4\u6613\n\n\nAn invoke or instantiate operation. Invokes are requests to read-write data from the ledger. Instantiate is a request to start a chaincode container on a peer.\n\n\nChaincode\u7684invoke\u6216instantiate\u64cd\u4f5c\u3002Invoke\u662f\u4eceledger\u4e2d\u8bf7\u6c42read-write set\uff1bInstantiate\u662f\u8bf7\u6c42\u5728peer\u4e0a\u542f\u52a8Chaincode\u5bb9\u5668\u3002", 
            "title": "\u8bcd\u6c47\u8868"
        }, 
        {
            "location": "/glossary/#anchor-peer-", 
            "text": "A peer node on a channel that all other peers can discover and communicate with. Each  Member  on a channel has an anchor peer (or multiple anchor peers to prevent single point of failure), allowing for peers belonging to different Members to discover all existing peers on a channel.  \u951a\u8282\u70b9\u662f\u901a\u9053\u4e2d\u80fd\u88ab\u6240\u6709\u5bf9\u7b49\u8282\u70b9\u63a2\u6d4b\u3001\u5e76\u80fd\u4e0e\u4e4b\u8fdb\u884c\u901a\u4fe1\u7684\u4e00\u79cd\u5bf9\u7b49\u8282\u70b9\u3002\u901a\u9053\u4e2d\u7684\u6bcf\u4e2a\u6210\u5458\u90fd\u6709\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff0c\u4ee5\u9632\u5355\u70b9\u6545\u969c\uff09\u951a\u8282\u70b9\uff0c\u5141\u8bb8\u5c5e\u4e8e\u4e0d\u540c\u6210\u5458\u8eab\u4efd\u7684\u8282\u70b9\u6765\u53d1\u73b0\u901a\u9053\u4e2d\u5b58\u5728\u7684\u5176\u5b83\u8282\u70b9\u3002", 
            "title": "Anchor Peer - \u951a\u8282\u70b9"
        }, 
        {
            "location": "/glossary/#block-", 
            "text": "An ordered set of transactions that is cryptographically linked to the preceding block(s) on a channel.  \u5728\u4e00\u4e2a\u901a\u9053\u4e0a\uff0c\uff08\u533a\u5757\u662f\uff09\u4e00\u7ec4\u6709\u5e8f\u4ea4\u6613\u7684\u96c6\u5408\u3002\u533a\u5757\u5f80\u5f80\u901a\u8fc7\u5bc6\u7801\u5b66\u624b\u6bb5\uff08Hash \u503c\uff09\u8fde\u63a5\u5230\u524d\u5bfc\u533a\u5757\u3002  Zhu Jiang\uff1a\u533a\u5757\u662f\u4e00\u7ec4\u6709\u5e8f\u7684\u4ea4\u6613\u96c6\u5408\uff0c\u5728\u901a\u9053\u4e2d\u7ecf\u8fc7\u52a0\u5bc6\uff08\u54c8\u5e0c\u52a0\u5bc6\uff09\u540e\u4e0e\u524d\u5e8f\u533a\u5757\u8fde\u63a5\u3002", 
            "title": "Block - \u533a\u5757"
        }, 
        {
            "location": "/glossary/#chain-", 
            "text": "The ledger\u2019s chain is a transaction log structured as hash-linked blocks of transactions. Peers receive blocks of transactions from the ordering service, mark the block\u2019s transactions as valid or invalid based on endorsement policies and concurrency violations, and append the block to the hash chain on the peer\u2019s file system.  chain\u5c31\u662fblock\u4e4b\u95f4\u4ee5hash\u8fde\u63a5\u4e3a\u7ed3\u6784\u7684\u4ea4\u6613\u65e5\u5fd7\u3002peer\u4eceorder service\u63a5\u6536\u4ea4\u6613block\uff0c\u5e76\u6839\u636e\u80cc\u4e66\u7b56\u7565\u548c\u5e76\u53d1\u51b2\u7a81\u6807\u8bb0block\u4e0a\u7684\u4ea4\u6613\u662f\u5426\u6709\u6548\uff0c\u7136\u540e\u5c06\u8be5block\u8ffd\u52a0\u5230peer\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684hash chain\u4e0a\u3002  Zhu Jiang:\u8d26\u672c\u7684\u94fe\u662f\u4e00\u4e2a\u4ea4\u6613\u533a\u5757\u7ecf\u8fc7\u201c\u54c8\u5e0c\u8fde\u63a5\u201d\u7ed3\u6784\u5316\u7684\u4ea4\u6613\u65e5\u5fd7\u3002\u5bf9\u7b49\u8282\u70b9\u4ece\u6392\u5e8f\u670d\u52a1\u6536\u5230\u4ea4\u6613\u533a\u5757\uff0c\u57fa\u4e8e\u80cc\u4e66\u7b56\u7565\u548c\u5e76\u53d1\u51b2\u7a81\u6765\u6807\u6ce8\u533a\u5757\u7684\u4ea4\u6613\u4e3a\u6709\u6548\u6216\u8005\u65e0\u6548\u72b6\u6001\uff0c\u5e76\u4e14\u5c06\u533a\u5757\u8ffd\u52a0\u5230\u5bf9\u7b49\u8282\u70b9\u6587\u4ef6\u7cfb\u7edf\u7684\u54c8\u5e0c\u94fe\u4e2d\u3002", 
            "title": "Chain - \u94fe"
        }, 
        {
            "location": "/glossary/#chaincode-", 
            "text": "Chaincode is software, running on a ledger, to encode assets and the transaction instructions (business logic) for modifying the assets.  \u94fe\u7801\u662f\u4e00\u4e2a\u8fd0\u884c\u5728\u8d26\u672c\u4e0a\u7684\u8f6f\u4ef6\uff0c\u5b83\u53ef\u4ee5\u5bf9\u8d44\u4ea7\u8fdb\u884c\u7f16\u7801\uff0c\u5176\u4e2d\u7684\u4ea4\u6613\u6307\u4ee4\uff08\u6216\u8005\u53eb\u4e1a\u52a1\u903b\u8f91\uff09\u4e5f\u53ef\u4ee5\u7528\u6765\u4fee\u6539\u8d44\u4ea7\u3002", 
            "title": "Chaincode - \u94fe\u7801"
        }, 
        {
            "location": "/glossary/#channel-", 
            "text": "A channel is a private blockchain overlay on a Fabric network, allowing for data isolation and confidentiality. A channel-specific ledger is shared across the peers in the channel, and transacting parties must be properly authenticated to a channel in order to interact with it. Channels are defined by a  Configuration-Block .  \u901a\u9053\u662f\u6784\u5efa\u5728\u201cFabric\u201d\u7f51\u7edc\u4e0a\u7684\u79c1\u6709\u533a\u5757\u94fe\uff0c\u5b9e\u73b0\u4e86\u6570\u636e\u7684\u9694\u79bb\u548c\u4fdd\u5bc6\u3002\u901a\u9053\u7279\u5b9a\u7684\u8d26\u672c\u5728\u901a\u9053\u4e2d\u662f\u4e0e\u6240\u6709\u5bf9\u7b49\u8282\u70b9\u5171\u4eab\u7684\uff0c\u5e76\u4e14\u4ea4\u6613\u65b9\u5fc5\u987b\u901a\u8fc7\u8be5\u901a\u9053\u7684\u6b63\u786e\u9a8c\u8bc1\u624d\u80fd\u4e0e\u8d26\u672c\u8fdb\u884c\u4ea4\u4e92\u3002\u901a\u9053\u662f\u7531\u4e00\u4e2a\u201c\u914d\u7f6e\u5757\u201d\u6765\u5b9a\u4e49\u7684\u3002", 
            "title": "Channel - \u901a\u9053"
        }, 
        {
            "location": "/glossary/#commitment-", 
            "text": "Each  Peer  on a channel validates ordered blocks of transactions and then commits (writes-appends) the blocks to its replica of the channel  Ledger . Peers also mark each transaction in each block as valid or invalid.  \u4e00\u4e2a\u901a\u9053\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u7b49\u8282\u70b9\u90fd\u4f1a\u9a8c\u8bc1\u4ea4\u6613\u7684\u6709\u5e8f\u533a\u5757\uff0c\u7136\u540e\u5c06\u533a\u5757\u63d0\u4ea4\uff08\u5199\u6216\u8ffd\u52a0\uff09\u81f3\u8be5\u901a\u9053\u4e0a\u8d26\u672c\u7684\u5404\u4e2a\u526f\u672c\u3002\u5bf9\u7b49\u8282\u70b9\u4e5f\u4f1a\u6807\u8bb0\u6bcf\u4e2a\u533a\u5757\u4e2d\u7684\u6bcf\u7b14\u4ea4\u6613\u7684\u72b6\u6001\u662f\u6709\u6548\u6216\u8005\u65e0\u6548\u3002", 
            "title": "Commitment - \u63d0\u4ea4"
        }, 
        {
            "location": "/glossary/#concurrency-control-version-check-ccvc", 
            "text": "Concurrency Control Version Check is a method of keeping state in sync across peers on a channel. Peers execute transactions in parallel, and before commitment to the ledger, peers check that the data read at execution time has not changed. If the data read for the transaction has changed between execution time and commitment time, then a Concurrency Control Version Check violation has occurred, and the transaction is marked as invalid on the ledger and values are not updated in the state database.  CCVC\u662f\u4fdd\u6301\u901a\u9053\u4e2d\u5404\u5bf9\u7b49\u8282\u70b9\u95f4\u72b6\u6001\u540c\u6b65\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u5bf9\u7b49\u8282\u70b9\u5e76\u884c\u7684\u6267\u884c\u4ea4\u6613\uff0c\u5728\u4ea4\u6613\u63d0\u4ea4\u81f3\u8d26\u672c\u4e4b\u524d\uff0c\u5bf9\u7b49\u8282\u70b9\u4f1a\u68c0\u67e5\u4ea4\u6613\u5728\u6267\u884c\u671f\u95f4\u8bfb\u5230\u7684\u6570\u636e\u662f\u5426\u88ab\u4fee\u6539\u3002\u5982\u679c\u8bfb\u53d6\u7684\u6570\u636e\u5728\u6267\u884c\u548c\u63d0\u4ea4\u4e4b\u95f4\u88ab\u6539\u53d8\uff0c\u5c31\u4f1a\u5f15\u53d1CCVC\u51b2\u7a81\uff0c\u8be5\u4ea4\u6613\u5c31\u4f1a\u5728\u8d26\u672c\u4e2d\u88ab\u6807\u8bb0\u4e3a\u65e0\u6548\uff0c\u800c\u4e14\u503c\u4e0d\u4f1a\u66f4\u65b0\u5230\u72b6\u6001\u6570\u636e\u5e93\u4e2d\u3002", 
            "title": "Concurrency Control Version Check - \u5e76\u53d1\u63a7\u5236\u7248\u672c\u68c0\u67e5\uff08CCVC\uff09"
        }, 
        {
            "location": "/glossary/#configuration-block-", 
            "text": "Contains the configuration data defining members and policies for a system chain (ordering service) or channel. Any configuration modifications to a channel or overall network (e.g. a member leaving or joining) will result in a new configuration block being appended to the appropriate chain. This block will contain the contents of the genesis block, plus the delta.  \u5305\u542b\u4e3a\u7cfb\u7edf\u94fe\uff08\u6392\u5e8f\u670d\u52a1\uff09\u6216\u901a\u9053\u5b9a\u4e49\u6210\u5458\u548c\u7b56\u7565\u7684\u914d\u7f6e\u6570\u636e\u3002\u5bf9\u67d0\u4e2a\u901a\u9053\u6216\u6574\u4e2a\u7f51\u7edc\u7684\u914d\u7f6e\u4fee\u6539\uff08\u6bd4\u5982\uff0c\u6210\u5458\u79bb\u5f00\u6216\u52a0\u5165\uff09\u90fd\u5c06\u5bfc\u81f4\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u914d\u7f6e\u533a\u5757\u5e76\u8ffd\u52a0\u5230\u9002\u5f53\u7684\u94fe\u4e0a\u3002\u8fd9\u4e2a\u914d\u7f6e\u533a\u5757\u4f1a\u5305\u542b\u521b\u59cb\u533a\u5757\u7684\u5185\u5bb9\u52a0\u4e0a\u589e\u91cf\u3002", 
            "title": "Configuration Block - \u914d\u7f6e\u533a\u5757"
        }, 
        {
            "location": "/glossary/#consensus-", 
            "text": "A broader term overarching the entire transactional flow, which serves to generate an agreement on the order and to confirm the correctness of the set of transactions constituting a block.  \u5171\u8bc6\u662f\u8d2f\u7a7f\u6574\u4e2a\u4ea4\u6613\u6d41\u7a0b\u7684\u5e7f\u4e49\u672f\u8bed\uff0c\u5176\u7528\u4e8e\u4ea7\u751f\u4e00\u4e2a\u5bf9\u4e8e\u6392\u5e8f\u7684\u540c\u610f\u4e66\u548c\u786e\u8ba4\u6784\u6210\u533a\u5757\u7684\u4ea4\u6613\u96c6\u7684\u6b63\u786e\u6027\u3002", 
            "title": "Consensus - \u5171\u8bc6"
        }, 
        {
            "location": "/glossary/#current-state-", 
            "text": "The current state of the ledger represents the latest values for all keys ever included in its chain transaction log. Peers commit the latest values to ledger current state for each valid transaction included in a processed block. Since current state represents all latest key values known to the channel, it is sometimes referred to as World State. Chaincode executes transaction proposals against current state data.  ledger\u7684current state\u8868\u793a\u5176chain\u4ea4\u6613log\u4e2d\u6240\u6709key\u7684\u6700\u65b0\u503c\u3002peer\u4f1a\u5c06\u5904\u7406\u8fc7\u7684block\u4e2d\u7684\u6bcf\u4e2a\u4ea4\u6613\u5bf9\u5e94\u7684\u4fee\u6539value\u63d0\u4ea4\u5230ledger\u7684current state\uff0c\u7531\u4e8ecurrent state\u8868\u793achannel\u6240\u77e5\u7684\u6240\u6709\u6700\u65b0\u7684k-v\uff0c\u6240\u4ee5current state\u4e5f\u88ab\u79f0\u4e3aWorld State\u3002Chaincode\u6267\u884c\u4ea4\u6613proposal\u5c31\u662f\u9488\u5bf9\u7684current state\u3002", 
            "title": "Current State - \u5f53\u524d\u72b6\u6001"
        }, 
        {
            "location": "/glossary/#dynamic-membership-", 
            "text": "Fabric supports the addition-removal of members, peers, and ordering service nodes, without compromising the operationality of the overall network. Dynamic membership is critical when business relationships adjust and entities need to be added-removed for various reasons.  Fabric\u652f\u6301\u52a8\u6001\u6dfb\u52a0-\u79fb\u9664members\u3001peers\u548cordering\u670d\u52a1\u8282\u70b9\uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd\u6574\u4e2a\u7f51\u7edc\u7684\u64cd\u4f5c\u6027\u3002\u5f53\u4e1a\u52a1\u5173\u7cfb\u8c03\u6574\u6216\u56e0\u5404\u79cd\u539f\u56e0\u9700\u6dfb\u52a0-\u79fb\u9664\u5b9e\u4f53\u65f6\uff0cDynamic Membership\u81f3\u5173\u91cd\u8981\u3002", 
            "title": "Dynamic Membership - \u52a8\u6001\u6210\u5458"
        }, 
        {
            "location": "/glossary/#endorsement-", 
            "text": "Refers to the process where specific peer nodes execute a transaction and return a  YES-NO  response to the client application that generated the transaction proposal. Chaincode applications have corresponding endorsement policies, in which the endorsing peers are specified.  Endorsement \u662f\u6307\u4e00\u4e2apeer\u6267\u884c\u4e00\u4e2a\u4ea4\u6613\u5e76\u8fd4\u56de YES-NO \u7ed9\u751f\u6210\u4ea4\u6613proposal\u7684client app \u7684\u8fc7\u7a0b\u3002chaincode\u5177\u6709\u76f8\u5e94\u7684endorsement policies\uff0c\u5176\u4e2d\u6307\u5b9a\u4e86endorsing peer\u3002", 
            "title": "Endorsement - \u80cc\u4e66"
        }, 
        {
            "location": "/glossary/#endorsement-policy-", 
            "text": "Defines the peer nodes on a channel that must execute transactions attached to a specific chaincode application, and the required combination of responses (endorsements). A policy could require that a transaction be endorsed by a minimum number of endorsing peers, a minimum percentage of endorsing peers, or by all endorsing peers that are assigned to a specific chaincode application. Policies can be curated based on the application and the desired level of resilience against misbehavior (deliberate or not) by the endorsing peers. A distinct endorsement policy for install and instantiate transactions is also required.  Endorsement policy\u5b9a\u4e49\u4e86\u4f9d\u8d56\u4e8e\u7279\u5b9achaincode\u6267\u884c\u4ea4\u6613\u7684channel\u4e0a\u7684peer\u548c\u54cd\u5e94\u7ed3\u679c\uff08endorsements\uff09\u7684\u5fc5\u8981\u7ec4\u5408\u6761\u4ef6\uff08\u5373\u8fd4\u56deYes\u6216No\u7684\u6761\u4ef6\uff09\u3002Endorsement policy\u53ef\u6307\u5b9a\u5bf9\u4e8e\u67d0\u4e00chaincode\uff0c\u53ef\u4ee5\u5bf9\u4ea4\u6613\u80cc\u4e66\u7684\u6700\u5c0f\u80cc\u4e66\u8282\u70b9\u6570\u6216\u8005\u6700\u5c0f\u80cc\u4e66\u8282\u70b9\u767e\u5206\u6bd4\u3002\u80cc\u4e66\u7b56\u7565\u7531\u80cc\u4e66\u8282\u70b9\u57fa\u4e8e\u5e94\u7528\u7a0b\u5e8f\u548c\u5bf9\u62b5\u5fa1\u4e0d\u826f\u884c\u4e3a\u7684\u671f\u671b\u6c34\u5e73\u6765\u7ec4\u7ec7\u7ba1\u7406\u3002\u5728install\u548cinstantiate Chaincode\uff08deploy tx\uff09\u65f6\u9700\u8981\u6307\u5b9a\u80cc\u4e66\u7b56\u7565\u3002", 
            "title": "Endorsement policy - \u80cc\u4e66\u7b56\u7565"
        }, 
        {
            "location": "/glossary/#fabric-ca", 
            "text": "Fabric-ca is the default Certificate Authority component, which issues PKI-based certificates to network member organizations and their users. The CA issues one root certificate (rootCert) to each member, one enrollment certificate (eCert) to each authorized user, and a number of transaction certificates (tCerts) for each eCert.  Fabric-ca\u662f\u9ed8\u8ba4\u7684\u8bc1\u4e66\u7ba1\u7406\u7ec4\u4ef6\uff0c\u5b83\u5411\u7f51\u7edc\u6210\u5458\u53ca\u5176\u7528\u6237\u9881\u53d1\u57fa\u4e8ePKI\u7684\u8bc1\u4e66\u3002CA\u4e3a\u6bcf\u4e2a\u6210\u5458\u9881\u53d1\u4e00\u4e2a\u6839\u8bc1\u4e66\uff08rootCert\uff09\uff0c\u4e3a\u6bcf\u4e2a\u6388\u6743\u7528\u6237\u9881\u53d1\u4e00\u4e2a\u6ce8\u518c\u8bc1\u4e66\uff08eCert\uff09\uff0c\u4e3a\u6bcf\u4e2a\u6ce8\u518c\u8bc1\u4e66\u9881\u53d1\u5927\u91cf\u4ea4\u6613\u8bc1\u4e66\uff08tCerts\uff09\u3002", 
            "title": "Fabric-ca"
        }, 
        {
            "location": "/glossary/#genesis-block-", 
            "text": "The configuration block that initializes a blockchain network or channel, and also serves as the first block on a chain.  Genesis Block\u662f\u521d\u59cb\u5316\u533a\u5757\u94fe\u7f51\u7edc\u6216channel\u7684\u914d\u7f6e\u533a\u5757\uff0c\u4e5f\u662f\u94fe\u4e0a\u7684\u7b2c\u4e00\u4e2a\u533a\u5757\u3002", 
            "title": "Genesis Block - \u521d\u59cb\u533a\u5757"
        }, 
        {
            "location": "/glossary/#gossip-protocol-gossip", 
            "text": "The gossip data dissemination protocol performs three functions: 1) manages peer discovery and channel membership; 2) disseminates ledger data across all peers on the channel; 3) syncs ledger state across all peers on the channel. Refer to the  Gossip  topic for more details.  Gossip\u6570\u636e\u4f20\u8f93\u534f\u8bae\u6709\u4e09\u9879\u529f\u80fd\uff1a1\uff09\u7ba1\u7406peer\u53d1\u73b0\u548cchannel\u6210\u5458\uff1b2\uff09channel\u4e0a\u7684\u6240\u6709peer\u95f4\u5e7f\u64ad\u8d26\u672c\u6570\u636e\uff1b3\uff09channel\u4e0a\u7684\u6240\u6709peer\u95f4\u540c\u6b65\u8d26\u672c\u6570\u636e\u3002", 
            "title": "Gossip Protocol - Gossip\u534f\u8bae"
        }, 
        {
            "location": "/glossary/#initialize-", 
            "text": "A method to initialize a chaincode application.  \u4e00\u4e2a\u521d\u59cb\u5316chaincode\u7a0b\u5e8f\u7684\u65b9\u6cd5\u3002", 
            "title": "Initialize - \u521d\u59cb\u5316"
        }, 
        {
            "location": "/glossary/#install-", 
            "text": "The process of placing a chaincode on a peer\u2019s file system.  \u5c06chaincode\u653e\u5230peer\u7684\u6587\u4ef6\u7cfb\u7edf\u7684\u8fc7\u7a0b\u3002 \uff08\u8bd1\u6ce8\uff1a\u5373\u5c06ChaincodeDeploymentSpec\u4fe1\u606f\u5b58\u5230chaincodeInstallPath-chaincodeName.chainVersion\u6587\u4ef6\u4e2d\uff09", 
            "title": "Install - \u5b89\u88c5"
        }, 
        {
            "location": "/glossary/#instantiate-", 
            "text": "The process of starting a chaincode container.  \u542f\u52a8chaincode\u5bb9\u5668\u7684\u8fc7\u7a0b\u3002 \uff08\u8bd1\u6ce8\uff1a\u5728lccc\u4e2d\u5c06ChaincodeData\u4fdd\u5b58\u5230state\u4e2d\uff0c\u7136\u540edeploy Chaincode\u5e76\u6267\u884cInit\u65b9\u6cd5\uff09", 
            "title": "Instantiate - \u5b9e\u4f8b\u5316"
        }, 
        {
            "location": "/glossary/#invoke-", 
            "text": "Used to call chaincode functions. Invocations are captured as transaction proposals, which then pass through a modular flow of endorsement, ordering, validation, committal. The structure of invoke is a function and an array of arguments.  \u7528\u4e8e\u8c03\u7528chaincode\u5185\u7684\u51fd\u6570\u3002Chaincode invoke\u5c31\u662f\u4e00\u4e2a\u4ea4\u6613proposal\uff0c\u7136\u540e\u6267\u884c\u6a21\u5757\u5316\u7684\u6d41\u7a0b\uff08\u80cc\u4e66\u3001\u5171\u8bc6\u3001 \u9a8c\u8bc1\u3001 \u63d0\u4ea4\uff09\u3002invoke\u7684\u7ed3\u6784\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u53c2\u6570\u6570\u7ec4\u3002", 
            "title": "Invoke - \u8c03\u7528"
        }, 
        {
            "location": "/glossary/#leading-peer-", 
            "text": "Each  Member  can own multiple peers on each channel that it subscribes to. One of these peers is serves as the leading peer for the channel, in order to communicate with the network ordering service on behalf of the member. The ordering service \u201cdelivers\u201d blocks to the leading peer(s) on a channel, who then distribute them to other peers within the same member cluster.  \u6bcf\u4e00\u4e2aMember\u5728\u5176\u8ba2\u9605\u7684channel\u4e0a\u53ef\u4ee5\u62e5\u6709\u591a\u4e2apeer\uff0c\u5176\u4e2d\u4e00\u4e2apeer\u4f1a\u4f5c\u4e3achannel\u7684leading peer\u4ee3\u8868\u8be5Member\u4e0eordering service\u901a\u4fe1\u3002ordering service\u5c06block\u4f20\u9012\u7ed9leading peer\uff0c\u8be5peer\u518d\u5c06\u6b64block\u5206\u53d1\u7ed9\u540c\u4e00member\u4e0b\u7684\u5176\u4ed6peer\u3002", 
            "title": "Leading Peer - \u4e3b\u5bfc\u8282\u70b9"
        }, 
        {
            "location": "/glossary/#ledger-", 
            "text": "A ledger is a channel\u2019s chain and current state data which is maintained by each peer on the channel.  Ledger\u662f\u4e2achannel\u7684chain\u548c\u7531channel\u4e2d\u6bcf\u4e2apeer\u7ef4\u62a4\u7684world state\u3002 \uff08\u8fd9\u4e2a\u89e3\u91ca\u6709\u70b9\u602a\uff09", 
            "title": "Ledger - \u8d26\u672c"
        }, 
        {
            "location": "/glossary/#member-", 
            "text": "A legally separate entity that owns a unique root certificate for the network. Network components such as peer nodes and application clients will be linked to a member.  \u62e5\u6709\u7f51\u7edc\u552f\u4e00\u6839\u8bc1\u4e66\u7684\u5408\u6cd5\u72ec\u7acb\u5b9e\u4f53\u3002\u50cfpeer\u8282\u70b9\u548capp client\u8fd9\u6837\u7684\u7f51\u7edc\u7ec4\u4ef6\u4f1a\u94fe\u63a5\u5230\u4e00\u4e2aMember\u3002", 
            "title": "Member - \u6210\u5458"
        }, 
        {
            "location": "/glossary/#membership-service-provider-msp", 
            "text": "The Membership Service Provider (MSP) refers to an abstract component of the system that provides credentials to clients, and peers for them to participate in a Hyperledger Fabric network. Clients use these credentials to authenticate their transactions, and peers use these credentials to authenticate transaction processing results (endorsements). While strongly connected to the transaction processing components of the systems, this interface aims to have membership services components defined, in such a way that alternate implementations of this can be smoothly plugged in without modifying the core of transaction processing components of the system.  MSP\u662f\u6307\u4e3aclient\u548cpeer\u63d0\u4f9b\u8bc1\u4e66\u7684\u7cfb\u7edf\u62bd\u8c61\u7ec4\u4ef6\u3002Client\u7528\u8bc1\u4e66\u6765\u8ba4\u8bc1\u4ed6\u4eec\u7684\u4ea4\u6613\uff1bpeer\u7528\u8bc1\u4e66\u8ba4\u8bc1\u5176\u4ea4\u6613\u80cc\u4e66\u3002\u8be5\u63a5\u53e3\u4e0e\u7cfb\u7edf\u7684\u4ea4\u6613\u5904\u7406\u7ec4\u4ef6\u5bc6\u5207\u76f8\u5173\uff0c\u65e8\u5728\u4f7f\u5df2\u5b9a\u4e49\u7684\u6210\u5458\u8eab\u4efd\u670d\u52a1\u7ec4\u4ef6\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u987a\u5229\u63d2\u5165\u800c\u4e0d\u4f1a\u4fee\u6539\u7cfb\u7edf\u7684\u4ea4\u6613\u5904\u7406\u7ec4\u4ef6\u7684\u6838\u5fc3\u3002", 
            "title": "Membership Service Provider - MSP"
        }, 
        {
            "location": "/glossary/#membership-services-", 
            "text": "Membership Services authenticates, authorizes, and manages identities on a permissioned blockchain network. The membership services code that runs in peers and orderers both authenticates and authorizes blockchain operations. It is a PKI-based implementation of the Membership Services Provider (MSP) abstraction.  \u6210\u5458\u670d\u52a1\u5728\u8bb8\u53ef\u7684\u533a\u5757\u94fe\u7f51\u7edc\u4e0a\u8ba4\u8bc1\u3001\u6388\u6743\u548c\u7ba1\u7406\u8eab\u4efd\u3002\u5728peer\u548corder\u4e2d\u8fd0\u884c\u7684\u6210\u5458\u670d\u52a1\u7684\u4ee3\u7801\u90fd\u4f1a\u8ba4\u8bc1\u548c\u6388\u6743\u533a\u5757\u94fe\u64cd\u4f5c\u3002\u5b83\u662f\u57fa\u4e8ePKI\u7684MSP\u5b9e\u73b0\u3002  The  fabric-ca  component is an implementation of membership services to manage identities. In particular, it handles the issuance and revocation of enrollment certificates and transaction certificates.  fabric-ca \u7ec4\u4ef6\u5b9e\u73b0\u4e86\u6210\u5458\u670d\u52a1\uff0c\u6765\u7ba1\u7406\u8eab\u4efd\u3002\u7279\u522b\u7684\uff0c\u5b83\u5904\u7406ECert\u548cTCert\u7684\u9881\u53d1\u548c\u64a4\u9500\u3002  An enrollment certificate is a long-term identity credential; a transaction certificate is a short-term identity credential which is both anonymous and un-linkable.  ECert\u662f\u957f\u671f\u7684\u8eab\u4efd\u51ed\u8bc1\uff1bTCert\u662f\u77ed\u671f\u7684\u8eab\u4efd\u51ed\u8bc1\uff0c\u662f\u533f\u540d\u548c\u4e0d\u53ef\u94fe\u63a5\u7684\u3002", 
            "title": "Membership Services - \u6210\u5458\u670d\u52a1"
        }, 
        {
            "location": "/glossary/#ordering-service-", 
            "text": "A defined collective of nodes that orders transactions into a block. The ordering service exists independent of the peer processes and orders transactions on a first-come-first-serve basis for all channel\u2019s on the network. The ordering service is designed to support pluggable implementations beyond the out-of-the-box SOLO and Kafka varieties. The ordering service is a common binding for the overall network; it contains the cryptographic identity material tied to each  Member .  \u5c06\u4ea4\u6613\u6392\u5e8f\u653e\u5165block\u7684\u8282\u70b9\u7684\u96c6\u5408\u3002ordering service\u72ec\u7acb\u4e8epeer\u6d41\u7a0b\u4e4b\u5916\uff0c\u5e76\u4ee5\u5148\u5230\u5148\u5f97\u7684\u65b9\u5f0f\u4e3a\u7f51\u7edc\u4e0a\u6240\u6709\u7684channel\u4f5c\u4ea4\u6613\u6392\u5e8f\u3002ordering service\u652f\u6301\u53ef\u63d2\u62d4\u5b9e\u73b0\uff0c\u76ee\u524d\u9ed8\u8ba4\u5b9e\u73b0\u4e86SOLO\u548cKafka\u3002ordering service\u662f\u6574\u4e2a\u7f51\u7edc\u7684\u516c\u7528binding\uff0c\u5305\u542b\u4e0e\u6bcf\u4e2aMember\u76f8\u5173\u7684\u52a0\u5bc6\u6750\u6599\u3002", 
            "title": "Ordering Service - \u6392\u5e8f\u670d\u52a1\u6216\u5171\u8bc6\u670d\u52a1"
        }, 
        {
            "location": "/glossary/#peer-", 
            "text": "A network entity that maintains a ledger and runs chaincode containers in order to perform read-write operations to the ledger. Peers are owned and maintained by members.  \u4e00\u4e2a\u7f51\u7edc\u5b9e\u4f53\uff0c\u7ef4\u62a4ledger\u5e76\u8fd0\u884cChaincode\u5bb9\u5668\u6765\u5bf9ledger\u6267\u884cread-write\u64cd\u4f5c\u3002peer\u7531Member\u62e5\u6709\u548c\u7ef4\u62a4\u3002", 
            "title": "Peer - \u8282\u70b9"
        }, 
        {
            "location": "/glossary/#policy-", 
            "text": "There are policies for endorsement, validation, block committal, chaincode management and network-channel management.  \u6709\u80cc\u4e66\u7b56\u7565\uff0c\u6821\u9a8c\u7b56\u7565\uff0c\u533a\u5757\u63d0\u4ea4\u7b56\u7565\uff0cChaincode\u7ba1\u7406\u7b56\u7565\u548c\u7f51\u7edc-\u901a\u9053\u7ba1\u7406\u7b56\u7565\u3002", 
            "title": "Policy - \u7b56\u7565"
        }, 
        {
            "location": "/glossary/#proposal-", 
            "text": "A request for endorsement that is aimed at specific peers on a channel. Each proposal is either an instantiate or an invoke (read-write) request.  \u4e00\u79cd\u9488\u5bf9channel\u4e2d\u67d0peer\u7684\u80cc\u4e66\u8bf7\u6c42\u3002\u6bcf\u4e2aproposal\u8981\u4e48\u662fChaincode instantiate\u8981\u4e48\u662fChaincode invoke\u3002", 
            "title": "Proposal - \u63d0\u6848"
        }, 
        {
            "location": "/glossary/#query-", 
            "text": "A query requests the value of a key(s) against the current state.  \u5bf9\u4e8ecurrent state\u4e2d\u67d0\u4e2akey\u7684value\u7684\u67e5\u8be2\u8bf7\u6c42\u3002", 
            "title": "Query - \u67e5\u8be2"
        }, 
        {
            "location": "/glossary/#software-development-kit-sdk", 
            "text": "The Hyperledger Fabric client SDK provides a structured environment of libraries for developers to write and test chaincode applications. The SDK is fully configurable and extensible through a standard interface. Components, including cryptographic algorithms for signatures, logging frameworks and state stores, are easily swapped in and out of the SDK. The SDK API uses protocol buffers over gRPC for transaction processing, membership services, node traversal and event handling applications to communicate across the fabric. The SDK comes in multiple flavors - Node.js, Java. and Python.  SDK\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7ed3\u6784\u5316\u7684\u5e93\u73af\u5883\uff0c\u7528\u4e8e\u7f16\u5199\u548c\u6d4b\u8bd5\u94fe\u7801\u5e94\u7528\u7a0b\u5e8f\u3002SDK\u5b8c\u5168\u53ef\u4ee5\u901a\u8fc7\u6807\u51c6\u63a5\u53e3\u5b9e\u73b0\u914d\u7f6e\u548c\u6269\u5c55\uff0c\u50cf\u7b7e\u540d\u7684\u52a0\u5bc6\u7b97\u6cd5\u3001\u65e5\u5fd7\u6846\u67b6\u548cstate\u5b58\u50a8\u8fd9\u6837\u7684\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u8f7b\u677e\u5730\u5b9e\u73b0\u66ff\u6362\u3002SDK API\u4f7f\u7528gRPC\u8fdb\u884c\u4ea4\u6613\u5904\u7406\uff0c\u6210\u5458\u670d\u52a1\u3001\u8282\u70b9\u904d\u5386\u4ee5\u53ca\u4e8b\u4ef6\u5904\u7406\u90fd\u662f\u636e\u6b64\u4e0efabric\u901a\u4fe1\u3002\u76ee\u524dSDK\u652f\u6301Node.js\u3001Java\u548cPython\u3002", 
            "title": "Software Development Kit - SDK"
        }, 
        {
            "location": "/glossary/#state-database-statedb", 
            "text": "Current state data is stored in a state database for efficient reads and queries from chaincode. These databases include levelDB and couchDB.  \u4e3a\u4e86\u4eceChaincode\u4e2d\u9ad8\u6548\u7684\u8bfb\u5199\uff0cCurrent state \u6570\u636e\u5b58\u50a8\u5728stateDB\u4e2d\uff0c\u5305\u62eclevelDB\u548ccouchDB\u3002", 
            "title": "State Database - stateDB"
        }, 
        {
            "location": "/glossary/#system-chain-", 
            "text": "Contains a configuration block defining the network at a system level. The system chain lives within the ordering service, and similar to a channel, has an initial configuration containing information such as: MSP information, policies, and configuration details. Any change to the overall network (e.g. a new org joining or a new ordering node being added) will result in a new configuration block being added to the system chain.  \u5305\u542b\u5728\u7cfb\u7edf\u7ea7\u5b9a\u4e49\u7f51\u7edc\u7684\u914d\u7f6e\u533a\u5757\u3002\u7cfb\u7edf\u94fe\u5b58\u5728\u4e8eordering service\u4e2d\uff0c\u4e0echannel\u7c7b\u4f3c\uff0c\u5177\u6709\u5305\u542b\u4ee5\u4e0b\u4fe1\u606f\u7684\u521d\u59cb\u914d\u7f6e\uff1aMSP\u4fe1\u606f\u3001\u7b56\u7565\u548c\u4fe1\u606f\u914d\u7f6e\u3002\u5bf9\u6574\u4e2a\u7f51\u7edc\u7684\u4efb\u4f55\u53d8\u5316\uff08\u4f8b\u5982\u65b0\u7684Org\u52a0\u5165\u6216\u8005\u6dfb\u52a0\u65b0\u7684Ordering\u8282\u70b9\uff09\u5c06\u5bfc\u81f4\u65b0\u7684\u914d\u7f6e\u533a\u5757\u88ab\u6dfb\u52a0\u5230\u7cfb\u7edf\u94fe\u3002  The system chain can be thought of as the common binding for a channel or group of channels. For instance, a collection of financial institutions may form a consortium (represented through the system chain), and then proceed to create channels relative to their aligned and varying business agendas.  \u7cfb\u7edf\u94fe\u53ef\u770b\u505a\u662f\u4e00\u4e2achannel\u6216\u4e00\u7ec4channel\u7684\u516c\u7528binding\u3002\u4f8b\u5982\uff0c\u91d1\u878d\u673a\u6784\u7684\u96c6\u5408\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u8d22\u56e2\uff08\u4ee5system chain\u8868\u793a\uff09\uff0c\u7136\u540e\u6839\u636e\u5176\u76f8\u540c\u6216\u4e0d\u540c\u7684\u4e1a\u52a1\u521b\u5efachannel\u3002", 
            "title": "System Chain - \u7cfb\u7edf\u94fe"
        }, 
        {
            "location": "/glossary/#transaction-", 
            "text": "An invoke or instantiate operation. Invokes are requests to read-write data from the ledger. Instantiate is a request to start a chaincode container on a peer.  Chaincode\u7684invoke\u6216instantiate\u64cd\u4f5c\u3002Invoke\u662f\u4eceledger\u4e2d\u8bf7\u6c42read-write set\uff1bInstantiate\u662f\u8bf7\u6c42\u5728peer\u4e0a\u542f\u52a8Chaincode\u5bb9\u5668\u3002", 
            "title": "Transaction - \u4ea4\u6613"
        }, 
        {
            "location": "/getting_started/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nLinsheng Yu\n\n\nKewei Sun\n\n\n\n\n\n\n\n\n\u672c\u6587\u8bbe\u5b9a\u4e86\u4e00\u4e2a\u7b80\u5355\u7684Fabric\u7f51\u7edc\u573a\u666f\uff0c\u5305\u62ec2\u4e2aorganization\uff0c\u6bcf\u4e2a\u67092\u4e2apeer\uff0c\u5e76\u4f7f\u7528\u201csolo\u201d ordering\u670d\u52a1\u3002\u7f51\u7edc\u5b9e\u4f53\u6240\u9700\u7684\u52a0\u5bc6\u6750\u6599\uff08x509\u8bc1\u4e66\uff09\u5df2\u9884\u5148\u751f\u6210\u5e76\u653e\u5230\u76f8\u5e94\u76ee\u5f55\u548c\u914d\u7f6e\u6587\u4ef6\u91cc\u4e86\uff0c\u4f60\u65e0\u9700\u4fee\u6539\u8fd9\u4e9b\u914d\u7f6e\u3002\nexamples/e2e_cli\n\u6587\u4ef6\u5939\u91cc\u5305\u542b\u4e86docker-compose\u6587\u4ef6\u548c\u8981\u7528\u6765\u521b\u5efa\u548c\u6d4b\u8bd5\u7f51\u7edc\u7684\u811a\u672c\u6587\u4ef6\u3002\n\n\n\u672c\u6587\u8fd8\u6f14\u793a\u4e86\u4f7f\u7528\u914d\u7f6e\u751f\u6210\u5de5\u5177\nconfigtxgen\n\u751f\u6210\u7f51\u7edc\u914d\u7f6e\u3002\n\n\n\u524d\u63d0\n\n\n\u5b8c\u6210\u4ee5\u4e0b\u5b89\u88c5Fabric\u6e90\u7801\u548c\u7f16\u8bd1\nconfigtxgen\n\u5de5\u5177\uff1a\n\n\n\n\n\u5b8c\u6210\n\u73af\u5883\u5b89\u88c5\n\uff0c\u5e76\u8bbe\u7f6e\u6b63\u786e\u7684\n$GOPATH\n\u73af\u5883\u53d8\u91cf\u3002\n\n\n\n\n\u62c9\u53d6Fabric\u6e90\u7801\n\n\ngit clone https://github.com/hyperledger/fabric.git\n\n\n\n\n\n\n\n\u7f16\u8bd1\nconfigtxgen\n\u5de5\u5177\n\n\n\n\n\n\n\u5982\u679c\u8fd0\u884c\u5728Linux\uff0c\u5728Fabric\u76ee\u5f55\u4e0b\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\n\ncd $GOPATH/src/github.com/hyperledger/fabric\nmake configtxgen\n# \u5982\u679c\u51fa\u9519\uff1a'ltdl.h' file not found\nsudo apt install libtool libltdl-dev\n# \u7136\u540e\u518d\u8fd0\u884cmake\nmake configtxgen\n\n\n\n\n\n\n\n\u5982\u679c\u8fd0\u884c\u5728OSX\uff0c\u5148\u5b89\u88c5Xcode 8.0\u6216\u4ee5\u4e0a\u7248\u672c\uff0c\u7136\u540e\u5728Fabric\u76ee\u5f55\u4e0b\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\n\n# \u5b89\u88c5 Homebrew\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n# \u6dfb\u52a0 gnu-tar\nbrew install gnu-tar --with-default-names\n# \u6dfb\u52a0 libtool\nbrew install libtool\n# \u7f16\u8bd1 configtxgen\nmake configtxgen\n\n\n\n\u7f16\u8bd1\u6210\u529f\u540e\u8f93\u51fa\uff1a\n\n\nbuild/bin/configtxgen\nCGO_CFLAGS=\" \" GOBIN=/Users/johndoe/work/src/github.com/hyperledger/fabric/build/bin go install -ldflags \"-X github.com/hyperledger/fabric/common/metadata.Version=1.0.0-snapshot-8d3275f -X github.com/hyperledger/fabric/common /metadata.BaseVersion=0.3.0 -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric\"       github.com/hyperledger/fabric/common/configtx/tool/configtxgen\nBinary available as build/bin/configtxgen``\n\n\n\n\n\n\n\n\u7f16\u8bd1\u540e\u6267\u884c\u6587\u4ef6\u653e\u5728Fabric\u76ee\u5f55\u4e0b\u7684\u7684\nbuild/bin/configtxgen\n\n\n\n\n\n\n\u6267\u884c\u5b8c\u6574\u811a\u672c\n\n\n\u4e3a\u4e86\u52a0\u5feb\u90e8\u7f72\u8fc7\u7a0b\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u811a\u672c\u6765\u6267\u884c\u6240\u6709\u4efb\u52a1\u3002\u6267\u884c\u8be5\u811a\u672c\u4f1a\u751f\u6210\u914d\u7f6e\u7ed3\u679c\u3001\u672c\u5730\u7f51\u7edc\u3001Chaincode\u6d4b\u8bd5\u3002\n\n\n\u8fdb\u5165\nexamples/e2e_cli\n\u76ee\u5f55\uff0c\u9996\u5148\u4eceDocker Hub\u62c9\u53d6\u955c\u50cf\uff1a\n\n\n# \u4f7f\u811a\u672c\u53ef\u6267\u884c\nchmod +x download-dockerimages.sh\n# \u6267\u884c\u811a\u672c\n./download-dockerimages.sh\n\n\n\n\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u9700\u8981\u51e0\u5206\u949f\uff0c\u811a\u672c\u6267\u884c\u540e\u8f93\u51fa\uff1a\n\n\n===\n List out hyperledger docker images\nhyperledger/fabric-ca          latest               35311d8617b4        7 days ago          240 MB\nhyperledger/fabric-ca          x86_64-1.0.0-alpha   35311d8617b4        7 days ago          240 MB\nhyperledger/fabric-couchdb     latest               f3ce31e25872        7 days ago          1.51 GB\nhyperledger/fabric-couchdb     x86_64-1.0.0-alpha   f3ce31e25872        7 days ago          1.51 GB\nhyperledger/fabric-kafka       latest               589dad0b93fc        7 days ago          1.3 GB\nhyperledger/fabric-kafka       x86_64-1.0.0-alpha   589dad0b93fc        7 days ago          1.3 GB\nhyperledger/fabric-zookeeper   latest               9a51f5be29c1        7 days ago          1.31 GB\nhyperledger/fabric-zookeeper   x86_64-1.0.0-alpha   9a51f5be29c1        7 days ago          1.31 GB\nhyperledger/fabric-orderer     latest               5685fd77ab7c        7 days ago          182 MB\nhyperledger/fabric-orderer     x86_64-1.0.0-alpha   5685fd77ab7c        7 days ago          182 MB\nhyperledger/fabric-peer        latest               784c5d41ac1d        7 days ago          184 MB\nhyperledger/fabric-peer        x86_64-1.0.0-alpha   784c5d41ac1d        7 days ago          184 MB\nhyperledger/fabric-javaenv     latest               a08f85d8f0a9        7 days ago          1.42 GB\nhyperledger/fabric-javaenv     x86_64-1.0.0-alpha   a08f85d8f0a9        7 days ago          1.42 GB\nhyperledger/fabric-ccenv       latest               91792014b61f        7 days ago          1.29 GB\nhyperledger/fabric-ccenv       x86_64-1.0.0-alpha   91792014b61f        7 days ago          1.29 GB\n\n\n\n\u73b0\u5728\u8fd0\u884c\u5b8c\u6574\u811a\u672c\uff1a\n\n\n./network_setup.sh up \nchannel-ID\n\n\n\n\n\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\nchannel-ID\n\u53c2\u6570\uff0cchannel\u540d\u9ed8\u8ba4\u662f\nmychannel\n\u3002\u811a\u672c\u6267\u884c\u6210\u529f\u540e\u8f93\u51fa\uff1a\n\n\n===================== Query on PEER3 on channel 'mychannel' is successful =====================\n\n===================== All GOOD, End-2-End execution completed =====================\n\n\n\n\u6b64\u65f6\uff0c\u7f51\u7edc\u542f\u52a8\u8fd0\u884c\u5e76\u6d4b\u8bd5\u6210\u529f\u3002\n\n\n\u6e05\u7406\n\n\n\u505c\u6b62\u7f51\u7edc\uff1a\n\n\n# \u5728e2e_cli\u76ee\u5f55\u4e0b\ndocker rm -f $(docker ps -aq)\n\n\n\n\u7136\u540e\u6267\u884c\ndocker images\n\u547d\u4ee4\u67e5\u770bChaincode\u955c\u50cf\uff0c\u7c7b\u4f3c\u8f93\u51fa\u5982\u4e0b\uff1a\n\n\nREPOSITORY                     TAG                  IMAGE ID            CREATED             SIZE\ndev-peer3-mycc-1.0             latest               13f6c8b042c6        5 minutes ago       176 MB\ndev-peer0-mycc-1.0             latest               e27456b2bd92        5 minutes ago       176 MB\ndev-peer2-mycc-1.0             latest               111098a7c98c        5 minutes ago       176 MB\n\n\n\n\u5220\u9664\u8fd9\u4e9b\u955c\u50cf\uff1a\n\n\ndocker rmi \nIMAGE ID\n \nIMAGE ID\n \nIMAGE ID\n\n\n\n\n\u4f8b\u5982\uff1a\n\n\ndocker rmi -f 13f e27 111\n\n\n\n\u6700\u540e\u5220\u9664\u914d\u7f6e\u7ed3\u679c\uff0c\u5728\ncrypto/orderer\n\u76ee\u5f55\u5220\u9664\norderer.block\n\u548c\nchannel.tx\n\u3002\n\n\nconfigtxgen\n\n\nconfigtxgen\u5de5\u5177\u751f\u6210\u4e24\u4e2a\u5185\u5bb9\uff1a    Orderer\u7684\nbootstrap block\n\u548cFabric\u7684\nchannel configuration transaction\n\u3002\n\n\norderer block\u662fordering\u670d\u52a1\u7684\u521b\u4e16\u533a\u5757\uff1bchannel transaction\u6587\u4ef6\u5728create channel\u65f6\u4f1a\u88ab\u5e7f\u64ad\u7ed9orderer\u3002\n\n\nconfigtx.yaml\n\u5305\u542b\u7f51\u7edc\u7684\u5b9a\u4e49\uff0c\u5e76\u7ed9\u51fa\u4e86\u7f51\u7edc\u7ec4\u4ef6\u7684\u62d3\u6251\u7ed3\u6784\n2\u4e2a\u6210\u5458\uff08Org0\u548cOrg1\uff09\u5206\u522b\u7ba1\u7406\u7ef4\u62a42\u4e2apeer\u3002\u8fd8\u6307\u51fa\u6bcf\u4e2a\u7f51\u7edc\u5b9e\u4f53\u7684\u52a0\u5bc6\u6750\u6599\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002\ncrypto\n\u76ee\u5f55\u5305\u542b\u6bcf\u4e2a\u5b9e\u4f53\u7684admin\u8bc1\u4e66\u3001ca\u8bc1\u4e66\u3001\u7b7e\u540d\u8bc1\u4e66\u548c\u79c1\u94a5\u3002\n\n\n\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u811a\u672c\ngenerateCfgTrx.sh\n\uff0c\u8be5\u811a\u672c\u6574\u5408\u4e86\nconfigtxgen\n\u7684\u6267\u884c\u8fc7\u7a0b\uff0c\u6267\u884c\u540e\u4f1a\u751f\u6210\u4e24\u4e2a\u914d\u7f6e\u7ed3\u679c\uff1a\norderer.block\n\u548c\nchannel.tx\n\u3002\u5982\u679c\u4f60\u8fd0\u884c\u8fc7\u4e0a\u8fb9\u7684\nnetwork_setup.sh\n\u5219\u8fd9\u4e24\u4e2a\u914d\u7f6e\u7ed3\u679c\u5df2\u751f\u6210\uff0c\u8981\u5148\u5230\ncrypto/orderer\n\u76ee\u5f55\u5c06\u4e4b\u5220\u9664\u3002\n\n\n\u6267\u884c\ngenerateCfgTrx.sh\n\u811a\u672c\n\n\n\u5728\ne2e_cli\n\u76ee\u5f55\u4e0b\uff1a\n\n\ncd $GOPATH/src/github.com/hyperledger/fabric/examples/e2e_cli\n\n\n\ngenerateCfgTrx.sh\n\u811a\u672c\u6709\u4e2a\u53ef\u9009\u53c2\u6570\nchannel-ID\n\uff0c\u5982\u679c\u4e0d\u8bbe\u6b64\u53c2\u6570\uff0c\u5219\u9ed8\u8ba4\u4e3a\nmychannel\n\u3002\n\n\n# \u5982\u4e0a\u6240\u8ff0\uff0c\nchannel-ID\n \u53c2\u6570\u662f\u53ef\u9009\u7684\n./generateCfgTrx.sh \nchannel-ID\n\n\n\n\n\u6267\u884c\u6210\u529f\u540e\u8f93\u51fa\uff1a\n\n\n2017/02/28 17:01:52 Generating new channel configtx\n2017/02/28 17:01:52 Creating no-op MSP instance\n2017/02/28 17:01:52 Obtaining default signing identity\n2017/02/28 17:01:52 Creating no-op signing identity instance\n2017/02/28 17:01:52 Serializing identity\n2017/02/28 17:01:52 signing message\n2017/02/28 17:01:52 signing message\n2017/02/28 17:01:52 Writing new channel tx\n\n\n\n\u751f\u6210\u7684\norderer.block\n\u548c\nchannel.tx\n\u4e24\u4e2a\u6587\u4ef6\u5b58\u653e\u5728\ncrypto/orderer\n\u76ee\u5f55\u3002\n\n\norderer.block\n\u662fordering\u670d\u52a1\u7684\u521b\u4e16\u533a\u5757\uff0c\nchannel.tx\n\u5305\u542b\u65b0channel\u7684\u914d\u7f6e\u4fe1\u606f\u3002\u5982\u524d\u6240\u8ff0\uff0c\u8fd9\u4fe9\u6587\u4ef6\u90fd\u6765\u81ea\nconfigtx.yaml\n\u53ca\u5176\u6240\u5305\u542b\u7684\u52a0\u5bc6\u6750\u6599\u548c\u7f51\u7edc\u4fe1\u606f\u7684\u6570\u636e\u3002\n\n\n\u6ce8\u610f\uff1a\n\u4e5f\u53ef\u624b\u52a8\u6267\u884c\u811a\u672c\ngenerateCfgTrx.sh\n\u91cc\u7684\u547d\u4ee4\u3002\u5982\u679c\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5219\u5fc5\u987b\u5148\u7528\ne2e_cli\n\u76ee\u5f55\u4e0b\u7684\nconfigtx.yaml\n\u66ff\u6362Fabric sampleconfig\u76ee\u5f55\u4e0b\u9ed8\u8ba4\u7684\nconfigtx.yaml\n\uff0c\u7136\u540e\u8fd4\u56defabric\u76ee\u5f55\u6267\u884c\u8fd9\u4e9b\u547d\u4ee4\uff0c\u524d\u63d0\u662f\u5220\u9664\u4e4b\u524d\ngenerateCfgTrx.sh\n\u751f\u6210\u7684\u4e24\u4e2a\u6587\u4ef6\u3002\n\n\n\u542f\u52a8\u7f51\u7edc\n\n\n\u4f7f\u7528docker-compose\u542f\u52a8\u7f51\u7edc\uff0c\u5982\u679c\u6ca1\u6709\u62c9\u53d6Fabric\u955c\u50cf\uff0c\u5219\u8fd4\u56de\u4e4b\u524d\u7684\u64cd\u4f5c\u53bb\u62c9\u53d6\u955c\u50cf\u3002\n\n\n\u811a\u672c\nscript.sh\n\u5d4c\u5165\u5230docker-compose\u6587\u4ef6\u91cc\uff0c\u8be5\u811a\u672c\u5c06peer\u52a0\u5165\u5230channel\u5e76\u5411peer\u53d1\u9001read/write\u8bf7\u6c42\uff0c\u5982\u6b64\u4fbf\u53ef\u81ea\u52a8\u6267\u884c\u4ea4\u6613\u6d41\u7a0b\u3002\u5982\u679c\u4e0d\u60f3\u4f7f\u7528\u8fd9\u4e2a\u811a\u672c\u81ea\u52a8\u6267\u884c\u4ea4\u6613\uff0c\u53ef\u4ee5\u8df3\u5230\u4e0b\u9762\u201c\u624b\u52a8\u6267\u884c\u4ea4\u6613\u201d\u4e00\u8282\u3002\n\n\n\u5728\ne2e_cli\n\u76ee\u5f55\u4e0b\u4f7f\u7528docker-compose\u751f\u6210\u7f51\u7edc\u5b9e\u4f53\u5e76\u6267\u884c\u5d4c\u5165\u7684\u811a\u672c\uff1a\n\n\nCHANNEL_NAME=\nchannel-id\n docker-compose up -d\n\n\n\n\u5982\u679c\u4e4b\u524d\u521b\u5efa\u4e86\u4e00\u4e2achannel\u540d\uff0c\u5c31\u5fc5\u987b\u5c06\u5176\u4f5c\u4e3a\u53c2\u6570\uff0c\u5426\u5219\u4f7f\u7528\u9ed8\u8ba4\u7684\nmychannel\n\u3002\u4f8b\u5982\uff1a\n\n\nCHANNEL_NAME=mychannel docker-compose up -d\n\n\n\n\u7b49\u5f85\u4e00\u4f1a\u513f\uff0c\u56e0\u4e3a\u80cc\u540e\u6709\u4ea4\u6613\u4f1a\u53d1\u9001\u5230peer\u3002\u6267\u884c\ndocker ps\n\u67e5\u770b\u8fd0\u884c\u72b6\u6001\u7684container\uff0c\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u5185\u5bb9\uff1a\n\n\nvagrant@hyperledger-devenv:v0.3.0-4eec836:/opt/gopath/src/github.com/hyperledger/fabric/examples/e2e_cli$ docker ps\nCONTAINER ID        IMAGE                        COMMAND                  CREATED              STATUS              PORTS                                              NAMES\n45e3e114f7a2        dev-peer3-mycc-1.0           \"chaincode -peer.a...\"   4 seconds ago        Up 4 seconds                                                           dev-peer3-mycc-1.0\n5970f740ad2b        dev-peer0-mycc-1.0           \"chaincode -peer.a...\"   24 seconds ago       Up 23 seconds                                                          dev-peer0-mycc-1.0\nb84808d66e99        dev-peer2-mycc-1.0           \"chaincode -peer.a...\"   48 seconds ago       Up 47 seconds                                                          dev-peer2-mycc-1.0\n16d7d94c8773        hyperledger/fabric-peer      \"peer node start -...\"   About a minute ago   Up About a minute   0.0.0.0:10051-\n7051/tcp, 0.0.0.0:10053-\n7053/tcp   peer3\n3561a99e35e6        hyperledger/fabric-peer      \"peer node start -...\"   About a minute ago   Up About a minute   0.0.0.0:9051-\n7051/tcp, 0.0.0.0:9053-\n7053/tcp     peer2\n0baad3047d92        hyperledger/fabric-peer      \"peer node start -...\"   About a minute ago   Up About a minute   0.0.0.0:8051-\n7051/tcp, 0.0.0.0:8053-\n7053/tcp     peer1\n1216896b7b4f        hyperledger/fabric-peer      \"peer node start -...\"   About a minute ago   Up About a minute   0.0.0.0:7051-\n7051/tcp, 0.0.0.0:7053-\n7053/tcp     peer0\n155ff8747b4d        hyperledger/fabric-orderer   \"orderer\"                About a minute ago   Up About a minute   0.0.0.0:7050-\n7050/tcp                             orderer\n\n\n\n\u80cc\u540e\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\n\n\n\n\n\u5728CLI\u5bb9\u5668\u4e2d\u6267\u884c\u4e86\u811a\u672c\nscript.sh\n\u3002\u8be5\u811a\u672c\u7528\u9ed8\u8ba4\u7684\nmychannel\n\u6267\u884c\ncreateChannel\n\u547d\u4ee4\uff0c\u8fd9\u4e2a\u547d\u4ee4\u7528\u5230\u4e86\u4e4b\u524d\nconfigtxgen\n\u5de5\u5177\u751f\u6210\u7684\nchannel.tx\n\u3002\n\n\ncreateChannel\n\u6267\u884c\u540e\u4f1a\u751f\u6210\u4e00\u4e2a\u521b\u4e16\u533a\u5757\nmychannel.block\n\u5e76\u4fdd\u5b58\u5230\u5f53\u524d\u76ee\u5f55\u3002\n\n\n\u5bf94\u4e2apeer\u5206\u522b\u6267\u884c\njoinChannel\n\u547d\u4ee4\uff0c\u901a\u8fc7\u521d\u59cb\u533a\u5757\nmychannel.block\n\u52a0\u5165channel\u3002\u81f3\u6b64\uff0c\u6709\u4e00\u4e2achannel\u5305\u542b4\u4e2apeer\u548c2\u4e2aorganization\u3002\n\n\nPEER0\n\u548c\nPEER1\n\u5c5e\u4e8eOrg0\uff0c\nPEER2\n\u548c\nPEER3\n\u5c5e\u4e8eOrg1\u3002\u8fd9\u4e9b\u5173\u7cfb\u7684\u5b9a\u4e49\u90fd\u5728\nconfigtx.yaml\n\u4e2d\n\n\nChaincode \nchaincode_example02\n\u88abinstall\u5230\nPEER0\n\u548c\nPEER2\n\n\n\u7136\u540eChaincode\u5728\nPEER2\n\u4e0ainstantiate\u3002\u5b9e\u4f8b\u5316\u662f\u6307\u542f\u52a8\u5bb9\u5668\u548c\u521d\u59cb\u5316\u4e0eChaincode\u76f8\u5173\u7684\u952e\u503c\u5bf9\uff0c\u672c\u4f8b\u4e2d\u7684\u521d\u59cb\u503c\u662f\n[\u201ca\u201d,\u201d100\u201d \u201cb\u201d,\u201d200\u201d]\n\u3002\u5b9e\u4f8b\u5316\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u540d\u4e3a\ndev-peer2-mycc-1.0\n\u7684\u5bb9\u5668\u542f\u52a8\uff0c\u6ce8\u610f\uff0c\u8fd9\u4e2a\u5bb9\u5668\u4ec5\u662f\u9488\u5bf9\nPEER2\n\u3002\n\uff08\u8bd1\u6ce8\uff1a\u5c24\u5176\u6ce8\u610f\u8fd9\u91cc\u4ec5\u4ec5\u662f\u542f\u52a8\u4e86\u4e00\u4e2acontainer\uff09\n\n\n\u5b9e\u4f8b\u5316\u65f6\u8fd8\u4f1a\u5e26\u6709\u80cc\u4e66\u7b56\u7565\u53c2\u6570\uff0c\u672c\u4f8b\u4e2d\u80cc\u4e66\u7b56\u7565\u4e3a`-P \nOR (\nOrg0MSP.member\n,\nOrg1MSP.member\n)\n\uff0c\u610f\u601d\u662f\u4efb\u4f55\u4ea4\u6613\u5fc5\u987b\u7531\u7ed1\u5b9a\u5230Org0\u6216\u8005Org1\u7684peer\u80cc\u4e66\u3002\n\n\n\u5bf9\u4e8e\u201ca\u201d\u7684query\u8bf7\u6c42\u53d1\u9001\u5230\nPEER0\n\u3002\u5728\u4e4b\u524dChaincode\u88abinstall\u5230\nPEER0\n\u4e86\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u542f\u52a8\u4e00\u4e2a\u540d\u4e3a\ndev-peer0-mycc-1.0\n\u7684\u65b0\u5bb9\u5668\uff0c\u7136\u540e\u8fd4\u56de\u67e5\u8be2\u7ed3\u679c\u3002\u7531\u4e8e\u6ca1\u6709write\u64cd\u4f5c\u53d1\u751f\uff0c\u6240\u4ee5\u201ca\u201d\u7684\u503c\u4f9d\u7136\u662f\u201c100\u201d\u3002\n\n\n\u4ece\u201ca\u201c\u8f6c\u79fb\u201d10\u201c\u7ed9\u201db\u201d\u7684invoke\u8bf7\u6c42\u53d1\u9001\u5230\nPEER0\n\n\nChaincode install\u5230\nPEER3\n\n\n\u5bf9\u201ca\u201d\u7684query\u8bf7\u6c42\u53d1\u9001\u5230\nPEER3\n\u3002\u8fd9\u542f\u52a8\u4e86\u7b2c\u4e09\u4e2a\u540d\u4e3a\ndev-peer3-mycc-1.0\n\u7684\u5bb9\u5668\uff0c\u5e76\u8fd4\u56de\u67e5\u8be2\u7ed3\u679c90\uff0c\u6b63\u786e\u7684\u53cd\u6620\u4e86\u4e4b\u524d\u7684\u4ea4\u6613\u3002\n\n\n\n\n\u8fd9\u8868\u660e\u4e86\u4ec0\u4e48\uff1f\n\n\nChaincode\u5fc5\u987b\u88abinstall\u5230\u4e00\u4e2apeer\u4e0a\u624d\u80fd\u6210\u529f\u7684\u5bf9\u8fd9\u4e2apeer\u7684ledger\u6267\u884cread/write\u64cd\u4f5c\u3002\u6b64\u5916\uff0c\u53ea\u6709\u5f53\u5728peer\u4e0a\u9488\u5bf9chaincode\u6267\u884cread/write\u64cd\u4f5c\u65f6\uff0c\u8fd9\u4e2apeer\u4e0a\u624d\u4f1a\u542f\u52a8\u8be5chaincode \u5bb9\u5668\u3002\uff08\u6bd4\u5982\uff0c\u67e5\u8be2\u201ca\u201d\u7684\u503c\uff09\n\u4ea4\u6613\u5bfc\u81f4\u5bb9\u5668\u542f\u52a8\n\u3002channel\u4e2d\u7684\u6240\u6709peer\uff08\u5305\u62ec\u90a3\u4e9b\u6ca1\u6709install chaincode\u7684peer\uff0c\u5c31\u50cf\u4e0a\u4f8b\u4e2d\u7684\nPEER3\n\uff09\u90fd\u4f1a\u7ef4\u62a4\u4e00\u4e2a\u51c6\u786e\u7684ledger\uff0cledger\u5305\u542b\u5b58\u50a8\u4e86\u4e0d\u53ef\u53d8\u7684\u3001\u6709\u5e8f\u7684\u4ea4\u6613\u8bb0\u5f55\u7684block\uff0c\u8fd8\u6709\u7ef4\u62a4current state\u7684statedb\u3002\u5728peer\u4e0ainstall chaincode\u4e4b\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8be5peer\u4e0a\u7684chaincode\u4e86\uff08\u5c31\u50cf\u4e0a\u4f8b\u4e2d\u7684\nPEER3\n\uff09\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecfinstantiate\u8fc7\u4e86 \n\uff08\u8bd1\u6ce8\uff1a\u5373\u540c\u4e00channel\u4e2d\u7684chaincode\u53ea\u9700\u4e00\u6b21instantiate\uff09\n\u3002\n\n\n\u67e5\u770b\u4ea4\u6613\n\n\n\u67e5\u770bCLI\u5bb9\u5668\u7684log\uff1a\n\n\ndocker logs -f cli\n\n\n\n\u8f93\u51fa\uff1a\n\n\n2017-02-28 04:31:20.841 UTC [logging] InitFromViper -\n DEBU 001 Setting default logging level to DEBUG for command 'chaincode'\n2017-02-28 04:31:20.842 UTC [msp] GetLocalMSP -\n DEBU 002 Returning existing local MSP\n2017-02-28 04:31:20.842 UTC [msp] GetDefaultSigningIdentity -\n DEBU 003 Obtaining default signing identity\n2017-02-28 04:31:20.843 UTC [msp] Sign -\n DEBU 004 Sign: plaintext: 0A8F050A59080322096D796368616E6E...6D7963631A0A0A0571756572790A0161\n2017-02-28 04:31:20.843 UTC [msp] Sign -\n DEBU 005 Sign: digest: 52F1A41B7B0B08CF3FC94D9D7E916AC4C01C54399E71BC81D551B97F5619AB54\nQuery Result: 90\n2017-02-28 04:31:30.425 UTC [main] main -\n INFO 006 Exiting.....\n===================== Query on chaincode on PEER3 on channel 'mychannel' is successful =====================\n\n===================== All GOOD, End-2-End execution completed =====================\n\n\n\n\u4f60\u4e5f\u53ef\u4ee5\u5b9e\u65f6\u67e5\u770b\u65e5\u5fd7\uff0c\u9700\u8981\u6253\u5f00\u4e24\u4e2a\u7ec8\u7aef\u3002\n\n\n\u9996\u5148\uff0c\u505c\u6b62\u8fd0\u884c\u7740\u7684docker\u5bb9\u5668\uff1a\n\n\ndocker rm -f $(docker ps -aq)\n\n\n\n\u5728\u7b2c\u4e00\u4e2a\u7ec8\u7aef\u542f\u52a8docker-compose\u811a\u672c\uff1a\n\n\n# add the appropriate CHANNEL_NAME parm\nCHANNEL_NAME=\nchannel-id\n docker-compose up -d\n\n\n\n\u5728\u7b2c\u4e8c\u4e2a\u7ec8\u7aef\u67e5\u770blog\uff1a\n\n\ndocker logs -f cli\n\n\n\n\u8fd9\u5c06\u5b9e\u65f6\u8f93\u51fa\u901a\u8fc7\nscript.sh\n\u6267\u884c\u7684\u4ea4\u6613\u4fe1\u606f\u3002\n\n\n\u67e5\u770bchaincode\u65e5\u5fd7\n\n\n\u5bf9\u6bcf\u4e2achaincode\u5bb9\u5668\u5355\u72ec\u67e5\u770blog\uff0c\u8f93\u51fa\uff1a\n\n\n$ docker logs dev-peer2-mycc-1.0\n04:30:45.947 [BCCSP_FACTORY] DEBU : Initialize BCCSP [SW]\nex02 Init\nAval = 100, Bval = 200\n\n$ docker logs dev-peer0-mycc-1.0\n04:31:10.569 [BCCSP_FACTORY] DEBU : Initialize BCCSP [SW]\nex02 Invoke\nQuery Response:{\"Name\":\"a\",\"Amount\":\"100\"}\nex02 Invoke\nAval = 90, Bval = 210\n\n$ docker logs dev-peer3-mycc-1.0\n04:31:30.420 [BCCSP_FACTORY] DEBU : Initialize BCCSP [SW]\nex02 Invoke\nQuery Response:{\"Name\":\"a\",\"Amount\":\"90\"}\n\n\n\n\u624b\u52a8\u6267\u884c\u4ea4\u6613\n\n\n\u505c\u6b62\u6240\u6709\u5bb9\u5668\uff1a\n\n\ndocker rm -f $(docker ps -aq)\n\n\n\n\u7136\u540e\uff0c\u6267\u884c\ndocker images\n\u547d\u4ee4\u67e5\u770bchaincode\u955c\u50cf\uff0c\u4f1a\u6709\u7c7b\u4f3c\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\nREPOSITORY                     TAG                  IMAGE ID            CREATED             SIZE\ndev-peer3-mycc-1.0             latest               13f6c8b042c6        5 minutes ago       176 MB\ndev-peer0-mycc-1.0             latest               e27456b2bd92        5 minutes ago       176 MB\ndev-peer2-mycc-1.0             latest               111098a7c98c        5 minutes ago       176 MB\n\n\n\n\u5220\u9664\u8fd9\u4e9b\u955c\u50cf\uff1a\n\n\ndocker rmi \nIMAGE ID\n \nIMAGE ID\n \nIMAGE ID\n\n\n\n\n\u6bd4\u5982\uff1a\n\n\ndocker rmi -f 13f e27 111\n\n\n\n\u786e\u4fdd\u4e4b\u524d\u751f\u6210\u7684\u914d\u7f6e\u5185\u5bb9\u8fd8\u5728\uff0c\u5982\u679c\u5220\u9664\u4e86\u5c31\u518d\u6267\u884c\u811a\u672c\uff1a\n\n\n./generateCfgTrx.sh \nchannel-ID\n\n\n\n\n\u6216\u8005\u4f7f\u7528\u811a\u672c\u4e2d\u7684\u547d\u4ee4\u624b\u52a8\u751f\u6210\u3002\n\n\n\u4fee\u6539docker-compose\u6587\u4ef6\n\n\n\u6253\u5f00docker-compose\u6587\u4ef6\u6ce8\u91ca\u6389\u6267\u884c\nscript.sh\n\u811a\u672c\u7684\u547d\u4ee4\uff0c\u5982\u4e0b\uff1a\n\n\nworking_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer\n# command: /bin/bash -c './scripts/script.sh ${CHANNEL_NAME}'\n\n\n\n\u4fdd\u5b58\u6587\u4ef6\uff0c\u91cd\u542f\u7f51\u7edc\uff1a\n\n\n# \u5728e2e_cli\u76ee\u5f55\u4e0b\u6267\u884c\uff0c\u8bbe\u7f6e\u6b63\u786e\u7684CHANNEL_NAME\nCHANNEL_NAME=\nchannel-id\n docker-compose up -d\n\n\n\n\u547d\u4ee4\u8bed\u6cd5\n\n\n\u53c2\u7167\nscript.sh\n\u811a\u672c\u4e2d\u7684create\u548cjoin\u547d\u4ee4\u3002\u4e0b\u9762\u7684\u547d\u4ee4\u53ea\u662f\u9488\u5bf9\nPEER0\n\u7684\uff0c\u5f53\u5bf9orderer\u548cpeer\u6267\u884c\u547d\u4ee4\u65f6\uff0c\u9700\u8981\u4fee\u6539\u4e0b\u9762\u7ed9\u51fa\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\u7684\u503c\u3002\n\n\n# \u5bf9PEER0\u6240\u7528\u7684\u73af\u5883\u53d8\u91cf\nCORE_PEER_MSPCONFIGPATH=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/peer/peer0/localMspConfig\nCORE_PEER_ADDRESS=peer0:7051\nCORE_PEER_LOCALMSPID=\"Org0MSP\"\nCORE_PEER_TLS_ROOTCERT_FILE=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/peer/ peer0/localMspConfig/cacerts/peerOrg0.pem\n\n\n\n\u6bcf\u4e2apeer\u7684\u73af\u5883\u53d8\u91cf\u7684\u503c\u90fd\u5728docker-compose\u6587\u4ef6\u4e2d\n\n\nCreate channel\n\n\n\u8fdb\u53bbcli\u5bb9\u5668\uff1a\n\n\ndocker exec -it cli bash\n\n\n\n\u6267\u884c\u6210\u529f\u8f93\u51fa\uff1a\n\n\nroot@0d78bb69300d:/opt/gopath/src/github.com/hyperledger/fabric/peer#\n\n\n\n\u7528\n-c\n\u6307\u5b9achannel name\uff0c\n-f\n\u6307\u5b9achannel configuration transaction\uff08\u6b64\u4f8b\u4e2d\u662f\nchannel.tx\n\uff09\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u540d\u79f0\u5b89\u88c5 configuration transaction\u3002\n\n\n# channel.tx \u548c orderer.block \u5728 cli \u5bb9\u5668\u7684 crypto/orderer \u76ee\u5f55\u4e0b\npeer channel create -o orderer0:7050 -c mychannel -f crypto/orderer/channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile $GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem\n\n\n\n\u7531\u4e8e\u6b64\u4f8b\u7684\npeer channel create\n\u547d\u4ee4\u662f\u9488\u5bf9orderer\u7684\uff0c\u6240\u4ee5\u9700\u8981\u4fee\u6539\u4e4b\u524d\u7684\u73af\u5883\u53d8\u91cf\uff0c\u56e0\u6b64\u4e0a\u8fb9\u7684\u547d\u4ee4\u5e94\u8be5\u662f\uff1a\n\n\nCORE_PEER_MSPCONFIGPATH=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig CORE_PEER_LOCALMSPID=\"OrdererMSP\" peer channel create -o orderer0:7050 -c mychannel -f crypto/orderer/channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile $GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem\n\n\n\n\u6ce8\u610f\uff1a\n\u4e0b\u9762\u7684\u5176\u4ed6\u547d\u4ee4\u4f9d\u7136\u5728CLI\u5bb9\u5668\u4e2d\u6267\u884c\uff0c\u800c\u4e14\u8981\u8bb0\u4f4f\u547d\u4ee4\u91cc\u6bcf\u4e2apeer\u5bf9\u5e94\u7684\u73af\u5883\u53d8\u91cf\n\n\nJoin channel\n\n\n\u5c06\u6307\u5b9a\u7684peer\u52a0\u5165\u5230channel\uff1a\n\n\n# \u9ed8\u8ba4\u53ea\u5c06 PEER0 \u52a0\u5165\npeer channel join -b mychannel.block\n\n\n\n\u5b8c\u6574\u7684\u547d\u4ee4\u5e94\u8be5\u662f\uff1a\n\n\nCORE_PEER_MSPCONFIGPATH=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/peer/peer0/localMspConfig CORE_PEER_ADDRESS=peer0:7051 CORE_PEER_LOCALMSPID=\"Org0MSP\" CORE_PEER_TLS_ROOTCERT_FILE=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/peer/peer0/localMspConfig/cacerts/peerOrg0.pem peer channel join -b mychannel.block\n\n\n\n\u4fee\u6539\u8fd9\u56db\u4e2a\u73af\u5883\u53d8\u91cf\u5c06\u5176\u4ed6\u7684peer\u52a0\u5165\u5230channel\u4e2d\n\n\nInstall chaincode\n\n\n\u5c06\u793a\u4f8bchaincode\u4ee3\u7801\u5b89\u88c5\u5230\u56db\u4e2a\u5bf9\u7b49\u8282\u70b9\u4e2d\u7684\u4e00\u4e2a\uff1a\n\n\n# \u5728\u547d\u4ee4\u524d\u9762\u8981\u52a0\u4e0apeer\u5bf9\u5e94\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\npeer chaincode install -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02\n\n\n\nInstantiate chaincode\n\n\n\u5728\u4e00\u4e2apeer\u4e0a\u5b9e\u4f8b\u5316chaincode\uff0c\u8fd9\u5c06\u5bf9\u8be5peer\u542f\u52a8\u4e00\u4e2achaincode\u5bb9\u5668\uff0c\u5e76\u4e3a\u8be5chaincode\u8bbe\u7f6e\u80cc\u4e66\u7b56\u7565\u3002\u6b64\u4f8b\u4e2d\u5b9a\u4e49\u7684\u7b56\u7565\u662f\u6709\nOrg0\n\u6216\nOrg1\n\u4e2d\u7684\u4e00\u4e2apeer\u80cc\u4e66\u5373\u53ef\u3002\u547d\u4ee4\u5982\u4e0b\uff1a\n\n\n# \u5728\u547d\u4ee4\u524d\u9762\u8981\u52a0\u4e0apeer\u5bf9\u5e94\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\n# \u7528 -C \u53c2\u6570\u8bbe\u7f6e\u6b63\u786e\u7684channel\u540d\uff0c\u9ed8\u8ba4\u662f mychannel\npeer chaincode instantiate -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile $GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -c '{\"Args\":[\"init\",\"a\", \"100\", \"b\",\"200\"]}' -P \"OR ('Org0MSP.member','Org1MSP.member')\"\n\n\n\nInvoke chaincode\n\n\n# \u5728\u547d\u4ee4\u524d\u9762\u8981\u52a0\u4e0apeer\u5bf9\u5e94\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\npeer chaincode invoke -o orderer0:7050  --tls $CORE_PEER_TLS_ENABLED --cafile $GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem  -C mychannel -n mycc -c '{\"Args\":[\"invoke\",\"a\",\"b\",\"10\"]}'\n\n\n\nQuery chaincode\n\n\n# \u5728\u547d\u4ee4\u524d\u9762\u8981\u52a0\u4e0apeer\u5bf9\u5e94\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\npeer chaincode query -C mychannel -n mycc -c '{\"Args\":[\"query\",\"a\"]}'\n\n\n\n\u6267\u884c\u7ed3\u679c\uff1a\n\n\nQuery Result: 90\n\n\n\n\u624b\u52a8\u6784\u5efa\u955c\u50cf\n\n\n\u6784\u5efapeer\u548corderer\u955c\u50cf\uff1a\n\n\n# \u5728fabric\u76ee\u5f55\u4e0b\u6267\u884c\uff0c\u5982\u679c\u4e0d\u80fd\u987a\u5229\u751f\u6210\u955c\u50cf\uff0c\u5219\u4f7f\u7528vagrant\u73af\u5883\nmake peer-docker orderer-docker\n\n\n\n\u6267\u884c\ndocker images\n\u547d\u4ee4\u8f93\u51fa\uff1a\n\n\nvagrant@hyperledger-devenv:v0.3.0-4eec836:/opt/gopath/src/github.com/hyperledger/fabric$ docker images\nREPOSITORY                     TAG                             IMAGE ID            CREATED             SIZE\nhyperledger/fabric-orderer     latest                          264e45897bfb        10 minutes ago      180 MB\nhyperledger/fabric-orderer     x86_64-0.7.0-snapshot-a0d032b   264e45897bfb        10 minutes ago      180 MB\nhyperledger/fabric-peer        latest                          b3d44cff07c6        10 minutes ago      184 MB\nhyperledger/fabric-peer        x86_64-0.7.0-snapshot-a0d032b   b3d44cff07c6        10 minutes ago      184 MB\nhyperledger/fabric-javaenv     latest                          6e2a2adb998a        10 minutes ago      1.42 GB\nhyperledger/fabric-javaenv     x86_64-0.7.0-snapshot-a0d032b   6e2a2adb998a        10 minutes ago      1.42 GB\nhyperledger/fabric-ccenv       latest                          0ce0e7dc043f        12 minutes ago      1.29 GB\nhyperledger/fabric-ccenv       x86_64-0.7.0-snapshot-a0d032b   0ce0e7dc043f        12 minutes ago      1.29 GB\nhyperledger/fabric-baseimage   x86_64-0.3.0                    f4751a503f02        4 weeks ago         1.27 GB\nhyperledger/fabric-baseos      x86_64-0.3.0                    c3a4cf3b3350        4 weeks ago         161 MB\n\n\n\n\u4f7f\u7528\u672c\u5730\u4e8c\u8fdb\u5236\u6587\u4ef6\n\n\n\u8fdb\u53bbvagrant\u73af\u5883\uff1a\n\n\ncd $GOPATH/src/github.com/hyperledger/fabric/devenv\n\n# \u7b2c\u4e00\u6b21\u542f\u52a8VM\u7528 vagrant up \nvagrant ssh\n\n\n\n\u5728fabric\u76ee\u5f55\u4e0b\u7f16\u8bd1peer\u548corderer\uff1a\n\n\nmake clean\nmake native\n\n\n\n\u751f\u6210\nccenv\n\u955c\u50cf\uff1a\n\n\nmake peer-docker\n\n\n\n\u7136\u540e\u6253\u5f00\u4e24\u4e2a\u7ec8\u7aef\u90fd\u8fdb\u5165vagrant\uff0c\u81f3\u6b64\u6709\u4e09\u4e2a\u7ec8\u7aef\u90fd\u5728vagrant\u91cc\u3002\n\n\n\u524d\u9996\u5148\u6e05\u7a7aledger\u6587\u4ef6\u5939\n/var/hyperledger/\n\uff08\u6bcf\u6b21\u8fd0\u884c\u540e\uff0c\u4e3a\u907f\u514d\u9519\u8bef\u6216\u91cd\u590d\uff0c\u90fd\u8981\u6e05\u7a7a\uff09:\n\n\nrm -rf /var/hyperledger/*\n\n\n\n\u7ec8\u7aef1\n\n\n\u4f7f\u7528\nconfigtxgen\n\u5de5\u5177\u521b\u5efaorderer\u521b\u4e16\u533a\u5757\uff1a\n\n\nconfigtxgen -profile SampleSingleMSPSolo -outputBlock orderer.block\n\n\n\n\u7ec8\u7aef2\n\n\n\u7528\u521a\u751f\u6210\u7684\u521b\u4e16\u533a\u5757\u542f\u52a8orderer\uff1a\n\n\nORDERER_GENERAL_GENESISMETHOD=file ORDERER_GENERAL_GENESISFILE=./orderer.block orderer\n\n\n\n\u7ec8\u7aef1\n\n\n\u521b\u5efa channel configuration transaction\uff1a\n\n\nconfigtxgen -profile SampleSingleMSPSolo -outputCreateChannelTx channel.tx -channelID \nchannel-ID\n\n\n\n\n\u6267\u884c\u6210\u529f\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u751f\u6210\nchannel.tx\n\n\n\u7ec8\u7aef3\n\n\n\u4ee5\nchainless\n\u6a21\u5f0f\u542f\u52a8peer\uff1a\n\n\npeer node start --peer-defaultchain=false\n\n\n\nCreate channel\n\n\n\u4ee5\nchannel.tx\n\u4e3a\u53c2\u6570\u521b\u5efachannel\uff1a\n\n\npeer channel create -o 127.0.0.1:7050 -c mychannel -f channel.tx\n\n\n\n\u6267\u884c\u540e\u5728\u5f53\u524d\u76ee\u5f55\u751f\u6210\u4e00\u4e2achannel\u7684\u521b\u4e16\u533a\u5757\nmychannel.block\n\n\nJoin channel\n\n\n\u901a\u8fc7channel\u7684\u521b\u4e16\u533a\u5757\nmychannel.block\n\u52a0\u5165channel\uff1a\n\n\npeer channel join -b mychannel.block\n\n\n\nInstall chaincode\n\n\n\u5728peer\u4e0a\u5b89\u88c5chaincode\uff1a\n\n\npeer chaincode install -o 127.0.0.1:7050 -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02\n\n\n\n\u6267\u884c\u6210\u529f\u540e\u67e5\u770b\u6587\u4ef6\u53ef\u4ee5\u770b\u5230\nmycc.1.0\n:\n\n\nls /var/hyperledger/production/chaincodes\n\n\n\nInstantiate chaincode\n\n\n\u5b9e\u4f8b\u5316chaincode\uff1a\n\n\npeer chaincode instantiate -o 127.0.0.1:7050 -C mychannel -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -c '{\"Args\":[\"init\",\"a\", \"100\", \"b\",\"200\"]}'\n\n\n\ndocker ps\n\u67e5\u770b\u8fd0\u884c\u4e2d\u7684\u5bb9\u5668\uff0c\u5982\u679cchaincode\u542f\u52a8\u6210\u529f\uff0c\u5219\u663e\u793a\uff1a\n\n\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\nbd9c6bda7560        dev-jdoe-mycc-1.0   \"chaincode -peer.a...\"   5 seconds ago       Up 5 seconds                            dev-jdoe-mycc-1.0\n\n\n\nInvoke chaincode\n\n\n\u8c03\u7528chaincode\u4ece\u201ca\u201d\u8f6c\u79fb\u201c10\u201d\u7ed9\u201cb\u201c\uff1a\n\n\npeer chaincode invoke -o 127.0.0.1:7050 -C mychannel -n mycc -c '{\"Args\":[\"invoke\",\"a\",\"b\",\"10\"]}'\n\n\n\nQuery chaincode\n\n\n\u67e5\u8be2\u201da\u201c\u7684\u503c\uff1a\n\n\n# \u8fd4\u56de\u503c\u5e94\u662f 90\npeer chaincode query -o 127.0.0.1:7050 -C mychannel -n mycc -c '{\"Args\":[\"query\",\"a\"]}'\n\n\n\n\u8fd0\u884c\u5b8c\u6210\u540e\u4e0d\u8981\u5fd8\u8bb0\u6e05\u7a7aledger\u6587\u4ef6\u5939\n/var/hyperledger/\n\uff1a\n\n\nrm -rf /var/hyperledger/*\n\n\n\n\u4f7f\u7528CouchDB\n\n\n\u53ef\u4ee5\u5c06stateDB\u9ed8\u8ba4\u7684goleveldb\u66ff\u6362\u6210CouchDB\u3002\u5bf9\u4e8eCouchDB\uff0cchaincode\u5404\u529f\u80fd\u4f9d\u7136\u53ef\u7528\uff0c\u4f46\u5c06chaincode\u6570\u636e\u4ee5JSON\u65b9\u5f0f\u5b58\u50a8\u7684\u8bdd\u5c31\u53ef\u4f7f\u7528CouchDB\u7684\u590d\u6742\u67e5\u8be2\u7684\u529f\u80fd\u3002\n\n\n\u4e3a\u4e86\u4f7f\u7528CouchDB\uff0c\u9664\u4e86\u6700\u524d\u9762\u7684\u201d\u524d\u63d0\u201c\u4e00\u8282\u7684\u64cd\u4f5c\u5916\uff0c\u8fd8\u9700\u8981\u4e0b\u8fb9\u4e24\u6b65\u542f\u52a8CouchDB\u5bb9\u5668\u5e76\u5c06\u4e4b\u4e0epeer\u5bb9\u5668\u5173\u8054\uff1a\n\n\n\n\n\n\n\u6784\u5efaCouchDB\u955c\u50cf\uff1a\n\n\n# make sure you are in the fabric directory\nmake couchdb\n\n\n\n\n\n\n\n\u7f16\u8f91\nfabric/examples/e2e_cli/docker-compose.yaml\n\u548c\ndocker-compose.yam\n\uff0c\u5c06\u6240\u6709\u4e0eCouchDB\u6709\u5173\u7684\u5185\u5bb9\u53d6\u6d88\u6ce8\u91ca\u3002\u8fd9\u6837\nchaincode_example02\n\u5c31\u53ef\u4ee5\u624dCouchDB\u4e0b\u8fd0\u884c\u4e86\u3002\n\n\n\n\n\n\n\u6ce8\u610f\uff1a\n\u5982\u679c\u5c06CouchDB\u5bb9\u5668\u7684\u7aef\u53e3\u6620\u5c04\u7684\u4e3b\u673a\uff0c\u8bf7\u4e00\u5b9a\u8981\u6ce8\u610f\u5b89\u5168\u3002\u5728\u5f00\u53d1\u73af\u5883\u4e2d\u5c06\u7aef\u53e3\u6620\u5c04\u51fa\u6765\u53ef\u4ee5\u901a\u8fc7CouchDB\u7684web\u754c\u9762\u53ef\u89c6\u5316\u64cd\u4f5c\u6570\u636e\u3002\u751f\u4ea7\u73af\u5883\u4e2d\u4e00\u822c\u4e0d\u4f1a\u505a\u7aef\u53e3\u6620\u5c04\uff0c\u4ee5\u9650\u5236CouchDB\u7684\u5916\u90e8\u8bbf\u95ee\u3002\n\n\n\u53ef\u4ee5\u7528\nchaincode_example02\n\u5728CouchDB\u4e0b\u6267\u884c\u4e0a\u8fb9\u7684chaincode\u64cd\u4f5c\uff0c\u4f46\u662f\u4e3a\u4e86\u4f7f\u7528CouchDB\u7684\u590d\u6742\u67e5\u8be2\u529f\u80fd\uff0cchaincode\u6570\u636e\u4e00\u5b9a\u8981\u4ee5JSON\u683c\u5f0f\u5b58\u50a8\uff08\u4f8b\u5982\nfabric/examples/chaincode/go/marbles02\n\uff09\u3002\n\n\n\u4f7f\u7528\n\u624b\u52a8\u6267\u884c\u4ea4\u6613\n\u8fd9\u4e00\u8282\u4e2d\u7684\u6b65\u9aa4install\u3001instantiate\u3001invoke\u548cquery \nmarbles02\n\uff0c\u6267\u884c\u5b8c\nJoin channel\n\u8fd9\u6b65\u540e\u4f7f\u7528\u4e0b\u8fb9\u7684\u547d\u4ee4\u64cd\u4f5c\nmarbles02\n\uff1a\n\n\n\n\n\n\n\u5728\nPEER0\n\u4e0a\u5b89\u88c5\u5e76\u5b9e\u4f8b\u5316chaincode\n\n\npeer chaincode install -o orderer0:7050 -n marbles -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/marbles02\npeer chaincode instantiate -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/marbles02 -c '{\"Args\":[\"init\"]}' -P \"OR ('Org0MSP.member','Org1MSP.member')\"\n\n\n\n\n\n\n\n\u521b\u5efa\u4e00\u4e9bmarble\u5e76\u79fb\u52a8\u5b83\u4eec\n\n\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"initMarble\",\"marble1\",\"blue\",\"35\",\"tom\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"initMarble\",\"marble2\",\"red\",\"50\",\"tom\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"initMarble\",\"marble3\",\"blue\",\"70\",\"tom\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"transferMarble\",\"marble2\",\"jerry\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"transferMarblesBasedOnColor\",\"blue\",\"jerry\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"delete\",\"marble1\"]}'\n\n\n\n\n\n\n\n\u5982\u679c\u505a\u4e86CouchDB\u5bb9\u5668\u7684\u7aef\u53e3\u6620\u5c04\uff0c\u53ef\u4ee5\u901a\u8fc7web\u754c\u9762\u67e5\u770b\u6570\u636e\uff0c\u53ef\u4ee5\u770b\u5230\u540d\u4e3a\nmychannel\n\u7684\u6570\u636e\u5e93\u53ca\u5176\u6587\u6863\n\n\n\n\n\n\n\u5982\u679c\u4f7f\u7528\u7684\u662fvagrant\u73af\u5883\n\n\nhttp://localhost:15984/_utils\n* \u5982\u679c\u4e0d\u662fvagrant\u73af\u5883\uff0c\u4f7f\u7528CouchDB\u5bb9\u5668\u6307\u5b9a\u7684\u7aef\u53e3\n\nhttp://localhost:5984/_utils\n\n\n\n\n\n\u53ef\u6709\u89c4\u5f8b\u7684\u67e5\u8be2chaincode\uff08\u4f8b\u5982\uff0c\u8bfb\u53d6\nmarble2\n\uff09\n\n\n\n\npeer chaincode query -C mychannel -n marbles -c \n{\nArgs\n:[\nreadMarble\n,\nmarble2\n]}\n\n\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\nmarble2\n\u7684\u8be6\u7ec6\u4fe1\u606f\uff1a\n\n\nQuery Result: {\"color\":\"red\",\"docType\":\"marble\",\"name\":\"marble2\",\"owner\":\"jerry\",\"size\":50}\n\n\n\n\u83b7\u53d6\nmarble1\n\u7684\u5386\u53f2\uff1a\n\n\npeer chaincode query -C mychannel -n marbles -c '{\"Args\":[\"getHistoryForMarble\",\"marble1\"]}'\n\n\n\n\u53ef\u4ee5\u770b\u5230\u64cd\u4f5c\u8fc7\nmarble1\n\u7684\u4ea4\u6613\uff1a\n\n\nQuery Result: [{\"TxId\":\"1c3d3caf124c89f91a4c0f353723ac736c58155325f02890adebaa15e16e6464\", \"Value\":{\"docType\":\"marble\",\"name\":\"marble1\",\"color\":\"blue\",\"size\":35,\"owner\":\"tom\"}},{\"TxId\":\"755d55c281889eaeebf405586f9e25d71d36eb3d35420af833a20a2f53a3eefd\", \"Value\":{\"docType\":\"marble\",\"name\":\"marble1\",\"color\":\"blue\",\"size\":35,\"owner\":\"jerry\"}},{\"TxId\":\"819451032d813dde6247f85e56a89262555e04f14788ee33e28b232eef36d98f\", \"Value\":}]\n\n\n\n\u8fd8\u53ef\u4ee5\u6267\u884c\u590d\u6742\u67e5\u8be2\uff0c\u6bd4\u5982\u67e5\u8be2\njerry\n\u6240\u62e5\u6709\u7684marble\uff1a\n\n\npeer chaincode query -C mychannel -n marbles -c '{\"Args\":[\"queryMarblesByOwner\",\"jerry\"]}'\n\n\n\n\u67e5\u8be2\u7ed3\u679c\u4e3a\njerry\n\u6240\u62e5\u6709\u76842\u4e2amarble\u7684\u4fe1\u606f\uff1a\n\n\nQuery Result: [{\"Key\":\"marble2\", \"Record\":{\"color\":\"red\",\"docType\":\"marble\",\"name\":\"marble2\",\"owner\":\"jerry\",\"size\":50}},{\"Key\":\"marble3\", \"Record\":{\"color\":\"blue\",\"docType\":\"marble\",\"name\":\"marble3\",\"owner\":\"jerry\",\"size\":70}}]\n\n\n\n\u901a\u8fc7\nowner\n\u5b57\u6bb5\u7b49\u4e8e\njerry\n\u67e5\u8be2\uff1a\n\n\npeer chaincode query -C mychannel -n marbles -c '{\"Args\":[\"queryMarbles\",\"{\\\"selector\\\":{\\\"owner\\\":\\\"jerry\\\"}}\"]}'\n\n\n\n\u67e5\u8be2\u7ed3\u679c\u5982\u4e0b\uff1a\n\n\nQuery Result: [{\"Key\":\"marble2\", \"Record\":{\"color\":\"red\",\"docType\":\"marble\",\"name\":\"marble2\",\"owner\":\"jerry\",\"size\":50}},{\"Key\":\"marble3\", \"Record\":{\"color\":\"blue\",\"docType\":\"marble\",\"name\":\"marble3\",\"owner\":\"jerry\",\"size\":70}}]\n\n\n\n\n\n\n\n\u6570\u636e\u6301\u4e45\u5316\n\n\n\u5982\u679c\u9700\u8981\u5bf9peer\u6216CouchDB\u5bb9\u5668\u7684\u6570\u636e\u6301\u4e45\u5316\uff0c\u4e00\u79cd\u9009\u62e9\u662f\u5c06\u5bb9\u5668\u7684\u76f8\u5173\u76ee\u5f55\u6302\u5728\u5230docker\u4e3b\u673a\u3002\u4f8b\u5982\uff0c\u5c06\u4e0b\u9762\u4e24\u884c\u5185\u5bb9\u653e\u5230\ndocker-compose.yaml\n\u6587\u4ef6\u4e2d\u7684\u5bf9\u5e94peer\u5904\uff1a\n\n\nvolumes:\n - /var/hyperledger/peer0:/var/hyperledger/production\n\n\n\n\u5c06\u4e0b\u9762\u4e24\u884c\u653e\u5230\u5bf9\u5e94\u7684CouchDB\u5904\uff1a\n\n\nvolumes:\n- /var/hyperledger/couchdb0:/opt/couchdb/data\n\n\n\n\u6545\u969c\u6392\u51fa\n\n\n\n\n\u6bcf\u6b21\u8fd0\u884c\u540e\u8981\u6e05\u7406\u6587\u4ef6\n\n\n\n\n\u5982\u679c\u51fa\u73b0docker\u9519\u8bef\uff0c\u5219\u5220\u9664\u955c\u50cf\uff0c\u4ece\u5934\u518d\u64cd\u4f5c\u4e00\u904d\n\n\nmake clean\nmake peer-docker orderer-docker\n\n\n\n\n\n\n\n\u5982\u679c\u51fa\u73b0\u4e0b\u9762\u7684\u9519\u8bef\n\n\nError: Error endorsing chaincode: rpc error: code = 2 desc = Error installing chaincode code mycc:1.0(chaincode /var/hyperledger/production/chaincodes/mycc.1.0 exits)\n\n\n\nchaincode\u955c\u50cf\uff08\u5982\ndev-peer0-mycc-1.0\n\u6216\ndev-peer1-mycc-1.0\n\uff09\u53ef\u80fd\u662f\u4ee5\u524d\u8fd0\u884c\u8fc7\u7684\u3002\u5220\u9664\u5b83\u4eec\u7136\u540e\u91cd\u8bd5\u3002\n\n\ndocker rmi -f $(docker images | grep peer[0-9]-peer[0-9] | awk '{print $3}')\n\n\n\n\n\n\n\n\u4f7f\u7528\ndown\n\u9009\u9879\u6e05\u7406\u7f51\u7edc\n\n\n./network_setup.sh down\nNext  Previous", 
            "title": "\u5feb\u901f\u5165\u95e8"
        }, 
        {
            "location": "/getting_started/#_1", 
            "text": "\u5b8c\u6210\u4ee5\u4e0b\u5b89\u88c5Fabric\u6e90\u7801\u548c\u7f16\u8bd1 configtxgen \u5de5\u5177\uff1a   \u5b8c\u6210 \u73af\u5883\u5b89\u88c5 \uff0c\u5e76\u8bbe\u7f6e\u6b63\u786e\u7684 $GOPATH \u73af\u5883\u53d8\u91cf\u3002   \u62c9\u53d6Fabric\u6e90\u7801  git clone https://github.com/hyperledger/fabric.git    \u7f16\u8bd1 configtxgen \u5de5\u5177    \u5982\u679c\u8fd0\u884c\u5728Linux\uff0c\u5728Fabric\u76ee\u5f55\u4e0b\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a  cd $GOPATH/src/github.com/hyperledger/fabric\nmake configtxgen\n# \u5982\u679c\u51fa\u9519\uff1a'ltdl.h' file not found\nsudo apt install libtool libltdl-dev\n# \u7136\u540e\u518d\u8fd0\u884cmake\nmake configtxgen    \u5982\u679c\u8fd0\u884c\u5728OSX\uff0c\u5148\u5b89\u88c5Xcode 8.0\u6216\u4ee5\u4e0a\u7248\u672c\uff0c\u7136\u540e\u5728Fabric\u76ee\u5f55\u4e0b\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a  # \u5b89\u88c5 Homebrew\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n# \u6dfb\u52a0 gnu-tar\nbrew install gnu-tar --with-default-names\n# \u6dfb\u52a0 libtool\nbrew install libtool\n# \u7f16\u8bd1 configtxgen\nmake configtxgen  \u7f16\u8bd1\u6210\u529f\u540e\u8f93\u51fa\uff1a  build/bin/configtxgen\nCGO_CFLAGS=\" \" GOBIN=/Users/johndoe/work/src/github.com/hyperledger/fabric/build/bin go install -ldflags \"-X github.com/hyperledger/fabric/common/metadata.Version=1.0.0-snapshot-8d3275f -X github.com/hyperledger/fabric/common /metadata.BaseVersion=0.3.0 -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric\"       github.com/hyperledger/fabric/common/configtx/tool/configtxgen\nBinary available as build/bin/configtxgen``    \u7f16\u8bd1\u540e\u6267\u884c\u6587\u4ef6\u653e\u5728Fabric\u76ee\u5f55\u4e0b\u7684\u7684 build/bin/configtxgen", 
            "title": "\u524d\u63d0"
        }, 
        {
            "location": "/getting_started/#_2", 
            "text": "\u4e3a\u4e86\u52a0\u5feb\u90e8\u7f72\u8fc7\u7a0b\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u811a\u672c\u6765\u6267\u884c\u6240\u6709\u4efb\u52a1\u3002\u6267\u884c\u8be5\u811a\u672c\u4f1a\u751f\u6210\u914d\u7f6e\u7ed3\u679c\u3001\u672c\u5730\u7f51\u7edc\u3001Chaincode\u6d4b\u8bd5\u3002  \u8fdb\u5165 examples/e2e_cli \u76ee\u5f55\uff0c\u9996\u5148\u4eceDocker Hub\u62c9\u53d6\u955c\u50cf\uff1a  # \u4f7f\u811a\u672c\u53ef\u6267\u884c\nchmod +x download-dockerimages.sh\n# \u6267\u884c\u811a\u672c\n./download-dockerimages.sh  \u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u9700\u8981\u51e0\u5206\u949f\uff0c\u811a\u672c\u6267\u884c\u540e\u8f93\u51fa\uff1a  ===  List out hyperledger docker images\nhyperledger/fabric-ca          latest               35311d8617b4        7 days ago          240 MB\nhyperledger/fabric-ca          x86_64-1.0.0-alpha   35311d8617b4        7 days ago          240 MB\nhyperledger/fabric-couchdb     latest               f3ce31e25872        7 days ago          1.51 GB\nhyperledger/fabric-couchdb     x86_64-1.0.0-alpha   f3ce31e25872        7 days ago          1.51 GB\nhyperledger/fabric-kafka       latest               589dad0b93fc        7 days ago          1.3 GB\nhyperledger/fabric-kafka       x86_64-1.0.0-alpha   589dad0b93fc        7 days ago          1.3 GB\nhyperledger/fabric-zookeeper   latest               9a51f5be29c1        7 days ago          1.31 GB\nhyperledger/fabric-zookeeper   x86_64-1.0.0-alpha   9a51f5be29c1        7 days ago          1.31 GB\nhyperledger/fabric-orderer     latest               5685fd77ab7c        7 days ago          182 MB\nhyperledger/fabric-orderer     x86_64-1.0.0-alpha   5685fd77ab7c        7 days ago          182 MB\nhyperledger/fabric-peer        latest               784c5d41ac1d        7 days ago          184 MB\nhyperledger/fabric-peer        x86_64-1.0.0-alpha   784c5d41ac1d        7 days ago          184 MB\nhyperledger/fabric-javaenv     latest               a08f85d8f0a9        7 days ago          1.42 GB\nhyperledger/fabric-javaenv     x86_64-1.0.0-alpha   a08f85d8f0a9        7 days ago          1.42 GB\nhyperledger/fabric-ccenv       latest               91792014b61f        7 days ago          1.29 GB\nhyperledger/fabric-ccenv       x86_64-1.0.0-alpha   91792014b61f        7 days ago          1.29 GB  \u73b0\u5728\u8fd0\u884c\u5b8c\u6574\u811a\u672c\uff1a  ./network_setup.sh up  channel-ID   \u5982\u679c\u6ca1\u6709\u8bbe\u7f6e channel-ID \u53c2\u6570\uff0cchannel\u540d\u9ed8\u8ba4\u662f mychannel \u3002\u811a\u672c\u6267\u884c\u6210\u529f\u540e\u8f93\u51fa\uff1a  ===================== Query on PEER3 on channel 'mychannel' is successful =====================\n\n===================== All GOOD, End-2-End execution completed =====================  \u6b64\u65f6\uff0c\u7f51\u7edc\u542f\u52a8\u8fd0\u884c\u5e76\u6d4b\u8bd5\u6210\u529f\u3002", 
            "title": "\u6267\u884c\u5b8c\u6574\u811a\u672c"
        }, 
        {
            "location": "/getting_started/#_3", 
            "text": "\u505c\u6b62\u7f51\u7edc\uff1a  # \u5728e2e_cli\u76ee\u5f55\u4e0b\ndocker rm -f $(docker ps -aq)  \u7136\u540e\u6267\u884c docker images \u547d\u4ee4\u67e5\u770bChaincode\u955c\u50cf\uff0c\u7c7b\u4f3c\u8f93\u51fa\u5982\u4e0b\uff1a  REPOSITORY                     TAG                  IMAGE ID            CREATED             SIZE\ndev-peer3-mycc-1.0             latest               13f6c8b042c6        5 minutes ago       176 MB\ndev-peer0-mycc-1.0             latest               e27456b2bd92        5 minutes ago       176 MB\ndev-peer2-mycc-1.0             latest               111098a7c98c        5 minutes ago       176 MB  \u5220\u9664\u8fd9\u4e9b\u955c\u50cf\uff1a  docker rmi  IMAGE ID   IMAGE ID   IMAGE ID   \u4f8b\u5982\uff1a  docker rmi -f 13f e27 111  \u6700\u540e\u5220\u9664\u914d\u7f6e\u7ed3\u679c\uff0c\u5728 crypto/orderer \u76ee\u5f55\u5220\u9664 orderer.block \u548c channel.tx \u3002", 
            "title": "\u6e05\u7406"
        }, 
        {
            "location": "/getting_started/#configtxgen", 
            "text": "configtxgen\u5de5\u5177\u751f\u6210\u4e24\u4e2a\u5185\u5bb9\uff1a    Orderer\u7684 bootstrap block \u548cFabric\u7684 channel configuration transaction \u3002  orderer block\u662fordering\u670d\u52a1\u7684\u521b\u4e16\u533a\u5757\uff1bchannel transaction\u6587\u4ef6\u5728create channel\u65f6\u4f1a\u88ab\u5e7f\u64ad\u7ed9orderer\u3002  configtx.yaml \u5305\u542b\u7f51\u7edc\u7684\u5b9a\u4e49\uff0c\u5e76\u7ed9\u51fa\u4e86\u7f51\u7edc\u7ec4\u4ef6\u7684\u62d3\u6251\u7ed3\u6784 2\u4e2a\u6210\u5458\uff08Org0\u548cOrg1\uff09\u5206\u522b\u7ba1\u7406\u7ef4\u62a42\u4e2apeer\u3002\u8fd8\u6307\u51fa\u6bcf\u4e2a\u7f51\u7edc\u5b9e\u4f53\u7684\u52a0\u5bc6\u6750\u6599\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002 crypto \u76ee\u5f55\u5305\u542b\u6bcf\u4e2a\u5b9e\u4f53\u7684admin\u8bc1\u4e66\u3001ca\u8bc1\u4e66\u3001\u7b7e\u540d\u8bc1\u4e66\u548c\u79c1\u94a5\u3002  \u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u811a\u672c generateCfgTrx.sh \uff0c\u8be5\u811a\u672c\u6574\u5408\u4e86 configtxgen \u7684\u6267\u884c\u8fc7\u7a0b\uff0c\u6267\u884c\u540e\u4f1a\u751f\u6210\u4e24\u4e2a\u914d\u7f6e\u7ed3\u679c\uff1a orderer.block \u548c channel.tx \u3002\u5982\u679c\u4f60\u8fd0\u884c\u8fc7\u4e0a\u8fb9\u7684 network_setup.sh \u5219\u8fd9\u4e24\u4e2a\u914d\u7f6e\u7ed3\u679c\u5df2\u751f\u6210\uff0c\u8981\u5148\u5230 crypto/orderer \u76ee\u5f55\u5c06\u4e4b\u5220\u9664\u3002", 
            "title": "configtxgen"
        }, 
        {
            "location": "/getting_started/#generatecfgtrxsh", 
            "text": "\u5728 e2e_cli \u76ee\u5f55\u4e0b\uff1a  cd $GOPATH/src/github.com/hyperledger/fabric/examples/e2e_cli  generateCfgTrx.sh \u811a\u672c\u6709\u4e2a\u53ef\u9009\u53c2\u6570 channel-ID \uff0c\u5982\u679c\u4e0d\u8bbe\u6b64\u53c2\u6570\uff0c\u5219\u9ed8\u8ba4\u4e3a mychannel \u3002  # \u5982\u4e0a\u6240\u8ff0\uff0c channel-ID  \u53c2\u6570\u662f\u53ef\u9009\u7684\n./generateCfgTrx.sh  channel-ID   \u6267\u884c\u6210\u529f\u540e\u8f93\u51fa\uff1a  2017/02/28 17:01:52 Generating new channel configtx\n2017/02/28 17:01:52 Creating no-op MSP instance\n2017/02/28 17:01:52 Obtaining default signing identity\n2017/02/28 17:01:52 Creating no-op signing identity instance\n2017/02/28 17:01:52 Serializing identity\n2017/02/28 17:01:52 signing message\n2017/02/28 17:01:52 signing message\n2017/02/28 17:01:52 Writing new channel tx  \u751f\u6210\u7684 orderer.block \u548c channel.tx \u4e24\u4e2a\u6587\u4ef6\u5b58\u653e\u5728 crypto/orderer \u76ee\u5f55\u3002  orderer.block \u662fordering\u670d\u52a1\u7684\u521b\u4e16\u533a\u5757\uff0c channel.tx \u5305\u542b\u65b0channel\u7684\u914d\u7f6e\u4fe1\u606f\u3002\u5982\u524d\u6240\u8ff0\uff0c\u8fd9\u4fe9\u6587\u4ef6\u90fd\u6765\u81ea configtx.yaml \u53ca\u5176\u6240\u5305\u542b\u7684\u52a0\u5bc6\u6750\u6599\u548c\u7f51\u7edc\u4fe1\u606f\u7684\u6570\u636e\u3002  \u6ce8\u610f\uff1a \u4e5f\u53ef\u624b\u52a8\u6267\u884c\u811a\u672c generateCfgTrx.sh \u91cc\u7684\u547d\u4ee4\u3002\u5982\u679c\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5219\u5fc5\u987b\u5148\u7528 e2e_cli \u76ee\u5f55\u4e0b\u7684 configtx.yaml \u66ff\u6362Fabric sampleconfig\u76ee\u5f55\u4e0b\u9ed8\u8ba4\u7684 configtx.yaml \uff0c\u7136\u540e\u8fd4\u56defabric\u76ee\u5f55\u6267\u884c\u8fd9\u4e9b\u547d\u4ee4\uff0c\u524d\u63d0\u662f\u5220\u9664\u4e4b\u524d generateCfgTrx.sh \u751f\u6210\u7684\u4e24\u4e2a\u6587\u4ef6\u3002", 
            "title": "\u6267\u884cgenerateCfgTrx.sh\u811a\u672c"
        }, 
        {
            "location": "/getting_started/#_4", 
            "text": "\u4f7f\u7528docker-compose\u542f\u52a8\u7f51\u7edc\uff0c\u5982\u679c\u6ca1\u6709\u62c9\u53d6Fabric\u955c\u50cf\uff0c\u5219\u8fd4\u56de\u4e4b\u524d\u7684\u64cd\u4f5c\u53bb\u62c9\u53d6\u955c\u50cf\u3002  \u811a\u672c script.sh \u5d4c\u5165\u5230docker-compose\u6587\u4ef6\u91cc\uff0c\u8be5\u811a\u672c\u5c06peer\u52a0\u5165\u5230channel\u5e76\u5411peer\u53d1\u9001read/write\u8bf7\u6c42\uff0c\u5982\u6b64\u4fbf\u53ef\u81ea\u52a8\u6267\u884c\u4ea4\u6613\u6d41\u7a0b\u3002\u5982\u679c\u4e0d\u60f3\u4f7f\u7528\u8fd9\u4e2a\u811a\u672c\u81ea\u52a8\u6267\u884c\u4ea4\u6613\uff0c\u53ef\u4ee5\u8df3\u5230\u4e0b\u9762\u201c\u624b\u52a8\u6267\u884c\u4ea4\u6613\u201d\u4e00\u8282\u3002  \u5728 e2e_cli \u76ee\u5f55\u4e0b\u4f7f\u7528docker-compose\u751f\u6210\u7f51\u7edc\u5b9e\u4f53\u5e76\u6267\u884c\u5d4c\u5165\u7684\u811a\u672c\uff1a  CHANNEL_NAME= channel-id  docker-compose up -d  \u5982\u679c\u4e4b\u524d\u521b\u5efa\u4e86\u4e00\u4e2achannel\u540d\uff0c\u5c31\u5fc5\u987b\u5c06\u5176\u4f5c\u4e3a\u53c2\u6570\uff0c\u5426\u5219\u4f7f\u7528\u9ed8\u8ba4\u7684 mychannel \u3002\u4f8b\u5982\uff1a  CHANNEL_NAME=mychannel docker-compose up -d  \u7b49\u5f85\u4e00\u4f1a\u513f\uff0c\u56e0\u4e3a\u80cc\u540e\u6709\u4ea4\u6613\u4f1a\u53d1\u9001\u5230peer\u3002\u6267\u884c docker ps \u67e5\u770b\u8fd0\u884c\u72b6\u6001\u7684container\uff0c\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u5185\u5bb9\uff1a  vagrant@hyperledger-devenv:v0.3.0-4eec836:/opt/gopath/src/github.com/hyperledger/fabric/examples/e2e_cli$ docker ps\nCONTAINER ID        IMAGE                        COMMAND                  CREATED              STATUS              PORTS                                              NAMES\n45e3e114f7a2        dev-peer3-mycc-1.0           \"chaincode -peer.a...\"   4 seconds ago        Up 4 seconds                                                           dev-peer3-mycc-1.0\n5970f740ad2b        dev-peer0-mycc-1.0           \"chaincode -peer.a...\"   24 seconds ago       Up 23 seconds                                                          dev-peer0-mycc-1.0\nb84808d66e99        dev-peer2-mycc-1.0           \"chaincode -peer.a...\"   48 seconds ago       Up 47 seconds                                                          dev-peer2-mycc-1.0\n16d7d94c8773        hyperledger/fabric-peer      \"peer node start -...\"   About a minute ago   Up About a minute   0.0.0.0:10051- 7051/tcp, 0.0.0.0:10053- 7053/tcp   peer3\n3561a99e35e6        hyperledger/fabric-peer      \"peer node start -...\"   About a minute ago   Up About a minute   0.0.0.0:9051- 7051/tcp, 0.0.0.0:9053- 7053/tcp     peer2\n0baad3047d92        hyperledger/fabric-peer      \"peer node start -...\"   About a minute ago   Up About a minute   0.0.0.0:8051- 7051/tcp, 0.0.0.0:8053- 7053/tcp     peer1\n1216896b7b4f        hyperledger/fabric-peer      \"peer node start -...\"   About a minute ago   Up About a minute   0.0.0.0:7051- 7051/tcp, 0.0.0.0:7053- 7053/tcp     peer0\n155ff8747b4d        hyperledger/fabric-orderer   \"orderer\"                About a minute ago   Up About a minute   0.0.0.0:7050- 7050/tcp                             orderer", 
            "title": "\u542f\u52a8\u7f51\u7edc"
        }, 
        {
            "location": "/getting_started/#_5", 
            "text": "\u5728CLI\u5bb9\u5668\u4e2d\u6267\u884c\u4e86\u811a\u672c script.sh \u3002\u8be5\u811a\u672c\u7528\u9ed8\u8ba4\u7684 mychannel \u6267\u884c createChannel \u547d\u4ee4\uff0c\u8fd9\u4e2a\u547d\u4ee4\u7528\u5230\u4e86\u4e4b\u524d configtxgen \u5de5\u5177\u751f\u6210\u7684 channel.tx \u3002  createChannel \u6267\u884c\u540e\u4f1a\u751f\u6210\u4e00\u4e2a\u521b\u4e16\u533a\u5757 mychannel.block \u5e76\u4fdd\u5b58\u5230\u5f53\u524d\u76ee\u5f55\u3002  \u5bf94\u4e2apeer\u5206\u522b\u6267\u884c joinChannel \u547d\u4ee4\uff0c\u901a\u8fc7\u521d\u59cb\u533a\u5757 mychannel.block \u52a0\u5165channel\u3002\u81f3\u6b64\uff0c\u6709\u4e00\u4e2achannel\u5305\u542b4\u4e2apeer\u548c2\u4e2aorganization\u3002  PEER0 \u548c PEER1 \u5c5e\u4e8eOrg0\uff0c PEER2 \u548c PEER3 \u5c5e\u4e8eOrg1\u3002\u8fd9\u4e9b\u5173\u7cfb\u7684\u5b9a\u4e49\u90fd\u5728 configtx.yaml \u4e2d  Chaincode  chaincode_example02 \u88abinstall\u5230 PEER0 \u548c PEER2  \u7136\u540eChaincode\u5728 PEER2 \u4e0ainstantiate\u3002\u5b9e\u4f8b\u5316\u662f\u6307\u542f\u52a8\u5bb9\u5668\u548c\u521d\u59cb\u5316\u4e0eChaincode\u76f8\u5173\u7684\u952e\u503c\u5bf9\uff0c\u672c\u4f8b\u4e2d\u7684\u521d\u59cb\u503c\u662f [\u201ca\u201d,\u201d100\u201d \u201cb\u201d,\u201d200\u201d] \u3002\u5b9e\u4f8b\u5316\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u540d\u4e3a dev-peer2-mycc-1.0 \u7684\u5bb9\u5668\u542f\u52a8\uff0c\u6ce8\u610f\uff0c\u8fd9\u4e2a\u5bb9\u5668\u4ec5\u662f\u9488\u5bf9 PEER2 \u3002 \uff08\u8bd1\u6ce8\uff1a\u5c24\u5176\u6ce8\u610f\u8fd9\u91cc\u4ec5\u4ec5\u662f\u542f\u52a8\u4e86\u4e00\u4e2acontainer\uff09  \u5b9e\u4f8b\u5316\u65f6\u8fd8\u4f1a\u5e26\u6709\u80cc\u4e66\u7b56\u7565\u53c2\u6570\uff0c\u672c\u4f8b\u4e2d\u80cc\u4e66\u7b56\u7565\u4e3a`-P  OR ( Org0MSP.member , Org1MSP.member ) \uff0c\u610f\u601d\u662f\u4efb\u4f55\u4ea4\u6613\u5fc5\u987b\u7531\u7ed1\u5b9a\u5230Org0\u6216\u8005Org1\u7684peer\u80cc\u4e66\u3002  \u5bf9\u4e8e\u201ca\u201d\u7684query\u8bf7\u6c42\u53d1\u9001\u5230 PEER0 \u3002\u5728\u4e4b\u524dChaincode\u88abinstall\u5230 PEER0 \u4e86\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u542f\u52a8\u4e00\u4e2a\u540d\u4e3a dev-peer0-mycc-1.0 \u7684\u65b0\u5bb9\u5668\uff0c\u7136\u540e\u8fd4\u56de\u67e5\u8be2\u7ed3\u679c\u3002\u7531\u4e8e\u6ca1\u6709write\u64cd\u4f5c\u53d1\u751f\uff0c\u6240\u4ee5\u201ca\u201d\u7684\u503c\u4f9d\u7136\u662f\u201c100\u201d\u3002  \u4ece\u201ca\u201c\u8f6c\u79fb\u201d10\u201c\u7ed9\u201db\u201d\u7684invoke\u8bf7\u6c42\u53d1\u9001\u5230 PEER0  Chaincode install\u5230 PEER3  \u5bf9\u201ca\u201d\u7684query\u8bf7\u6c42\u53d1\u9001\u5230 PEER3 \u3002\u8fd9\u542f\u52a8\u4e86\u7b2c\u4e09\u4e2a\u540d\u4e3a dev-peer3-mycc-1.0 \u7684\u5bb9\u5668\uff0c\u5e76\u8fd4\u56de\u67e5\u8be2\u7ed3\u679c90\uff0c\u6b63\u786e\u7684\u53cd\u6620\u4e86\u4e4b\u524d\u7684\u4ea4\u6613\u3002", 
            "title": "\u80cc\u540e\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f"
        }, 
        {
            "location": "/getting_started/#_6", 
            "text": "Chaincode\u5fc5\u987b\u88abinstall\u5230\u4e00\u4e2apeer\u4e0a\u624d\u80fd\u6210\u529f\u7684\u5bf9\u8fd9\u4e2apeer\u7684ledger\u6267\u884cread/write\u64cd\u4f5c\u3002\u6b64\u5916\uff0c\u53ea\u6709\u5f53\u5728peer\u4e0a\u9488\u5bf9chaincode\u6267\u884cread/write\u64cd\u4f5c\u65f6\uff0c\u8fd9\u4e2apeer\u4e0a\u624d\u4f1a\u542f\u52a8\u8be5chaincode \u5bb9\u5668\u3002\uff08\u6bd4\u5982\uff0c\u67e5\u8be2\u201ca\u201d\u7684\u503c\uff09 \u4ea4\u6613\u5bfc\u81f4\u5bb9\u5668\u542f\u52a8 \u3002channel\u4e2d\u7684\u6240\u6709peer\uff08\u5305\u62ec\u90a3\u4e9b\u6ca1\u6709install chaincode\u7684peer\uff0c\u5c31\u50cf\u4e0a\u4f8b\u4e2d\u7684 PEER3 \uff09\u90fd\u4f1a\u7ef4\u62a4\u4e00\u4e2a\u51c6\u786e\u7684ledger\uff0cledger\u5305\u542b\u5b58\u50a8\u4e86\u4e0d\u53ef\u53d8\u7684\u3001\u6709\u5e8f\u7684\u4ea4\u6613\u8bb0\u5f55\u7684block\uff0c\u8fd8\u6709\u7ef4\u62a4current state\u7684statedb\u3002\u5728peer\u4e0ainstall chaincode\u4e4b\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8be5peer\u4e0a\u7684chaincode\u4e86\uff08\u5c31\u50cf\u4e0a\u4f8b\u4e2d\u7684 PEER3 \uff09\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecfinstantiate\u8fc7\u4e86  \uff08\u8bd1\u6ce8\uff1a\u5373\u540c\u4e00channel\u4e2d\u7684chaincode\u53ea\u9700\u4e00\u6b21instantiate\uff09 \u3002", 
            "title": "\u8fd9\u8868\u660e\u4e86\u4ec0\u4e48\uff1f"
        }, 
        {
            "location": "/getting_started/#_7", 
            "text": "\u67e5\u770bCLI\u5bb9\u5668\u7684log\uff1a  docker logs -f cli  \u8f93\u51fa\uff1a  2017-02-28 04:31:20.841 UTC [logging] InitFromViper -  DEBU 001 Setting default logging level to DEBUG for command 'chaincode'\n2017-02-28 04:31:20.842 UTC [msp] GetLocalMSP -  DEBU 002 Returning existing local MSP\n2017-02-28 04:31:20.842 UTC [msp] GetDefaultSigningIdentity -  DEBU 003 Obtaining default signing identity\n2017-02-28 04:31:20.843 UTC [msp] Sign -  DEBU 004 Sign: plaintext: 0A8F050A59080322096D796368616E6E...6D7963631A0A0A0571756572790A0161\n2017-02-28 04:31:20.843 UTC [msp] Sign -  DEBU 005 Sign: digest: 52F1A41B7B0B08CF3FC94D9D7E916AC4C01C54399E71BC81D551B97F5619AB54\nQuery Result: 90\n2017-02-28 04:31:30.425 UTC [main] main -  INFO 006 Exiting.....\n===================== Query on chaincode on PEER3 on channel 'mychannel' is successful =====================\n\n===================== All GOOD, End-2-End execution completed =====================  \u4f60\u4e5f\u53ef\u4ee5\u5b9e\u65f6\u67e5\u770b\u65e5\u5fd7\uff0c\u9700\u8981\u6253\u5f00\u4e24\u4e2a\u7ec8\u7aef\u3002  \u9996\u5148\uff0c\u505c\u6b62\u8fd0\u884c\u7740\u7684docker\u5bb9\u5668\uff1a  docker rm -f $(docker ps -aq)  \u5728\u7b2c\u4e00\u4e2a\u7ec8\u7aef\u542f\u52a8docker-compose\u811a\u672c\uff1a  # add the appropriate CHANNEL_NAME parm\nCHANNEL_NAME= channel-id  docker-compose up -d  \u5728\u7b2c\u4e8c\u4e2a\u7ec8\u7aef\u67e5\u770blog\uff1a  docker logs -f cli  \u8fd9\u5c06\u5b9e\u65f6\u8f93\u51fa\u901a\u8fc7 script.sh \u6267\u884c\u7684\u4ea4\u6613\u4fe1\u606f\u3002", 
            "title": "\u67e5\u770b\u4ea4\u6613"
        }, 
        {
            "location": "/getting_started/#chaincode", 
            "text": "\u5bf9\u6bcf\u4e2achaincode\u5bb9\u5668\u5355\u72ec\u67e5\u770blog\uff0c\u8f93\u51fa\uff1a  $ docker logs dev-peer2-mycc-1.0\n04:30:45.947 [BCCSP_FACTORY] DEBU : Initialize BCCSP [SW]\nex02 Init\nAval = 100, Bval = 200\n\n$ docker logs dev-peer0-mycc-1.0\n04:31:10.569 [BCCSP_FACTORY] DEBU : Initialize BCCSP [SW]\nex02 Invoke\nQuery Response:{\"Name\":\"a\",\"Amount\":\"100\"}\nex02 Invoke\nAval = 90, Bval = 210\n\n$ docker logs dev-peer3-mycc-1.0\n04:31:30.420 [BCCSP_FACTORY] DEBU : Initialize BCCSP [SW]\nex02 Invoke\nQuery Response:{\"Name\":\"a\",\"Amount\":\"90\"}", 
            "title": "\u67e5\u770bchaincode\u65e5\u5fd7"
        }, 
        {
            "location": "/getting_started/#_8", 
            "text": "\u505c\u6b62\u6240\u6709\u5bb9\u5668\uff1a  docker rm -f $(docker ps -aq)  \u7136\u540e\uff0c\u6267\u884c docker images \u547d\u4ee4\u67e5\u770bchaincode\u955c\u50cf\uff0c\u4f1a\u6709\u7c7b\u4f3c\u4ee5\u4e0b\u5185\u5bb9\uff1a  REPOSITORY                     TAG                  IMAGE ID            CREATED             SIZE\ndev-peer3-mycc-1.0             latest               13f6c8b042c6        5 minutes ago       176 MB\ndev-peer0-mycc-1.0             latest               e27456b2bd92        5 minutes ago       176 MB\ndev-peer2-mycc-1.0             latest               111098a7c98c        5 minutes ago       176 MB  \u5220\u9664\u8fd9\u4e9b\u955c\u50cf\uff1a  docker rmi  IMAGE ID   IMAGE ID   IMAGE ID   \u6bd4\u5982\uff1a  docker rmi -f 13f e27 111  \u786e\u4fdd\u4e4b\u524d\u751f\u6210\u7684\u914d\u7f6e\u5185\u5bb9\u8fd8\u5728\uff0c\u5982\u679c\u5220\u9664\u4e86\u5c31\u518d\u6267\u884c\u811a\u672c\uff1a  ./generateCfgTrx.sh  channel-ID   \u6216\u8005\u4f7f\u7528\u811a\u672c\u4e2d\u7684\u547d\u4ee4\u624b\u52a8\u751f\u6210\u3002", 
            "title": "\u624b\u52a8\u6267\u884c\u4ea4\u6613"
        }, 
        {
            "location": "/getting_started/#docker-compose", 
            "text": "\u6253\u5f00docker-compose\u6587\u4ef6\u6ce8\u91ca\u6389\u6267\u884c script.sh \u811a\u672c\u7684\u547d\u4ee4\uff0c\u5982\u4e0b\uff1a  working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer\n# command: /bin/bash -c './scripts/script.sh ${CHANNEL_NAME}'  \u4fdd\u5b58\u6587\u4ef6\uff0c\u91cd\u542f\u7f51\u7edc\uff1a  # \u5728e2e_cli\u76ee\u5f55\u4e0b\u6267\u884c\uff0c\u8bbe\u7f6e\u6b63\u786e\u7684CHANNEL_NAME\nCHANNEL_NAME= channel-id  docker-compose up -d", 
            "title": "\u4fee\u6539docker-compose\u6587\u4ef6"
        }, 
        {
            "location": "/getting_started/#_9", 
            "text": "\u53c2\u7167 script.sh \u811a\u672c\u4e2d\u7684create\u548cjoin\u547d\u4ee4\u3002\u4e0b\u9762\u7684\u547d\u4ee4\u53ea\u662f\u9488\u5bf9 PEER0 \u7684\uff0c\u5f53\u5bf9orderer\u548cpeer\u6267\u884c\u547d\u4ee4\u65f6\uff0c\u9700\u8981\u4fee\u6539\u4e0b\u9762\u7ed9\u51fa\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\u7684\u503c\u3002  # \u5bf9PEER0\u6240\u7528\u7684\u73af\u5883\u53d8\u91cf\nCORE_PEER_MSPCONFIGPATH=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/peer/peer0/localMspConfig\nCORE_PEER_ADDRESS=peer0:7051\nCORE_PEER_LOCALMSPID=\"Org0MSP\"\nCORE_PEER_TLS_ROOTCERT_FILE=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/peer/ peer0/localMspConfig/cacerts/peerOrg0.pem  \u6bcf\u4e2apeer\u7684\u73af\u5883\u53d8\u91cf\u7684\u503c\u90fd\u5728docker-compose\u6587\u4ef6\u4e2d", 
            "title": "\u547d\u4ee4\u8bed\u6cd5"
        }, 
        {
            "location": "/getting_started/#create-channel", 
            "text": "\u8fdb\u53bbcli\u5bb9\u5668\uff1a  docker exec -it cli bash  \u6267\u884c\u6210\u529f\u8f93\u51fa\uff1a  root@0d78bb69300d:/opt/gopath/src/github.com/hyperledger/fabric/peer#  \u7528 -c \u6307\u5b9achannel name\uff0c -f \u6307\u5b9achannel configuration transaction\uff08\u6b64\u4f8b\u4e2d\u662f channel.tx \uff09\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u540d\u79f0\u5b89\u88c5 configuration transaction\u3002  # channel.tx \u548c orderer.block \u5728 cli \u5bb9\u5668\u7684 crypto/orderer \u76ee\u5f55\u4e0b\npeer channel create -o orderer0:7050 -c mychannel -f crypto/orderer/channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile $GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem  \u7531\u4e8e\u6b64\u4f8b\u7684 peer channel create \u547d\u4ee4\u662f\u9488\u5bf9orderer\u7684\uff0c\u6240\u4ee5\u9700\u8981\u4fee\u6539\u4e4b\u524d\u7684\u73af\u5883\u53d8\u91cf\uff0c\u56e0\u6b64\u4e0a\u8fb9\u7684\u547d\u4ee4\u5e94\u8be5\u662f\uff1a  CORE_PEER_MSPCONFIGPATH=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig CORE_PEER_LOCALMSPID=\"OrdererMSP\" peer channel create -o orderer0:7050 -c mychannel -f crypto/orderer/channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile $GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem  \u6ce8\u610f\uff1a \u4e0b\u9762\u7684\u5176\u4ed6\u547d\u4ee4\u4f9d\u7136\u5728CLI\u5bb9\u5668\u4e2d\u6267\u884c\uff0c\u800c\u4e14\u8981\u8bb0\u4f4f\u547d\u4ee4\u91cc\u6bcf\u4e2apeer\u5bf9\u5e94\u7684\u73af\u5883\u53d8\u91cf", 
            "title": "Create channel"
        }, 
        {
            "location": "/getting_started/#join-channel", 
            "text": "\u5c06\u6307\u5b9a\u7684peer\u52a0\u5165\u5230channel\uff1a  # \u9ed8\u8ba4\u53ea\u5c06 PEER0 \u52a0\u5165\npeer channel join -b mychannel.block  \u5b8c\u6574\u7684\u547d\u4ee4\u5e94\u8be5\u662f\uff1a  CORE_PEER_MSPCONFIGPATH=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/peer/peer0/localMspConfig CORE_PEER_ADDRESS=peer0:7051 CORE_PEER_LOCALMSPID=\"Org0MSP\" CORE_PEER_TLS_ROOTCERT_FILE=$GOPATH/src/github.com/hyperledger/fabric/peer/crypto/peer/peer0/localMspConfig/cacerts/peerOrg0.pem peer channel join -b mychannel.block  \u4fee\u6539\u8fd9\u56db\u4e2a\u73af\u5883\u53d8\u91cf\u5c06\u5176\u4ed6\u7684peer\u52a0\u5165\u5230channel\u4e2d", 
            "title": "Join channel"
        }, 
        {
            "location": "/getting_started/#install-chaincode", 
            "text": "\u5c06\u793a\u4f8bchaincode\u4ee3\u7801\u5b89\u88c5\u5230\u56db\u4e2a\u5bf9\u7b49\u8282\u70b9\u4e2d\u7684\u4e00\u4e2a\uff1a  # \u5728\u547d\u4ee4\u524d\u9762\u8981\u52a0\u4e0apeer\u5bf9\u5e94\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\npeer chaincode install -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02", 
            "title": "Install chaincode"
        }, 
        {
            "location": "/getting_started/#instantiate-chaincode", 
            "text": "\u5728\u4e00\u4e2apeer\u4e0a\u5b9e\u4f8b\u5316chaincode\uff0c\u8fd9\u5c06\u5bf9\u8be5peer\u542f\u52a8\u4e00\u4e2achaincode\u5bb9\u5668\uff0c\u5e76\u4e3a\u8be5chaincode\u8bbe\u7f6e\u80cc\u4e66\u7b56\u7565\u3002\u6b64\u4f8b\u4e2d\u5b9a\u4e49\u7684\u7b56\u7565\u662f\u6709 Org0 \u6216 Org1 \u4e2d\u7684\u4e00\u4e2apeer\u80cc\u4e66\u5373\u53ef\u3002\u547d\u4ee4\u5982\u4e0b\uff1a  # \u5728\u547d\u4ee4\u524d\u9762\u8981\u52a0\u4e0apeer\u5bf9\u5e94\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\n# \u7528 -C \u53c2\u6570\u8bbe\u7f6e\u6b63\u786e\u7684channel\u540d\uff0c\u9ed8\u8ba4\u662f mychannel\npeer chaincode instantiate -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile $GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -c '{\"Args\":[\"init\",\"a\", \"100\", \"b\",\"200\"]}' -P \"OR ('Org0MSP.member','Org1MSP.member')\"", 
            "title": "Instantiate chaincode"
        }, 
        {
            "location": "/getting_started/#invoke-chaincode", 
            "text": "# \u5728\u547d\u4ee4\u524d\u9762\u8981\u52a0\u4e0apeer\u5bf9\u5e94\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\npeer chaincode invoke -o orderer0:7050  --tls $CORE_PEER_TLS_ENABLED --cafile $GOPATH/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem  -C mychannel -n mycc -c '{\"Args\":[\"invoke\",\"a\",\"b\",\"10\"]}'", 
            "title": "Invoke chaincode"
        }, 
        {
            "location": "/getting_started/#query-chaincode", 
            "text": "# \u5728\u547d\u4ee4\u524d\u9762\u8981\u52a0\u4e0apeer\u5bf9\u5e94\u7684\u56db\u4e2a\u73af\u5883\u53d8\u91cf\npeer chaincode query -C mychannel -n mycc -c '{\"Args\":[\"query\",\"a\"]}'  \u6267\u884c\u7ed3\u679c\uff1a  Query Result: 90", 
            "title": "Query chaincode"
        }, 
        {
            "location": "/getting_started/#_10", 
            "text": "\u6784\u5efapeer\u548corderer\u955c\u50cf\uff1a  # \u5728fabric\u76ee\u5f55\u4e0b\u6267\u884c\uff0c\u5982\u679c\u4e0d\u80fd\u987a\u5229\u751f\u6210\u955c\u50cf\uff0c\u5219\u4f7f\u7528vagrant\u73af\u5883\nmake peer-docker orderer-docker  \u6267\u884c docker images \u547d\u4ee4\u8f93\u51fa\uff1a  vagrant@hyperledger-devenv:v0.3.0-4eec836:/opt/gopath/src/github.com/hyperledger/fabric$ docker images\nREPOSITORY                     TAG                             IMAGE ID            CREATED             SIZE\nhyperledger/fabric-orderer     latest                          264e45897bfb        10 minutes ago      180 MB\nhyperledger/fabric-orderer     x86_64-0.7.0-snapshot-a0d032b   264e45897bfb        10 minutes ago      180 MB\nhyperledger/fabric-peer        latest                          b3d44cff07c6        10 minutes ago      184 MB\nhyperledger/fabric-peer        x86_64-0.7.0-snapshot-a0d032b   b3d44cff07c6        10 minutes ago      184 MB\nhyperledger/fabric-javaenv     latest                          6e2a2adb998a        10 minutes ago      1.42 GB\nhyperledger/fabric-javaenv     x86_64-0.7.0-snapshot-a0d032b   6e2a2adb998a        10 minutes ago      1.42 GB\nhyperledger/fabric-ccenv       latest                          0ce0e7dc043f        12 minutes ago      1.29 GB\nhyperledger/fabric-ccenv       x86_64-0.7.0-snapshot-a0d032b   0ce0e7dc043f        12 minutes ago      1.29 GB\nhyperledger/fabric-baseimage   x86_64-0.3.0                    f4751a503f02        4 weeks ago         1.27 GB\nhyperledger/fabric-baseos      x86_64-0.3.0                    c3a4cf3b3350        4 weeks ago         161 MB", 
            "title": "\u624b\u52a8\u6784\u5efa\u955c\u50cf"
        }, 
        {
            "location": "/getting_started/#_11", 
            "text": "\u8fdb\u53bbvagrant\u73af\u5883\uff1a  cd $GOPATH/src/github.com/hyperledger/fabric/devenv\n\n# \u7b2c\u4e00\u6b21\u542f\u52a8VM\u7528 vagrant up \nvagrant ssh  \u5728fabric\u76ee\u5f55\u4e0b\u7f16\u8bd1peer\u548corderer\uff1a  make clean\nmake native  \u751f\u6210 ccenv \u955c\u50cf\uff1a  make peer-docker  \u7136\u540e\u6253\u5f00\u4e24\u4e2a\u7ec8\u7aef\u90fd\u8fdb\u5165vagrant\uff0c\u81f3\u6b64\u6709\u4e09\u4e2a\u7ec8\u7aef\u90fd\u5728vagrant\u91cc\u3002  \u524d\u9996\u5148\u6e05\u7a7aledger\u6587\u4ef6\u5939 /var/hyperledger/ \uff08\u6bcf\u6b21\u8fd0\u884c\u540e\uff0c\u4e3a\u907f\u514d\u9519\u8bef\u6216\u91cd\u590d\uff0c\u90fd\u8981\u6e05\u7a7a\uff09:  rm -rf /var/hyperledger/*", 
            "title": "\u4f7f\u7528\u672c\u5730\u4e8c\u8fdb\u5236\u6587\u4ef6"
        }, 
        {
            "location": "/getting_started/#1", 
            "text": "\u4f7f\u7528 configtxgen \u5de5\u5177\u521b\u5efaorderer\u521b\u4e16\u533a\u5757\uff1a  configtxgen -profile SampleSingleMSPSolo -outputBlock orderer.block", 
            "title": "\u7ec8\u7aef1"
        }, 
        {
            "location": "/getting_started/#2", 
            "text": "\u7528\u521a\u751f\u6210\u7684\u521b\u4e16\u533a\u5757\u542f\u52a8orderer\uff1a  ORDERER_GENERAL_GENESISMETHOD=file ORDERER_GENERAL_GENESISFILE=./orderer.block orderer", 
            "title": "\u7ec8\u7aef2"
        }, 
        {
            "location": "/getting_started/#1_1", 
            "text": "\u521b\u5efa channel configuration transaction\uff1a  configtxgen -profile SampleSingleMSPSolo -outputCreateChannelTx channel.tx -channelID  channel-ID   \u6267\u884c\u6210\u529f\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u751f\u6210 channel.tx", 
            "title": "\u7ec8\u7aef1"
        }, 
        {
            "location": "/getting_started/#3", 
            "text": "\u4ee5 chainless \u6a21\u5f0f\u542f\u52a8peer\uff1a  peer node start --peer-defaultchain=false", 
            "title": "\u7ec8\u7aef3"
        }, 
        {
            "location": "/getting_started/#create-channel_1", 
            "text": "\u4ee5 channel.tx \u4e3a\u53c2\u6570\u521b\u5efachannel\uff1a  peer channel create -o 127.0.0.1:7050 -c mychannel -f channel.tx  \u6267\u884c\u540e\u5728\u5f53\u524d\u76ee\u5f55\u751f\u6210\u4e00\u4e2achannel\u7684\u521b\u4e16\u533a\u5757 mychannel.block", 
            "title": "Create channel"
        }, 
        {
            "location": "/getting_started/#join-channel_1", 
            "text": "\u901a\u8fc7channel\u7684\u521b\u4e16\u533a\u5757 mychannel.block \u52a0\u5165channel\uff1a  peer channel join -b mychannel.block", 
            "title": "Join channel"
        }, 
        {
            "location": "/getting_started/#install-chaincode_1", 
            "text": "\u5728peer\u4e0a\u5b89\u88c5chaincode\uff1a  peer chaincode install -o 127.0.0.1:7050 -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02  \u6267\u884c\u6210\u529f\u540e\u67e5\u770b\u6587\u4ef6\u53ef\u4ee5\u770b\u5230 mycc.1.0 :  ls /var/hyperledger/production/chaincodes", 
            "title": "Install chaincode"
        }, 
        {
            "location": "/getting_started/#instantiate-chaincode_1", 
            "text": "\u5b9e\u4f8b\u5316chaincode\uff1a  peer chaincode instantiate -o 127.0.0.1:7050 -C mychannel -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -c '{\"Args\":[\"init\",\"a\", \"100\", \"b\",\"200\"]}'  docker ps \u67e5\u770b\u8fd0\u884c\u4e2d\u7684\u5bb9\u5668\uff0c\u5982\u679cchaincode\u542f\u52a8\u6210\u529f\uff0c\u5219\u663e\u793a\uff1a  CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\nbd9c6bda7560        dev-jdoe-mycc-1.0   \"chaincode -peer.a...\"   5 seconds ago       Up 5 seconds                            dev-jdoe-mycc-1.0", 
            "title": "Instantiate chaincode"
        }, 
        {
            "location": "/getting_started/#invoke-chaincode_1", 
            "text": "\u8c03\u7528chaincode\u4ece\u201ca\u201d\u8f6c\u79fb\u201c10\u201d\u7ed9\u201cb\u201c\uff1a  peer chaincode invoke -o 127.0.0.1:7050 -C mychannel -n mycc -c '{\"Args\":[\"invoke\",\"a\",\"b\",\"10\"]}'", 
            "title": "Invoke chaincode"
        }, 
        {
            "location": "/getting_started/#query-chaincode_1", 
            "text": "\u67e5\u8be2\u201da\u201c\u7684\u503c\uff1a  # \u8fd4\u56de\u503c\u5e94\u662f 90\npeer chaincode query -o 127.0.0.1:7050 -C mychannel -n mycc -c '{\"Args\":[\"query\",\"a\"]}'  \u8fd0\u884c\u5b8c\u6210\u540e\u4e0d\u8981\u5fd8\u8bb0\u6e05\u7a7aledger\u6587\u4ef6\u5939 /var/hyperledger/ \uff1a  rm -rf /var/hyperledger/*", 
            "title": "Query chaincode"
        }, 
        {
            "location": "/getting_started/#couchdb", 
            "text": "\u53ef\u4ee5\u5c06stateDB\u9ed8\u8ba4\u7684goleveldb\u66ff\u6362\u6210CouchDB\u3002\u5bf9\u4e8eCouchDB\uff0cchaincode\u5404\u529f\u80fd\u4f9d\u7136\u53ef\u7528\uff0c\u4f46\u5c06chaincode\u6570\u636e\u4ee5JSON\u65b9\u5f0f\u5b58\u50a8\u7684\u8bdd\u5c31\u53ef\u4f7f\u7528CouchDB\u7684\u590d\u6742\u67e5\u8be2\u7684\u529f\u80fd\u3002  \u4e3a\u4e86\u4f7f\u7528CouchDB\uff0c\u9664\u4e86\u6700\u524d\u9762\u7684\u201d\u524d\u63d0\u201c\u4e00\u8282\u7684\u64cd\u4f5c\u5916\uff0c\u8fd8\u9700\u8981\u4e0b\u8fb9\u4e24\u6b65\u542f\u52a8CouchDB\u5bb9\u5668\u5e76\u5c06\u4e4b\u4e0epeer\u5bb9\u5668\u5173\u8054\uff1a    \u6784\u5efaCouchDB\u955c\u50cf\uff1a  # make sure you are in the fabric directory\nmake couchdb    \u7f16\u8f91 fabric/examples/e2e_cli/docker-compose.yaml \u548c docker-compose.yam \uff0c\u5c06\u6240\u6709\u4e0eCouchDB\u6709\u5173\u7684\u5185\u5bb9\u53d6\u6d88\u6ce8\u91ca\u3002\u8fd9\u6837 chaincode_example02 \u5c31\u53ef\u4ee5\u624dCouchDB\u4e0b\u8fd0\u884c\u4e86\u3002    \u6ce8\u610f\uff1a \u5982\u679c\u5c06CouchDB\u5bb9\u5668\u7684\u7aef\u53e3\u6620\u5c04\u7684\u4e3b\u673a\uff0c\u8bf7\u4e00\u5b9a\u8981\u6ce8\u610f\u5b89\u5168\u3002\u5728\u5f00\u53d1\u73af\u5883\u4e2d\u5c06\u7aef\u53e3\u6620\u5c04\u51fa\u6765\u53ef\u4ee5\u901a\u8fc7CouchDB\u7684web\u754c\u9762\u53ef\u89c6\u5316\u64cd\u4f5c\u6570\u636e\u3002\u751f\u4ea7\u73af\u5883\u4e2d\u4e00\u822c\u4e0d\u4f1a\u505a\u7aef\u53e3\u6620\u5c04\uff0c\u4ee5\u9650\u5236CouchDB\u7684\u5916\u90e8\u8bbf\u95ee\u3002  \u53ef\u4ee5\u7528 chaincode_example02 \u5728CouchDB\u4e0b\u6267\u884c\u4e0a\u8fb9\u7684chaincode\u64cd\u4f5c\uff0c\u4f46\u662f\u4e3a\u4e86\u4f7f\u7528CouchDB\u7684\u590d\u6742\u67e5\u8be2\u529f\u80fd\uff0cchaincode\u6570\u636e\u4e00\u5b9a\u8981\u4ee5JSON\u683c\u5f0f\u5b58\u50a8\uff08\u4f8b\u5982 fabric/examples/chaincode/go/marbles02 \uff09\u3002  \u4f7f\u7528 \u624b\u52a8\u6267\u884c\u4ea4\u6613 \u8fd9\u4e00\u8282\u4e2d\u7684\u6b65\u9aa4install\u3001instantiate\u3001invoke\u548cquery  marbles02 \uff0c\u6267\u884c\u5b8c Join channel \u8fd9\u6b65\u540e\u4f7f\u7528\u4e0b\u8fb9\u7684\u547d\u4ee4\u64cd\u4f5c marbles02 \uff1a    \u5728 PEER0 \u4e0a\u5b89\u88c5\u5e76\u5b9e\u4f8b\u5316chaincode  peer chaincode install -o orderer0:7050 -n marbles -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/marbles02\npeer chaincode instantiate -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/marbles02 -c '{\"Args\":[\"init\"]}' -P \"OR ('Org0MSP.member','Org1MSP.member')\"    \u521b\u5efa\u4e00\u4e9bmarble\u5e76\u79fb\u52a8\u5b83\u4eec  peer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"initMarble\",\"marble1\",\"blue\",\"35\",\"tom\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"initMarble\",\"marble2\",\"red\",\"50\",\"tom\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"initMarble\",\"marble3\",\"blue\",\"70\",\"tom\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"transferMarble\",\"marble2\",\"jerry\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"transferMarblesBasedOnColor\",\"blue\",\"jerry\"]}'\npeer chaincode invoke -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/orderer/localMspConfig/cacerts/ordererOrg0.pem -C mychannel -n marbles -c '{\"Args\":[\"delete\",\"marble1\"]}'    \u5982\u679c\u505a\u4e86CouchDB\u5bb9\u5668\u7684\u7aef\u53e3\u6620\u5c04\uff0c\u53ef\u4ee5\u901a\u8fc7web\u754c\u9762\u67e5\u770b\u6570\u636e\uff0c\u53ef\u4ee5\u770b\u5230\u540d\u4e3a mychannel \u7684\u6570\u636e\u5e93\u53ca\u5176\u6587\u6863    \u5982\u679c\u4f7f\u7528\u7684\u662fvagrant\u73af\u5883  http://localhost:15984/_utils\n* \u5982\u679c\u4e0d\u662fvagrant\u73af\u5883\uff0c\u4f7f\u7528CouchDB\u5bb9\u5668\u6307\u5b9a\u7684\u7aef\u53e3\n\nhttp://localhost:5984/_utils   \u53ef\u6709\u89c4\u5f8b\u7684\u67e5\u8be2chaincode\uff08\u4f8b\u5982\uff0c\u8bfb\u53d6 marble2 \uff09   peer chaincode query -C mychannel -n marbles -c  { Args :[ readMarble , marble2 ]}    \u53ef\u4ee5\u770b\u5230 marble2 \u7684\u8be6\u7ec6\u4fe1\u606f\uff1a  Query Result: {\"color\":\"red\",\"docType\":\"marble\",\"name\":\"marble2\",\"owner\":\"jerry\",\"size\":50}  \u83b7\u53d6 marble1 \u7684\u5386\u53f2\uff1a  peer chaincode query -C mychannel -n marbles -c '{\"Args\":[\"getHistoryForMarble\",\"marble1\"]}'  \u53ef\u4ee5\u770b\u5230\u64cd\u4f5c\u8fc7 marble1 \u7684\u4ea4\u6613\uff1a  Query Result: [{\"TxId\":\"1c3d3caf124c89f91a4c0f353723ac736c58155325f02890adebaa15e16e6464\", \"Value\":{\"docType\":\"marble\",\"name\":\"marble1\",\"color\":\"blue\",\"size\":35,\"owner\":\"tom\"}},{\"TxId\":\"755d55c281889eaeebf405586f9e25d71d36eb3d35420af833a20a2f53a3eefd\", \"Value\":{\"docType\":\"marble\",\"name\":\"marble1\",\"color\":\"blue\",\"size\":35,\"owner\":\"jerry\"}},{\"TxId\":\"819451032d813dde6247f85e56a89262555e04f14788ee33e28b232eef36d98f\", \"Value\":}]  \u8fd8\u53ef\u4ee5\u6267\u884c\u590d\u6742\u67e5\u8be2\uff0c\u6bd4\u5982\u67e5\u8be2 jerry \u6240\u62e5\u6709\u7684marble\uff1a  peer chaincode query -C mychannel -n marbles -c '{\"Args\":[\"queryMarblesByOwner\",\"jerry\"]}'  \u67e5\u8be2\u7ed3\u679c\u4e3a jerry \u6240\u62e5\u6709\u76842\u4e2amarble\u7684\u4fe1\u606f\uff1a  Query Result: [{\"Key\":\"marble2\", \"Record\":{\"color\":\"red\",\"docType\":\"marble\",\"name\":\"marble2\",\"owner\":\"jerry\",\"size\":50}},{\"Key\":\"marble3\", \"Record\":{\"color\":\"blue\",\"docType\":\"marble\",\"name\":\"marble3\",\"owner\":\"jerry\",\"size\":70}}]  \u901a\u8fc7 owner \u5b57\u6bb5\u7b49\u4e8e jerry \u67e5\u8be2\uff1a  peer chaincode query -C mychannel -n marbles -c '{\"Args\":[\"queryMarbles\",\"{\\\"selector\\\":{\\\"owner\\\":\\\"jerry\\\"}}\"]}'  \u67e5\u8be2\u7ed3\u679c\u5982\u4e0b\uff1a  Query Result: [{\"Key\":\"marble2\", \"Record\":{\"color\":\"red\",\"docType\":\"marble\",\"name\":\"marble2\",\"owner\":\"jerry\",\"size\":50}},{\"Key\":\"marble3\", \"Record\":{\"color\":\"blue\",\"docType\":\"marble\",\"name\":\"marble3\",\"owner\":\"jerry\",\"size\":70}}]", 
            "title": "\u4f7f\u7528CouchDB"
        }, 
        {
            "location": "/getting_started/#_12", 
            "text": "\u5982\u679c\u9700\u8981\u5bf9peer\u6216CouchDB\u5bb9\u5668\u7684\u6570\u636e\u6301\u4e45\u5316\uff0c\u4e00\u79cd\u9009\u62e9\u662f\u5c06\u5bb9\u5668\u7684\u76f8\u5173\u76ee\u5f55\u6302\u5728\u5230docker\u4e3b\u673a\u3002\u4f8b\u5982\uff0c\u5c06\u4e0b\u9762\u4e24\u884c\u5185\u5bb9\u653e\u5230 docker-compose.yaml \u6587\u4ef6\u4e2d\u7684\u5bf9\u5e94peer\u5904\uff1a  volumes:\n - /var/hyperledger/peer0:/var/hyperledger/production  \u5c06\u4e0b\u9762\u4e24\u884c\u653e\u5230\u5bf9\u5e94\u7684CouchDB\u5904\uff1a  volumes:\n- /var/hyperledger/couchdb0:/opt/couchdb/data", 
            "title": "\u6570\u636e\u6301\u4e45\u5316"
        }, 
        {
            "location": "/getting_started/#_13", 
            "text": "\u6bcf\u6b21\u8fd0\u884c\u540e\u8981\u6e05\u7406\u6587\u4ef6   \u5982\u679c\u51fa\u73b0docker\u9519\u8bef\uff0c\u5219\u5220\u9664\u955c\u50cf\uff0c\u4ece\u5934\u518d\u64cd\u4f5c\u4e00\u904d  make clean\nmake peer-docker orderer-docker    \u5982\u679c\u51fa\u73b0\u4e0b\u9762\u7684\u9519\u8bef  Error: Error endorsing chaincode: rpc error: code = 2 desc = Error installing chaincode code mycc:1.0(chaincode /var/hyperledger/production/chaincodes/mycc.1.0 exits)  chaincode\u955c\u50cf\uff08\u5982 dev-peer0-mycc-1.0 \u6216 dev-peer1-mycc-1.0 \uff09\u53ef\u80fd\u662f\u4ee5\u524d\u8fd0\u884c\u8fc7\u7684\u3002\u5220\u9664\u5b83\u4eec\u7136\u540e\u91cd\u8bd5\u3002  docker rmi -f $(docker images | grep peer[0-9]-peer[0-9] | awk '{print $3}')    \u4f7f\u7528 down \u9009\u9879\u6e05\u7406\u7f51\u7edc  ./network_setup.sh down\nNext  Previous", 
            "title": "\u6545\u969c\u6392\u51fa"
        }, 
        {
            "location": "/protocol-spec_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\n\n\n\n\n\n\n\n\n\n\n\u8be6\u7ec6\u5185\u5bb9\u8bf7\u770b\n\u8fd9\u91cc", 
            "title": "\u534f\u8bae\u89c4\u8303"
        }, 
        {
            "location": "/build_network_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nZhangjiong Xuan\n\n\n\n\n\n\n\n\n\n\nNote:\nThese instructions have been verified to work against the version \u201c1.0.0-rc1\u201d tagged Docker images and the pre-compiled setup utilities within the supplied tar file. If you run these commands with images or tools from the current master branch, it is possible that you will see configuration and panic errors.\n\n\n\u6ce8\u610f\uff1a\n\u8fd9\u4e9b\u8bf4\u660e\u5df2\u7ecf\u88ab\u9a8c\u8bc1\uff0c\u9002\u7528\u4e8e\u88ab\u6807\u8bb0\u201c1.0.0-rc1\u201d\u7684Docker\u955c\u50cf\u548c\u63d0\u4f9btar\u6587\u4ef6\u4e2d\u7684\u9884\u7f16\u8bd1\u7684\u5b9e\u7528\u7a0b\u5e8f\u3002\u5982\u679c\u4f60\u5728\u5f53\u524d\u7684\u4e3b\u5206\u652f\u4e0b\u4f7f\u7528\u4e0b\u5217\u547d\u4ee4\u4ee5\u53ca\u955c\u50cf\u6216\u8005\u5de5\u5177\uff0c\u4f60\u53ef\u80fd\u4f1a\u770b\u5230\u4e00\u4e9b\u914d\u7f6e\u548cpanic\u9519\u8bef\u3002\n\n\nThe build your first network (BYFN) scenario provisions a sample Hyperledger Fabric network consisting of two organizations, each maintaining two peer nodes, and a \u201csolo\u201d ordering service.\n\n\n\u6784\u5efa\u4f60\u7684\u7b2c\u4e00\u4e2a\u7f51\u7edc\uff08BYFN\uff09\u573a\u666f\u63d0\u4f9b\u4e86\u7531\u4e24\u4e2a\u7ec4\u7ec7\u7ec4\u6210\u7684\u793a\u4f8bHyperledger Fabric\u7f51\u7edc\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u6301\u67092\u4e2apeer\u8282\u70b9\uff0c\u4ee5\u53ca\u4e00\u4e2a\u201csolo\u201d\u6392\u5e8f\u670d\u52a1\u3002\n\n\n1.1. \u5b89\u88c5\u9884\u7f6e\u73af\u5883\n\n\nBefore we begin, if you haven\u2019t already done so, you may wish to check that you have all the Prerequisites installed on the platform(s) on which you\u2019ll be developing blockchain applications and/or operating Hyperledger Fabric.\n\n\n\u5728\u6211\u4eec\u5f00\u59cb\u4e4b\u524d\uff0c\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u8fd9\u6837\u505a\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u68c0\u67e5\u4e00\u4e0b\u5728\u4f60\u5f00\u53d1\u533a\u5757\u94fe\u5e94\u7528\u7a0b\u5e8f\u6216\u8005Hyperledger Fabric\u7684\u5e73\u53f0\u4e0a\u662f\u5426\u5df2\u7ecf\u5b89\u88c5\u4e86\u9884\u7f6e\u73af\u5883\u3002\n\n\nYou will also need to download and install the Hyperledger Fabric Samples. You will notice that there are a number of samples included in the fabric-samples repository. We will be using the first-network sample. Let\u2019s open that sub-directory now.\n\n\n\u4f60\u8fd8\u9700\u8981\u4e0b\u8f7d\u5e76\u5b89\u88c5\nHyperledger Fabric Samples\n\u3002\u4f60\u4f1a\u6ce8\u610f\u5230\nfabric-samples\n\u6587\u4ef6\u5939\u4e2d\u5305\u542b\u4e86\u8bb8\u591a\u793a\u4f8b\u3002\u6211\u4eec\u5c06\u4f7f\u7528\nfirst-network\n\u8fd9\u4e2a\u4f8b\u5b50\u3002\u73b0\u5728\u8ba9\u6211\u4eec\u6253\u5f00\u8fd9\u4e2a\u5b50\u76ee\u5f55\u3002\n\n\ncd first-network\n\n\n\n\n\n\nNote\n\n\n\n\nThe supplied commands in this documentation MUST be run from your first-network sub-directory of the \nfabric-samples\nrepository clone. If you elect to run the commands from a different location, the various provided scripts will be unable to find the binaries.\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u672c\u6587\u6863\u4e2d\u63d0\u4f9b\u7684\u547d\u4ee4\u5fc5\u987b\u8fd0\u884c\u5728\nfabric-network\n\u7684\u5b50\u76ee\u5f55\nfirst-network\n\u4e2d\u3002\u5982\u679c\u4f60\u9009\u62e9\u4ece\u5176\u4ed6\u4f4d\u7f6e\u8fd0\u884c\u547d\u4ee4\uff0c\u63d0\u4f9b\u7684\u4e00\u4e9b\u5217\u811a\u672c\u5c06\u65e0\u6cd5\u627e\u5230\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u3002\n\n\n\n\n\n\n1.2. \u60f3\u8981\u73b0\u5728\u8fd0\u884c\u5417\uff1f\n\n\nWe provide a fully annotated script byfn.sh that leverages these Docker images to quickly bootstrap a Hyperledger Fabric network comprised of 4 peers representing two different organizations, and an orderer node. It will also launch a container to run a scripted execution that will join peers to a channel, deploy and instantiate chaincode and drive execution of transactions against the deployed chaincode.\n\n\n\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2a\u5b8c\u5168\u6ce8\u91ca\u7684\u811a\u672c\nbyfn.sh\n\uff0c\u5229\u7528\u8fd9\u4e9bDocker\u955c\u50cf\u53ef\u4ee5\u5feb\u901f\u5f15\u5bfc\u4e00\u4e2a\u75314\u4e2a\u4ee3\u88682\u4e2a\u4e0d\u540c\u7ec4\u7ec7\u7684peer\u8282\u70b9\u4ee5\u53ca\u4e00\u4e2a\u6392\u5e8f\u670d\u52a1\u8282\u70b9\u7684\nHyperledger fabric\n\u7f51\u7edc\u3002\u5b83\u8fd8\u5c06\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u6765\u8fd0\u884c\u4e00\u4e2a\u5c06peer\u8282\u70b9\u52a0\u5165channel\u3001\u90e8\u7f72\u5b9e\u4f8b\u5316\u94fe\u7801\u670d\u52a1\u4ee5\u53ca\u9a71\u52a8\u5df2\u7ecf\u90e8\u7f72\u7684\u94fe\u7801\u6267\u884c\u4ea4\u6613\u7684\u811a\u672c\u3002\n\n\nHere\u2019s the help text for the byfn.sh script:\n\n\n\u4ee5\u4e0b\u662f\u8be5\nbyfn.sh\n\u811a\u672c\u7684\u5e2e\u52a9\u6587\u6863\uff1a\n\n\n./byfn.sh -h\nUsage:\n  byfn.sh -m up|down|restart|generate [-c \nchannel name\n] [-t \ntimeout\n]\n  byfn.sh -h|--help (print this message)\n    -m \nmode\n - one of 'up', 'down', 'restart' or 'generate'\n      - 'up' - bring up the network with docker-compose up\n      - 'down' - bring up the network with docker-compose up\n      - 'restart' - bring up the network with docker-compose up\n      - 'generate' - generate required certificates and genesis block\n    -c \nchannel name\n - config name to use (defaults to \nmychannel\n)\n    -t \ntimeout\n - CLI timeout duration in microseconds (defaults to 10000)\n\nTypically, one would first generate the required certificates and\ngenesis block, then bring up the network. e.g.:\n\n  byfn.sh -m generate -c \nchannelname\n\n  byfn.sh -m up -c \nchannelname\n\n\n\n\n\nIf you choose not to supply a channel name, then the script will use a default name of mychannel. The CLI timeout parameter (specified with the -t flag) is an optional value; if you choose not to set it, then your CLI container will exit upon conclusion of the script.\n\n\n\u5982\u679c\u4f60\u9009\u62e9\u4e0d\u63d0\u4f9bchannel\u540d\u79f0\uff0c\u5219\u811a\u672c\u5c06\u4f7f\u7528\u9ed8\u8ba4\u540d\u79f0\nmychannel\n\u3002CLI\u8d85\u65f6\u53c2\u6570\uff08\u7528-t\u6807\u5fd7\u6307\u5b9a\uff09\u662f\u4e00\u4e2a\u53ef\u9009\u503c;\u5982\u679c\u4f60\u9009\u62e9\u4e0d\u8bbe\u7f6e\u5b83\uff0c\u90a3\u4e48CLI\u5bb9\u5668\u5c06\u4f1a\u5728\u811a\u672c\u6267\u884c\u5b8c\u4e4b\u540e\u9000\u51fa\u3002\n\n\n1.3. \u751f\u6210\u7f51\u7edc\u795e\u5668\n\n\nReady to give it a go? Okay then! Execute the following command. You will see a brief description as to what will occur, along with a yes/no command line prompt. Respond with a y to execute the described action.\n\n\n\u51c6\u5907\u597d\u4e86\u5417\uff1f\u597d\u5427\uff01\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u3002\u4f60\u5c06\u4f1a\u770b\u5230\u4f1a\u53d1\u751f\u4ec0\u4e48\u4f34\u968fyes/no\u547d\u4ee4\u884c\u63d0\u793a\u7684\u7b80\u8981\u8bf4\u660e\u3002\u8f93\u5165y\u6765\u6267\u884c\u63cf\u8ff0\u7684\u52a8\u4f5c\u3002\n\n\n./byfn.sh -m generate\nGenerating certs and genesis block for with channel 'mychannel' and CLI timeout of '10000'\nContinue (y/n)?y\nproceeding ...\n/Users/xxx/dev/fabric-samples/bin/cryptogen\n\n##########################################################\n##### Generate certificates using cryptogen tool #########\n##########################################################\norg1.example.com\n2017-06-12 21:01:37.334 EDT [bccsp] GetDefault -\n WARN 001 Before using BCCSP, please call InitFactories(). Falling back to bootBCCSP.\n...\n\n/Users/xxx/dev/fabric-samples/bin/configtxgen\n##########################################################\n#########  Generating Orderer Genesis block ##############\n##########################################################\n2017-06-12 21:01:37.558 EDT [common/configtx/tool] main -\n INFO 001 Loading configuration\n2017-06-12 21:01:37.562 EDT [msp] getMspConfig -\n INFO 002 intermediate certs folder not found at [/Users/xxx/dev/byfn/crypto-config/ordererOrganizations/example.com/msp/intermediatecerts]. Skipping.: [stat /Users/xxx/dev/byfn/crypto-config/ordererOrganizations/example.com/msp/intermediatecerts: no such file or directory]\n...\n2017-06-12 21:01:37.588 EDT [common/configtx/tool] doOutputBlock -\n INFO 00b Generating genesis block\n2017-06-12 21:01:37.590 EDT [common/configtx/tool] doOutputBlock -\n INFO 00c Writing genesis block\n\n#################################################################\n### Generating channel configuration transaction 'channel.tx' ###\n#################################################################\n2017-06-12 21:01:37.634 EDT [common/configtx/tool] main -\n INFO 001 Loading configuration\n2017-06-12 21:01:37.644 EDT [common/configtx/tool] doOutputChannelCreateTx -\n INFO 002 Generating new channel configtx\n2017-06-12 21:01:37.645 EDT [common/configtx/tool] doOutputChannelCreateTx -\n INFO 003 Writing new channel tx\n\n#################################################################\n#######    Generating anchor peer update for Org1MSP   ##########\n#################################################################\n2017-06-12 21:01:37.674 EDT [common/configtx/tool] main -\n INFO 001 Loading configuration\n2017-06-12 21:01:37.678 EDT [common/configtx/tool] doOutputAnchorPeersUpdate -\n INFO 002 Generating anchor peer update\n2017-06-12 21:01:37.679 EDT [common/configtx/tool] doOutputAnchorPeersUpdate -\n INFO 003 Writing anchor peer update\n\n#################################################################\n#######    Generating anchor peer update for Org2MSP   ##########\n#################################################################\n2017-06-12 21:01:37.700 EDT [common/configtx/tool] main -\n INFO 001 Loading configuration\n2017-06-12 21:01:37.704 EDT [common/configtx/tool] doOutputAnchorPeersUpdate -\n INFO 002 Generating anchor peer update\n2017-06-12 21:01:37.704 EDT [common/configtx/tool] doOutputAnchorPeersUpdate -\n INFO 003 Writing anchor peer update\n\n\n\n\nThis first step generates all of the certificates and keys for all our various network entities, the genesis block used to bootstrap the ordering service, and a collection of configuration transactions required to configure a Channel.\n\n\n\u7b2c\u4e00\u6b65\u751f\u6210\u6211\u4eec\u5404\u79cd\u7f51\u7edc\u5b9e\u4f53\u7684\u6240\u6709\u8bc1\u4e66\u548c\u5bc6\u94a5\uff0c\ngenesis block\n\u7528\u4e8e\u5f15\u5bfc\u6392\u5e8f\u670d\u52a1\uff0c\u4ee5\u53ca\u914d\u7f6e\nChannel\n\u6240\u9700\u8981\u7684\u4e00\u7ec4\u4ea4\u6613\u914d\u7f6e\u96c6\u5408\u3002\n\n\n1.4. \u542f\u52a8\u7f51\u7edc\n\n\nNext, you can bring the network up with the following command. Once again, you will be prompted as to whether you wish to continue or abort. Respond with a y:\n\n\n\u63a5\u4e0b\u6765\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u542f\u52a8\u6574\u4e2a\u7f51\u7edc\u3002\u518d\u8bd5\u63d0\u793a\u4f60\u662f\u5426\u7ee7\u7eed\u3002\u56de\u7b54y\uff1a\n\n\n./byfn.sh -m up\nStarting with channel 'mychannel' and CLI timeout of '10000'\nContinue (y/n)?y\nproceeding ...\nCreating network \nnet_byfn\n with the default driver\nCreating peer0.org1.example.com\nCreating peer1.org1.example.com\nCreating peer0.org2.example.com\nCreating orderer.example.com\nCreating peer1.org2.example.com\nCreating cli\n\n\n ____    _____      _      ____    _____\n/ ___|  |_   _|    / \\    |  _ \\  |_   _|\n\\___ \\    | |     / _ \\   | |_) |   | |\n ___) |   | |    / ___ \\  |  _ \n    | |\n|____/    |_|   /_/   \\_\\ |_| \\_\\   |_|\n\nChannel name : mychannel\nCreating channel...\n\n\n\n\nThe logs will continue from there. This will launch all of the containers, and then drive a complete end-to-end application scenario. Upon successful completion, it should report the following in your terminal window:\n\n\n\u65e5\u5fd7\u5c06\u7ee7\u7eed\u3002\u7136\u540e\u542f\u52a8\u6240\u6709\u5bb9\u5668\uff0c\u9a71\u52a8\u4e00\u4e2a\u7aef\u5230\u7aef\u7684\u5e94\u7528\u573a\u666f\u3002\u6210\u529f\u4ee5\u540e\uff0c\u5728\u7ec8\u7aef\u7a97\u53e3\u4e2d\u4f1a\u62a5\u544a\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n2017-05-16 17:08:01.366 UTC [msp] GetLocalMSP -\n DEBU 004 Returning existing local MSP\n2017-05-16 17:08:01.366 UTC [msp] GetDefaultSigningIdentity -\n DEBU 005 Obtaining default signing identity\n2017-05-16 17:08:01.366 UTC [msp/identity] Sign -\n DEBU 006 Sign: plaintext: 0AB1070A6708031A0C08F1E3ECC80510...6D7963631A0A0A0571756572790A0161\n2017-05-16 17:08:01.367 UTC [msp/identity] Sign -\n DEBU 007 Sign: digest: E61DB37F4E8B0D32C9FE10E3936BA9B8CD278FAA1F3320B08712164248285C54\nQuery Result: 90\n2017-05-16 17:08:15.158 UTC [main] main -\n INFO 008 Exiting.....\n===================== Query on PEER3 on channel 'mychannel' is successful =====================\n\n===================== All GOOD, BYFN execution completed =====================\n\n\n _____   _   _   ____\n| ____| | \\ | | |  _ \\\n|  _|   |  \\| | | | | |\n| |___  | |\\  | | |_| |\n|_____| |_| \\_| |____/\n\n\n\n\nYou can scroll through these logs to see the various transactions. If you don\u2019t get this result, then jump down to the Troubleshooting section and let\u2019s see whether we can help you discover what went wrong.\n\n\n\u4f60\u53ef\u4ee5\u6eda\u52a8\u8fd9\u4e9b\u65e5\u5fd7\u53bb\u67e5\u770b\u5404\u79cd\u4ea4\u6613\u3002\u5982\u679c\u4f60\u6ca1\u6709\u83b7\u5f97\u8fd9\u4e2a\u7ed3\u679c\uff0c\u8bf7\u79fb\u6b65\u7591\u96be\u89e3\u7b54\u90e8\u5206\uff0c\u770b\u770b\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u5e2e\u52a9\u4f60\u53d1\u73b0\u95ee\u9898\u3002\n\n\n1.5. \u5173\u95ed\u7f51\u7edc\n\n\nFinally, let\u2019s bring it all down so we can explore the network setup one step at a time. The following will kill your containers, remove the crypto material and four artifacts, and delete the chaincode images from your Docker Registry. Once again, you will be prompted to continue, respond with a y:\n\n\n\u6700\u540e\uff0c\u8ba9\u6211\u4eec\u628a\u5b83\u5168\u90e8\u505c\u4e0b\u6765\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u4e00\u6b65\u4e00\u6b65\u5730\u63a2\u7d22\u7f51\u7edc\u8bbe\u7f6e\u3002\u4ee5\u4e0b\u64cd\u4f5c\u5c06\u5173\u95ed\u4f60\u7684\u5bb9\u5668\uff0c\u79fb\u9664\u52a0\u5bc6\u6750\u6599\u548c4\u4e2a\u914d\u7f6e\u4fe1\u606f\uff0c\u5e76\u4e14\u4eceDocker\u4ed3\u5e93\u5220\u9664chaincode\u955c\u50cf\u3002\u4f60\u5c06\u518d\u4e00\u6b21\u88ab\u63d0\u793a\u662f\u5426\u7ee7\u7eed\uff0c\u56de\u7b54y\uff1a\n\n\n./byfn.sh -m down\nStopping with channel 'mychannel' and CLI timeout of '10000'\nContinue (y/n)?y\nproceeding ...\nWARNING: The CHANNEL_NAME variable is not set. Defaulting to a blank string.\nWARNING: The TIMEOUT variable is not set. Defaulting to a blank string.\nRemoving network net_byfn\n468aaa6201ed\n...\nUntagged: dev-peer1.org2.example.com-mycc-1.0:latest\nDeleted: sha256:ed3230614e64e1c83e510c0c282e982d2b06d148b1c498bbdcc429e2b2531e91\n...\n\n\n\n\nIf you\u2019d like to learn more about the underlying tooling and bootstrap mechanics, continue reading. In these next sections we\u2019ll walk through the various steps and requirements to build a fully-functional Hyperledger Fabric network.\n\n\n\u5982\u679c\u4f60\u60f3\u4e86\u89e3\u5173\u4e8e\u5e95\u5c42\u5de5\u5177\u548c\u5f15\u5bfc\u6750\u6599\u76f8\u5173\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u7ee7\u7eed\u9605\u8bfb\u3002\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u6d4f\u89c8\u6784\u5efa\u529f\u80fd\u9f50\u5168\u7684\nHyperledger fabric\n\u7f51\u7edc\u7684\u5404\u79cd\u8981\u6c42\u548c\u6b65\u9aa4\u3002\n\n\n1.6. \u52a0\u5bc6\u751f\u6210\u5668\n\n\nWe will use the cryptogen tool to generate the cryptographic material (x509 certs) for our various network entities. These certificates are representative of identities, and they allow for sign/verify authentication to take place as our entities communicate and transact.\n\n\n\u6211\u4eec\u5c06\u4f7f\u7528\ncryptogen\n\u5de5\u5177\u4e3a\u6211\u4eec\u751f\u6210\u5404\u79cd\u7f51\u7edc\u5b9e\u4f53\u7684\u52a0\u5bc6\u6750\u6599\uff08x509\u8bc1\u4e66\uff09\u3002\u8fd9\u4e9b\u8bc1\u4e66\u662f\u8eab\u4efd\u7684\u4ee3\u8868\uff0c\u5b83\u4eec\u5141\u8bb8\u5728\u6211\u4eec\u7684\u7f51\u7edc\u5b9e\u4f53\u8fdb\u884c\u4ea4\u6d41\u548c\u4ea4\u6613\u65f6\u8fdb\u884c\u7b7e\u540d/\u9a8c\u8bc1\u8eab\u4efd\u9a8c\u8bc1\u3002\n\n\n1.6.1. \u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f\n\n\nCryptogen consumes a file - crypto-config.yaml - that contains the network topology and allows us to generate a set of certificates and keys for both the Organizations and the components that belong to those Organizations. Each Organization is provisioned a unique root certificate (ca-cert) that binds specific components (peers and orderers) to that Org. By assigning each Organization a unique CA certificate, we are mimicking a typical network where a participating Member would use its own Certificate Authority. Transactions and communications within Hyperledger Fabric are signed by an entity\u2019s private key (keystore), and then verified by means of a public key (signcerts).\n\n\nCryptogen\n\u6d88\u8d39\u4e00\u4e2a\u5305\u542b\u7f51\u7edc\u62d3\u6251\u7684\ncrypto-config.yaml\n\uff0c\u5e76\u5141\u8bb8\u6211\u4eec\u4e3a\u7ec4\u7ec7\u548c\u5c5e\u4e8e\u8fd9\u4e9b\u7ec4\u7ec7\u7684\u7ec4\u4ef6\u751f\u6210\u4e00\u7ec4\u8bc1\u4e66\u548c\u5bc6\u94a5\u3002\u6bcf\u4e2a\u7ec4\u7ec7\u90fd\u914d\u7f6e\u4e86\u552f\u4e00\u7684\u6839\u8bc1\u4e66(\nca-cert\n),\u5b83\u5c06\u7279\u5b9a\u7ec4\u4ef6\uff08peers\u548corders\uff09\u7ed1\u5b9a\u5230\u8be5\u7ec4\u7ec7\u3002\u901a\u8fc7\u4e3a\u6bcf\u4e00\u4e2a\u7ec4\u7ec7\u5206\u914d\u552f\u4e00\u7684CA\u8bc1\u4e66\uff0c\u6211\u4eec\u6b63\u5728\u6a21\u4eff\u4e00\u4e2a\u7ecf\u5178\u7684\u7f51\u7edc\uff0c\u8fd9\u4e2a\u7f51\u7edc\u4e2d\u7684\u6210\u5458\u5c06\u4f7f\u7528\u81ea\u5df1\u7684\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u3002Hyperledger Fabric\u4e2d\u7684\u4ea4\u6613\u548c\u901a\u4fe1\u662f\u901a\u8fc7\u5b58\u50a8\u5728\nkeystore\n\u4e2d\u7684\u5b9e\u4f53\u7684\u79c1\u94a5\u7b7e\u540d\uff0c\u7136\u540e\u901a\u8fc7\u516c\u94a5\u624b\u6bb5\u8fdb\u884c\u9a8c\u8bc1\uff08\nsigncerts\n\uff09\u3002\n\n\nYou will notice a count variable within this file. We use this to specify the number of peers per Organization; in our case there are two peers per Org. We won\u2019t delve into the minutiae of x.509 certificates and public key infrastructure right now. If you\u2019re interested, you can peruse these topics on your own time.\n\n\n\u4f60\u5c06\u6ce8\u610f\u5230\u5728\u8fd9\u4e2a\u6587\u4ef6\u91cc\u6709\u4e00\u4e2a\ncount\n\u53d8\u91cf\u3002\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u6765\u6307\u5b9a\u6bcf\u4e2a\u7ec4\u7ec7\u4e2d\npeer\n\u7684\u6570\u91cf;\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u6709\u4e24\u4e2apeer\u3002\u6211\u4eec\u73b0\u5728\u4e0d\u4f1a\u6df1\u5165\u7814\u7a76\nx.509\u8bc1\u4e66\u548c\u516c\u94a5\u57fa\u7840\u8bbe\u65bd\n\u7684\u7ec6\u8282\u3002\u5982\u679c\u4f60\u6709\u5174\u8da3\uff0c\u4f60\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u65f6\u95f4\u7ec6\u8bfb\u8fd9\u4e9b\u4e3b\u9898\u3002\n\n\nBefore running the tool, let\u2019s take a quick look at a snippet from the crypto-config.yaml. Pay specific attention to the \u201cName\u201d, \u201cDomain\u201d and \u201cSpecs\u201d parameters under the OrdererOrgs header:\n\n\n\u5728\u8fd0\u884c\u8be5\u5de5\u5177\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5feb\u901f\u6d4f\u89c8\u4e00\u4e0b\u8fd9\u6bb5\u4ee3\u7801\ncrypto-config.yaml\n\u3002\u7279\u522b\u6ce8\u610f\u5728\nOrdererOrgs\n\u5934\u4e0b\u7684\nName\n\uff0c\nDomain\n\u548c\nSpecs\n\u53c2\u6570\uff1a\n\n\nOrdererOrgs:\n#---------------------------------------------------------\n# Orderer\n# --------------------------------------------------------\n- Name: Orderer\n  Domain: example.com\n  # ------------------------------------------------------\n  # \nSpecs\n - See PeerOrgs below for complete description\n# -----------------------------------------------------\n  Specs:\n    - Hostname: orderer\n# -------------------------------------------------------\n# \nPeerOrgs\n - Definition of organizations managing peer nodes\n# ------------------------------------------------------\nPeerOrgs:\n# -----------------------------------------------------\n# Org1\n# ----------------------------------------------------\n- Name: Org1\n  Domain: org1.example.com\n\n\n\n\nThe naming convention for a network entity is as follows - \u201c{{.Hostname}}.{{.Domain}}\u201d. So using our ordering node as a reference point, we are left with an ordering node named - orderer.example.com that is tied to an MSP ID of Orderer. This file contains extensive documentation on the definitions and syntax. You can also refer to the Membership Service Providers (MSP) documentation for a deeper dive on MSP.\n\n\nAfter we run the cryptogen tool, the generated certificates and keys will be saved to a folder titled crypto-config.\n\n\n\u7f51\u7edc\u5b9e\u4f53\u7684\u547d\u540d\u7ea6\u5b9a\u5982\u4e0b\uff1a\n{{.Hostname}}.{{.Domain}}\n\u3002\u6240\u4ee5\u4f7f\u7528\u6211\u4eec\u7684\u6392\u5e8f\u8282\u70b9\u4f5c\u4e3a\u53c2\u8003\u70b9\uff0c\u5b83\u4e0e\nOrder\n\u7684MSP ID\u76f8\u5173\u8054\u3002\u8be5\u6587\u4ef6\u5305\u542b\u4e86\u6709\u5173\u5b9a\u4e49\u548c\u8bed\u6cd5\u7684\u5927\u91cf\u6587\u6863\u3002\u4f60\u8fd8\u53ef\u4ee5\u53c2\u8003\nMembership Service Providers(MSP)\n\uff0c\u4ee5\u4fbf\u66f4\u6df1\u5165\u5730\u4e86\u89e3MSP\u3002\n\n\nAfter we run the cryptogen tool, the generated certificates and keys will be saved to a folder titled crypto-config.\n\n\n\u6211\u4eec\u8fd0\u884c\ncryptogen\n\u5de5\u5177\uff0c\u751f\u6210\u7684\u8bc1\u4e66\u548c\u5bc6\u94a5\u5c06\u88ab\u4fdd\u5b58\u5230\u540d\u4e3a\ncrypto-config\n\u7684\u6587\u4ef6\u5939\u4e2d\u3002\n\n\n1.7. \u914d\u7f6e\u4ea4\u6613\u751f\u6210\u5668\n\n\nThe configtxgen tool is used to create four configuration artifacts:\n\n\n\n\norderer genesis block,\n\n\nchannel channel configuration transaction,\n\n\nand two anchor peer transactions - one for each Peer Org.\n\n\n\n\nconfigtxgen tool\n\u7528\u4e8e\u521b\u5efa4\u4e2a\u914d\u7f6e\u5de5\u4f5c\uff1a\n\n \u8ba2\u9605\u8005\u7684\ngenesis block\n,\n\n channel\u7684\nchannel configuration transaction\n,\n* \u4ee5\u53ca\u4e24\u4e2a\nanchor peer transactions\n\u4e00\u4e2a\u5bf9\u5e94\u4e00\u4e2aPeer\u7ec4\u7ec7\u3002\n\n\nPlease see Channel Configuration (configtxgen) for a complete description of the use of this tool.\n\n\n\u6709\u5173\u6b64\u5de5\u5177\u7684\u5b8c\u6574\u8bf4\u660e\uff0c\u8bf7\u53c2\u9605\nChannel Configuration(configtxgen)\n\u3002\n\n\nThe orderer block is the Genesis Block for the ordering service, and the channel transaction file is broadcast to the orderer at Channel creation time. The anchor peer transactions, as the name might suggest, specify each Org\u2019s Anchor Peer on this channel.\n\n\norder block\n\u662f\u4e00\u4e2aordering service\u7684\n\u521b\u4e16\u533a\u5757\n\uff0c\nchannel transaction\n\u6587\u4ef6\u5728\nChannel\n\u521b\u5efa\u7684\u65f6\u4faf\u5e7f\u64ad\u7ed9\u8ba2\u9605\u8005\u3002\nanchor peer transactions\n\uff0c\u6b63\u5982\u540d\u79f0\u6240\u793a\uff0c\u6307\u5b9a\u4e86\u6bcf\u4e2a\u7ec4\u7ec7\u5728\u6b64channel\u4e0a\u7684\nAnchor peer\n\u3002\n\n\n1.7.1. \u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f\n\n\nConfigtxgen consumes a file - configtx.yaml - that contains the definitions for the sample network. There are three members - one Orderer Org (OrdererOrg) and two Peer Orgs (Org1 \n Org2) each managing and maintaining two peer nodes. This file also specifies a consortium - SampleConsortium - consisting of our two Peer Orgs. Pay specific attention to the \u201cProfiles\u201d section at the top of this file. You will notice that we have two unique headers. One for the orderer genesis block - TwoOrgsOrdererGenesis - and one for our channel - TwoOrgsChannel.\n\n\nConfigtxgen\u4f7f\u7528\u4e00\u4e2a\u5305\u542b\u793a\u4f8b\u7f51\u7edc\u7684\nconfigtx.yaml\n\u6587\u4ef6\u3002\u67093\u4e2a\u6210\u5458-\u4e00\u4e2a\u6392\u5e8f\u670d\u52a1\u7ec4\u7ec7\nOrdererOrg\n\u4ee5\u53ca\u4e24\u4e2a\u8282\u70b9\u7ec4\u7ec7\uff08\nOrg1\nOrg2\n\uff09,\u6bcf\u4e2a\u7ec4\u7ec7\u7ba1\u7406\u548c\u6301\u67092\u4e2apeer\u8282\u70b9\u3002\u8be5\u6587\u4ef6\u8fd8\u6307\u5b9a\u4e86\u4e00\u4e2a\nSampleConsortium\n\u7684\u8054\u76df\uff0c\u7531\u4e0a\u8ff02\u4e2a\u8282\u70b9\u7ec4\u7ec7\u6784\u6210\u3002\n\u8bf7\u7279\u522b\u6ce8\u610f\u6b64\u6587\u4ef6\u9876\u90e8\u7684\nProfiles\n\u90e8\u5206\u3002\u4f60\u4f1a\u6ce8\u610f\u5230\u6211\u4eec\u6709\u4e24\u4e2a\u72ec\u7279\u7684\u6807\u9898\u3002\u4e00\u4e2a\u662forderer\u7684\u521b\u4e16\u533a\u5757-\nTwoOrgsOrdererGenesis\n-\u53e6\u4e00\u4e2a\u662f\u9488\u5bf9\u7ba1\u9053\u7684\nTwoOrgsChannel\n\u3002\n\n\nThese headers are important, as we will pass them in as arguments when we create our artifacts.\n\n\n\u8fd9\u4e9b\u6807\u9898\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5728\u6211\u4eec\u521b\u5efa\u6211\u4eec\u7684\u5de5\u4f5c\u7684\u65f6\u4faf\u5979\u4eec\u5c06\u4f5c\u4e3a\u4f20\u9012\u7684\u53c2\u6570\u3002\n\n\n\n\nNote\n\n\n\n\nNotice that our SampleConsortium is defined in the system-level profile and then referenced by our channel-level profile. Channels exist within the purview of a consortium, and all consortia must be defined in the scope of the network at large.\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u8bf7\u6ce8\u610f\u6211\u4eec\u7684\nSampleConsortium\n\u5728\u7cfb\u7edf\u754c\u522b\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u5b9a\u4e49\uff0c\u7136\u540e\u7531\u6e20\u9053\u7ea7\u522b\u914d\u7f6e\u6587\u4ef6\u5f15\u7528\u3002\u7ba1\u9053\u5b58\u5728\u4e8e\u8054\u76df\u7684\u8303\u56f4\u5185\uff0c\u6240\u6709\u7684\u8054\u76df\u5fc5\u987b\u5b9a\u4e49\u5728\u6574\u4e2a\u7f51\u7edc\u8303\u56f4\u5185\u3002\n\n\n\n\n\n\nThis file also contains two additional specifications that are worth noting. Firstly, we specify the anchor peers for each Peer Org (peer0.org1.example.com \n peer0.org2.example.com). Secondly, we point to the location of the MSP directory for each member, in turn allowing us to store the root certificates for each Org in the orderer genesis block. This is a critical concept. Now any network entity communicating with the ordering service can have its digital signature verified.\n\n\n\u6b64\u6587\u4ef6\u8fd8\u5305\u542b\u4e24\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u9644\u52a0\u89c4\u683c\u3002\u9996\u5148\uff0c\u6211\u4eec\u4e3a\u6bcf\u4e2a\u7ec4\u7ec7\u6307\u5b9a\u4e86\u951a\u70b9\u8282\u70b9\uff08\npeer0.org1.example.com\n\u548c\npeer0.org2.example.com\n\uff09\u3002\u5176\u6b21\uff0c\u6211\u4eec\u4e3a\u6bcf\u4e2a\u6210\u5458\u6307\u5b9aMSP\u6587\u4ef6\u5939\uff0c\u7528\u6765\u5b58\u50a8\u6bcf\u4e2a\u7ec4\u7ec7\u5728\norderer genesis block\n\u4e2d\u6307\u5b9a\u7684\u6839\u8bc1\u4e66\u3002\u8fd9\u662f\u4e00\u4e2a\u5173\u952e\u7684\u6982\u5ff5\u3002\u73b0\u5728\u4efb\u610f\u548cordering service\u901a\u4fe1\u7684\u7f51\u7edc\u5b9e\u4f53\u90fd\u53ef\u4ee5\u5bf9\u5176\u6570\u5b57\u7b7e\u540d\u8fdb\u884c\u9a8c\u8bc1\u3002\n\n\n1.8. \u8fd0\u884c\u5de5\u5177\n\n\nYou can manually generate the certificates/keys and the various configuration artifacts using the configtxgen and cryptogen commands. Alternately, you could try to adapt the byfn.sh script to accomplish your objectives.\n\n\n\u4f60\u53ef\u4ee5\u7528\nconfigtxgen\n\u548c\ncryptogen\n\u547d\u4ee4\u6765\u624b\u52a8\u751f\u6210\u8bc1\u4e66/\u5bc6\u94a5\u548c\u5404\u79cd\u914d\u7f6e\u6587\u4ef6\u3002\u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528\nbyfn.sh\n\u811a\u672c\u6765\u5b8c\u6210\u4f60\u7684\u76ee\u6807\u3002\n\n\n1.8.1. \u624b\u52a8\u751f\u6210\u914d\u7f6e\u6587\u4ef6\n\n\nYou can refer to the generateCerts function in the byfn.sh script for the commands necessary to generate the certificates that will be used for your network configuration as defined in the crypto-config.yaml file. However, for the sake of convenience, we will also provide a reference here.\n\n\n\u5fc5\u8981\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003byfn.sh\u811a\u672c\u4e2d\u7684\ngenerateCerts\n\u51fd\u6570\u53bb\u751f\u6210\u76f8\u5173\u5b9a\u4e49\u5728\ncrypto-config.yaml\n\u6587\u4ef6\u4e2d\u7528\u4e8e\u4f60\u7684\u7f51\u7edc\u914d\u7f6e\u7684\u76f8\u5173\u8bc1\u4e66\u3002\u7136\u800c\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u4e5f\u5c06\u5728\u6b64\u63d0\u4f9b\u53c2\u8003\u3002\n\n\nFirst let\u2019s run the cryptogen tool. Our binary is in the bin directory, so we need to provide the relative path to where the tool resides.\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u8fd0\u884c\ncryptogen\n\u8fd9\u4e2a\u5de5\u5177\u3002\u6211\u4eec\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u5728\nbin\n\u76ee\u5f55\u4e2d\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u5de5\u5177\u6240\u5728\u7684\u76f8\u5bf9\u8def\u5f84\u3002\n\n\n../bin/cryptogen generate --config=./crypto-config.yaml\n\n\n\n\nYou will likely see the following warning. It\u2019s innocuous, ignore it:\n\n\n\u4f60\u53ef\u80fd\u4f1a\u770b\u5230\u4ee5\u4e0b\u8b66\u544a\u3002\u8fd9\u662f\u65e0\u5bb3\u7684\uff0c\u8bf7\u5ffd\u7565\u5b83\uff1a \n\n\n[bccsp] GetDefault -\n WARN 001 Before using BCCSP, please call InitFactories(). Falling back to bootBCCSP.\n\n\n\n\nNext, we need to tell the configtxgen tool where to look for the configtx.yaml file that it needs to ingest. We will tell it look in our present working directory:\n\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u544a\u8bc9\nconfigtxgen\n\u5de5\u5177\u9700\u8981\u63d0\u53d6\u7684\nconfigtx.yaml\n\u6240\u5728\u7684\u4f4d\u7f6e\u3002\u6211\u4eec\u4f1a\u544a\u8bc9\u5b83\u5728\u6211\u4eec\u5f53\u524d\u6240\u5728\u5de5\u4f5c\u76ee\u5f55\uff1a\n\n\nFirst, we need to set an environment variable to specify where configtxgen should look for the configtx.yaml configuration file. Then, we\u2019ll invoke the configtxgen tool which will create the orderer genesis block:\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\u6765\u544a\u8bc9\nconfigtxgen\n\u54ea\u91cc\u53bb\u5bfb\u627econfigtx.yaml\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u8c03\u7528\nconfigtxgen\n\u5de5\u5177\u53bb\u521b\u5efa\norderer genesis block\n\uff1a\n\n\nexport FABRIC_CFG_PATH=$PWD\n../bin/configtxgen -profile TwoOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block\n\n\n\n\nYou can ignore the log warnings regarding intermediate certificates, certificate revocation lists (crls) and MSP configurations. We are not using any of those in this sample network.\n\n\n\u4f60\u53ef\u4ee5\u5ffd\u7565\u6709\u5173\u4e2d\u95f4\u8bc1\u4e66\uff0c\u8bc1\u4e66\u64a4\u9500\u5217\u8868\uff08crls\uff09\u548cMSP\u914d\u7f6e\u7684\u65e5\u5fd7\u8b66\u544a\u3002\u6211\u4eec\u6ca1\u6709\u5728\u793a\u4f8b\u7f51\u7edc\u4e2d\u4f7f\u7528\u5176\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u3002\n\n\nNext, we need to create the channel transaction artifact. Be sure to replace $CHANNEL_NAME or set CHANNEL_NAME as an environment variable that can be used throughout these instructions:\n\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\nchannel transaction\n\u914d\u7f6e\u3002\u8bf7\u786e\u4fdd\u66ff\u6362\n\uffe5CHANNEL_NAME\n\u6216\u8005\u5c06\nCHANNEL_NAME\n\u8bbe\u7f6e\u4e3a\u6574\u4e2a\u8bf4\u660e\u4e2d\u53ef\u4ee5\u4f7f\u7528\u7684\u73af\u5883\u53d8\u91cf\uff1a\n\n\nexport CHANNEL_NAME=mychannel\n\n# this file contains the definitions for our sample channel\n../bin/configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID $CHANNEL_NAME\n\n\n\n\nNext, we will define the anchor peer for Org1 on the channel that we are constructing. Again, be sure to replace $CHANNEL_NAME or set the environment variable for the following commands:\n\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5728\u6b63\u5728\u6784\u5efa\u7684\u901a\u9053\u4e0a\u5b9a\u4e49\nOrg1\n\u7684\nanchor peer\n\u3002\u8bf7\u518d\u6b21\u786e\u8ba4$CHANNEL_NAME\u5df2\u88ab\u66ff\u6362\u6216\u8005\u4e3a\u4ee5\u4e0b\u547d\u4ee4\u8bbe\u7f6e\u4e86\u73af\u5883\u53d8\u91cf\uff1a\n\n\n../bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org1MSP\n\n\n\n\nNow, we will define the anchor peer for Org2 on the same channel:\n\n\n\u73b0\u5728\uff0c\u6211\u4eec\u5c06\u5728\u540c\u4e00\u4e2a\u901a\u9053\u5b9a\u4e49\nOrg2\n\u7684\nanchor peer\n\uff1a\n\n\n../bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org2MSP\n\n\n\n\n1.9. \u542f\u52a8\u7f51\u7edc\n\n\nWe will leverage a docker-compose script to spin up our network. The docker-compose file references the images that we have previously downloaded, and bootstraps the orderer with our previously generated genesis.block.\n\n\n\u6211\u4eec\u5c06\u5229\u7528\ndocker-compose\n\u811a\u672c\u6765\u542f\u52a8\u6211\u4eec\u7684\u533a\u5757\u94fe\u7f51\u7edc\u3002\ndocker-compose\n\u6587\u4ef6\u5229\u7528\u6211\u4eec\u4e4b\u524d\u4e0b\u8f7d\u7684\u955c\u50cf\uff0c\u5e76\u7528\u4ee5\u524d\u751f\u6210\u7684\ngenesis.block\n\u6765\u5f15\u5bfc\norderer\n\u3002\n\n\nworking_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer\n# command: /bin/bash -c './scripts/script.sh ${CHANNEL_NAME}; sleep $TIMEOUT'\nvolumes\n\n\n\n\nIf left uncommented, that script will exercise all of the CLI commands when the network is started, as we describe in the What\u2019s happening behind the scenes? section. However, we want to go through the commands manually in order to expose the syntax and functionality of each call.\n\n\n\u5982\u679c\u6ca1\u6709\u6ce8\u91ca\uff0c\u8be5\u811a\u672c\u5c06\u5728\u7f51\u7edc\u542f\u52a8\u65f6\u6267\u884c\u6240\u6709\u547d\u4ee4\uff0c\u6b63\u5982\u6211\u4eec\u5728\n\u5e55\u540e\u53d1\u751f\u7684\u60c5\u51b5\n\u4e2d\u6240\u63cf\u8ff0\u7684\u90a3\u6837\u3002\u7136\u800c\uff0c\u6211\u4eec\u60f3\u624b\u52a8\u6267\u884c\u547d\u4ee4\uff0c\u4ee5\u4fbf\u516c\u5f00\u6bcf\u4e2a\u8c03\u7528\u7684\u8bed\u6cd5\u548c\u529f\u80fd\u3002\n\n\nPass in a moderately high value for the TIMEOUT variable (specified in seconds); otherwise the CLI container, by default, will exit after 60 seconds.\n\n\n\u9002\u5f53\u5730\u4e3a\nTIMEOUT\n\u4f20\u9012\u8f83\u9ad8\u7684\u503c\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09;\u9ed8\u8ba4\u60c5\u51b5\u4e0bCLI\u5bb9\u5668\u5c06\u572860\u79d2\u4e4b\u540e\u9000\u51fa\u3002\n\n\n\u542f\u52a8\u4f60\u7684\u7f51\u7edc\uff1a\n\n\nCHANNEL_NAME=$CHANNEL_NAME TIMEOUT=\npick_a_value\n docker-compose -f docker-compose-cli.yaml up -d\n\n\n\n\nIf you want to see the realtime logs for your network, then do not supply the -d flag. If you let the logs stream, then you will need to open a second terminal to execute the CLI calls.\n\n\n\u5982\u679c\u8981\u5b9e\u65f6\u67e5\u770b\u4f60\u7684\u533a\u5757\u94fe\u7f51\u7edc\u7684\u65e5\u5fd7\uff0c\u8bf7\u4e0d\u8981\u63d0\u4f9b\n-d\n\u6807\u5fd7\u3002\u5982\u679c\u4f60\u9700\u8981\u65e5\u5fd7\u6d41\uff0c\u4f60\u9700\u8981\u6253\u5f00\u7b2c\u4e8c\u4e2a\u7ec8\u7aef\u6765\u6267\u884cCLI\u547d\u4ee4\u3002\n\n\n1.9.1. \u73af\u5883\u53d8\u91cf\n\n\nFor the following CLI commands against peer0.org1.example.com to work, we need to preface our commands with the four environment variables given below. These variables for peer0.org1.example.com are baked into the CLI container, therefore we can operate without passing them. HOWEVER, if you want to send calls to other peers or the orderer, then you will need to provide these values accordingly. Inspect the docker-compose-base.yaml for the specific paths:\n\n\n\u4e3a\u4e86\u4f7f\u9488\u5bf9\npeer0.org1.example.com\n\u7684CLI\u547d\u4ee4\u8d77\u4f5c\u7528\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u4e0b\u9762\u7ed9\u51fa\u56db\u4e2a\u73af\u5883\u53d8\u91cf\u6765\u4ecb\u7ecd\u6211\u4eec\u7684\u547d\u4ee4\u3002\u4e3a\npeer0.org1.example.com\n\u6d89\u53ca\u7684\u8fd9\u4e9b\u53d8\u91cf\u5c06\u88ab\u62f7\u8d1d\u5230CLI\u5bb9\u5668\u4e2d\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u9700\u8981\u590d\u5236\u5b83\u4eec\u3002\u7136\u800c\uff0c\u5982\u679c\u4f60\u53d1\u9001\u8c03\u7528\u5230\u5176\u4ed6\u7684peer\u8282\u70b9\u6216\u8005orderer\uff0c\u5219\u9700\u8981\u76f8\u5e94\u5730\u63d0\u4f9b\u8fd9\u4e9b\u503c\u3002\u68c0\u67e5\ndocker-compose-base.yaml\n\u4e2d\u7684\u5177\u4f53\u8def\u5f84\uff1a\n\n\n# Environment variables for PEER0\n\nCORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp\nCORE_PEER_ADDRESS=peer0.org1.example.com:7051\nCORE_PEER_LOCALMSPID=\nOrg1MSP\n\nCORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt\n\n\n\n\n1.9.2. \u521b\u5efa\n\u52a0\u5165\u4fe1\u9053\n\n\nWe will enter the CLI container using the docker exec command:\n\n\n\u6211\u4eec\u5c06\u4f7f\u7528\ndocker exec\n\u547d\u4ee4\u8fdb\u5165CLI\u5bb9\u5668\uff1a\n\n\ndocker exec -it bash\n\n\n\n\nIf successful you should see the following:\n\n\n\u5982\u679c\u6210\u529f\uff0c\u4f60\u5c06\u770b\u5230\u4e0b\u5217\u4fe1\u606f\uff1a\n\n\nroot@0d78bb69300d:/opt/gopath/src/github.com/hyperledger/fabric/peer#\n\n\n\n\nRecall that we used the configtxgen tool to generate a channel configuration artifact - channel.tx. We are going to pass in this artifact to the orderer as part of the create channel request.\n\n\n\u56de\u60f3\u4ee5\u4e0b\uff0c\u6211\u4eec\u4f7f\u7528configtxgen\u5de5\u5177\u751f\u6210\u4fe1\u9053\u914d\u7f6e-\nchannel.tx\n\u3002\u6211\u4eec\u5c06\u8fd9\u4e2a\u914d\u7f6e\u4f5c\u4e3a\u8bf7\u6c42\u7684\u4e00\u90e8\u5206\u4f20\u9012\u7ed9\u8ba2\u9605\u8005\u3002\n\n\n\n\nNote\n\n\n\n\nNotice the \n cafile that we pass as part of this command. It is the local path to the orderer\u2019s root cert, allowing us to verify the TLS handshake.\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u6ce8\u610f\n-- cafile\n\u4f1a\u4f5c\u4e3a\u547d\u4ee4\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u662forderer\u7684root cert\u7684\u672c\u5730\u8def\u5f84\uff0c\u5141\u8bb8\u6211\u4eec\u53bb\u9a8c\u8bc1TLS\u63e1\u624b\u3002\n\n\n\n\n\n\nWe specify our channel name with the -c flag and our channel configuration transaction with the -f flag. In this case it is channel.tx, however you can mount your own configuration transaction with a different name.\n\n\n\u6211\u4eec\u4f7f\u7528\n-c\n\u6807\u5fd7\u6307\u5b9achannel\u7684\u540d\u5b57\uff0c\n-f\n\u6807\u5fd7\u6307\u5b9a\u914d\u7f6e\u4ea4\u6613\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5b83\u662f\nchannel.tx\n\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u540d\u79f0\uff0c\u6302\u8f7d\u4f60\u81ea\u5df1\u7684\u4ea4\u6613\u914d\u7f6e\u3002\n\n\nexport CHANNEL_NAME=mychannel\n\n# the channel.tx file is mounted in the channel-artifacts directory within your CLI container\n# as a result, we pass the full path for the file\n# we also pass the path for the orderer ca-cert in order to verify the TLS handshake\n# be sure to replace the $CHANNEL_NAME variable appropriately\n\npeer channel create -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem\n\n\n\n\nThis command returns a genesis block - \n - which we will use to join the channel. It contains the configuration information specified in channel.tx.\n\n\n\u6b64\u547d\u4ee4\u8fd4\u56de\u4e00\u4e2a\u521b\u4e16\u533a\u5757-\nchannel-ID.block\n-\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u52a0\u5165\u4fe1\u9053\u3002\u5b83\u5305\u542b\u4e86\nchannel.tx\n\u4e2d\u7684\u914d\u7f6e\u4fe1\u606f\u3002\n\n\n\n\nNote\n\n\n\n\nYou will remain in the CLI container for the remainder of these manual commands. You must also remember to preface all commands with the corresponding environment variables when targeting a peer other than peer0.org1.example.com.\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u5269\u4e0b\u7684\u547d\u4ee4\u5c06\u4f1a\u7559\u5728CLI\u5bb9\u5668\u5185\u6267\u884c\u3002\u4f60\u5fc5\u987b\u8bb0\u4f4f\u6240\u6709\u7684\u547d\u4ee4\u5fc5\u987b\u5728\u76f8\u5e94\u7684\u73af\u5883\u53d8\u91cf\u4e0b\u6267\u884c\u5f53\u76ee\u6807\u8282\u70b9\u662f\u9664\u4e86\npeer0.org1.example.com\n\u4ee5\u5916\u7684\u8282\u70b9\u3002\n\n\n\n\n\n\nNow let\u2019s join peer0.org1.example.com to the channel.\n\n\n\u73b0\u5728\u8ba9\u6211\u4eec\u52a0\u5165\npeer0.org1.example.com\n\u9891\u9053\u3002\n\n\n# By default, this joins ``peer0.org1.example.com`` only\n# the \nchannel-ID\n.block was returned by the previous command\n\n peer channel join -b \nchannel-ID.block\n\n\n\n\n\nYou can make other peers join the channel as necessary by making appropriate changes in the four environment variables.\n\n\n\u4f60\u53ef\u4ee5\u4fee\u65394\u4e2a\u73af\u5883\u53d8\u91cf\u6765\u8ba9\u522b\u7684\u8282\u70b9\u52a0\u5165\u4fe1\u9053\u3002\n\n\n1.9.3. \u5b89\u88c5\u548c\u5b9e\u4f8b\u5316\u94fe\u7801\n\n\n\n\nNote\n\n\n\n\nWe will utilize a simple existing chaincode. To learn how to write your own chaincode, see the Chaincode for Developers tutorial.\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u6211\u4eec\u5c06\u5229\u7528\u4e00\u4e2a\u73b0\u6709\u7684\u7b80\u5355\u94fe\u7801\uff0c\u6765\u5b66\u4e60\u5982\u4f55\u7f16\u5199\u81ea\u5df1\u7684\u94fe\u7801\uff0c\u8bf7\u53c2\u8003\n\u94fe\u7801\u670d\u52a1\u5f00\u53d1\u6307\u5357\n\n\n\n\n\n\nApplications interact with the blockchain ledger through chaincode. As such we need to install the chaincode on every peer that will execute and endorse our transactions, and then instantiate the chaincode on the channel.\n\n\n\u5e94\u7528\u7a0b\u5e8f\u548c\u533a\u5757\u94fe\u8d26\u672c\u4f1a\u76f8\u4e92\u5f71\u54cd\u901a\u8fc7\nchaincode\n\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5728\u6bcf\u4e2a\u4f1a\u6267\u884c\u4ee5\u53ca\u80cc\u4e66\u6211\u4eec\u4ea4\u6613\u7684peer\u8282\u70b9\u5b89\u88c5chaincode\uff0c\u7136\u540e\u5728\u4fe1\u9053\u4e0a\u5b9e\u4f8b\u5316chaincode\u3002\n\n\nFirst, install the sample go code onto one of the four peer nodes. This command places the source code onto our peer\u2019s filesystem.\n\n\n\u9996\u5148\uff0c\u5728\u5c06\u793a\u4f8b\u4ee3\u7801\u5b89\u88c5\u52304\u4e2apeer\u8282\u70b9\u4e2d\u7684\u5176\u4e2d\u4e00\u4e2a\u3002\u8fd9\u4e2a\u547d\u4ee4\u5c06\u6e90\u4ee3\u7801\u653e\u5230peer\u8282\u70b9\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u3002\n\n\npeer chaincode install -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02\n\n\n\n\nNext, instantiate the chaincode on the channel. This will initialize the chaincode on the channel, set the endorsement policy for the chaincode, and launch a chaincode container for the targeted peer. Take note of the -P argument. This is our policy where we specify the required level of endorsement for a transaction against this chaincode to be validated.\n\n\n\u63a5\u4e0b\u6765\uff0c\u5728\u4fe1\u9053\u4e0a\u5b9e\u4f8b\u5316chaincode\u3002\u8fd9\u5c06\u521d\u59cb\u5316\u4fe1\u9053\u4e0a\u7684\u94fe\u7801\uff0c\u8bbe\u7f6e\u94fe\u7801\u7684\u80cc\u4e66\u7b56\u7565\uff0c\u4e3a\u76ee\u6807peer\u8282\u70b9\u542f\u52a8\u4e00\u4e2achaincode\u5bb9\u5668\u6ce8\u610f\n-P\n\u53c2\u6570\u3002\u8fd9\u662f\u6211\u4eec\u9700\u8981\u6307\u5b9a\u7684\u5f53\u8fd9\u4e2achaincode\u7684\u4ea4\u6613\u9700\u8981\u88ab\u9a8c\u8bc1\u7684\u65f6\u4faf\u7684\u80cc\u4e66\u7b56\u7565\u3002\n\n\nIn the command below you\u2019ll notice that we specify our policy as -P \nOR (\nOrg0MSP.member\n,\nOrg1MSP.member\n)\n. This means that we need \u201cendorsement\u201d from a peer belonging to Org1 OR Org2 (i.e. only one endorsement). If we changed the syntax to AND then we would need two endorsements.\n\n\n\u5728\u4e0b\u9762\u7684\u547d\u4ee4\u4e2d\uff0c\u4f60\u4f1a\u6ce8\u610f\u5230\u6211\u4eec\u6307\u5b9a\n-P \"OR ('Org0MSP.member','Org1MSP.member')\"\n\u4f5c\u4e3a\u80cc\u4e66\u7b56\u7565\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981Org1\u6216\u8005Org2\u7ec4\u7ec7\u4e2d\u7684\u5176\u4e2d\u4e00\u4e2a\u7684\u8282\u70b9\u7684\u80cc\u4e66\u5373\u53ef\uff08\u5373\u53ea\u6709\u4e00\u4e2a\u80cc\u4e66\uff09\u3002\u5982\u679c\u6211\u4eec\u6539\u53d8\u8bed\u6cd5\u4e3a\nAND\n\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u89812\u4e2a\u80cc\u4e66\u8005\u3002\n\n\n# be sure to replace the $CHANNEL_NAME environment variable\n# if you did not install your chaincode with a name of mycc, then modify that argument as well\n\npeer chaincode instantiate -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n mycc -v 1.0 -c '{\nArgs\n:[\ninit\n,\na\n, \n100\n, \nb\n,\n200\n]}' -P \nOR ('Org1MSP.member','Org2MSP.member')\n\n\n\n\n\nSee the endorsement policies documentation for more details on policy implementation.\n\n\n\u6709\u5173\u66f4\u591a\u80cc\u4e66\u7b56\u7565\u7684\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u8003\n\u80cc\u4e66\u7b56\u7565\n\n\n1.9.4. \u67e5\u8be2\n\n\nLet\u2019s query for the value of a to make sure the chaincode was properly instantiated and the state DB was populated. The syntax for query is as follows:\n\n\n\u8ba9\u6211\u4eec\u67e5\u8be2\u4e00\u4e0b\na\n\u7684\u503c\uff0c\u4ee5\u786e\u4fdd\u94fe\u7801\u88ab\u6b63\u786e\u5b9e\u4f8b\u5316\uff0c\nstate DB\n\u88ab\u586b\u5145\u3002\u67e5\u8be2\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a\n\n\n# be sure to set the -C and -n flags appropriately\n\npeer chaincode query -C $CHANNEL_NAME -n mycc -c '{\nArgs\n:[\nquery\n,\na\n]}'\n\n\n\n\n1.9.5. \u8c03\u7528\n\n\nNow let\u2019s move 10 from a to b. This transaction will cut a new block and update the state DB. The syntax for invoke is as follows:\n\n\n\u73b0\u5728\u8ba9\u6211\u4eec\u4ece\na\n\u8d26\u6237\u8f6c\n10\n\u5230\nb\n\u8d26\u6237\u3002\u8fd9\u4e2a\u4ea4\u6613\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u533a\u5757\u5e76\u66f4\u65b0\nstate DB\n\u3002\u8c03\u7528\u8bed\u6cd5\u5982\u4e0b\uff1a\n\n\n# be sure to set the -C and -n flags appropriately\n\npeer chaincode invoke -o orderer.example.com:7050  --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem  -C $CHANNEL_NAME -n mycc -c '{\nArgs\n:[\ninvoke\n,\na\n,\nb\n,\n10\n]}'\n\n\n\n\n1.9.6. \u67e5\u8be2\n\n\n\u8ba9\u6211\u4eec\u786e\u8ba4\u4e0b\u6211\u4eec\u4e4b\u524d\u7684\u8c03\u7528\u88ab\u6b63\u786e\u5730\u6267\u884c\u4e86\u3002\u6211\u4eec\u521d\u59cb\u5316\u4e86\na\n\u7684\u503c\u4e3a\n100\n\uff0c\u5728\u4e0a\u4e00\u6b21\u8c03\u7528\u7684\u65f6\u4faf\u8f6c\u79fb\u4e86\n10\n\u7ed9\nb\n\u3002\u56e0\u6b64\uff0c\u67e5\u8be2\na\n\u5e94\u8be5\u5c55\u793a\n90\n\u3002\u67e5\u8be2\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a\n\n\n# be sure to set the -C and -n flags appropriately\n\npeer chaincode query -C $CHANNEL_NAME -n mycc -c '{\nArgs\n:[\nquery\n,\na\n]}'\n\n\n\n\nWe should see the following:\n\n\n\u6211\u4eec\u5e94\u8be5\u770b\u5230\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\nQuery Result: 90\n\n\n\n\nFeel free to start over and manipulate the key value pairs and subsequent invocations.\n\n\n\u968f\u65f6\u91cd\u65b0\u5f00\u59cb\u5e76\u64cd\u4f5c\u952e\u503c\u5bf9\u548c\u968f\u540e\u7684\u8c03\u7528\u3002\n\n\n1.9.7. \u5e55\u540e\u53d1\u751f\u4e86\u4ec0\u4e48?\n\n\n\n\nNote\n\n\n\n\nThese steps describe the scenario in which script.sh is not commented out in the docker-compose-cli.yaml file. Clean your network with ./byfn.sh -m down and ensure this command is active. Then use the same docker-compose prompt to launch your network again\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u8fd9\u4e9b\u6b65\u9aa4\u63cf\u8ff0\u5566\u5728\nscript.sh\n\u811a\u672c\u4e2d\u6ca1\u6709\u6ce8\u91ca\u6389\u7684\ndocker-compose-cli.yaml\n\u6587\u4ef6\u4e2d\u7684\u573a\u666f\u3002\u4f7f\u7528\n./byfn.sh -m down\n\u5e76\u786e\u4fdd\u547d\u4ee4\u6267\u884c\u6210\u529f\u3002\u7136\u540e\u4f7f\u7528\u76f8\u540c\u7684docker-compose\u63d0\u793a\u53bb\u542f\u52a8\u4f60\u7684\u7f51\u7edc\u3002\n\n\n\n\n\n\n\n\n\n\nA script - script.sh - is baked inside the CLI container. The script drives the createChannel command against the supplied channel name and uses the channel.tx file for channel configuration.\n\n\n\n\n\n\nscript.sh\n\u811a\u672c\u88ab\u62f7\u8d1d\u5230CLI\u5bb9\u5668\u4e2d\u3002\u8fd9\u4e2a\u811a\u672c\u9a71\u52a8\u4e86\u4f7f\u7528\u63d0\u4f9b\u7684channel name\u4ee5\u53ca\u4fe1\u9053\u914d\u7f6e\u7684channel.tx\u6587\u4ef6\u7684\ncreateChannel\n\u547d\u4ee4\u3002\n\n\n\n\n\n\nThe output of createChannel is a genesis block - \n.block - which gets stored on the peers\u2019 file systems and contains the channel configuration specified from channel.tx.\n\n\n\n\n\n\ncreateChannel\n\u547d\u4ee4\u7684\u4ea7\u51fa\u662f\u4e00\u4e2a\u521b\u4e16\u533a\u5757-\nyour_channel_name\n.block\n-\u8fd9\u4e2a\u521b\u4e16\u533a\u5757\u88ab\u5b58\u50a8\u5728peer\u8282\u70b9\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u540c\u65f6\u5305\u542b\u4e86\u5728channel.tx\u7684\u4fe1\u9053\u914d\u7f6e\u3002\n\n\n\n\n\n\nThe joinChannel command is exercised for all four peers, which takes as input the previously generated genesis block. This command instructs the peers to join \n and create a chain starting with \n.block.\n\n\n\n\n\n\njoinChannel\n\u547d\u4ee4\u88ab4\u4e2apeer\u8282\u70b9\u6267\u884c\uff0c\u4f5c\u4e3a\u4e4b\u524d\u4ea7\u751f\u7684genesis block\u7684\u8f93\u5165\u3002\u8fd9\u4e2a\u547d\u4ee4\u4ecb\u7ecd\u4e86peer\u8282\u70b9\u52a0\u5165\nyour_channel_name\n\u4ee5\u53ca\u5229\u7528\nyour_channel_name\n.block\n\u53bb\u521b\u5efa\u4e00\u6761\u94fe\u3002\n\n\n\n\n\n\nNow we have a channel consisting of four peers, and two organizations. This is our TwoOrgsChannel profile.\n\n\n\n\n\n\n\u73b0\u5728\u6211\u4eec\u6709\u4e86\u75314\u4e2apeer\u8282\u70b9\u4ee5\u53ca2\u4e2a\u7ec4\u7ec7\u6784\u6210\u7684\u4fe1\u9053\u3002\u8fd9\u662f\u6211\u4eec\u7684\nTwoOrgsChannel\n\u914d\u7f6e\u6587\u4ef6\u3002\n\n\n\n\n\n\npeer0.org1.example.com and peer1.org1.example.com belong to Org1; peer0.org2.example.com and peer1.org2.example.com belong to Org2\n\n\n\n\n\n\npeer0.org1.example.com\n\u548c\npeer1.org1.example.com\n\u5c5e\u4e8eOrg1;\npeer0.org2.example.com\n\u548c\npeer1.org2.example.com\n\u5c5e\u4e8eOrg2\n\n\n\n\n\n\nThese relationships are defined through the crypto-config.yaml and the MSP path is specified in our docker compose.\n\n\n\n\n\n\n\u8fd9\u4e9b\u5173\u7cfb\u662f\u901a\u8fc7crypto-config.yaml\u5b9a\u4e49\u7684\uff0cMSP\u8def\u5f84\u5728docker-compose\u6587\u4ef6\u4e2d\u88ab\u6307\u5b9a\u3002\n\n\n\n\n\n\nThe anchor peers for Org1MSP (peer0.org1.example.com) and Org2MSP (peer0.org2.example.com) are then updated. We do this by passing the Org1MSPanchors.tx and Org2MSPanchors.tx artifacts to the ordering service along with the name of our channel.\n\n\n\n\n\n\nOrg1MSP(\npeer0.org1.example.com\n)\u548cOrg2MSP(\npeer0.org2.example.com\n)\u7684anchor peers\u5c06\u5728\u540e\u7eed\u88ab\u66f4\u65b0\u3002\u6211\u4eec\u901a\u8fc7\u643a\u5e26channel\u7684\u540d\u5b57\u4f20\u9012\nOrg1MSPanchors.tx\n\u548c\nOrg2MSPanchors.tx\n\u914d\u7f6e\u5230\u6392\u5e8f\u670d\u52a1\u6765\u5b9e\u73b0anchor peer\u7684\u66f4\u65b0\u3002\n\n\n\n\n\n\nA chaincode - chaincode_example02 - is installed on peer0.org1.example.com and peer0.org2.example.com\n\n\n\n\n\n\n\u4e00\u4e2a\u94fe\u7801-\nchaincode_example02\n\u88ab\u5b89\u88c5\u5728\npeer0.org1.example.com\n\u548c\npeer0.org2.example.com\n\n\n\n\n\n\nThe chaincode is then \u201cinstantiated\u201d on peer0.org2.example.com. Instantiation adds the chaincode to the channel, starts the container for the target peer, and initializes the key value pairs associated with the chaincode. The initial values for this example are [\u201ca\u201d,\u201d100\u201d \u201cb\u201d,\u201d200\u201d]. This \u201cinstantiation\u201d results in a container by the name of dev-peer0.org2.example.com-mycc-1.0 starting.\n\n\n\n\n\n\n\u8fd9\u4e2a\u94fe\u7801\u5728\npeer0.org2.example.com\n\u88ab\u5b9e\u4f8b\u5316\u3002\u5b9e\u4f8b\u5316\u8fc7\u7a0b\u5c06\u94fe\u7801\u6dfb\u52a0\u5230\u4fe1\u9053\u4e0a\uff0c\u5e76\u542f\u52a8peer\u8282\u70b9\u5bf9\u5e94\u7684\u5bb9\u5668\uff0c\u5e76\u4e14\u521d\u59cb\u5316\u548c\u94fe\u7801\u670d\u52a1\u6709\u5173\u7684\u952e\u503c\u5bf9\u3002\u793a\u4f8b\u7684\u521d\u59cb\u5316\u7684\u503c\u662f\n[\u201da\u201c,\u201d100\u201c\uff0c\u201db\u201c\uff0c\u201d200\u201c]\n\u3002\u5b9e\u4f8b\u5316\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u540d\u4e3a\ndev-peer0.org2.example.com-mycc-1.0\n\u7684\u5bb9\u5668\u542f\u52a8\u4e86\u3002\n\n\n\n\n\n\nThe instantiation also passes in an argument for the endorsement policy. The policy is defined as -P \nOR    (\nOrg1MSP.member\n,\nOrg2MSP.member\n)\n, meaning that any transaction must be endorsed by a peer tied to Org1 or Org2.\n\n\n\n\n\n\n\u5b9e\u4f8b\u5316\u8fc7\u7a0b\u540c\u6837\u4e3a\u80cc\u4e66\u7b56\u7565\u4f20\u9012\u76f8\u5173\u53c2\u6570\u3002\u7b56\u7565\u88ab\u5b9a\u4e49\u4e3a\n-P \"OR    ('Org1MSP.member','Org2MSP.member')\"\n\uff0c\u610f\u601d\u662f\u4efb\u4f55\u4ea4\u6613\u5fc5\u987b\u88abOrg1\u6216\u8005Org2\u80cc\u4e66\u3002\n\n\n\n\n\n\nA query against the value of \u201ca\u201d is issued to peer0.org1.example.com. The chaincode was previously installed on peer0.org1.example.com, so this will start a container for Org1 peer0 by the name of dev-peer0.org1.example.com-mycc-1.0. The result of the query is also returned. No write operations have occurred, so a query against \u201ca\u201d will still return a value of \u201c100\u201d.\n\n\n\n\n\n\n\u4e00\u4e2a\u9488\u5bf9\na\n\u7684\u67e5\u8be2\u53d1\u5f80\npeer0.org1.example.com\n\u3002\u94fe\u7801\u670d\u52a1\u5df2\u7ecf\u88ab\u5b89\u88c5\u5728\u4e86\npeer0.org1.example.com\n\uff0c\u56e0\u6b64\u8fd9\u6b21\u67e5\u8be2\u5c06\u542f\u52a8\u4e00\u4e2a\u540d\u4e3a\ndev-peer0.org1.example.com-mycc-1.0\n\u7684\u5bb9\u5668\u3002\u67e5\u8be2\u7684\u7ed3\u679c\u4e5f\u5c06\u88ab\u8fd4\u56de\u3002\u6ca1\u6709\u5199\u64cd\u4f5c\u51fa\u73b0\uff0c\u56e0\u6b64\u67e5\u8be2\u7684\u7ed3\u679c\u7684\u503c\u5c06\u4e3a\n100\n\u3002\n\n\n\n\n\n\nAn invoke is sent to peer0.org1.example.com to move \u201c10\u201d from \u201ca\u201d to \u201cb\u201d\n\n\n\n\n\n\n\u4e00\u6b21\ninvoke\n\u88ab\u53d1\u5f80\npeer0.org1.example.com\n\uff0c\u4ece\na\n\u8f6c\u79fb\n10\n\u5230\nb\n\u3002\n\n\n\n\n\n\nThe chaincode is then installed on peer1.org2.example.com\n\n\n\n\n\n\n\u7136\u540e\u94fe\u7801\u670d\u52a1\u88ab\u5b89\u88c5\u5230\npeer1.org2.example.com\n\n\n\n\n\n\nA query is sent to peer1.org2.example.com for the value of \u201ca\u201d. This starts a third chaincode container by the name of dev-peer1.org2.example.com-mycc-1.0. A value of 90 is returned, correctly reflecting the previous transaction during which the value for key \u201ca\u201d was modified by 10.\n\n\n\n\n\n\n\u4e00\u4e2a\nquery\n\u8bf7\u6c42\u88ab\u53d1\u5f80\npeer1.org2.example.com\n\u7528\u4e8e\u67e5\u8be2\na\n\u7684\u503c\u3002\u8fd9\u5c06\u542f\u52a8\u7b2c\u4e09\u4e2a\u94fe\u7801\u670d\u52a1\u540d\u4e3a\ndev-peer1.org2.example.com-mycc-1.0\n\u3002\u8fd4\u56de\na\n\u7684\u503c\u4e3a90,\u6b63\u786e\u5730\u53cd\u6620\u4e86\u4e4b\u524d\u7684\u4ea4\u6613\uff0c\na\n\u7684\u503c\u88ab\u8f6c\u79fb\u4e8610\u3002\n\n\n\n\n\n\n1.9.8. \u8fd9\u6307\u660e\u4e86\u4ec0\u4e48\uff1f\n\n\nChaincode MUST be installed on a peer in order for it to successfully perform read/write operations against the ledger. Furthermore, a chaincode container is not started for a peer until an init or traditional transaction - read/write - is performed against that chaincode (e.g. query for the value of \u201ca\u201d). The transaction causes the container to start. Also, all peers in a channel maintain an exact copy of the ledger which comprises the blockchain to store the immutable, sequenced record in blocks, as well as a state database to maintain a snapshot of the current state. This includes those peers that do not have chaincode installed on them (like peer1.org1.example.com in the above example) . Finally, the chaincode is accessible after it is installed (like peer1.org2.example.com in the above example) because it has already been instantiated.\n\n\n\u4e3a\u4e86\u80fd\u591f\u6b63\u786e\u5730\u5728\u8d26\u672c\u4e0a\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\uff0c\u94fe\u7801\u670d\u52a1\u5fc5\u987b\u88ab\u5b89\u88c5\u5728peer\u8282\u70b9\u4e0a\u3002\u6b64\u5916\uff0c\u6bcf\u4e2apeer\u8282\u70b9\u7684\u94fe\u7801\u670d\u52a1\u7684\u5bb9\u5668\u9664\u4e86\ninit\n\u6216\u8005\u4f20\u7edf\u7684\u4ea4\u6613-\u8bfb/\u5199-\u9488\u5bf9\u8be5\u94fe\u7801\u670d\u52a1\u6267\u884c\uff08\u4f8b\u5982\u67e5\u8be2\na\n\u7684\u503c\uff09\uff0c\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u542f\u52a8\u3002\u4ea4\u6613\u5bfc\u81f4\u5bb9\u5668\u7684\u542f\u52a8\u3002\u5f53\u7136\uff0c\u6240\u6709\u4fe1\u9053\u4e2d\u7684\u8282\u70b9\u90fd\u6301\u6709\u4ee5\u5757\u7684\u5f62\u5f0f\u987a\u5e8f\u5b58\u50a8\u7684\u4e0d\u53ef\u53d8\u7684\u8d26\u672c\u7cbe\u786e\u7684\u5907\u4efd\uff0c\u4ee5\u53ca\u72b6\u6001\u6570\u636e\u5e93\u6765\u4fdd\u5b58\u524d\u72b6\u6001\u7684\u5feb\u7167\u3002\u8fd9\u5305\u62ec\u4e86\u6ca1\u6709\u5728\u5176\u4e0a\u5b89\u88c5\u94fe\u7801\u670d\u52a1\u7684peer\u8282\u70b9\uff08\npeer1.org2.example.com\n\u5982\u4e0a\u6240\u793a\uff09\u3002\u6700\u540e\uff0c\u94fe\u7801\u5728\u88ab\u5b89\u88c5\u540e\u5c06\u662f\u53ef\u8fbe\u72b6\u6001\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u88ab\u5b9e\u4f8b\u5316\u4e86\u3002\n\n\n1.9.9. \u6211\u5982\u4f55\u67e5\u8be2\u8fd9\u4e9b\u4ea4\u6613\uff1f\n\n\n\u68c0\u67e5CLI\u5bb9\u5668\u7684\u65e5\u5fd7\u3002\n\n\ndocker logs -f cli\n\n\n\n\n\u4f60\u5e94\u8be5\u770b\u5230\u4ee5\u4e0b\u8f93\u51fa\uff1a\n\n\n2017-05-16 17:08:01.366 UTC [msp] GetLocalMSP -\n DEBU 004 Returning existing local MSP\n2017-05-16 17:08:01.366 UTC [msp] GetDefaultSigningIdentity -\n DEBU 005 Obtaining default signing identity\n2017-05-16 17:08:01.366 UTC [msp/identity] Sign -\n DEBU 006 Sign: plaintext: 0AB1070A6708031A0C08F1E3ECC80510...6D7963631A0A0A0571756572790A0161\n2017-05-16 17:08:01.367 UTC [msp/identity] Sign -\n DEBU 007 Sign: digest: E61DB37F4E8B0D32C9FE10E3936BA9B8CD278FAA1F3320B08712164248285C54\nQuery Result: 90\n2017-05-16 17:08:15.158 UTC [main] main -\n INFO 008 Exiting.....\n===================== Query on PEER3 on channel 'mychannel' is successful =====================\n\n===================== All GOOD, BYFN execution completed =====================\n\n\n _____   _   _   ____\n| ____| | \\ | | |  _ \\\n|  _|   |  \\| | | | | |\n| |___  | |\\  | | |_| |\n|_____| |_| \\_| |____/\n\n\n\n\nYou can scroll through these logs to see the various transactions.\n\n\n\u4f60\u53ef\u4ee5\u6eda\u52a8\u8fd9\u4e9b\u65e5\u5fd7\u6765\u67e5\u770b\u5404\u79cd\u4ea4\u6613\u3002\n\n\n1.9.10. \u6211\u5982\u4f55\u67e5\u770b\u94fe\u7801\u65e5\u5fd7\uff1f\n\n\nInspect the individual chaincode containers to see the separate transactions executed against each container. Here is the combined output from each container:\n\n\n\u68c0\u67e5\u6bcf\u4e2a\u72ec\u7acb\u7684\u94fe\u7801\u670d\u52a1\u5bb9\u5668\u6765\u67e5\u770b\u6bcf\u4e2a\u5bb9\u5668\u5185\u7684\u5206\u9694\u7684\u4ea4\u6613\u3002\u4e0b\u9762\u662f\u6bcf\u4e2a\u94fe\u7801\u670d\u52a1\u5bb9\u5668\u7684\u65e5\u5fd7\u7684\u7ec4\u5408\uff1a\n\n\n$ docker logs dev-peer0.org2.example.com-mycc-1.0\n04:30:45.947 [BCCSP_FACTORY] DEBU : Initialize BCCSP [SW]\nex02 Init\nAval = 100, Bval = 200\n\n$ docker logs dev-peer0.org1.example.com-mycc-1.0\n04:31:10.569 [BCCSP_FACTORY] DEBU : Initialize BCCSP [SW]\nex02 Invoke\nQuery Response:{\nName\n:\na\n,\nAmount\n:\n100\n}\nex02 Invoke\nAval = 90, Bval = 210\n\n$ docker logs dev-peer1.org2.example.com-mycc-1.0\n04:31:30.420 [BCCSP_FACTORY] DEBU : Initialize BCCSP [SW]\nex02 Invoke\nQuery Response:{\nName\n:\na\n,\nAmount\n:\n90\n}\n\n\n\n\n1.10. \u4e86\u89e3 Docker Compose \u6280\u672f\n\n\nThe BYFN sample offers us two flavors of Docker Compose files, both of which are extended from the docker-compose-base.yaml (located in the base folder). Our first flavor, docker-compose-cli.yaml, provides us with a CLI container, along with an orderer, four peers. We use this file for the entirety of the instructions on this page.\n\n\nBYFN\u793a\u4f8b\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u4e24\u79cd\u98ce\u683c\u7684Docker Compose\u6587\u4ef6\uff0c\u5b83\u4eec\u90fd\u7ee7\u627f\u81ea\ndocker-compose-base.yaml\n\uff08\nbase\n\u76ee\u5f55\u4e0b\uff09\u3002\u6211\u4eec\u7684\u7b2c\u4e00\u79cd\u7c7b\u578b\uff0c\ndocker-compose-cli.yaml\n\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2aCLI\u5bb9\u5668\uff0c\u4ee5\u53ca\u4e00\u4e2aorderer\u5bb9\u5668\uff0c\u56db\u4e2apeer\u5bb9\u5668\u3002\u6211\u4eec\u7528\u6b64\u6587\u4ef6\u6765\u5c55\u5f00\u8fd9\u4e2a\u9875\u9762\u4e0a\u7684\u6240\u6709\u8bf4\u660e\u3002\n\n\n\n\nNote\n\n\n\n\nthe remainder of this section covers a docker-compose file designed for the SDK. Refer to the Node SDK repo for details on running these tests.\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u672c\u8282\u7684\u5269\u4f59\u90e8\u5206\u6db5\u76d6\u4e86\u4e3aSDK\u8bbe\u8ba1\u7684docker-compose\u6587\u4ef6\u3002\u6709\u5173\u8fd0\u884c\u8fd9\u4e9b\u6d4b\u8bd5\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\nNode SDK\n\u4ed3\u5e93\u3002\n\n\n\n\n\n\nThe second flavor, docker-compose-e2e.yaml, is constructed to run end-to-end tests using the Node.js SDK. Aside from functioning with the SDK, its primary differentiation is that there are containers for the fabric-ca servers. As a result, we are able to send REST calls to the organizational CAs for user registration and enrollment.\n\n\n\u7b2c\u4e8c\u79cd\u98ce\u683c\u662f\ndocker-compose-e2e.yaml\n\uff0c\u88ab\u6784\u9020\u4e3a\u4f7f\u7528Node.js SDK\u6765\u8fd0\u884c\u7aef\u5230\u7aef\u6d4b\u8bd5\u3002\u9664\u4e86SDK\u7684\u529f\u80fd\u4e4b\u5916\uff0c\u5b83\u4e3b\u8981\u7684\u533a\u522b\u5728\u4e8e\u5b83\u6709\u8fd0\u884cfabric-ca\u670d\u52a1\u7684\u5bb9\u5668\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u80fd\u591f\u5411\u7ec4\u7ec7\u7684CA\u8282\u70b9\u53d1\u9001REST\u7684\u8bf7\u6c42\u7528\u4e8e\u6ce8\u518c\u548c\u767b\u8bb0\u3002\n\n\nIf you want to use the docker-compose-e2e.yaml without first running the byfn.sh script, then we will need to make four slight modifications. We need to point to the private keys for our Organization\u2019s CA\u2019s. You can locate these values in your crypto-config folder. For example, to locate the private key for Org1 we would follow this path - crypto-config/peerOrganizations/org1.example.com/ca/. The private key is a long hash value followed by _sk. The path for Org2 would be - crypto-config/peerOrganizations/org2.example.com/ca/.\n\n\n\u5982\u679c\u4f60\u5728\u6ca1\u6709\u8fd0\u884c\nbyfn.sh\n\u811a\u672c\u7684\u60c5\u51b5\u4e0b\uff0c\u60f3\u4f7f\u7528\ndocker-compose-e2e.yaml\n\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c4\u4e2a\u8f7b\u5fae\u7684\u4fee\u6539\u3002\u6211\u4eec\u9700\u8981\u6307\u51fa\u672c\u7ec4\u7ec7CA\u7684\u79c1\u94a5\u3002\u4f60\u53ef\u4ee5\u5728\ncrypto-config\n\u6587\u4ef6\u5939\u4e2d\u627e\u5230\u8fd9\u4e9b\u503c\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e3a\u4e86\u5b9a\u4f4dOrg1\u7684\u79c1\u94a5\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\ncrypto-config/peerOrganizations/org1.example.com/ca/\n\u3002Org2\u7684\u8def\u5f84\u4e3a\ncrypto-config/peerOrganizations/org2.example.com/ca/\n\u3002\n\n\nIn the docker-compose-e2e.yaml update the FABRIC_CA_SERVER_TLS_KEYFILE variable for ca0 and ca1. You also need to edit the path that is provided in the command to start the ca server. You are providing the same private key twice for each CA container.\n\n\n\u5728\ndocker-compose-e2e.yaml\n\u91cc\u4e3aca0\u548cca1\u66f4\u65b0FABRIC_CA_SERVER_TLS_KEYFILE\u53d8\u91cf\u3002\u4f60\u540c\u6837\u9700\u8981\u7f16\u8f91command\u4e2d\u53bb\u542f\u52a8ca server\u7684\u8def\u5f84\u3002\u4f60\u4e3a\u6bcf\u4e2aCA\u5bb9\u5668\u63d0\u4f9b\u4e862\u6b21\u540c\u6837\u7684\u79c1\u94a5\u3002\n\n\n1.11. \u4f7f\u7528CouchDB\n\n\nThe state database can be switched from the default (goleveldb) to CouchDB. The same chaincode functions are available with CouchDB, however, there is the added ability to perform rich and complex queries against the state database data content contingent upon the chaincode data being modeled as JSON.\n\n\n\u72b6\u6001\u6570\u636e\u5e93\u53ef\u4ee5\u4ece\u9ed8\u8ba4\u7684\ngoleveldb\n\u5207\u6362\u5230\nCouchDB\n\u3002\u94fe\u7801\u529f\u80fd\u540c\u6837\u80fd\u4f7f\u7528\nCouchDB\n\u3002\u4f46\u662f\uff0c\nCouchDB\n\u63d0\u4f9b\u4e86\u989d\u5916\u7684\u80fd\u529b\u6765\u6839\u636eJSON\u5f62\u5f0f\u7684\u94fe\u7801\u670d\u52a1\u6570\u636e\u63d0\u4f9b\u66f4\u52a0\u4e30\u5bcc\u4ee5\u53ca\u590d\u6742\u7684\u67e5\u8be2\u3002\n\n\nTo use CouchDB instead of the default database (goleveldb), follow the same procedures outlined earlier for generating the artifacts, except when starting the network pass docker-compose-couch.yaml as well:\n\n\n\u4f7f\u7528CouchDB\u4ee3\u66ff\u9ed8\u8ba4\u7684\u6570\u636e\u5e93\uff08goleveldb\uff09\uff0c\u9664\u4e86\u5728\u542f\u52a8\u7f51\u7edc\u7684\u65f6\u4faf\u4f20\u9012\ndocker-compose-couch.yaml\n\u4e4b\u5916\uff0c\u8bf7\u9075\u5faa\u524d\u9762\u63d0\u5230\u7684\u751f\u6210\u914d\u7f6e\u6587\u4ef6\u7684\u8fc7\u7a0b\uff1a\n\n\nCHANNEL_NAME=$CHANNEL_NAME TIMEOUT=\npick_a_value\n docker-compose -f docker-compose-cli.yaml -f docker-compose-couch.yaml up -d\n\n\n\n\nchaincode_example02 should now work using CouchDB underneath.\n\n\nchaincode_example02\u73b0\u5728\u5e94\u8be5\u4f7f\u7528\u4e0b\u9762\u7684CouchDB\u3002\n\n\n\n\nNote\n\n\n\n\nIf you choose to implement mapping of the fabric-couchdb container port to a host port, please make sure you are aware of the security implications. Mapping of the port in a development environment makes the CouchDB REST API available, and allows the visualization of the database via the CouchDB web interface (Fauxton). Production environments would likely refrain from implementing port mapping in order to restrict outside access to the CouchDB containers.\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u5982\u679c\u4f60\u9009\u62e9\u5c06fabric-couchdb\u5bb9\u5668\u7aef\u53e3\u6620\u5c04\u5230\u4e3b\u673a\u7aef\u53e3\uff0c\u8bf7\u786e\u4fdd\u4f60\u610f\u8bc6\u5230\u4e86\u5b89\u5168\u6027\u7684\u5f71\u54cd\u3002\u5728\u5f00\u53d1\u73af\u5883\u4e2d\u6620\u5c04\u7aef\u53e3\u53ef\u4ee5\u4f7fCouchDB REST API\u53ef\u7528\uff0c\u5e76\u5141\u8bb8\u901a\u8fc7CouchDB Web\u754c\u9762\uff08Fauxton\uff09\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u53ef\u89c6\u5316\u3002\u751f\u4ea7\u73af\u5883\u5c06\u907f\u514d\u7aef\u53e3\u6620\u5c04\uff0c\u4ee5\u9650\u5236\u5bf9CouchDB\u5bb9\u5668\u7684\u5916\u90e8\u8bbf\u95ee\u3002\n\n\n\n\n\n\nYou can use chaincode_example02 chaincode against the CouchDB state database using the steps outlined above, however in order to exercise the CouchDB query capabilities you will need to use a chaincode that has data modeled as JSON, (e.g. marbles02). You can locate the marbles02 chaincode in the fabric/examples/chaincode/go directory.\n\n\n\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u5217\u51fa\u7684\u6b65\u9aa4\u4f7f\u7528CouchDB\u6765\u6267\u884cchaincode_example02\uff0c\u7136\u800c\u4e3a\u4e86\u6267\u884c\u6267\u884cCouchDB\u7684\u67e5\u8be2\u80fd\u529b\uff0c\u4f60\u5c06\u9700\u8981\u4f7f\u7528\u88ab\u683c\u5f0f\u5316\u4e3aJSON\u7684\u6570\u636e\uff08\u4f8b\u5982marbles02\uff09\u3002\u4f60\u53ef\u4ee5\u5728\nfabric/examples/chaincode/go\n\u76ee\u5f55\u4e2d\u627e\u5230\nmarbles02\n\u94fe\u7801\u670d\u52a1\u3002\n\n\nWe will follow the same process to create and join the channel as outlined in the Create \n Join Channel section above. Once you have joined your peer(s) to the channel, use the following steps to interact with the marbles02 chaincode:\n\n\n\u6211\u4eec\u5c06\u6309\u7167\u4e0a\u8ff0\n\u521b\u5efa\u548c\u52a0\u5165\u9891\u9053\n\u90e8\u5206\u6240\u8ff0\u7684\u76f8\u540c\u8fc7\u7a0b\u521b\u5efa\u548c\u52a0\u5165\u4fe1\u9053\u3002\u4e00\u65e6\u4f60\u5c06peer\u8282\u70b9\u52a0\u5165\u5230\u4e86\u4fe1\u9053\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u6b65\u9aa4\u4e0emarbles02\u94fe\u7801\u4ea4\u4e92\uff1a\n\n\n\n\n\n\nInstall and instantiate the chaincode on peer0.org1.example.com:\n\n\n\n\n\n\n\u5728\npeer0.org1.example.com\n\u4e0a\u5b89\u88c5\u548c\u5b9e\u4f8b\u5316\u94fe\u7801\uff1a\n\n\n\n\n\n\n# be sure to modify the $CHANNEL_NAME variable accordingly for the instantiate command\n\npeer chaincode install -n marbles -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/marbles02\npeer chaincode instantiate -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -v 1.0 -c '{\nArgs\n:[\ninit\n]}' -P \nOR ('Org0MSP.member','Org1MSP.member')\n\n\n\n\n\n\n\n\n\nCreate some marbles and move them around:\n\n\n\n\n\n\n\u521b\u5efa\u4e00\u4e9bmarbles\u5e76\u79fb\u52a8\u5b83\u4eec\uff1a\n\n\n\n\n\n\n# be sure to modify the $CHANNEL_NAME variable accordingly\n\npeer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{\nArgs\n:[\ninitMarble\n,\nmarble1\n,\nblue\n,\n35\n,\ntom\n]}'\npeer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{\nArgs\n:[\ninitMarble\n,\nmarble2\n,\nred\n,\n50\n,\ntom\n]}'\npeer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{\nArgs\n:[\ninitMarble\n,\nmarble3\n,\nblue\n,\n70\n,\ntom\n]}'\npeer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{\nArgs\n:[\ntransferMarble\n,\nmarble2\n,\njerry\n]}'\npeer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{\nArgs\n:[\ntransferMarblesBasedOnColor\n,\nblue\n,\njerry\n]}'\npeer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{\nArgs\n:[\ndelete\n,\nmarble1\n]}'\n\n\n\n\n\n\nIf you chose to map the CouchDB ports in docker-compose, you can now view the state database through the CouchDB web interface (Fauxton) by opening a browser and navigating to the following URL:\n\n\n\n\nhttp://localhost:5984/_utils\n\n\n\n\n\u5982\u679c\u4f60\u9009\u62e9\u5728docker-compose\u6587\u4ef6\u4e2d\u6620\u5c04\u4f60\u7684CouchDB\u7684\u7aef\u53e3\uff0c\u90a3\u4e48\u4f60\u73b0\u5728\u5c31\u53ef\u4ee5\u901a\u8fc7CouchDB Web\u754c\u9762\uff08Fauxton\uff09\u901a\u8fc7\u6253\u5f00\u6d4f\u89c8\u5668\u5bfc\u822a\u4e0b\u5217URL\uff1a\nhttp://localhost:5984/_utils\n\n\n\n\nYou should see a database named mychannel (or your unique channel name) and the documents inside it.\n\n\n\u4f60\u5e94\u8be5\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u540d\u4e3a\nmychannel\n\uff08\u6216\u8005\u4f60\u7684\u552f\u4e00\u7684\u4fe1\u9053\u540d\u5b57\uff09\u7684\u6570\u636e\u5e93\u4ee5\u53ca\u5b83\u7684\u6587\u6863\u5728\u91cc\u9762\uff1a\n\n\n\n\nNote\n\n\n\n\nFor the below commands, be sure to update the $CHANNEL_NAME variable appropriately.\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u5bf9\u4e8e\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u8bf7\u786e\u5b9a$CHANNEL_NAME\u53d8\u91cf\u88ab\u66f4\u65b0\u4e86\u3002\n\n\n\n\n\n\nYou can run regular queries from the CLI (e.g. reading marble2):\n\n\n\u4f60\u53ef\u4ee5CLI\u4e2d\u8fd0\u884c\u5e38\u89c4\u7684\u67e5\u8be2\uff08\u4f8b\u5982\u8bfb\u53d6\nmarble2\n\uff09\uff1a\n\n\npeer chaincode query -C $CHANNEL_NAME -n marbles -c '{\nArgs\n:[\nreadMarble\n,\nmarble2\n]}'\n\n\n\n\nThe output should display the details of marble2:\n\n\nmarble2\u7684\u8f93\u51fa\u5e94\u8be5\u663e\u793a\u4e3a\u5982\u4e0b\uff1a\n\n\nQuery Result: {\ncolor\n:\nred\n,\ndocType\n:\nmarble\n,\nname\n:\nmarble2\n,\nowner\n:\njerry\n,\nsize\n:50}\n\n\n\n\nYou can retrieve the history of a specific marble - e.g. marble1:\n\n\n\u4f60\u53ef\u4ee5\u68c0\u7d22\u7279\u5b9amarble\u7684\u5386\u53f2\u8bb0\u5f55-\u4f8b\u5982\nmarble1\n:\n\n\npeer chaincode query -C $CHANNEL_NAME -n marbles -c '{\nArgs\n:[\ngetHistoryForMarble\n,\nmarble1\n]}'\n\n\n\n\nThe output should display the transactions on marble1:\n\n\n\u8f93\u51fa\u5e94\u8be5\u5728\nmarble1\n\u7684\u4ea4\u6613\uff1a\n\n\nQuery Result: [{\nTxId\n:\n1c3d3caf124c89f91a4c0f353723ac736c58155325f02890adebaa15e16e6464\n, \nValue\n:{\ndocType\n:\nmarble\n,\nname\n:\nmarble1\n,\ncolor\n:\nblue\n,\nsize\n:35,\nowner\n:\ntom\n}},{\nTxId\n:\n755d55c281889eaeebf405586f9e25d71d36eb3d35420af833a20a2f53a3eefd\n, \nValue\n:{\ndocType\n:\nmarble\n,\nname\n:\nmarble1\n,\ncolor\n:\nblue\n,\nsize\n:35,\nowner\n:\njerry\n}},{\nTxId\n:\n819451032d813dde6247f85e56a89262555e04f14788ee33e28b232eef36d98f\n, \nValue\n:}]\n\n\n\n\nYou can also perform rich queries on the data content, such as querying marble fields by owner jerry:\n\n\n\u4f60\u8fd8\u53ef\u4ee5\u5bf9\u6570\u636e\u5185\u5bb9\u6267\u884c\u4e30\u5bcc\u7684\u67e5\u8be2\uff0c\u4f8b\u5982\u901a\u8fc7\u62e5\u6709\u8005\njerry\n\u67e5\u8be2marble\uff1a\n\n\npeer chaincode query -C $CHANNEL_NAME -n marbles -c '{\nArgs\n:[\nqueryMarblesByOwner\n,\njerry\n]}'\n\n\n\n\nThe output should display the two marbles owned by jerry:\n\n\n\u8f93\u51fa\u5e94\u8be5\u663e\u793a2\u4e2a\u5c5e\u4e8e\njerry\n\u7684marble\uff1a\n\n\nQuery Result: [{\nKey\n:\nmarble2\n, \nRecord\n:{\ncolor\n:\nred\n,\ndocType\n:\nmarble\n,\nname\n:\nmarble2\n,\nowner\n:\njerry\n,\nsize\n:50}},{\nKey\n:\nmarble3\n, \nRecord\n:{\ncolor\n:\nblue\n,\ndocType\n:\nmarble\n,\nname\n:\nmarble3\n,\nowner\n:\njerry\n,\nsize\n:70}}]\n\n\n\n\n1.12. \u5173\u4e8e\u6570\u636e\u6301\u4e45\u5316\u7684\u63d0\u793a\n\n\nIf data persistence is desired on the peer container or the CouchDB container, one option is to mount a directory in the docker-host into a relevant directory in the container. For example, you may add the following two lines in the peer container specification in the docker-compose-base.yaml file:\n\n\n\u5982\u679c\u9700\u8981\u5728peer\u5bb9\u5668\u6216\u8005CouchDB\u5bb9\u5668\u8fdb\u884c\u6570\u636e\u6301\u4e45\u5316\uff0c\u4e00\u79cd\u9009\u62e9\u662f\u5c06docker\u5bb9\u5668\u5185\u76f8\u5e94\u7684\u76ee\u5f55\u6302\u8f7d\u5230\u5bb9\u5668\u6240\u5728\u7684\u5bbf\u4e3b\u673a\u7684\u4e00\u4e2a\u76ee\u5f55\u4e2d\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u6dfb\u52a0\u4e0b\u5217\u7684\u4e24\u884c\u5230\ndocker-compose-base.yaml\n\u6587\u4ef6\u4e2dpeer\u7684\u7ea6\u5b9a\u4e2d\uff1a\n\n\nvolumes:\n - /var/hyperledger/peer0:/var/hyperledger/production\n\n\n\n\nFor the CouchDB container, you may add the following two lines in the CouchDB container specification:\n\n\n\u5bf9\u4e8eCouchDB\u5bb9\u5668\uff0c\u4f60\u53ef\u4ee5\u5728CouchDB\u7684\u7ea6\u5b9a\u4e2d\u6dfb\u52a0\u4e24\u884c\uff1a\n\n\nvolumes:\n - /var/hyperledger/couchdb0:/opt/couchdb/data\n\n\n\n\n1.13. \u6545\u969c\u6392\u9664\n\n\n\n\n\n\nAlways start your network fresh. Use the following command to remove artifacts, crypto, containers and chaincode images:\n\n\n\n\n\n\n\u59cb\u7ec8\u4fdd\u6301\u4f60\u7684\u7f51\u7edc\u662f\u5168\u65b0\u7684\u3002\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u79fb\u9664\u4e4b\u524d\u751f\u6210\u7684artifacts,crypto,containers\u4ee5\u53cachaincode images\uff1a\n\n\n\n\n\n\n./byfn.sh -m down\n\n\n\n\n\n\n\n\nYOU WILL SEE ERRORS IF YOU DO NOT REMOVE CONTAINERS AND IMAGES\n\n\n\n\n\n\n\u4f60\u5c06\u4f1a\u770b\u5230\u9519\u8bef\u4fe1\u606f\uff0c\u5982\u679c\u4f60\u4e0d\u79fb\u9664\u5bb9\u5668\u548c\u955c\u50cf\n\n\n\n\n\n\nIf you see Docker errors, first check your version (should be 1.12 or above), and then try restarting your Docker process. Problems with Docker are oftentimes not immediately recognizable. For example, you may see errors resulting from an inability to access crypto material mounted within a container.\n\n\n\n\n\n\n\u5982\u679c\u4f60\u770b\u5230\u76f8\u5173\u7684Docker\u9519\u8bef\u4fe1\u606f\uff0c\u8bf7\u68c0\u67e5\u4f60\u7684\u7248\u672c\uff08\u5e94\u4e3a1.12\u6216\u66f4\u9ad8\u7248\u672c\uff09\uff0c\u7136\u540e\u91cd\u542f\u4f60\u7684Docker\u8fdb\u7a0b\u3002Docker\u7684\u95ee\u9898\u901a\u5e38\u4e0d\u4f1a\u88ab\u7acb\u5373\u8bc6\u522b\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u770b\u5230\u7531\u4e8e\u5bb9\u5668\u5185\u52a0\u5bc6\u6750\u6599\u5bfc\u81f4\u7684\u9519\u8bef\u3002\n\n\n\n\n\n\nIf they persist remove your images and start from scratch:\n\n\n\n\n\n\n\u5982\u679c\u5979\u4eec\u575a\u6301\u5220\u9664\u60a8\u7684\u955c\u50cf\uff0c\u5e76\u4ece\u5934\u5f00\u59cb\uff1a\n\n\n\n\n\n\ndocker rm -f $(docker ps -aq)\ndocker rmi -f $(docker images -q)\n\n\n\n\n\n\n\n\nIf you see errors on your create, instantiate, invoke or query commands, make sure you have properly updated the channel name and chaincode name. There are placeholder values in the supplied sample commands.\n\n\n\n\n\n\n\u5982\u679c\u4f60\u53d1\u73b0\u4f60\u7684\u521b\u5efa\u3001\u5b9e\u4f8b\u5316\uff0c\u8c03\u7528\u6216\u8005\u67e5\u8be2\u547d\u4ee4\uff0c\u8bf7\u786e\u4fdd\u4f60\u5df2\u7ecf\u66f4\u65b0\u4e86\u4fe1\u9053\u548c\u94fe\u7801\u7684\u540d\u5b57\u3002\u63d0\u4f9b\u7684\u793a\u4f8b\u547d\u4ee4\u4e2d\u6709\u5360\u4f4d\u7b26\u3002\n\n\n\n\n\n\nIf you see the below error:\n\n\n\n\n\n\n\u5982\u679c\u4f60\u770b\u5230\u5982\u4e0b\u9519\u8bef\uff1a\n\n\n\n\n\n\nError: Error endorsing chaincode: rpc error: code = 2 desc = Error installing chaincode code mycc:1.0(chaincode /var/hyperledger/production/chaincodes/mycc.1.0 exits)\n\n\n\n\nYou likely have chaincode images (e.g. dev-peer1.org2.example.com-mycc-1.0 or dev-peer0.org1.example.com-mycc-1.0) from prior runs. Remove them and try again.\n\n\n\u4f60\u53ef\u80fd\u7531\u4ee5\u524d\u8fd0\u884c\u7684\u94fe\u7801\u670d\u52a1\uff08\u4f8b\u5982\ndev-peer1.org2.example.com-mycc-1.0\n\u6216\ndev-peer0.org1.example.com-mycc-1.0\n\uff09\u3002\u5220\u9664\u5b83\u4eec\uff0c\u7136\u540e\u91cd\u8bd5\u3002\n\n\ndocker rmi -f $(docker images | grep peer[0-9]-peer[0-9] | awk '{print $3}')\n\n\n\n\n\n\n\n\nIf you see something similar to the following:\n\n\n\n\n\n\n\u5982\u679c\u4f60\u770b\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u5185\u5bb9\u7684\u9519\u8bef\u4fe1\u606f\uff1a\n\n\n\n\n\n\nError connecting: rpc error: code = 14 desc = grpc: RPC failed fast due to transport failure\nError: rpc error: code = 14 desc = grpc: RPC failed fast due to transport failure\n\n\n\n\n\u8bf7\u786e\u4fdd\u4f60\u7684fabric\u7f51\u7edc\u8fd0\u884c\u5728\u88ab\u6807\u8bb0\u4e3a\nlatest\n\u7684\n1.0.0-rc1\n\u955c\u50cf\u4e0a\u3002\n\n\nIf you see the below error:\n\n\n\u5982\u679c\u4f60\u770b\u5230\u4e86\u7c7b\u4f3c\u4ee5\u4e0b\u9519\u8bef\u7684\u5185\u5bb9\uff1a\n\n\n[configtx/tool/localconfig] Load -\n CRIT 002 Error reading configuration: Unsupported Config Type \n\npanic: Error reading configuration: Unsupported Config Type \n\n\n\n\n\nThen you did not set the FABRIC_CFG_PATH environment variable properly. The configtxgen tool needs this variable in order to locate the configtx.yaml. Go back and execute an export FABRIC_CFG_PATH=$PWD, then recreate your channel artifacts.\n\n\n\u90a3\u4e48\u4f60\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e\nFABRIC_CFG_PATH\n\u73af\u5883\u53d8\u91cf\u3002configtxgen\u5de5\u5177\u9700\u8981\u8fd9\u4e2a\u53d8\u91cf\u624d\u80fd\u627e\u5230configtx.yaml\u3002\u8fd4\u56de\u5e76\u6267\u884c\nexport FABRIC_CFG_PATH=$PWD\n\uff0c\u7136\u540e\u91cd\u65b0\u521b\u5efachannel\u914d\u7f6e\u3002\n\n\n\n\n\n\nTo cleanup the network, use the down option:\n\n\n\n\n\n\n\u8981\u6e05\u7406\u7f51\u7edc\uff0c\u8bf7\u4f7f\u7528\ndown\n\u9009\u9879\uff1a\n\n\n\n\n\n\n./byfn.sh -m down\n\n\n\n\n\n\n\n\nIf you see an error stating that you still have \u201cactive endpoints\u201d, then prune your Docker networks. This will wipe your previous networks and start you with a fresh environment:\n\n\n\n\n\n\n\u5982\u679c\u4f60\u770b\u5230\u4e00\u6761\u6307\u793a\u4f60\u4f9d\u7136\u6709\u201cactive endpoints\u201d\uff0c\u7136\u540e\u6e05\u7406\u4f60\u7684Docker\u7f51\u7edc\u3002\u8fd9\u5c06\u4f1a\u6e05\u9664\u4f60\u4e4b\u524d\u7684\u7f51\u7edc\u5e76\u4e14\u7ed9\u4f60\u4e00\u4e2a\u5168\u65b0\u7684\u73af\u5883\uff1a\n\n\n\n\n\n\ndocker network prune\n\n\n\n\nYou will see the following message:\n\n\n\u4f60\u5c06\u770b\u5230\u4ee5\u4e0b\u6d88\u606f\uff1a\n\n\nWARNING! This will remove all networks not used by at least one container.\nAre you sure you want to continue? [y/N]\n\n\n\n\nSelect y.\n\n\n\u9009\u62e9\ny\n\u3002\n\n\n\n\n\n\nIf you continue to see errors, share your logs on the # fabric-questions channel on Hyperledger Rocket Chat.\n\n\n\n\n\n\n\u5982\u679c\u4f60\u4ecd\u65e7\u770b\u5230\u4e86\u9519\u8bef\uff0c\u8bf7\u5728\nHyperledger Rocket Chat\n\u7684\n# fabric-questions\n\u9891\u9053\u4e0a\u5206\u4eab\u4f60\u7684\u65e5\u5fd7\u3002", 
            "title": "\u6784\u5efa\u7b2c\u4e00\u4e2afabric\u7f51\u7edc"
        }, 
        {
            "location": "/build_network_zh/#11", 
            "text": "Before we begin, if you haven\u2019t already done so, you may wish to check that you have all the Prerequisites installed on the platform(s) on which you\u2019ll be developing blockchain applications and/or operating Hyperledger Fabric.  \u5728\u6211\u4eec\u5f00\u59cb\u4e4b\u524d\uff0c\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u8fd9\u6837\u505a\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u68c0\u67e5\u4e00\u4e0b\u5728\u4f60\u5f00\u53d1\u533a\u5757\u94fe\u5e94\u7528\u7a0b\u5e8f\u6216\u8005Hyperledger Fabric\u7684\u5e73\u53f0\u4e0a\u662f\u5426\u5df2\u7ecf\u5b89\u88c5\u4e86\u9884\u7f6e\u73af\u5883\u3002  You will also need to download and install the Hyperledger Fabric Samples. You will notice that there are a number of samples included in the fabric-samples repository. We will be using the first-network sample. Let\u2019s open that sub-directory now.  \u4f60\u8fd8\u9700\u8981\u4e0b\u8f7d\u5e76\u5b89\u88c5 Hyperledger Fabric Samples \u3002\u4f60\u4f1a\u6ce8\u610f\u5230 fabric-samples \u6587\u4ef6\u5939\u4e2d\u5305\u542b\u4e86\u8bb8\u591a\u793a\u4f8b\u3002\u6211\u4eec\u5c06\u4f7f\u7528 first-network \u8fd9\u4e2a\u4f8b\u5b50\u3002\u73b0\u5728\u8ba9\u6211\u4eec\u6253\u5f00\u8fd9\u4e2a\u5b50\u76ee\u5f55\u3002  cd first-network   Note   The supplied commands in this documentation MUST be run from your first-network sub-directory of the  fabric-samples repository clone. If you elect to run the commands from a different location, the various provided scripts will be unable to find the binaries.   \u6ce8\u610f   \u672c\u6587\u6863\u4e2d\u63d0\u4f9b\u7684\u547d\u4ee4\u5fc5\u987b\u8fd0\u884c\u5728 fabric-network \u7684\u5b50\u76ee\u5f55 first-network \u4e2d\u3002\u5982\u679c\u4f60\u9009\u62e9\u4ece\u5176\u4ed6\u4f4d\u7f6e\u8fd0\u884c\u547d\u4ee4\uff0c\u63d0\u4f9b\u7684\u4e00\u4e9b\u5217\u811a\u672c\u5c06\u65e0\u6cd5\u627e\u5230\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u3002", 
            "title": "1.1. \u5b89\u88c5\u9884\u7f6e\u73af\u5883"
        }, 
        {
            "location": "/build_network_zh/#12", 
            "text": "We provide a fully annotated script byfn.sh that leverages these Docker images to quickly bootstrap a Hyperledger Fabric network comprised of 4 peers representing two different organizations, and an orderer node. It will also launch a container to run a scripted execution that will join peers to a channel, deploy and instantiate chaincode and drive execution of transactions against the deployed chaincode.  \u6211\u4eec\u63d0\u4f9b\u4e00\u4e2a\u5b8c\u5168\u6ce8\u91ca\u7684\u811a\u672c byfn.sh \uff0c\u5229\u7528\u8fd9\u4e9bDocker\u955c\u50cf\u53ef\u4ee5\u5feb\u901f\u5f15\u5bfc\u4e00\u4e2a\u75314\u4e2a\u4ee3\u88682\u4e2a\u4e0d\u540c\u7ec4\u7ec7\u7684peer\u8282\u70b9\u4ee5\u53ca\u4e00\u4e2a\u6392\u5e8f\u670d\u52a1\u8282\u70b9\u7684 Hyperledger fabric \u7f51\u7edc\u3002\u5b83\u8fd8\u5c06\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u6765\u8fd0\u884c\u4e00\u4e2a\u5c06peer\u8282\u70b9\u52a0\u5165channel\u3001\u90e8\u7f72\u5b9e\u4f8b\u5316\u94fe\u7801\u670d\u52a1\u4ee5\u53ca\u9a71\u52a8\u5df2\u7ecf\u90e8\u7f72\u7684\u94fe\u7801\u6267\u884c\u4ea4\u6613\u7684\u811a\u672c\u3002  Here\u2019s the help text for the byfn.sh script:  \u4ee5\u4e0b\u662f\u8be5 byfn.sh \u811a\u672c\u7684\u5e2e\u52a9\u6587\u6863\uff1a  ./byfn.sh -h\nUsage:\n  byfn.sh -m up|down|restart|generate [-c  channel name ] [-t  timeout ]\n  byfn.sh -h|--help (print this message)\n    -m  mode  - one of 'up', 'down', 'restart' or 'generate'\n      - 'up' - bring up the network with docker-compose up\n      - 'down' - bring up the network with docker-compose up\n      - 'restart' - bring up the network with docker-compose up\n      - 'generate' - generate required certificates and genesis block\n    -c  channel name  - config name to use (defaults to  mychannel )\n    -t  timeout  - CLI timeout duration in microseconds (defaults to 10000)\n\nTypically, one would first generate the required certificates and\ngenesis block, then bring up the network. e.g.:\n\n  byfn.sh -m generate -c  channelname \n  byfn.sh -m up -c  channelname   If you choose not to supply a channel name, then the script will use a default name of mychannel. The CLI timeout parameter (specified with the -t flag) is an optional value; if you choose not to set it, then your CLI container will exit upon conclusion of the script.  \u5982\u679c\u4f60\u9009\u62e9\u4e0d\u63d0\u4f9bchannel\u540d\u79f0\uff0c\u5219\u811a\u672c\u5c06\u4f7f\u7528\u9ed8\u8ba4\u540d\u79f0 mychannel \u3002CLI\u8d85\u65f6\u53c2\u6570\uff08\u7528-t\u6807\u5fd7\u6307\u5b9a\uff09\u662f\u4e00\u4e2a\u53ef\u9009\u503c;\u5982\u679c\u4f60\u9009\u62e9\u4e0d\u8bbe\u7f6e\u5b83\uff0c\u90a3\u4e48CLI\u5bb9\u5668\u5c06\u4f1a\u5728\u811a\u672c\u6267\u884c\u5b8c\u4e4b\u540e\u9000\u51fa\u3002", 
            "title": "1.2. \u60f3\u8981\u73b0\u5728\u8fd0\u884c\u5417\uff1f"
        }, 
        {
            "location": "/build_network_zh/#13", 
            "text": "Ready to give it a go? Okay then! Execute the following command. You will see a brief description as to what will occur, along with a yes/no command line prompt. Respond with a y to execute the described action.  \u51c6\u5907\u597d\u4e86\u5417\uff1f\u597d\u5427\uff01\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u3002\u4f60\u5c06\u4f1a\u770b\u5230\u4f1a\u53d1\u751f\u4ec0\u4e48\u4f34\u968fyes/no\u547d\u4ee4\u884c\u63d0\u793a\u7684\u7b80\u8981\u8bf4\u660e\u3002\u8f93\u5165y\u6765\u6267\u884c\u63cf\u8ff0\u7684\u52a8\u4f5c\u3002  ./byfn.sh -m generate\nGenerating certs and genesis block for with channel 'mychannel' and CLI timeout of '10000'\nContinue (y/n)?y\nproceeding ...\n/Users/xxx/dev/fabric-samples/bin/cryptogen\n\n##########################################################\n##### Generate certificates using cryptogen tool #########\n##########################################################\norg1.example.com\n2017-06-12 21:01:37.334 EDT [bccsp] GetDefault -  WARN 001 Before using BCCSP, please call InitFactories(). Falling back to bootBCCSP.\n...\n\n/Users/xxx/dev/fabric-samples/bin/configtxgen\n##########################################################\n#########  Generating Orderer Genesis block ##############\n##########################################################\n2017-06-12 21:01:37.558 EDT [common/configtx/tool] main -  INFO 001 Loading configuration\n2017-06-12 21:01:37.562 EDT [msp] getMspConfig -  INFO 002 intermediate certs folder not found at [/Users/xxx/dev/byfn/crypto-config/ordererOrganizations/example.com/msp/intermediatecerts]. Skipping.: [stat /Users/xxx/dev/byfn/crypto-config/ordererOrganizations/example.com/msp/intermediatecerts: no such file or directory]\n...\n2017-06-12 21:01:37.588 EDT [common/configtx/tool] doOutputBlock -  INFO 00b Generating genesis block\n2017-06-12 21:01:37.590 EDT [common/configtx/tool] doOutputBlock -  INFO 00c Writing genesis block\n\n#################################################################\n### Generating channel configuration transaction 'channel.tx' ###\n#################################################################\n2017-06-12 21:01:37.634 EDT [common/configtx/tool] main -  INFO 001 Loading configuration\n2017-06-12 21:01:37.644 EDT [common/configtx/tool] doOutputChannelCreateTx -  INFO 002 Generating new channel configtx\n2017-06-12 21:01:37.645 EDT [common/configtx/tool] doOutputChannelCreateTx -  INFO 003 Writing new channel tx\n\n#################################################################\n#######    Generating anchor peer update for Org1MSP   ##########\n#################################################################\n2017-06-12 21:01:37.674 EDT [common/configtx/tool] main -  INFO 001 Loading configuration\n2017-06-12 21:01:37.678 EDT [common/configtx/tool] doOutputAnchorPeersUpdate -  INFO 002 Generating anchor peer update\n2017-06-12 21:01:37.679 EDT [common/configtx/tool] doOutputAnchorPeersUpdate -  INFO 003 Writing anchor peer update\n\n#################################################################\n#######    Generating anchor peer update for Org2MSP   ##########\n#################################################################\n2017-06-12 21:01:37.700 EDT [common/configtx/tool] main -  INFO 001 Loading configuration\n2017-06-12 21:01:37.704 EDT [common/configtx/tool] doOutputAnchorPeersUpdate -  INFO 002 Generating anchor peer update\n2017-06-12 21:01:37.704 EDT [common/configtx/tool] doOutputAnchorPeersUpdate -  INFO 003 Writing anchor peer update  This first step generates all of the certificates and keys for all our various network entities, the genesis block used to bootstrap the ordering service, and a collection of configuration transactions required to configure a Channel.  \u7b2c\u4e00\u6b65\u751f\u6210\u6211\u4eec\u5404\u79cd\u7f51\u7edc\u5b9e\u4f53\u7684\u6240\u6709\u8bc1\u4e66\u548c\u5bc6\u94a5\uff0c genesis block \u7528\u4e8e\u5f15\u5bfc\u6392\u5e8f\u670d\u52a1\uff0c\u4ee5\u53ca\u914d\u7f6e Channel \u6240\u9700\u8981\u7684\u4e00\u7ec4\u4ea4\u6613\u914d\u7f6e\u96c6\u5408\u3002", 
            "title": "1.3. \u751f\u6210\u7f51\u7edc\u795e\u5668"
        }, 
        {
            "location": "/build_network_zh/#14", 
            "text": "Next, you can bring the network up with the following command. Once again, you will be prompted as to whether you wish to continue or abort. Respond with a y:  \u63a5\u4e0b\u6765\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u542f\u52a8\u6574\u4e2a\u7f51\u7edc\u3002\u518d\u8bd5\u63d0\u793a\u4f60\u662f\u5426\u7ee7\u7eed\u3002\u56de\u7b54y\uff1a  ./byfn.sh -m up\nStarting with channel 'mychannel' and CLI timeout of '10000'\nContinue (y/n)?y\nproceeding ...\nCreating network  net_byfn  with the default driver\nCreating peer0.org1.example.com\nCreating peer1.org1.example.com\nCreating peer0.org2.example.com\nCreating orderer.example.com\nCreating peer1.org2.example.com\nCreating cli\n\n\n ____    _____      _      ____    _____\n/ ___|  |_   _|    / \\    |  _ \\  |_   _|\n\\___ \\    | |     / _ \\   | |_) |   | |\n ___) |   | |    / ___ \\  |  _      | |\n|____/    |_|   /_/   \\_\\ |_| \\_\\   |_|\n\nChannel name : mychannel\nCreating channel...  The logs will continue from there. This will launch all of the containers, and then drive a complete end-to-end application scenario. Upon successful completion, it should report the following in your terminal window:  \u65e5\u5fd7\u5c06\u7ee7\u7eed\u3002\u7136\u540e\u542f\u52a8\u6240\u6709\u5bb9\u5668\uff0c\u9a71\u52a8\u4e00\u4e2a\u7aef\u5230\u7aef\u7684\u5e94\u7528\u573a\u666f\u3002\u6210\u529f\u4ee5\u540e\uff0c\u5728\u7ec8\u7aef\u7a97\u53e3\u4e2d\u4f1a\u62a5\u544a\u4ee5\u4e0b\u5185\u5bb9\uff1a  2017-05-16 17:08:01.366 UTC [msp] GetLocalMSP -  DEBU 004 Returning existing local MSP\n2017-05-16 17:08:01.366 UTC [msp] GetDefaultSigningIdentity -  DEBU 005 Obtaining default signing identity\n2017-05-16 17:08:01.366 UTC [msp/identity] Sign -  DEBU 006 Sign: plaintext: 0AB1070A6708031A0C08F1E3ECC80510...6D7963631A0A0A0571756572790A0161\n2017-05-16 17:08:01.367 UTC [msp/identity] Sign -  DEBU 007 Sign: digest: E61DB37F4E8B0D32C9FE10E3936BA9B8CD278FAA1F3320B08712164248285C54\nQuery Result: 90\n2017-05-16 17:08:15.158 UTC [main] main -  INFO 008 Exiting.....\n===================== Query on PEER3 on channel 'mychannel' is successful =====================\n\n===================== All GOOD, BYFN execution completed =====================\n\n\n _____   _   _   ____\n| ____| | \\ | | |  _ \\\n|  _|   |  \\| | | | | |\n| |___  | |\\  | | |_| |\n|_____| |_| \\_| |____/  You can scroll through these logs to see the various transactions. If you don\u2019t get this result, then jump down to the Troubleshooting section and let\u2019s see whether we can help you discover what went wrong.  \u4f60\u53ef\u4ee5\u6eda\u52a8\u8fd9\u4e9b\u65e5\u5fd7\u53bb\u67e5\u770b\u5404\u79cd\u4ea4\u6613\u3002\u5982\u679c\u4f60\u6ca1\u6709\u83b7\u5f97\u8fd9\u4e2a\u7ed3\u679c\uff0c\u8bf7\u79fb\u6b65\u7591\u96be\u89e3\u7b54\u90e8\u5206\uff0c\u770b\u770b\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u5e2e\u52a9\u4f60\u53d1\u73b0\u95ee\u9898\u3002", 
            "title": "1.4. \u542f\u52a8\u7f51\u7edc"
        }, 
        {
            "location": "/build_network_zh/#15", 
            "text": "Finally, let\u2019s bring it all down so we can explore the network setup one step at a time. The following will kill your containers, remove the crypto material and four artifacts, and delete the chaincode images from your Docker Registry. Once again, you will be prompted to continue, respond with a y:  \u6700\u540e\uff0c\u8ba9\u6211\u4eec\u628a\u5b83\u5168\u90e8\u505c\u4e0b\u6765\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u4e00\u6b65\u4e00\u6b65\u5730\u63a2\u7d22\u7f51\u7edc\u8bbe\u7f6e\u3002\u4ee5\u4e0b\u64cd\u4f5c\u5c06\u5173\u95ed\u4f60\u7684\u5bb9\u5668\uff0c\u79fb\u9664\u52a0\u5bc6\u6750\u6599\u548c4\u4e2a\u914d\u7f6e\u4fe1\u606f\uff0c\u5e76\u4e14\u4eceDocker\u4ed3\u5e93\u5220\u9664chaincode\u955c\u50cf\u3002\u4f60\u5c06\u518d\u4e00\u6b21\u88ab\u63d0\u793a\u662f\u5426\u7ee7\u7eed\uff0c\u56de\u7b54y\uff1a  ./byfn.sh -m down\nStopping with channel 'mychannel' and CLI timeout of '10000'\nContinue (y/n)?y\nproceeding ...\nWARNING: The CHANNEL_NAME variable is not set. Defaulting to a blank string.\nWARNING: The TIMEOUT variable is not set. Defaulting to a blank string.\nRemoving network net_byfn\n468aaa6201ed\n...\nUntagged: dev-peer1.org2.example.com-mycc-1.0:latest\nDeleted: sha256:ed3230614e64e1c83e510c0c282e982d2b06d148b1c498bbdcc429e2b2531e91\n...  If you\u2019d like to learn more about the underlying tooling and bootstrap mechanics, continue reading. In these next sections we\u2019ll walk through the various steps and requirements to build a fully-functional Hyperledger Fabric network.  \u5982\u679c\u4f60\u60f3\u4e86\u89e3\u5173\u4e8e\u5e95\u5c42\u5de5\u5177\u548c\u5f15\u5bfc\u6750\u6599\u76f8\u5173\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u7ee7\u7eed\u9605\u8bfb\u3002\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u6d4f\u89c8\u6784\u5efa\u529f\u80fd\u9f50\u5168\u7684 Hyperledger fabric \u7f51\u7edc\u7684\u5404\u79cd\u8981\u6c42\u548c\u6b65\u9aa4\u3002", 
            "title": "1.5. \u5173\u95ed\u7f51\u7edc"
        }, 
        {
            "location": "/build_network_zh/#16", 
            "text": "We will use the cryptogen tool to generate the cryptographic material (x509 certs) for our various network entities. These certificates are representative of identities, and they allow for sign/verify authentication to take place as our entities communicate and transact.  \u6211\u4eec\u5c06\u4f7f\u7528 cryptogen \u5de5\u5177\u4e3a\u6211\u4eec\u751f\u6210\u5404\u79cd\u7f51\u7edc\u5b9e\u4f53\u7684\u52a0\u5bc6\u6750\u6599\uff08x509\u8bc1\u4e66\uff09\u3002\u8fd9\u4e9b\u8bc1\u4e66\u662f\u8eab\u4efd\u7684\u4ee3\u8868\uff0c\u5b83\u4eec\u5141\u8bb8\u5728\u6211\u4eec\u7684\u7f51\u7edc\u5b9e\u4f53\u8fdb\u884c\u4ea4\u6d41\u548c\u4ea4\u6613\u65f6\u8fdb\u884c\u7b7e\u540d/\u9a8c\u8bc1\u8eab\u4efd\u9a8c\u8bc1\u3002", 
            "title": "1.6. \u52a0\u5bc6\u751f\u6210\u5668"
        }, 
        {
            "location": "/build_network_zh/#161", 
            "text": "Cryptogen consumes a file - crypto-config.yaml - that contains the network topology and allows us to generate a set of certificates and keys for both the Organizations and the components that belong to those Organizations. Each Organization is provisioned a unique root certificate (ca-cert) that binds specific components (peers and orderers) to that Org. By assigning each Organization a unique CA certificate, we are mimicking a typical network where a participating Member would use its own Certificate Authority. Transactions and communications within Hyperledger Fabric are signed by an entity\u2019s private key (keystore), and then verified by means of a public key (signcerts).  Cryptogen \u6d88\u8d39\u4e00\u4e2a\u5305\u542b\u7f51\u7edc\u62d3\u6251\u7684 crypto-config.yaml \uff0c\u5e76\u5141\u8bb8\u6211\u4eec\u4e3a\u7ec4\u7ec7\u548c\u5c5e\u4e8e\u8fd9\u4e9b\u7ec4\u7ec7\u7684\u7ec4\u4ef6\u751f\u6210\u4e00\u7ec4\u8bc1\u4e66\u548c\u5bc6\u94a5\u3002\u6bcf\u4e2a\u7ec4\u7ec7\u90fd\u914d\u7f6e\u4e86\u552f\u4e00\u7684\u6839\u8bc1\u4e66( ca-cert ),\u5b83\u5c06\u7279\u5b9a\u7ec4\u4ef6\uff08peers\u548corders\uff09\u7ed1\u5b9a\u5230\u8be5\u7ec4\u7ec7\u3002\u901a\u8fc7\u4e3a\u6bcf\u4e00\u4e2a\u7ec4\u7ec7\u5206\u914d\u552f\u4e00\u7684CA\u8bc1\u4e66\uff0c\u6211\u4eec\u6b63\u5728\u6a21\u4eff\u4e00\u4e2a\u7ecf\u5178\u7684\u7f51\u7edc\uff0c\u8fd9\u4e2a\u7f51\u7edc\u4e2d\u7684\u6210\u5458\u5c06\u4f7f\u7528\u81ea\u5df1\u7684\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u3002Hyperledger Fabric\u4e2d\u7684\u4ea4\u6613\u548c\u901a\u4fe1\u662f\u901a\u8fc7\u5b58\u50a8\u5728 keystore \u4e2d\u7684\u5b9e\u4f53\u7684\u79c1\u94a5\u7b7e\u540d\uff0c\u7136\u540e\u901a\u8fc7\u516c\u94a5\u624b\u6bb5\u8fdb\u884c\u9a8c\u8bc1\uff08 signcerts \uff09\u3002  You will notice a count variable within this file. We use this to specify the number of peers per Organization; in our case there are two peers per Org. We won\u2019t delve into the minutiae of x.509 certificates and public key infrastructure right now. If you\u2019re interested, you can peruse these topics on your own time.  \u4f60\u5c06\u6ce8\u610f\u5230\u5728\u8fd9\u4e2a\u6587\u4ef6\u91cc\u6709\u4e00\u4e2a count \u53d8\u91cf\u3002\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u6765\u6307\u5b9a\u6bcf\u4e2a\u7ec4\u7ec7\u4e2d peer \u7684\u6570\u91cf;\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u6709\u4e24\u4e2apeer\u3002\u6211\u4eec\u73b0\u5728\u4e0d\u4f1a\u6df1\u5165\u7814\u7a76 x.509\u8bc1\u4e66\u548c\u516c\u94a5\u57fa\u7840\u8bbe\u65bd \u7684\u7ec6\u8282\u3002\u5982\u679c\u4f60\u6709\u5174\u8da3\uff0c\u4f60\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u65f6\u95f4\u7ec6\u8bfb\u8fd9\u4e9b\u4e3b\u9898\u3002  Before running the tool, let\u2019s take a quick look at a snippet from the crypto-config.yaml. Pay specific attention to the \u201cName\u201d, \u201cDomain\u201d and \u201cSpecs\u201d parameters under the OrdererOrgs header:  \u5728\u8fd0\u884c\u8be5\u5de5\u5177\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5feb\u901f\u6d4f\u89c8\u4e00\u4e0b\u8fd9\u6bb5\u4ee3\u7801 crypto-config.yaml \u3002\u7279\u522b\u6ce8\u610f\u5728 OrdererOrgs \u5934\u4e0b\u7684 Name \uff0c Domain \u548c Specs \u53c2\u6570\uff1a  OrdererOrgs:\n#---------------------------------------------------------\n# Orderer\n# --------------------------------------------------------\n- Name: Orderer\n  Domain: example.com\n  # ------------------------------------------------------\n  #  Specs  - See PeerOrgs below for complete description\n# -----------------------------------------------------\n  Specs:\n    - Hostname: orderer\n# -------------------------------------------------------\n#  PeerOrgs  - Definition of organizations managing peer nodes\n# ------------------------------------------------------\nPeerOrgs:\n# -----------------------------------------------------\n# Org1\n# ----------------------------------------------------\n- Name: Org1\n  Domain: org1.example.com  The naming convention for a network entity is as follows - \u201c{{.Hostname}}.{{.Domain}}\u201d. So using our ordering node as a reference point, we are left with an ordering node named - orderer.example.com that is tied to an MSP ID of Orderer. This file contains extensive documentation on the definitions and syntax. You can also refer to the Membership Service Providers (MSP) documentation for a deeper dive on MSP.  After we run the cryptogen tool, the generated certificates and keys will be saved to a folder titled crypto-config.  \u7f51\u7edc\u5b9e\u4f53\u7684\u547d\u540d\u7ea6\u5b9a\u5982\u4e0b\uff1a {{.Hostname}}.{{.Domain}} \u3002\u6240\u4ee5\u4f7f\u7528\u6211\u4eec\u7684\u6392\u5e8f\u8282\u70b9\u4f5c\u4e3a\u53c2\u8003\u70b9\uff0c\u5b83\u4e0e Order \u7684MSP ID\u76f8\u5173\u8054\u3002\u8be5\u6587\u4ef6\u5305\u542b\u4e86\u6709\u5173\u5b9a\u4e49\u548c\u8bed\u6cd5\u7684\u5927\u91cf\u6587\u6863\u3002\u4f60\u8fd8\u53ef\u4ee5\u53c2\u8003 Membership Service Providers(MSP) \uff0c\u4ee5\u4fbf\u66f4\u6df1\u5165\u5730\u4e86\u89e3MSP\u3002  After we run the cryptogen tool, the generated certificates and keys will be saved to a folder titled crypto-config.  \u6211\u4eec\u8fd0\u884c cryptogen \u5de5\u5177\uff0c\u751f\u6210\u7684\u8bc1\u4e66\u548c\u5bc6\u94a5\u5c06\u88ab\u4fdd\u5b58\u5230\u540d\u4e3a crypto-config \u7684\u6587\u4ef6\u5939\u4e2d\u3002", 
            "title": "1.6.1. \u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f"
        }, 
        {
            "location": "/build_network_zh/#17", 
            "text": "The configtxgen tool is used to create four configuration artifacts:   orderer genesis block,  channel channel configuration transaction,  and two anchor peer transactions - one for each Peer Org.   configtxgen tool \u7528\u4e8e\u521b\u5efa4\u4e2a\u914d\u7f6e\u5de5\u4f5c\uff1a  \u8ba2\u9605\u8005\u7684 genesis block ,  channel\u7684 channel configuration transaction ,\n* \u4ee5\u53ca\u4e24\u4e2a anchor peer transactions \u4e00\u4e2a\u5bf9\u5e94\u4e00\u4e2aPeer\u7ec4\u7ec7\u3002  Please see Channel Configuration (configtxgen) for a complete description of the use of this tool.  \u6709\u5173\u6b64\u5de5\u5177\u7684\u5b8c\u6574\u8bf4\u660e\uff0c\u8bf7\u53c2\u9605 Channel Configuration(configtxgen) \u3002  The orderer block is the Genesis Block for the ordering service, and the channel transaction file is broadcast to the orderer at Channel creation time. The anchor peer transactions, as the name might suggest, specify each Org\u2019s Anchor Peer on this channel.  order block \u662f\u4e00\u4e2aordering service\u7684 \u521b\u4e16\u533a\u5757 \uff0c channel transaction \u6587\u4ef6\u5728 Channel \u521b\u5efa\u7684\u65f6\u4faf\u5e7f\u64ad\u7ed9\u8ba2\u9605\u8005\u3002 anchor peer transactions \uff0c\u6b63\u5982\u540d\u79f0\u6240\u793a\uff0c\u6307\u5b9a\u4e86\u6bcf\u4e2a\u7ec4\u7ec7\u5728\u6b64channel\u4e0a\u7684 Anchor peer \u3002", 
            "title": "1.7. \u914d\u7f6e\u4ea4\u6613\u751f\u6210\u5668"
        }, 
        {
            "location": "/build_network_zh/#171", 
            "text": "Configtxgen consumes a file - configtx.yaml - that contains the definitions for the sample network. There are three members - one Orderer Org (OrdererOrg) and two Peer Orgs (Org1   Org2) each managing and maintaining two peer nodes. This file also specifies a consortium - SampleConsortium - consisting of our two Peer Orgs. Pay specific attention to the \u201cProfiles\u201d section at the top of this file. You will notice that we have two unique headers. One for the orderer genesis block - TwoOrgsOrdererGenesis - and one for our channel - TwoOrgsChannel.  Configtxgen\u4f7f\u7528\u4e00\u4e2a\u5305\u542b\u793a\u4f8b\u7f51\u7edc\u7684 configtx.yaml \u6587\u4ef6\u3002\u67093\u4e2a\u6210\u5458-\u4e00\u4e2a\u6392\u5e8f\u670d\u52a1\u7ec4\u7ec7 OrdererOrg \u4ee5\u53ca\u4e24\u4e2a\u8282\u70b9\u7ec4\u7ec7\uff08 Org1 Org2 \uff09,\u6bcf\u4e2a\u7ec4\u7ec7\u7ba1\u7406\u548c\u6301\u67092\u4e2apeer\u8282\u70b9\u3002\u8be5\u6587\u4ef6\u8fd8\u6307\u5b9a\u4e86\u4e00\u4e2a SampleConsortium \u7684\u8054\u76df\uff0c\u7531\u4e0a\u8ff02\u4e2a\u8282\u70b9\u7ec4\u7ec7\u6784\u6210\u3002\n\u8bf7\u7279\u522b\u6ce8\u610f\u6b64\u6587\u4ef6\u9876\u90e8\u7684 Profiles \u90e8\u5206\u3002\u4f60\u4f1a\u6ce8\u610f\u5230\u6211\u4eec\u6709\u4e24\u4e2a\u72ec\u7279\u7684\u6807\u9898\u3002\u4e00\u4e2a\u662forderer\u7684\u521b\u4e16\u533a\u5757- TwoOrgsOrdererGenesis -\u53e6\u4e00\u4e2a\u662f\u9488\u5bf9\u7ba1\u9053\u7684 TwoOrgsChannel \u3002  These headers are important, as we will pass them in as arguments when we create our artifacts.  \u8fd9\u4e9b\u6807\u9898\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5728\u6211\u4eec\u521b\u5efa\u6211\u4eec\u7684\u5de5\u4f5c\u7684\u65f6\u4faf\u5979\u4eec\u5c06\u4f5c\u4e3a\u4f20\u9012\u7684\u53c2\u6570\u3002   Note   Notice that our SampleConsortium is defined in the system-level profile and then referenced by our channel-level profile. Channels exist within the purview of a consortium, and all consortia must be defined in the scope of the network at large.   \u6ce8\u610f   \u8bf7\u6ce8\u610f\u6211\u4eec\u7684 SampleConsortium \u5728\u7cfb\u7edf\u754c\u522b\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u5b9a\u4e49\uff0c\u7136\u540e\u7531\u6e20\u9053\u7ea7\u522b\u914d\u7f6e\u6587\u4ef6\u5f15\u7528\u3002\u7ba1\u9053\u5b58\u5728\u4e8e\u8054\u76df\u7684\u8303\u56f4\u5185\uff0c\u6240\u6709\u7684\u8054\u76df\u5fc5\u987b\u5b9a\u4e49\u5728\u6574\u4e2a\u7f51\u7edc\u8303\u56f4\u5185\u3002    This file also contains two additional specifications that are worth noting. Firstly, we specify the anchor peers for each Peer Org (peer0.org1.example.com   peer0.org2.example.com). Secondly, we point to the location of the MSP directory for each member, in turn allowing us to store the root certificates for each Org in the orderer genesis block. This is a critical concept. Now any network entity communicating with the ordering service can have its digital signature verified.  \u6b64\u6587\u4ef6\u8fd8\u5305\u542b\u4e24\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u9644\u52a0\u89c4\u683c\u3002\u9996\u5148\uff0c\u6211\u4eec\u4e3a\u6bcf\u4e2a\u7ec4\u7ec7\u6307\u5b9a\u4e86\u951a\u70b9\u8282\u70b9\uff08 peer0.org1.example.com \u548c peer0.org2.example.com \uff09\u3002\u5176\u6b21\uff0c\u6211\u4eec\u4e3a\u6bcf\u4e2a\u6210\u5458\u6307\u5b9aMSP\u6587\u4ef6\u5939\uff0c\u7528\u6765\u5b58\u50a8\u6bcf\u4e2a\u7ec4\u7ec7\u5728 orderer genesis block \u4e2d\u6307\u5b9a\u7684\u6839\u8bc1\u4e66\u3002\u8fd9\u662f\u4e00\u4e2a\u5173\u952e\u7684\u6982\u5ff5\u3002\u73b0\u5728\u4efb\u610f\u548cordering service\u901a\u4fe1\u7684\u7f51\u7edc\u5b9e\u4f53\u90fd\u53ef\u4ee5\u5bf9\u5176\u6570\u5b57\u7b7e\u540d\u8fdb\u884c\u9a8c\u8bc1\u3002", 
            "title": "1.7.1. \u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f"
        }, 
        {
            "location": "/build_network_zh/#18", 
            "text": "You can manually generate the certificates/keys and the various configuration artifacts using the configtxgen and cryptogen commands. Alternately, you could try to adapt the byfn.sh script to accomplish your objectives.  \u4f60\u53ef\u4ee5\u7528 configtxgen \u548c cryptogen \u547d\u4ee4\u6765\u624b\u52a8\u751f\u6210\u8bc1\u4e66/\u5bc6\u94a5\u548c\u5404\u79cd\u914d\u7f6e\u6587\u4ef6\u3002\u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528 byfn.sh \u811a\u672c\u6765\u5b8c\u6210\u4f60\u7684\u76ee\u6807\u3002", 
            "title": "1.8. \u8fd0\u884c\u5de5\u5177"
        }, 
        {
            "location": "/build_network_zh/#181", 
            "text": "You can refer to the generateCerts function in the byfn.sh script for the commands necessary to generate the certificates that will be used for your network configuration as defined in the crypto-config.yaml file. However, for the sake of convenience, we will also provide a reference here.  \u5fc5\u8981\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003byfn.sh\u811a\u672c\u4e2d\u7684 generateCerts \u51fd\u6570\u53bb\u751f\u6210\u76f8\u5173\u5b9a\u4e49\u5728 crypto-config.yaml \u6587\u4ef6\u4e2d\u7528\u4e8e\u4f60\u7684\u7f51\u7edc\u914d\u7f6e\u7684\u76f8\u5173\u8bc1\u4e66\u3002\u7136\u800c\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u4e5f\u5c06\u5728\u6b64\u63d0\u4f9b\u53c2\u8003\u3002  First let\u2019s run the cryptogen tool. Our binary is in the bin directory, so we need to provide the relative path to where the tool resides.  \u9996\u5148\uff0c\u6211\u4eec\u6765\u8fd0\u884c cryptogen \u8fd9\u4e2a\u5de5\u5177\u3002\u6211\u4eec\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u5728 bin \u76ee\u5f55\u4e2d\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u5de5\u5177\u6240\u5728\u7684\u76f8\u5bf9\u8def\u5f84\u3002  ../bin/cryptogen generate --config=./crypto-config.yaml  You will likely see the following warning. It\u2019s innocuous, ignore it:  \u4f60\u53ef\u80fd\u4f1a\u770b\u5230\u4ee5\u4e0b\u8b66\u544a\u3002\u8fd9\u662f\u65e0\u5bb3\u7684\uff0c\u8bf7\u5ffd\u7565\u5b83\uff1a   [bccsp] GetDefault -  WARN 001 Before using BCCSP, please call InitFactories(). Falling back to bootBCCSP.  Next, we need to tell the configtxgen tool where to look for the configtx.yaml file that it needs to ingest. We will tell it look in our present working directory:  \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u544a\u8bc9 configtxgen \u5de5\u5177\u9700\u8981\u63d0\u53d6\u7684 configtx.yaml \u6240\u5728\u7684\u4f4d\u7f6e\u3002\u6211\u4eec\u4f1a\u544a\u8bc9\u5b83\u5728\u6211\u4eec\u5f53\u524d\u6240\u5728\u5de5\u4f5c\u76ee\u5f55\uff1a  First, we need to set an environment variable to specify where configtxgen should look for the configtx.yaml configuration file. Then, we\u2019ll invoke the configtxgen tool which will create the orderer genesis block:  \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\u6765\u544a\u8bc9 configtxgen \u54ea\u91cc\u53bb\u5bfb\u627econfigtx.yaml\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u8c03\u7528 configtxgen \u5de5\u5177\u53bb\u521b\u5efa orderer genesis block \uff1a  export FABRIC_CFG_PATH=$PWD\n../bin/configtxgen -profile TwoOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block  You can ignore the log warnings regarding intermediate certificates, certificate revocation lists (crls) and MSP configurations. We are not using any of those in this sample network.  \u4f60\u53ef\u4ee5\u5ffd\u7565\u6709\u5173\u4e2d\u95f4\u8bc1\u4e66\uff0c\u8bc1\u4e66\u64a4\u9500\u5217\u8868\uff08crls\uff09\u548cMSP\u914d\u7f6e\u7684\u65e5\u5fd7\u8b66\u544a\u3002\u6211\u4eec\u6ca1\u6709\u5728\u793a\u4f8b\u7f51\u7edc\u4e2d\u4f7f\u7528\u5176\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u3002  Next, we need to create the channel transaction artifact. Be sure to replace $CHANNEL_NAME or set CHANNEL_NAME as an environment variable that can be used throughout these instructions:  \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa channel transaction \u914d\u7f6e\u3002\u8bf7\u786e\u4fdd\u66ff\u6362 \uffe5CHANNEL_NAME \u6216\u8005\u5c06 CHANNEL_NAME \u8bbe\u7f6e\u4e3a\u6574\u4e2a\u8bf4\u660e\u4e2d\u53ef\u4ee5\u4f7f\u7528\u7684\u73af\u5883\u53d8\u91cf\uff1a  export CHANNEL_NAME=mychannel\n\n# this file contains the definitions for our sample channel\n../bin/configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID $CHANNEL_NAME  Next, we will define the anchor peer for Org1 on the channel that we are constructing. Again, be sure to replace $CHANNEL_NAME or set the environment variable for the following commands:  \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5728\u6b63\u5728\u6784\u5efa\u7684\u901a\u9053\u4e0a\u5b9a\u4e49 Org1 \u7684 anchor peer \u3002\u8bf7\u518d\u6b21\u786e\u8ba4$CHANNEL_NAME\u5df2\u88ab\u66ff\u6362\u6216\u8005\u4e3a\u4ee5\u4e0b\u547d\u4ee4\u8bbe\u7f6e\u4e86\u73af\u5883\u53d8\u91cf\uff1a  ../bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org1MSP  Now, we will define the anchor peer for Org2 on the same channel:  \u73b0\u5728\uff0c\u6211\u4eec\u5c06\u5728\u540c\u4e00\u4e2a\u901a\u9053\u5b9a\u4e49 Org2 \u7684 anchor peer \uff1a  ../bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org2MSP", 
            "title": "1.8.1. \u624b\u52a8\u751f\u6210\u914d\u7f6e\u6587\u4ef6"
        }, 
        {
            "location": "/build_network_zh/#19", 
            "text": "We will leverage a docker-compose script to spin up our network. The docker-compose file references the images that we have previously downloaded, and bootstraps the orderer with our previously generated genesis.block.  \u6211\u4eec\u5c06\u5229\u7528 docker-compose \u811a\u672c\u6765\u542f\u52a8\u6211\u4eec\u7684\u533a\u5757\u94fe\u7f51\u7edc\u3002 docker-compose \u6587\u4ef6\u5229\u7528\u6211\u4eec\u4e4b\u524d\u4e0b\u8f7d\u7684\u955c\u50cf\uff0c\u5e76\u7528\u4ee5\u524d\u751f\u6210\u7684 genesis.block \u6765\u5f15\u5bfc orderer \u3002  working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer\n# command: /bin/bash -c './scripts/script.sh ${CHANNEL_NAME}; sleep $TIMEOUT'\nvolumes  If left uncommented, that script will exercise all of the CLI commands when the network is started, as we describe in the What\u2019s happening behind the scenes? section. However, we want to go through the commands manually in order to expose the syntax and functionality of each call.  \u5982\u679c\u6ca1\u6709\u6ce8\u91ca\uff0c\u8be5\u811a\u672c\u5c06\u5728\u7f51\u7edc\u542f\u52a8\u65f6\u6267\u884c\u6240\u6709\u547d\u4ee4\uff0c\u6b63\u5982\u6211\u4eec\u5728 \u5e55\u540e\u53d1\u751f\u7684\u60c5\u51b5 \u4e2d\u6240\u63cf\u8ff0\u7684\u90a3\u6837\u3002\u7136\u800c\uff0c\u6211\u4eec\u60f3\u624b\u52a8\u6267\u884c\u547d\u4ee4\uff0c\u4ee5\u4fbf\u516c\u5f00\u6bcf\u4e2a\u8c03\u7528\u7684\u8bed\u6cd5\u548c\u529f\u80fd\u3002  Pass in a moderately high value for the TIMEOUT variable (specified in seconds); otherwise the CLI container, by default, will exit after 60 seconds.  \u9002\u5f53\u5730\u4e3a TIMEOUT \u4f20\u9012\u8f83\u9ad8\u7684\u503c\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09;\u9ed8\u8ba4\u60c5\u51b5\u4e0bCLI\u5bb9\u5668\u5c06\u572860\u79d2\u4e4b\u540e\u9000\u51fa\u3002  \u542f\u52a8\u4f60\u7684\u7f51\u7edc\uff1a  CHANNEL_NAME=$CHANNEL_NAME TIMEOUT= pick_a_value  docker-compose -f docker-compose-cli.yaml up -d  If you want to see the realtime logs for your network, then do not supply the -d flag. If you let the logs stream, then you will need to open a second terminal to execute the CLI calls.  \u5982\u679c\u8981\u5b9e\u65f6\u67e5\u770b\u4f60\u7684\u533a\u5757\u94fe\u7f51\u7edc\u7684\u65e5\u5fd7\uff0c\u8bf7\u4e0d\u8981\u63d0\u4f9b -d \u6807\u5fd7\u3002\u5982\u679c\u4f60\u9700\u8981\u65e5\u5fd7\u6d41\uff0c\u4f60\u9700\u8981\u6253\u5f00\u7b2c\u4e8c\u4e2a\u7ec8\u7aef\u6765\u6267\u884cCLI\u547d\u4ee4\u3002", 
            "title": "1.9. \u542f\u52a8\u7f51\u7edc"
        }, 
        {
            "location": "/build_network_zh/#191", 
            "text": "For the following CLI commands against peer0.org1.example.com to work, we need to preface our commands with the four environment variables given below. These variables for peer0.org1.example.com are baked into the CLI container, therefore we can operate without passing them. HOWEVER, if you want to send calls to other peers or the orderer, then you will need to provide these values accordingly. Inspect the docker-compose-base.yaml for the specific paths:  \u4e3a\u4e86\u4f7f\u9488\u5bf9 peer0.org1.example.com \u7684CLI\u547d\u4ee4\u8d77\u4f5c\u7528\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u4e0b\u9762\u7ed9\u51fa\u56db\u4e2a\u73af\u5883\u53d8\u91cf\u6765\u4ecb\u7ecd\u6211\u4eec\u7684\u547d\u4ee4\u3002\u4e3a peer0.org1.example.com \u6d89\u53ca\u7684\u8fd9\u4e9b\u53d8\u91cf\u5c06\u88ab\u62f7\u8d1d\u5230CLI\u5bb9\u5668\u4e2d\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u9700\u8981\u590d\u5236\u5b83\u4eec\u3002\u7136\u800c\uff0c\u5982\u679c\u4f60\u53d1\u9001\u8c03\u7528\u5230\u5176\u4ed6\u7684peer\u8282\u70b9\u6216\u8005orderer\uff0c\u5219\u9700\u8981\u76f8\u5e94\u5730\u63d0\u4f9b\u8fd9\u4e9b\u503c\u3002\u68c0\u67e5 docker-compose-base.yaml \u4e2d\u7684\u5177\u4f53\u8def\u5f84\uff1a  # Environment variables for PEER0\n\nCORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp\nCORE_PEER_ADDRESS=peer0.org1.example.com:7051\nCORE_PEER_LOCALMSPID= Org1MSP \nCORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt", 
            "title": "1.9.1. \u73af\u5883\u53d8\u91cf"
        }, 
        {
            "location": "/build_network_zh/#192", 
            "text": "We will enter the CLI container using the docker exec command:  \u6211\u4eec\u5c06\u4f7f\u7528 docker exec \u547d\u4ee4\u8fdb\u5165CLI\u5bb9\u5668\uff1a  docker exec -it bash  If successful you should see the following:  \u5982\u679c\u6210\u529f\uff0c\u4f60\u5c06\u770b\u5230\u4e0b\u5217\u4fe1\u606f\uff1a  root@0d78bb69300d:/opt/gopath/src/github.com/hyperledger/fabric/peer#  Recall that we used the configtxgen tool to generate a channel configuration artifact - channel.tx. We are going to pass in this artifact to the orderer as part of the create channel request.  \u56de\u60f3\u4ee5\u4e0b\uff0c\u6211\u4eec\u4f7f\u7528configtxgen\u5de5\u5177\u751f\u6210\u4fe1\u9053\u914d\u7f6e- channel.tx \u3002\u6211\u4eec\u5c06\u8fd9\u4e2a\u914d\u7f6e\u4f5c\u4e3a\u8bf7\u6c42\u7684\u4e00\u90e8\u5206\u4f20\u9012\u7ed9\u8ba2\u9605\u8005\u3002   Note   Notice the   cafile that we pass as part of this command. It is the local path to the orderer\u2019s root cert, allowing us to verify the TLS handshake.   \u6ce8\u610f   \u6ce8\u610f -- cafile \u4f1a\u4f5c\u4e3a\u547d\u4ee4\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u662forderer\u7684root cert\u7684\u672c\u5730\u8def\u5f84\uff0c\u5141\u8bb8\u6211\u4eec\u53bb\u9a8c\u8bc1TLS\u63e1\u624b\u3002    We specify our channel name with the -c flag and our channel configuration transaction with the -f flag. In this case it is channel.tx, however you can mount your own configuration transaction with a different name.  \u6211\u4eec\u4f7f\u7528 -c \u6807\u5fd7\u6307\u5b9achannel\u7684\u540d\u5b57\uff0c -f \u6807\u5fd7\u6307\u5b9a\u914d\u7f6e\u4ea4\u6613\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5b83\u662f channel.tx \uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u540d\u79f0\uff0c\u6302\u8f7d\u4f60\u81ea\u5df1\u7684\u4ea4\u6613\u914d\u7f6e\u3002  export CHANNEL_NAME=mychannel\n\n# the channel.tx file is mounted in the channel-artifacts directory within your CLI container\n# as a result, we pass the full path for the file\n# we also pass the path for the orderer ca-cert in order to verify the TLS handshake\n# be sure to replace the $CHANNEL_NAME variable appropriately\n\npeer channel create -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem  This command returns a genesis block -   - which we will use to join the channel. It contains the configuration information specified in channel.tx.  \u6b64\u547d\u4ee4\u8fd4\u56de\u4e00\u4e2a\u521b\u4e16\u533a\u5757- channel-ID.block -\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u52a0\u5165\u4fe1\u9053\u3002\u5b83\u5305\u542b\u4e86 channel.tx \u4e2d\u7684\u914d\u7f6e\u4fe1\u606f\u3002   Note   You will remain in the CLI container for the remainder of these manual commands. You must also remember to preface all commands with the corresponding environment variables when targeting a peer other than peer0.org1.example.com.   \u6ce8\u610f   \u5269\u4e0b\u7684\u547d\u4ee4\u5c06\u4f1a\u7559\u5728CLI\u5bb9\u5668\u5185\u6267\u884c\u3002\u4f60\u5fc5\u987b\u8bb0\u4f4f\u6240\u6709\u7684\u547d\u4ee4\u5fc5\u987b\u5728\u76f8\u5e94\u7684\u73af\u5883\u53d8\u91cf\u4e0b\u6267\u884c\u5f53\u76ee\u6807\u8282\u70b9\u662f\u9664\u4e86 peer0.org1.example.com \u4ee5\u5916\u7684\u8282\u70b9\u3002    Now let\u2019s join peer0.org1.example.com to the channel.  \u73b0\u5728\u8ba9\u6211\u4eec\u52a0\u5165 peer0.org1.example.com \u9891\u9053\u3002  # By default, this joins ``peer0.org1.example.com`` only\n# the  channel-ID .block was returned by the previous command\n\n peer channel join -b  channel-ID.block   You can make other peers join the channel as necessary by making appropriate changes in the four environment variables.  \u4f60\u53ef\u4ee5\u4fee\u65394\u4e2a\u73af\u5883\u53d8\u91cf\u6765\u8ba9\u522b\u7684\u8282\u70b9\u52a0\u5165\u4fe1\u9053\u3002", 
            "title": "1.9.2. \u521b\u5efa&amp;\u52a0\u5165\u4fe1\u9053"
        }, 
        {
            "location": "/build_network_zh/#193", 
            "text": "Note   We will utilize a simple existing chaincode. To learn how to write your own chaincode, see the Chaincode for Developers tutorial.   \u6ce8\u610f   \u6211\u4eec\u5c06\u5229\u7528\u4e00\u4e2a\u73b0\u6709\u7684\u7b80\u5355\u94fe\u7801\uff0c\u6765\u5b66\u4e60\u5982\u4f55\u7f16\u5199\u81ea\u5df1\u7684\u94fe\u7801\uff0c\u8bf7\u53c2\u8003 \u94fe\u7801\u670d\u52a1\u5f00\u53d1\u6307\u5357    Applications interact with the blockchain ledger through chaincode. As such we need to install the chaincode on every peer that will execute and endorse our transactions, and then instantiate the chaincode on the channel.  \u5e94\u7528\u7a0b\u5e8f\u548c\u533a\u5757\u94fe\u8d26\u672c\u4f1a\u76f8\u4e92\u5f71\u54cd\u901a\u8fc7 chaincode \u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5728\u6bcf\u4e2a\u4f1a\u6267\u884c\u4ee5\u53ca\u80cc\u4e66\u6211\u4eec\u4ea4\u6613\u7684peer\u8282\u70b9\u5b89\u88c5chaincode\uff0c\u7136\u540e\u5728\u4fe1\u9053\u4e0a\u5b9e\u4f8b\u5316chaincode\u3002  First, install the sample go code onto one of the four peer nodes. This command places the source code onto our peer\u2019s filesystem.  \u9996\u5148\uff0c\u5728\u5c06\u793a\u4f8b\u4ee3\u7801\u5b89\u88c5\u52304\u4e2apeer\u8282\u70b9\u4e2d\u7684\u5176\u4e2d\u4e00\u4e2a\u3002\u8fd9\u4e2a\u547d\u4ee4\u5c06\u6e90\u4ee3\u7801\u653e\u5230peer\u8282\u70b9\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u3002  peer chaincode install -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02  Next, instantiate the chaincode on the channel. This will initialize the chaincode on the channel, set the endorsement policy for the chaincode, and launch a chaincode container for the targeted peer. Take note of the -P argument. This is our policy where we specify the required level of endorsement for a transaction against this chaincode to be validated.  \u63a5\u4e0b\u6765\uff0c\u5728\u4fe1\u9053\u4e0a\u5b9e\u4f8b\u5316chaincode\u3002\u8fd9\u5c06\u521d\u59cb\u5316\u4fe1\u9053\u4e0a\u7684\u94fe\u7801\uff0c\u8bbe\u7f6e\u94fe\u7801\u7684\u80cc\u4e66\u7b56\u7565\uff0c\u4e3a\u76ee\u6807peer\u8282\u70b9\u542f\u52a8\u4e00\u4e2achaincode\u5bb9\u5668\u6ce8\u610f -P \u53c2\u6570\u3002\u8fd9\u662f\u6211\u4eec\u9700\u8981\u6307\u5b9a\u7684\u5f53\u8fd9\u4e2achaincode\u7684\u4ea4\u6613\u9700\u8981\u88ab\u9a8c\u8bc1\u7684\u65f6\u4faf\u7684\u80cc\u4e66\u7b56\u7565\u3002  In the command below you\u2019ll notice that we specify our policy as -P  OR ( Org0MSP.member , Org1MSP.member ) . This means that we need \u201cendorsement\u201d from a peer belonging to Org1 OR Org2 (i.e. only one endorsement). If we changed the syntax to AND then we would need two endorsements.  \u5728\u4e0b\u9762\u7684\u547d\u4ee4\u4e2d\uff0c\u4f60\u4f1a\u6ce8\u610f\u5230\u6211\u4eec\u6307\u5b9a -P \"OR ('Org0MSP.member','Org1MSP.member')\" \u4f5c\u4e3a\u80cc\u4e66\u7b56\u7565\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981Org1\u6216\u8005Org2\u7ec4\u7ec7\u4e2d\u7684\u5176\u4e2d\u4e00\u4e2a\u7684\u8282\u70b9\u7684\u80cc\u4e66\u5373\u53ef\uff08\u5373\u53ea\u6709\u4e00\u4e2a\u80cc\u4e66\uff09\u3002\u5982\u679c\u6211\u4eec\u6539\u53d8\u8bed\u6cd5\u4e3a AND \u90a3\u4e48\u6211\u4eec\u5c31\u9700\u89812\u4e2a\u80cc\u4e66\u8005\u3002  # be sure to replace the $CHANNEL_NAME environment variable\n# if you did not install your chaincode with a name of mycc, then modify that argument as well\n\npeer chaincode instantiate -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n mycc -v 1.0 -c '{ Args :[ init , a ,  100 ,  b , 200 ]}' -P  OR ('Org1MSP.member','Org2MSP.member')   See the endorsement policies documentation for more details on policy implementation.  \u6709\u5173\u66f4\u591a\u80cc\u4e66\u7b56\u7565\u7684\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u8003 \u80cc\u4e66\u7b56\u7565", 
            "title": "1.9.3. \u5b89\u88c5\u548c\u5b9e\u4f8b\u5316\u94fe\u7801"
        }, 
        {
            "location": "/build_network_zh/#194", 
            "text": "Let\u2019s query for the value of a to make sure the chaincode was properly instantiated and the state DB was populated. The syntax for query is as follows:  \u8ba9\u6211\u4eec\u67e5\u8be2\u4e00\u4e0b a \u7684\u503c\uff0c\u4ee5\u786e\u4fdd\u94fe\u7801\u88ab\u6b63\u786e\u5b9e\u4f8b\u5316\uff0c state DB \u88ab\u586b\u5145\u3002\u67e5\u8be2\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a  # be sure to set the -C and -n flags appropriately\n\npeer chaincode query -C $CHANNEL_NAME -n mycc -c '{ Args :[ query , a ]}'", 
            "title": "1.9.4. \u67e5\u8be2"
        }, 
        {
            "location": "/build_network_zh/#195", 
            "text": "Now let\u2019s move 10 from a to b. This transaction will cut a new block and update the state DB. The syntax for invoke is as follows:  \u73b0\u5728\u8ba9\u6211\u4eec\u4ece a \u8d26\u6237\u8f6c 10 \u5230 b \u8d26\u6237\u3002\u8fd9\u4e2a\u4ea4\u6613\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u533a\u5757\u5e76\u66f4\u65b0 state DB \u3002\u8c03\u7528\u8bed\u6cd5\u5982\u4e0b\uff1a  # be sure to set the -C and -n flags appropriately\n\npeer chaincode invoke -o orderer.example.com:7050  --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem  -C $CHANNEL_NAME -n mycc -c '{ Args :[ invoke , a , b , 10 ]}'", 
            "title": "1.9.5. \u8c03\u7528"
        }, 
        {
            "location": "/build_network_zh/#196", 
            "text": "\u8ba9\u6211\u4eec\u786e\u8ba4\u4e0b\u6211\u4eec\u4e4b\u524d\u7684\u8c03\u7528\u88ab\u6b63\u786e\u5730\u6267\u884c\u4e86\u3002\u6211\u4eec\u521d\u59cb\u5316\u4e86 a \u7684\u503c\u4e3a 100 \uff0c\u5728\u4e0a\u4e00\u6b21\u8c03\u7528\u7684\u65f6\u4faf\u8f6c\u79fb\u4e86 10 \u7ed9 b \u3002\u56e0\u6b64\uff0c\u67e5\u8be2 a \u5e94\u8be5\u5c55\u793a 90 \u3002\u67e5\u8be2\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a  # be sure to set the -C and -n flags appropriately\n\npeer chaincode query -C $CHANNEL_NAME -n mycc -c '{ Args :[ query , a ]}'  We should see the following:  \u6211\u4eec\u5e94\u8be5\u770b\u5230\u4ee5\u4e0b\u5185\u5bb9\uff1a  Query Result: 90  Feel free to start over and manipulate the key value pairs and subsequent invocations.  \u968f\u65f6\u91cd\u65b0\u5f00\u59cb\u5e76\u64cd\u4f5c\u952e\u503c\u5bf9\u548c\u968f\u540e\u7684\u8c03\u7528\u3002", 
            "title": "1.9.6. \u67e5\u8be2"
        }, 
        {
            "location": "/build_network_zh/#197", 
            "text": "Note   These steps describe the scenario in which script.sh is not commented out in the docker-compose-cli.yaml file. Clean your network with ./byfn.sh -m down and ensure this command is active. Then use the same docker-compose prompt to launch your network again   \u6ce8\u610f   \u8fd9\u4e9b\u6b65\u9aa4\u63cf\u8ff0\u5566\u5728 script.sh \u811a\u672c\u4e2d\u6ca1\u6709\u6ce8\u91ca\u6389\u7684 docker-compose-cli.yaml \u6587\u4ef6\u4e2d\u7684\u573a\u666f\u3002\u4f7f\u7528 ./byfn.sh -m down \u5e76\u786e\u4fdd\u547d\u4ee4\u6267\u884c\u6210\u529f\u3002\u7136\u540e\u4f7f\u7528\u76f8\u540c\u7684docker-compose\u63d0\u793a\u53bb\u542f\u52a8\u4f60\u7684\u7f51\u7edc\u3002      A script - script.sh - is baked inside the CLI container. The script drives the createChannel command against the supplied channel name and uses the channel.tx file for channel configuration.    script.sh \u811a\u672c\u88ab\u62f7\u8d1d\u5230CLI\u5bb9\u5668\u4e2d\u3002\u8fd9\u4e2a\u811a\u672c\u9a71\u52a8\u4e86\u4f7f\u7528\u63d0\u4f9b\u7684channel name\u4ee5\u53ca\u4fe1\u9053\u914d\u7f6e\u7684channel.tx\u6587\u4ef6\u7684 createChannel \u547d\u4ee4\u3002    The output of createChannel is a genesis block -  .block - which gets stored on the peers\u2019 file systems and contains the channel configuration specified from channel.tx.    createChannel \u547d\u4ee4\u7684\u4ea7\u51fa\u662f\u4e00\u4e2a\u521b\u4e16\u533a\u5757- your_channel_name .block -\u8fd9\u4e2a\u521b\u4e16\u533a\u5757\u88ab\u5b58\u50a8\u5728peer\u8282\u70b9\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u540c\u65f6\u5305\u542b\u4e86\u5728channel.tx\u7684\u4fe1\u9053\u914d\u7f6e\u3002    The joinChannel command is exercised for all four peers, which takes as input the previously generated genesis block. This command instructs the peers to join   and create a chain starting with  .block.    joinChannel \u547d\u4ee4\u88ab4\u4e2apeer\u8282\u70b9\u6267\u884c\uff0c\u4f5c\u4e3a\u4e4b\u524d\u4ea7\u751f\u7684genesis block\u7684\u8f93\u5165\u3002\u8fd9\u4e2a\u547d\u4ee4\u4ecb\u7ecd\u4e86peer\u8282\u70b9\u52a0\u5165 your_channel_name \u4ee5\u53ca\u5229\u7528 your_channel_name .block \u53bb\u521b\u5efa\u4e00\u6761\u94fe\u3002    Now we have a channel consisting of four peers, and two organizations. This is our TwoOrgsChannel profile.    \u73b0\u5728\u6211\u4eec\u6709\u4e86\u75314\u4e2apeer\u8282\u70b9\u4ee5\u53ca2\u4e2a\u7ec4\u7ec7\u6784\u6210\u7684\u4fe1\u9053\u3002\u8fd9\u662f\u6211\u4eec\u7684 TwoOrgsChannel \u914d\u7f6e\u6587\u4ef6\u3002    peer0.org1.example.com and peer1.org1.example.com belong to Org1; peer0.org2.example.com and peer1.org2.example.com belong to Org2    peer0.org1.example.com \u548c peer1.org1.example.com \u5c5e\u4e8eOrg1; peer0.org2.example.com \u548c peer1.org2.example.com \u5c5e\u4e8eOrg2    These relationships are defined through the crypto-config.yaml and the MSP path is specified in our docker compose.    \u8fd9\u4e9b\u5173\u7cfb\u662f\u901a\u8fc7crypto-config.yaml\u5b9a\u4e49\u7684\uff0cMSP\u8def\u5f84\u5728docker-compose\u6587\u4ef6\u4e2d\u88ab\u6307\u5b9a\u3002    The anchor peers for Org1MSP (peer0.org1.example.com) and Org2MSP (peer0.org2.example.com) are then updated. We do this by passing the Org1MSPanchors.tx and Org2MSPanchors.tx artifacts to the ordering service along with the name of our channel.    Org1MSP( peer0.org1.example.com )\u548cOrg2MSP( peer0.org2.example.com )\u7684anchor peers\u5c06\u5728\u540e\u7eed\u88ab\u66f4\u65b0\u3002\u6211\u4eec\u901a\u8fc7\u643a\u5e26channel\u7684\u540d\u5b57\u4f20\u9012 Org1MSPanchors.tx \u548c Org2MSPanchors.tx \u914d\u7f6e\u5230\u6392\u5e8f\u670d\u52a1\u6765\u5b9e\u73b0anchor peer\u7684\u66f4\u65b0\u3002    A chaincode - chaincode_example02 - is installed on peer0.org1.example.com and peer0.org2.example.com    \u4e00\u4e2a\u94fe\u7801- chaincode_example02 \u88ab\u5b89\u88c5\u5728 peer0.org1.example.com \u548c peer0.org2.example.com    The chaincode is then \u201cinstantiated\u201d on peer0.org2.example.com. Instantiation adds the chaincode to the channel, starts the container for the target peer, and initializes the key value pairs associated with the chaincode. The initial values for this example are [\u201ca\u201d,\u201d100\u201d \u201cb\u201d,\u201d200\u201d]. This \u201cinstantiation\u201d results in a container by the name of dev-peer0.org2.example.com-mycc-1.0 starting.    \u8fd9\u4e2a\u94fe\u7801\u5728 peer0.org2.example.com \u88ab\u5b9e\u4f8b\u5316\u3002\u5b9e\u4f8b\u5316\u8fc7\u7a0b\u5c06\u94fe\u7801\u6dfb\u52a0\u5230\u4fe1\u9053\u4e0a\uff0c\u5e76\u542f\u52a8peer\u8282\u70b9\u5bf9\u5e94\u7684\u5bb9\u5668\uff0c\u5e76\u4e14\u521d\u59cb\u5316\u548c\u94fe\u7801\u670d\u52a1\u6709\u5173\u7684\u952e\u503c\u5bf9\u3002\u793a\u4f8b\u7684\u521d\u59cb\u5316\u7684\u503c\u662f [\u201da\u201c,\u201d100\u201c\uff0c\u201db\u201c\uff0c\u201d200\u201c] \u3002\u5b9e\u4f8b\u5316\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u540d\u4e3a dev-peer0.org2.example.com-mycc-1.0 \u7684\u5bb9\u5668\u542f\u52a8\u4e86\u3002    The instantiation also passes in an argument for the endorsement policy. The policy is defined as -P  OR    ( Org1MSP.member , Org2MSP.member ) , meaning that any transaction must be endorsed by a peer tied to Org1 or Org2.    \u5b9e\u4f8b\u5316\u8fc7\u7a0b\u540c\u6837\u4e3a\u80cc\u4e66\u7b56\u7565\u4f20\u9012\u76f8\u5173\u53c2\u6570\u3002\u7b56\u7565\u88ab\u5b9a\u4e49\u4e3a -P \"OR    ('Org1MSP.member','Org2MSP.member')\" \uff0c\u610f\u601d\u662f\u4efb\u4f55\u4ea4\u6613\u5fc5\u987b\u88abOrg1\u6216\u8005Org2\u80cc\u4e66\u3002    A query against the value of \u201ca\u201d is issued to peer0.org1.example.com. The chaincode was previously installed on peer0.org1.example.com, so this will start a container for Org1 peer0 by the name of dev-peer0.org1.example.com-mycc-1.0. The result of the query is also returned. No write operations have occurred, so a query against \u201ca\u201d will still return a value of \u201c100\u201d.    \u4e00\u4e2a\u9488\u5bf9 a \u7684\u67e5\u8be2\u53d1\u5f80 peer0.org1.example.com \u3002\u94fe\u7801\u670d\u52a1\u5df2\u7ecf\u88ab\u5b89\u88c5\u5728\u4e86 peer0.org1.example.com \uff0c\u56e0\u6b64\u8fd9\u6b21\u67e5\u8be2\u5c06\u542f\u52a8\u4e00\u4e2a\u540d\u4e3a dev-peer0.org1.example.com-mycc-1.0 \u7684\u5bb9\u5668\u3002\u67e5\u8be2\u7684\u7ed3\u679c\u4e5f\u5c06\u88ab\u8fd4\u56de\u3002\u6ca1\u6709\u5199\u64cd\u4f5c\u51fa\u73b0\uff0c\u56e0\u6b64\u67e5\u8be2\u7684\u7ed3\u679c\u7684\u503c\u5c06\u4e3a 100 \u3002    An invoke is sent to peer0.org1.example.com to move \u201c10\u201d from \u201ca\u201d to \u201cb\u201d    \u4e00\u6b21 invoke \u88ab\u53d1\u5f80 peer0.org1.example.com \uff0c\u4ece a \u8f6c\u79fb 10 \u5230 b \u3002    The chaincode is then installed on peer1.org2.example.com    \u7136\u540e\u94fe\u7801\u670d\u52a1\u88ab\u5b89\u88c5\u5230 peer1.org2.example.com    A query is sent to peer1.org2.example.com for the value of \u201ca\u201d. This starts a third chaincode container by the name of dev-peer1.org2.example.com-mycc-1.0. A value of 90 is returned, correctly reflecting the previous transaction during which the value for key \u201ca\u201d was modified by 10.    \u4e00\u4e2a query \u8bf7\u6c42\u88ab\u53d1\u5f80 peer1.org2.example.com \u7528\u4e8e\u67e5\u8be2 a \u7684\u503c\u3002\u8fd9\u5c06\u542f\u52a8\u7b2c\u4e09\u4e2a\u94fe\u7801\u670d\u52a1\u540d\u4e3a dev-peer1.org2.example.com-mycc-1.0 \u3002\u8fd4\u56de a \u7684\u503c\u4e3a90,\u6b63\u786e\u5730\u53cd\u6620\u4e86\u4e4b\u524d\u7684\u4ea4\u6613\uff0c a \u7684\u503c\u88ab\u8f6c\u79fb\u4e8610\u3002", 
            "title": "1.9.7. \u5e55\u540e\u53d1\u751f\u4e86\u4ec0\u4e48?"
        }, 
        {
            "location": "/build_network_zh/#198", 
            "text": "Chaincode MUST be installed on a peer in order for it to successfully perform read/write operations against the ledger. Furthermore, a chaincode container is not started for a peer until an init or traditional transaction - read/write - is performed against that chaincode (e.g. query for the value of \u201ca\u201d). The transaction causes the container to start. Also, all peers in a channel maintain an exact copy of the ledger which comprises the blockchain to store the immutable, sequenced record in blocks, as well as a state database to maintain a snapshot of the current state. This includes those peers that do not have chaincode installed on them (like peer1.org1.example.com in the above example) . Finally, the chaincode is accessible after it is installed (like peer1.org2.example.com in the above example) because it has already been instantiated.  \u4e3a\u4e86\u80fd\u591f\u6b63\u786e\u5730\u5728\u8d26\u672c\u4e0a\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\uff0c\u94fe\u7801\u670d\u52a1\u5fc5\u987b\u88ab\u5b89\u88c5\u5728peer\u8282\u70b9\u4e0a\u3002\u6b64\u5916\uff0c\u6bcf\u4e2apeer\u8282\u70b9\u7684\u94fe\u7801\u670d\u52a1\u7684\u5bb9\u5668\u9664\u4e86 init \u6216\u8005\u4f20\u7edf\u7684\u4ea4\u6613-\u8bfb/\u5199-\u9488\u5bf9\u8be5\u94fe\u7801\u670d\u52a1\u6267\u884c\uff08\u4f8b\u5982\u67e5\u8be2 a \u7684\u503c\uff09\uff0c\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u542f\u52a8\u3002\u4ea4\u6613\u5bfc\u81f4\u5bb9\u5668\u7684\u542f\u52a8\u3002\u5f53\u7136\uff0c\u6240\u6709\u4fe1\u9053\u4e2d\u7684\u8282\u70b9\u90fd\u6301\u6709\u4ee5\u5757\u7684\u5f62\u5f0f\u987a\u5e8f\u5b58\u50a8\u7684\u4e0d\u53ef\u53d8\u7684\u8d26\u672c\u7cbe\u786e\u7684\u5907\u4efd\uff0c\u4ee5\u53ca\u72b6\u6001\u6570\u636e\u5e93\u6765\u4fdd\u5b58\u524d\u72b6\u6001\u7684\u5feb\u7167\u3002\u8fd9\u5305\u62ec\u4e86\u6ca1\u6709\u5728\u5176\u4e0a\u5b89\u88c5\u94fe\u7801\u670d\u52a1\u7684peer\u8282\u70b9\uff08 peer1.org2.example.com \u5982\u4e0a\u6240\u793a\uff09\u3002\u6700\u540e\uff0c\u94fe\u7801\u5728\u88ab\u5b89\u88c5\u540e\u5c06\u662f\u53ef\u8fbe\u72b6\u6001\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u88ab\u5b9e\u4f8b\u5316\u4e86\u3002", 
            "title": "1.9.8. \u8fd9\u6307\u660e\u4e86\u4ec0\u4e48\uff1f"
        }, 
        {
            "location": "/build_network_zh/#199", 
            "text": "\u68c0\u67e5CLI\u5bb9\u5668\u7684\u65e5\u5fd7\u3002  docker logs -f cli  \u4f60\u5e94\u8be5\u770b\u5230\u4ee5\u4e0b\u8f93\u51fa\uff1a  2017-05-16 17:08:01.366 UTC [msp] GetLocalMSP -  DEBU 004 Returning existing local MSP\n2017-05-16 17:08:01.366 UTC [msp] GetDefaultSigningIdentity -  DEBU 005 Obtaining default signing identity\n2017-05-16 17:08:01.366 UTC [msp/identity] Sign -  DEBU 006 Sign: plaintext: 0AB1070A6708031A0C08F1E3ECC80510...6D7963631A0A0A0571756572790A0161\n2017-05-16 17:08:01.367 UTC [msp/identity] Sign -  DEBU 007 Sign: digest: E61DB37F4E8B0D32C9FE10E3936BA9B8CD278FAA1F3320B08712164248285C54\nQuery Result: 90\n2017-05-16 17:08:15.158 UTC [main] main -  INFO 008 Exiting.....\n===================== Query on PEER3 on channel 'mychannel' is successful =====================\n\n===================== All GOOD, BYFN execution completed =====================\n\n\n _____   _   _   ____\n| ____| | \\ | | |  _ \\\n|  _|   |  \\| | | | | |\n| |___  | |\\  | | |_| |\n|_____| |_| \\_| |____/  You can scroll through these logs to see the various transactions.  \u4f60\u53ef\u4ee5\u6eda\u52a8\u8fd9\u4e9b\u65e5\u5fd7\u6765\u67e5\u770b\u5404\u79cd\u4ea4\u6613\u3002", 
            "title": "1.9.9. \u6211\u5982\u4f55\u67e5\u8be2\u8fd9\u4e9b\u4ea4\u6613\uff1f"
        }, 
        {
            "location": "/build_network_zh/#1910", 
            "text": "Inspect the individual chaincode containers to see the separate transactions executed against each container. Here is the combined output from each container:  \u68c0\u67e5\u6bcf\u4e2a\u72ec\u7acb\u7684\u94fe\u7801\u670d\u52a1\u5bb9\u5668\u6765\u67e5\u770b\u6bcf\u4e2a\u5bb9\u5668\u5185\u7684\u5206\u9694\u7684\u4ea4\u6613\u3002\u4e0b\u9762\u662f\u6bcf\u4e2a\u94fe\u7801\u670d\u52a1\u5bb9\u5668\u7684\u65e5\u5fd7\u7684\u7ec4\u5408\uff1a  $ docker logs dev-peer0.org2.example.com-mycc-1.0\n04:30:45.947 [BCCSP_FACTORY] DEBU : Initialize BCCSP [SW]\nex02 Init\nAval = 100, Bval = 200\n\n$ docker logs dev-peer0.org1.example.com-mycc-1.0\n04:31:10.569 [BCCSP_FACTORY] DEBU : Initialize BCCSP [SW]\nex02 Invoke\nQuery Response:{ Name : a , Amount : 100 }\nex02 Invoke\nAval = 90, Bval = 210\n\n$ docker logs dev-peer1.org2.example.com-mycc-1.0\n04:31:30.420 [BCCSP_FACTORY] DEBU : Initialize BCCSP [SW]\nex02 Invoke\nQuery Response:{ Name : a , Amount : 90 }", 
            "title": "1.9.10. \u6211\u5982\u4f55\u67e5\u770b\u94fe\u7801\u65e5\u5fd7\uff1f"
        }, 
        {
            "location": "/build_network_zh/#110-docker-compose", 
            "text": "The BYFN sample offers us two flavors of Docker Compose files, both of which are extended from the docker-compose-base.yaml (located in the base folder). Our first flavor, docker-compose-cli.yaml, provides us with a CLI container, along with an orderer, four peers. We use this file for the entirety of the instructions on this page.  BYFN\u793a\u4f8b\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u4e24\u79cd\u98ce\u683c\u7684Docker Compose\u6587\u4ef6\uff0c\u5b83\u4eec\u90fd\u7ee7\u627f\u81ea docker-compose-base.yaml \uff08 base \u76ee\u5f55\u4e0b\uff09\u3002\u6211\u4eec\u7684\u7b2c\u4e00\u79cd\u7c7b\u578b\uff0c docker-compose-cli.yaml \u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2aCLI\u5bb9\u5668\uff0c\u4ee5\u53ca\u4e00\u4e2aorderer\u5bb9\u5668\uff0c\u56db\u4e2apeer\u5bb9\u5668\u3002\u6211\u4eec\u7528\u6b64\u6587\u4ef6\u6765\u5c55\u5f00\u8fd9\u4e2a\u9875\u9762\u4e0a\u7684\u6240\u6709\u8bf4\u660e\u3002   Note   the remainder of this section covers a docker-compose file designed for the SDK. Refer to the Node SDK repo for details on running these tests.   \u6ce8\u610f   \u672c\u8282\u7684\u5269\u4f59\u90e8\u5206\u6db5\u76d6\u4e86\u4e3aSDK\u8bbe\u8ba1\u7684docker-compose\u6587\u4ef6\u3002\u6709\u5173\u8fd0\u884c\u8fd9\u4e9b\u6d4b\u8bd5\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Node SDK \u4ed3\u5e93\u3002    The second flavor, docker-compose-e2e.yaml, is constructed to run end-to-end tests using the Node.js SDK. Aside from functioning with the SDK, its primary differentiation is that there are containers for the fabric-ca servers. As a result, we are able to send REST calls to the organizational CAs for user registration and enrollment.  \u7b2c\u4e8c\u79cd\u98ce\u683c\u662f docker-compose-e2e.yaml \uff0c\u88ab\u6784\u9020\u4e3a\u4f7f\u7528Node.js SDK\u6765\u8fd0\u884c\u7aef\u5230\u7aef\u6d4b\u8bd5\u3002\u9664\u4e86SDK\u7684\u529f\u80fd\u4e4b\u5916\uff0c\u5b83\u4e3b\u8981\u7684\u533a\u522b\u5728\u4e8e\u5b83\u6709\u8fd0\u884cfabric-ca\u670d\u52a1\u7684\u5bb9\u5668\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u80fd\u591f\u5411\u7ec4\u7ec7\u7684CA\u8282\u70b9\u53d1\u9001REST\u7684\u8bf7\u6c42\u7528\u4e8e\u6ce8\u518c\u548c\u767b\u8bb0\u3002  If you want to use the docker-compose-e2e.yaml without first running the byfn.sh script, then we will need to make four slight modifications. We need to point to the private keys for our Organization\u2019s CA\u2019s. You can locate these values in your crypto-config folder. For example, to locate the private key for Org1 we would follow this path - crypto-config/peerOrganizations/org1.example.com/ca/. The private key is a long hash value followed by _sk. The path for Org2 would be - crypto-config/peerOrganizations/org2.example.com/ca/.  \u5982\u679c\u4f60\u5728\u6ca1\u6709\u8fd0\u884c byfn.sh \u811a\u672c\u7684\u60c5\u51b5\u4e0b\uff0c\u60f3\u4f7f\u7528 docker-compose-e2e.yaml \uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c4\u4e2a\u8f7b\u5fae\u7684\u4fee\u6539\u3002\u6211\u4eec\u9700\u8981\u6307\u51fa\u672c\u7ec4\u7ec7CA\u7684\u79c1\u94a5\u3002\u4f60\u53ef\u4ee5\u5728 crypto-config \u6587\u4ef6\u5939\u4e2d\u627e\u5230\u8fd9\u4e9b\u503c\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e3a\u4e86\u5b9a\u4f4dOrg1\u7684\u79c1\u94a5\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 crypto-config/peerOrganizations/org1.example.com/ca/ \u3002Org2\u7684\u8def\u5f84\u4e3a crypto-config/peerOrganizations/org2.example.com/ca/ \u3002  In the docker-compose-e2e.yaml update the FABRIC_CA_SERVER_TLS_KEYFILE variable for ca0 and ca1. You also need to edit the path that is provided in the command to start the ca server. You are providing the same private key twice for each CA container.  \u5728 docker-compose-e2e.yaml \u91cc\u4e3aca0\u548cca1\u66f4\u65b0FABRIC_CA_SERVER_TLS_KEYFILE\u53d8\u91cf\u3002\u4f60\u540c\u6837\u9700\u8981\u7f16\u8f91command\u4e2d\u53bb\u542f\u52a8ca server\u7684\u8def\u5f84\u3002\u4f60\u4e3a\u6bcf\u4e2aCA\u5bb9\u5668\u63d0\u4f9b\u4e862\u6b21\u540c\u6837\u7684\u79c1\u94a5\u3002", 
            "title": "1.10. \u4e86\u89e3 Docker Compose \u6280\u672f"
        }, 
        {
            "location": "/build_network_zh/#111-couchdb", 
            "text": "The state database can be switched from the default (goleveldb) to CouchDB. The same chaincode functions are available with CouchDB, however, there is the added ability to perform rich and complex queries against the state database data content contingent upon the chaincode data being modeled as JSON.  \u72b6\u6001\u6570\u636e\u5e93\u53ef\u4ee5\u4ece\u9ed8\u8ba4\u7684 goleveldb \u5207\u6362\u5230 CouchDB \u3002\u94fe\u7801\u529f\u80fd\u540c\u6837\u80fd\u4f7f\u7528 CouchDB \u3002\u4f46\u662f\uff0c CouchDB \u63d0\u4f9b\u4e86\u989d\u5916\u7684\u80fd\u529b\u6765\u6839\u636eJSON\u5f62\u5f0f\u7684\u94fe\u7801\u670d\u52a1\u6570\u636e\u63d0\u4f9b\u66f4\u52a0\u4e30\u5bcc\u4ee5\u53ca\u590d\u6742\u7684\u67e5\u8be2\u3002  To use CouchDB instead of the default database (goleveldb), follow the same procedures outlined earlier for generating the artifacts, except when starting the network pass docker-compose-couch.yaml as well:  \u4f7f\u7528CouchDB\u4ee3\u66ff\u9ed8\u8ba4\u7684\u6570\u636e\u5e93\uff08goleveldb\uff09\uff0c\u9664\u4e86\u5728\u542f\u52a8\u7f51\u7edc\u7684\u65f6\u4faf\u4f20\u9012 docker-compose-couch.yaml \u4e4b\u5916\uff0c\u8bf7\u9075\u5faa\u524d\u9762\u63d0\u5230\u7684\u751f\u6210\u914d\u7f6e\u6587\u4ef6\u7684\u8fc7\u7a0b\uff1a  CHANNEL_NAME=$CHANNEL_NAME TIMEOUT= pick_a_value  docker-compose -f docker-compose-cli.yaml -f docker-compose-couch.yaml up -d  chaincode_example02 should now work using CouchDB underneath.  chaincode_example02\u73b0\u5728\u5e94\u8be5\u4f7f\u7528\u4e0b\u9762\u7684CouchDB\u3002   Note   If you choose to implement mapping of the fabric-couchdb container port to a host port, please make sure you are aware of the security implications. Mapping of the port in a development environment makes the CouchDB REST API available, and allows the visualization of the database via the CouchDB web interface (Fauxton). Production environments would likely refrain from implementing port mapping in order to restrict outside access to the CouchDB containers.   \u6ce8\u610f   \u5982\u679c\u4f60\u9009\u62e9\u5c06fabric-couchdb\u5bb9\u5668\u7aef\u53e3\u6620\u5c04\u5230\u4e3b\u673a\u7aef\u53e3\uff0c\u8bf7\u786e\u4fdd\u4f60\u610f\u8bc6\u5230\u4e86\u5b89\u5168\u6027\u7684\u5f71\u54cd\u3002\u5728\u5f00\u53d1\u73af\u5883\u4e2d\u6620\u5c04\u7aef\u53e3\u53ef\u4ee5\u4f7fCouchDB REST API\u53ef\u7528\uff0c\u5e76\u5141\u8bb8\u901a\u8fc7CouchDB Web\u754c\u9762\uff08Fauxton\uff09\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u53ef\u89c6\u5316\u3002\u751f\u4ea7\u73af\u5883\u5c06\u907f\u514d\u7aef\u53e3\u6620\u5c04\uff0c\u4ee5\u9650\u5236\u5bf9CouchDB\u5bb9\u5668\u7684\u5916\u90e8\u8bbf\u95ee\u3002    You can use chaincode_example02 chaincode against the CouchDB state database using the steps outlined above, however in order to exercise the CouchDB query capabilities you will need to use a chaincode that has data modeled as JSON, (e.g. marbles02). You can locate the marbles02 chaincode in the fabric/examples/chaincode/go directory.  \u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u5217\u51fa\u7684\u6b65\u9aa4\u4f7f\u7528CouchDB\u6765\u6267\u884cchaincode_example02\uff0c\u7136\u800c\u4e3a\u4e86\u6267\u884c\u6267\u884cCouchDB\u7684\u67e5\u8be2\u80fd\u529b\uff0c\u4f60\u5c06\u9700\u8981\u4f7f\u7528\u88ab\u683c\u5f0f\u5316\u4e3aJSON\u7684\u6570\u636e\uff08\u4f8b\u5982marbles02\uff09\u3002\u4f60\u53ef\u4ee5\u5728 fabric/examples/chaincode/go \u76ee\u5f55\u4e2d\u627e\u5230 marbles02 \u94fe\u7801\u670d\u52a1\u3002  We will follow the same process to create and join the channel as outlined in the Create   Join Channel section above. Once you have joined your peer(s) to the channel, use the following steps to interact with the marbles02 chaincode:  \u6211\u4eec\u5c06\u6309\u7167\u4e0a\u8ff0 \u521b\u5efa\u548c\u52a0\u5165\u9891\u9053 \u90e8\u5206\u6240\u8ff0\u7684\u76f8\u540c\u8fc7\u7a0b\u521b\u5efa\u548c\u52a0\u5165\u4fe1\u9053\u3002\u4e00\u65e6\u4f60\u5c06peer\u8282\u70b9\u52a0\u5165\u5230\u4e86\u4fe1\u9053\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u6b65\u9aa4\u4e0emarbles02\u94fe\u7801\u4ea4\u4e92\uff1a    Install and instantiate the chaincode on peer0.org1.example.com:    \u5728 peer0.org1.example.com \u4e0a\u5b89\u88c5\u548c\u5b9e\u4f8b\u5316\u94fe\u7801\uff1a    # be sure to modify the $CHANNEL_NAME variable accordingly for the instantiate command\n\npeer chaincode install -n marbles -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/marbles02\npeer chaincode instantiate -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -v 1.0 -c '{ Args :[ init ]}' -P  OR ('Org0MSP.member','Org1MSP.member')     Create some marbles and move them around:    \u521b\u5efa\u4e00\u4e9bmarbles\u5e76\u79fb\u52a8\u5b83\u4eec\uff1a    # be sure to modify the $CHANNEL_NAME variable accordingly\n\npeer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{ Args :[ initMarble , marble1 , blue , 35 , tom ]}'\npeer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{ Args :[ initMarble , marble2 , red , 50 , tom ]}'\npeer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{ Args :[ initMarble , marble3 , blue , 70 , tom ]}'\npeer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{ Args :[ transferMarble , marble2 , jerry ]}'\npeer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{ Args :[ transferMarblesBasedOnColor , blue , jerry ]}'\npeer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C $CHANNEL_NAME -n marbles -c '{ Args :[ delete , marble1 ]}'   If you chose to map the CouchDB ports in docker-compose, you can now view the state database through the CouchDB web interface (Fauxton) by opening a browser and navigating to the following URL:   http://localhost:5984/_utils   \u5982\u679c\u4f60\u9009\u62e9\u5728docker-compose\u6587\u4ef6\u4e2d\u6620\u5c04\u4f60\u7684CouchDB\u7684\u7aef\u53e3\uff0c\u90a3\u4e48\u4f60\u73b0\u5728\u5c31\u53ef\u4ee5\u901a\u8fc7CouchDB Web\u754c\u9762\uff08Fauxton\uff09\u901a\u8fc7\u6253\u5f00\u6d4f\u89c8\u5668\u5bfc\u822a\u4e0b\u5217URL\uff1a http://localhost:5984/_utils   You should see a database named mychannel (or your unique channel name) and the documents inside it.  \u4f60\u5e94\u8be5\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u540d\u4e3a mychannel \uff08\u6216\u8005\u4f60\u7684\u552f\u4e00\u7684\u4fe1\u9053\u540d\u5b57\uff09\u7684\u6570\u636e\u5e93\u4ee5\u53ca\u5b83\u7684\u6587\u6863\u5728\u91cc\u9762\uff1a   Note   For the below commands, be sure to update the $CHANNEL_NAME variable appropriately.   \u6ce8\u610f   \u5bf9\u4e8e\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u8bf7\u786e\u5b9a$CHANNEL_NAME\u53d8\u91cf\u88ab\u66f4\u65b0\u4e86\u3002    You can run regular queries from the CLI (e.g. reading marble2):  \u4f60\u53ef\u4ee5CLI\u4e2d\u8fd0\u884c\u5e38\u89c4\u7684\u67e5\u8be2\uff08\u4f8b\u5982\u8bfb\u53d6 marble2 \uff09\uff1a  peer chaincode query -C $CHANNEL_NAME -n marbles -c '{ Args :[ readMarble , marble2 ]}'  The output should display the details of marble2:  marble2\u7684\u8f93\u51fa\u5e94\u8be5\u663e\u793a\u4e3a\u5982\u4e0b\uff1a  Query Result: { color : red , docType : marble , name : marble2 , owner : jerry , size :50}  You can retrieve the history of a specific marble - e.g. marble1:  \u4f60\u53ef\u4ee5\u68c0\u7d22\u7279\u5b9amarble\u7684\u5386\u53f2\u8bb0\u5f55-\u4f8b\u5982 marble1 :  peer chaincode query -C $CHANNEL_NAME -n marbles -c '{ Args :[ getHistoryForMarble , marble1 ]}'  The output should display the transactions on marble1:  \u8f93\u51fa\u5e94\u8be5\u5728 marble1 \u7684\u4ea4\u6613\uff1a  Query Result: [{ TxId : 1c3d3caf124c89f91a4c0f353723ac736c58155325f02890adebaa15e16e6464 ,  Value :{ docType : marble , name : marble1 , color : blue , size :35, owner : tom }},{ TxId : 755d55c281889eaeebf405586f9e25d71d36eb3d35420af833a20a2f53a3eefd ,  Value :{ docType : marble , name : marble1 , color : blue , size :35, owner : jerry }},{ TxId : 819451032d813dde6247f85e56a89262555e04f14788ee33e28b232eef36d98f ,  Value :}]  You can also perform rich queries on the data content, such as querying marble fields by owner jerry:  \u4f60\u8fd8\u53ef\u4ee5\u5bf9\u6570\u636e\u5185\u5bb9\u6267\u884c\u4e30\u5bcc\u7684\u67e5\u8be2\uff0c\u4f8b\u5982\u901a\u8fc7\u62e5\u6709\u8005 jerry \u67e5\u8be2marble\uff1a  peer chaincode query -C $CHANNEL_NAME -n marbles -c '{ Args :[ queryMarblesByOwner , jerry ]}'  The output should display the two marbles owned by jerry:  \u8f93\u51fa\u5e94\u8be5\u663e\u793a2\u4e2a\u5c5e\u4e8e jerry \u7684marble\uff1a  Query Result: [{ Key : marble2 ,  Record :{ color : red , docType : marble , name : marble2 , owner : jerry , size :50}},{ Key : marble3 ,  Record :{ color : blue , docType : marble , name : marble3 , owner : jerry , size :70}}]", 
            "title": "1.11. \u4f7f\u7528CouchDB"
        }, 
        {
            "location": "/build_network_zh/#112", 
            "text": "If data persistence is desired on the peer container or the CouchDB container, one option is to mount a directory in the docker-host into a relevant directory in the container. For example, you may add the following two lines in the peer container specification in the docker-compose-base.yaml file:  \u5982\u679c\u9700\u8981\u5728peer\u5bb9\u5668\u6216\u8005CouchDB\u5bb9\u5668\u8fdb\u884c\u6570\u636e\u6301\u4e45\u5316\uff0c\u4e00\u79cd\u9009\u62e9\u662f\u5c06docker\u5bb9\u5668\u5185\u76f8\u5e94\u7684\u76ee\u5f55\u6302\u8f7d\u5230\u5bb9\u5668\u6240\u5728\u7684\u5bbf\u4e3b\u673a\u7684\u4e00\u4e2a\u76ee\u5f55\u4e2d\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u6dfb\u52a0\u4e0b\u5217\u7684\u4e24\u884c\u5230 docker-compose-base.yaml \u6587\u4ef6\u4e2dpeer\u7684\u7ea6\u5b9a\u4e2d\uff1a  volumes:\n - /var/hyperledger/peer0:/var/hyperledger/production  For the CouchDB container, you may add the following two lines in the CouchDB container specification:  \u5bf9\u4e8eCouchDB\u5bb9\u5668\uff0c\u4f60\u53ef\u4ee5\u5728CouchDB\u7684\u7ea6\u5b9a\u4e2d\u6dfb\u52a0\u4e24\u884c\uff1a  volumes:\n - /var/hyperledger/couchdb0:/opt/couchdb/data", 
            "title": "1.12. \u5173\u4e8e\u6570\u636e\u6301\u4e45\u5316\u7684\u63d0\u793a"
        }, 
        {
            "location": "/build_network_zh/#113", 
            "text": "Always start your network fresh. Use the following command to remove artifacts, crypto, containers and chaincode images:    \u59cb\u7ec8\u4fdd\u6301\u4f60\u7684\u7f51\u7edc\u662f\u5168\u65b0\u7684\u3002\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u79fb\u9664\u4e4b\u524d\u751f\u6210\u7684artifacts,crypto,containers\u4ee5\u53cachaincode images\uff1a    ./byfn.sh -m down    YOU WILL SEE ERRORS IF YOU DO NOT REMOVE CONTAINERS AND IMAGES    \u4f60\u5c06\u4f1a\u770b\u5230\u9519\u8bef\u4fe1\u606f\uff0c\u5982\u679c\u4f60\u4e0d\u79fb\u9664\u5bb9\u5668\u548c\u955c\u50cf    If you see Docker errors, first check your version (should be 1.12 or above), and then try restarting your Docker process. Problems with Docker are oftentimes not immediately recognizable. For example, you may see errors resulting from an inability to access crypto material mounted within a container.    \u5982\u679c\u4f60\u770b\u5230\u76f8\u5173\u7684Docker\u9519\u8bef\u4fe1\u606f\uff0c\u8bf7\u68c0\u67e5\u4f60\u7684\u7248\u672c\uff08\u5e94\u4e3a1.12\u6216\u66f4\u9ad8\u7248\u672c\uff09\uff0c\u7136\u540e\u91cd\u542f\u4f60\u7684Docker\u8fdb\u7a0b\u3002Docker\u7684\u95ee\u9898\u901a\u5e38\u4e0d\u4f1a\u88ab\u7acb\u5373\u8bc6\u522b\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u770b\u5230\u7531\u4e8e\u5bb9\u5668\u5185\u52a0\u5bc6\u6750\u6599\u5bfc\u81f4\u7684\u9519\u8bef\u3002    If they persist remove your images and start from scratch:    \u5982\u679c\u5979\u4eec\u575a\u6301\u5220\u9664\u60a8\u7684\u955c\u50cf\uff0c\u5e76\u4ece\u5934\u5f00\u59cb\uff1a    docker rm -f $(docker ps -aq)\ndocker rmi -f $(docker images -q)    If you see errors on your create, instantiate, invoke or query commands, make sure you have properly updated the channel name and chaincode name. There are placeholder values in the supplied sample commands.    \u5982\u679c\u4f60\u53d1\u73b0\u4f60\u7684\u521b\u5efa\u3001\u5b9e\u4f8b\u5316\uff0c\u8c03\u7528\u6216\u8005\u67e5\u8be2\u547d\u4ee4\uff0c\u8bf7\u786e\u4fdd\u4f60\u5df2\u7ecf\u66f4\u65b0\u4e86\u4fe1\u9053\u548c\u94fe\u7801\u7684\u540d\u5b57\u3002\u63d0\u4f9b\u7684\u793a\u4f8b\u547d\u4ee4\u4e2d\u6709\u5360\u4f4d\u7b26\u3002    If you see the below error:    \u5982\u679c\u4f60\u770b\u5230\u5982\u4e0b\u9519\u8bef\uff1a    Error: Error endorsing chaincode: rpc error: code = 2 desc = Error installing chaincode code mycc:1.0(chaincode /var/hyperledger/production/chaincodes/mycc.1.0 exits)  You likely have chaincode images (e.g. dev-peer1.org2.example.com-mycc-1.0 or dev-peer0.org1.example.com-mycc-1.0) from prior runs. Remove them and try again.  \u4f60\u53ef\u80fd\u7531\u4ee5\u524d\u8fd0\u884c\u7684\u94fe\u7801\u670d\u52a1\uff08\u4f8b\u5982 dev-peer1.org2.example.com-mycc-1.0 \u6216 dev-peer0.org1.example.com-mycc-1.0 \uff09\u3002\u5220\u9664\u5b83\u4eec\uff0c\u7136\u540e\u91cd\u8bd5\u3002  docker rmi -f $(docker images | grep peer[0-9]-peer[0-9] | awk '{print $3}')    If you see something similar to the following:    \u5982\u679c\u4f60\u770b\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u5185\u5bb9\u7684\u9519\u8bef\u4fe1\u606f\uff1a    Error connecting: rpc error: code = 14 desc = grpc: RPC failed fast due to transport failure\nError: rpc error: code = 14 desc = grpc: RPC failed fast due to transport failure  \u8bf7\u786e\u4fdd\u4f60\u7684fabric\u7f51\u7edc\u8fd0\u884c\u5728\u88ab\u6807\u8bb0\u4e3a latest \u7684 1.0.0-rc1 \u955c\u50cf\u4e0a\u3002  If you see the below error:  \u5982\u679c\u4f60\u770b\u5230\u4e86\u7c7b\u4f3c\u4ee5\u4e0b\u9519\u8bef\u7684\u5185\u5bb9\uff1a  [configtx/tool/localconfig] Load -  CRIT 002 Error reading configuration: Unsupported Config Type  \npanic: Error reading configuration: Unsupported Config Type    Then you did not set the FABRIC_CFG_PATH environment variable properly. The configtxgen tool needs this variable in order to locate the configtx.yaml. Go back and execute an export FABRIC_CFG_PATH=$PWD, then recreate your channel artifacts.  \u90a3\u4e48\u4f60\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e FABRIC_CFG_PATH \u73af\u5883\u53d8\u91cf\u3002configtxgen\u5de5\u5177\u9700\u8981\u8fd9\u4e2a\u53d8\u91cf\u624d\u80fd\u627e\u5230configtx.yaml\u3002\u8fd4\u56de\u5e76\u6267\u884c export FABRIC_CFG_PATH=$PWD \uff0c\u7136\u540e\u91cd\u65b0\u521b\u5efachannel\u914d\u7f6e\u3002    To cleanup the network, use the down option:    \u8981\u6e05\u7406\u7f51\u7edc\uff0c\u8bf7\u4f7f\u7528 down \u9009\u9879\uff1a    ./byfn.sh -m down    If you see an error stating that you still have \u201cactive endpoints\u201d, then prune your Docker networks. This will wipe your previous networks and start you with a fresh environment:    \u5982\u679c\u4f60\u770b\u5230\u4e00\u6761\u6307\u793a\u4f60\u4f9d\u7136\u6709\u201cactive endpoints\u201d\uff0c\u7136\u540e\u6e05\u7406\u4f60\u7684Docker\u7f51\u7edc\u3002\u8fd9\u5c06\u4f1a\u6e05\u9664\u4f60\u4e4b\u524d\u7684\u7f51\u7edc\u5e76\u4e14\u7ed9\u4f60\u4e00\u4e2a\u5168\u65b0\u7684\u73af\u5883\uff1a    docker network prune  You will see the following message:  \u4f60\u5c06\u770b\u5230\u4ee5\u4e0b\u6d88\u606f\uff1a  WARNING! This will remove all networks not used by at least one container.\nAre you sure you want to continue? [y/N]  Select y.  \u9009\u62e9 y \u3002    If you continue to see errors, share your logs on the # fabric-questions channel on Hyperledger Rocket Chat.    \u5982\u679c\u4f60\u4ecd\u65e7\u770b\u5230\u4e86\u9519\u8bef\uff0c\u8bf7\u5728 Hyperledger Rocket Chat \u7684 # fabric-questions \u9891\u9053\u4e0a\u5206\u4eab\u4f60\u7684\u65e5\u5fd7\u3002", 
            "title": "1.13. \u6545\u969c\u6392\u9664"
        }, 
        {
            "location": "/write_first_app_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\n\n\n\n\n\n\n\n\n\n\n\u8fd9\u91cc\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u5c31\u9760\u4f60\u4e86\uff01\uff01\uff01", 
            "title": "\u7f16\u5199\u7b2c\u4e00\u4e2a\u5e94\u7528"
        }, 
        {
            "location": "/write_first_app_zh/#_1", 
            "text": "", 
            "title": "\u8fd9\u91cc\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u5c31\u9760\u4f60\u4e86\uff01\uff01\uff01"
        }, 
        {
            "location": "/chaincode_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\u4e00\n \n\u539f\u6587\u4e8c\n \n\u539f\u6587\u4e09\n\n\n\n\n\n\n\n\n\n\n\n\n\u8fd9\u91cc\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u5c31\u9760\u4f60\u4e86\uff01\uff01\uff01", 
            "title": "Chaincode"
        }, 
        {
            "location": "/chaincode_zh/#_1", 
            "text": "", 
            "title": "\u8fd9\u91cc\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u5c31\u9760\u4f60\u4e86\uff01\uff01\uff01"
        }, 
        {
            "location": "/msp_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\n\n\n\n\n\n\n\n\n\n\n\u8fd9\u91cc\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u5c31\u9760\u4f60\u4e86\uff01\uff01\uff01", 
            "title": "MSP"
        }, 
        {
            "location": "/msp_zh/#_1", 
            "text": "", 
            "title": "\u8fd9\u91cc\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u5c31\u9760\u4f60\u4e86\uff01\uff01\uff01"
        }, 
        {
            "location": "/configtx_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nLinsheng Yu\n\n\n\n\n\n\n\n\n\n\nShared configuration for a Hyperledger Fabric blockchain network is stored in a collection configuration transactions, one per channel. Each configuration transaction is usually referred to by the shorter name \nconfigtx\n.\n\n\nHyperledger Fabric \u533a\u5757\u94fe\u7f51\u7edc\u7684\u5171\u4eab\u914d\u7f6e\u5b58\u50a8\u5728\u6bcf\u4e2achannel\u7684\u914d\u7f6e\u4ea4\u6613\u96c6\u5408\u4e2d\u3002\u914d\u7f6e\u4ea4\u6613\u7b80\u79f0\nconfigtx\n\u3002\n\n\nChannel configuration has the following important properties:\n\n\nChannel\u914d\u7f6e\u6709\u4ee5\u4e0b\u91cd\u8981\u7279\u6027\uff1a\n\n\n\n\n\n\n\u7248\u672c Versioned\n\uff1aAll elements of the configuration have an associated version which is advanced with every modification. Further, every committed configuration receives a sequence number.\n\n\n\u914d\u7f6e\u4e2d\u7684\u6240\u6709\u9879\u90fd\u6709\u4e00\u4e2a\u76f8\u5173\u8054\u7684\u7248\u672c\uff0c\u6bcf\u6b21\u4fee\u6539\u90fd\u4f1a\u6709\u4e2a\u66f4\u9ad8\u7684\u7248\u672c\u3002\u6b64\u5916\u6bcf\u4e2a\u63d0\u4ea4\u7684\u914d\u7f6e\u90fd\u4f1a\u6709\u4e2a\u5e8f\u5217\u53f7\u3002\n2. \n\u8bb8\u53ef Permissioned\n\uff1aAnyone with a copy of the previous configtx (and no additional info) may verify the validity of a new config based on these policies.\n\n\n\u914d\u7f6e\u4e2d\u7684\u6240\u6709\u9879\u90fd\u6709\u4e00\u4e2a\u76f8\u5173\u8054\u7684\u7b56\u7565\uff0c\u8be5\u7b56\u7565\u63a7\u5236\u8be5\u5143\u7d20\u662f\u5426\u53ef\u4fee\u6539\u3002\u4efb\u4f55\u6709\u524d\u4e00\u4e2aconfigtx\uff08\u65e0\u9700\u989d\u5916\u4fe1\u606f\uff09\u7684\u201c\u4eba\u201d\uff0c\u90fd\u53ef\u57fa\u4e8e\u8fd9\u4e9b\u7b56\u7565\u9a8c\u8bc1\u65b0\u914d\u7f6e\u7684\u6709\u6548\u6027\u3002\n3. \n\u5206\u5c42 Hierarchical\n\uff1aA root configuration group contains sub-groups, and each group of the hierarchy has associated values and policies. These policies can take advantage of the hierarchy to derive policies at one level from policies of lower levels.\n\n\n\u6839\u914d\u7f6e\u7ec4\u5305\u542b\u5b50\u7ec4\uff0c\u6bcf\u4e2a\u5206\u5c42\u7ec4\u5177\u6709\u76f8\u5173\u7684\u503c\u548c\u7b56\u7565\u3002\u8fd9\u4e9b\u7b56\u7565\u53ef\u4ee5\u5229\u7528\u5206\u5c42\u7ed3\u6784\u4ece\u8f83\u4f4e\u7ea7\u522b\u7684\u7b56\u7565\u4e2d\u5bfc\u51fa\u3002\n\n\n\n\n\n\nAnatomy of a configuration / \u914d\u7f6e\u5256\u6790\n\n\nConfiguration is stored as a transaction of type \nHeaderType_CONFIG\n in a block with no other transactions. These blocks are referred to as \nConfiguration Blocks\n, the first of which is referred to as the \nGenesis Block\n.\n\n\n\u914d\u7f6e\u4f5c\u4e3a\u4e00\u79cd\nHeaderType_CONFIG\n\u7c7b\u578b\u7684\u4ea4\u6613\u5355\u72ec\u5b58\u50a8\u5728\u4e00\u4e2ablock\u4e2d\uff08\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2ablock\u4e0d\u518d\u5305\u542b\u5176\u4ed6\u4ea4\u6613\uff09\uff0c\u8fd9\u4e2ablock\u88ab\u79f0\u4e3a\n\u914d\u7f6e\u533a\u5757\n\uff0c\u5176\u4e2d\u7684\u7b2c\u4e00\u4e2a\u79f0\u4e3a \n\u521b\u4e16\u533a\u5757\n\u3002\n\n\nThe proto structures for configuration are stored in \nfabric/protos/common/configtx.proto\n. The Envelope of type \nHeaderType_CONFIG\n encodes a \nConfigEnvelope\n message as the \nPayload\n \ndata\n field. The proto for \nConfigEnvelope\n is defined as follows:\n\n\n\u914d\u7f6e\u7684\u6570\u636e\u7ed3\u6784\u5728\u6587\u4ef6\nfabric/protos/common/configtx.proto\n\u4e2d\uff0c\u7f16\u7801\u540e\u7684\nConfigEnvelope\n\u4fe1\u606f\u4f5c\u4e3a\nHeaderType_CONFIG\n\u7c7b\u578b\u7684\nEnvelope\n\u4e2d\nPayload\n\u7684\nData\n\u5b57\u6bb5\u503c\u3002\n\uff08\u8bd1\u6ce8\uff1aEnvelope.payload.Header.channel_header.type= HeaderType_CONFIG\uff0cEnvelope.payload.data = []byte(ConfigEnvelope)\uff09\nConfigEnvelope\n\u5b9a\u4e49\u5982\u4e0b\uff1a\n\n\nmessage ConfigEnvelope {\n    Config config = 1;        // A marshaled Config structure\n    Envelope last_update = 2; // The last CONFIG_UPDATE message which generated this current configuration\n                              // Note that CONFIG_UPDATE has a Payload.Data of a Marshaled ConfigUpdate\n}\n\n\n\nThe \nlast_update\n field is defined below in the Updates to configuration section, but is only necessary when validating the configuration, not reading it. Instead, the currently committed configuration is stored in the \nconfig\n field, containing a \nConfig\n message.\n\n\nlast_update\n\u5b57\u6bb5\u5728\u4e0b\u9762\u7684\u201c\u66f4\u65b0\u914d\u7f6e\u201d\u4e00\u8282\u5b9a\u4e49\uff0c\u8be5\u5b57\u6bb5\u53ea\u7528\u4e8e\u9a8c\u8bc1\u914d\u7f6e\uff0c\u800c\u4e0d\u4f1a\u8bfb\u4ed6\u3002\u5f53\u524d\u63d0\u4ea4\u7684\u914d\u7f6e\u5b58\u50a8\u5728\nconfig\n\u5b57\u6bb5\uff0c\u662f\u4e00\u4e2a\nConfig\n\u4fe1\u606f\u3002\n\n\n// Config represents the config for a particular channel\nmessage Config {\n    uint64 sequence = 1;\n    ConfigGroup channel_group = 2;\n}\n\n\n\nThe \nsequence\n number is incremented by one for each committed configuration. The \nchannel_group\n field is the root group which contains the configuration. The \nConfigGroup\n structure is recursively defined, and builds a tree of groups, each of which contains values and policies. It is defined as follows:\n\n\n\u5176\u4e2d\nsequence\n\u5b57\u6bb5\u662f\u6bcf\u6b21\u63d0\u4ea4\u914d\u7f6e\u9012\u589e\u7684\u6570\u5b57\uff1b\nchannel_group\n\u5b57\u6bb5\u662f\u5305\u542b\u8be5\u914d\u7f6e\u7684\u6839\u7ec4\u3002\nConfigGroup\n\u7ed3\u6784\u662f\u9012\u5f52\u5b9a\u4e49\u7684\uff0c\u6784\u5efa\u4e86\u4e00\u4e2a\u7ec4\u6811\uff0c\u5176\u4e2d\u6bcf\u4e2a\u7ec4\u90fd\u5305\u542b\u503c\u548c\u7b56\u7565\u3002\u5176\u7ed3\u6784\u5982\u4e0b\uff1a\n\n\n// ConfigGroup is the hierarchical data structure for holding config\nmessage ConfigGroup {\n    uint64 version = 1;\n    map\nstring,ConfigGroup\n groups = 2;\n    map\nstring,ConfigValue\n values = 3;\n    map\nstring,ConfigPolicy\n policies = 4;\n    string mod_policy = 5;\n}\n\n\n\nBecause \nConfigGroup\n is a recursive structure, consider an example hierarchical arrangement of \nConfigGroup\ns (expressed for clarity in golang notation).\n\n\nConfigGroup\n\u662f\u9012\u5f52\u7ed3\u6784\uff0c\u6b64\u5904\u7ed9\u51fa\u4e00\u4e2a\u7528golang\u8868\u793a\u7684\u5206\u5c42\u6392\u5217\u7684\u793a\u4f8b\uff1a\n\n\n// \u5047\u8bbe\u5b9a\u4e49\u4e86\u4ee5\u4e0bgroup\nvar root, child1, child2, grandChild1, grandChild2, grandChild3 *ConfigGroup\n\n// Set the following values\nroot.Groups[\"child1\"] = child1\nroot.Groups[\"child2\"] = child2\nchild1.Groups[\"grandChild1\"] = grandChild1\nchild2.Groups[\"grandChild2\"] = grandChild2\nchild2.Groups[\"grandChild3\"] = grandChild3\n\n// The resulting config structure of groups looks like:\n// root:\n//     child1:\n//         grandChild1\n//     child2:\n//         grandChild2\n//         grandChild3\n\n\n\nEach group defines a level in the config hierarchy, and each group has an associated set of values (indexed by string key) and policies (also indexed by string key).\n\n\n\u6bcf\u4e2a\u7ec4\u90fd\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5206\u5c42\u7ed3\u6784\u4e2d\u7684\u7ea7\u522b\uff0c\u4e14\u6bcf\u4e2a\u7ec4\u90fd\u6709\u4e00\u4e2a\u76f8\u5173\u7684\u503c\u96c6\uff08\u4ee5string\u4e3akey\uff09\u548c\u7b56\u7565\uff08\u4ee5string\u4e3akey\uff09\u3002\n\n\nValues are defined by:\n\n\n\u503c\u5b9a\u4e49\uff1a\n\n\n// ConfigValue represents an individual piece of config data\nmessage ConfigValue {\n    uint64 version = 1;\n    bytes value = 2;\n    string mod_policy = 3;\n}\n\n\n\nPolicies are defined by:\n\u7b56\u7565\u5b9a\u4e49\uff1a\n\n\nmessage ConfigPolicy {\n    uint64 version = 1;\n    Policy policy = 2;\n    string mod_policy = 3;\n}\n\n\n\nNote that Values, Policies, and Groups all have a \nversion\n and a \nmod_policy\n.\n\n\n\u6ce8\u610f\uff0cConfigGroup\u3001ConfigValue\u3001ConfigPolicy\u90fd\u6709\nversion\n\u548c\nmod_policy\n\u5b57\u6bb5\u3002\n\n\nThe \nersion\n of an element is incremented each time that element is modified. The \nmod_policy\n is used to govern the required signatures to modify that element. \n\n\n\u6bcf\u6b21\u4fee\u6539\u5143\u7d20\u65f6\uff0c\u5176\nversion\n\u9012\u589e\uff0c\nmod_policy\n\u7528\u4e8e\u7ba1\u7406\u4fee\u6539\u8be5\u5143\u7d20\u6240\u9700\u7684\u7b7e\u540d\u3002\n\n\nFor Groups, modification is adding or removing elements to the Values, Policies, or Groups maps (or changing the \nmod_policy\n). For Values and Policies, modification is changing the Value and Policy fields respectively (or changing the mod_policy). \n\n\n\u5bf9\u4e8eGroups\uff0c\u4fee\u6539\u5c31\u662f\u6dfb\u52a0\u6216\u5220\u9664Values\u3001Policies\u3001\u6216Groups\u4e2d\u7684\u5143\u7d20\uff08\u6216\u8005\u662f\u6539\u53d8\nmod_policy\n\uff09\n\uff08\u8bd1\u6ce8\uff0c\u5176\u5b9e\u5c31\u662f\nConfigGroup\n\u4e2d\u9664\nversion\n\u5b57\u6bb5\u5916\u5176\u4ed6\u5b57\u6bb5\u7684\u53d8\u5316\uff09\n\uff1b\u5bf9\u4e8eValues\u548cPolicies\uff0c\u4fee\u6539\u5c31\u662f\u6539\u53d8\nvalue\n\u6216\npolicy\n\u5b57\u6bb5\uff08\u6216\u8005\u6539\u53d8\nmod_policy\n\uff09\u3002\n\n\nEach element\u2019s \nmod_policy\n is evaluated in the context of the current level of the config.\n\n\n\u6bcf\u4e2a\u5143\u7d20\u7684\nmod_policy\n\u90fd\u53ea\u5728\u5f53\u524d\u914d\u7f6e\u7ea7\u522b(level)\u4e2d\u6709\u6548\u3002\n\n\nConsider the following example mod policies defined at \nChannel.Groups[\"Application\"]\n (Here, we use the golang map reference syntax, so \nChannel.Groups[\"Application\"].Policies[\"policy1\"]\n refers to the base \nChannel\n group\u2019s \nApplication\n group\u2019s \nPolicies\n map\u2019s \npolicy1\n policy.)\n\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u5b9a\u4e49\u5728\nChannel.Groups[\"Application\"]\n\u4e2d\u7684\u7b56\u7565\u7684\u793a\u4f8b\uff08\u8fd9\u91cc\u7528\u7684\u662fgolang\u8bed\u6cd5\uff0c\u56e0\u6b64\nChannel.Groups[\"Application\"].Policies[\"policy1\"]\n\u8868\u793a\u6839\u7ec4\nChannel\n\u7684\u5b50\u7ec4\nApplication\n\u7684\nPolicies\n\u91cc\u7684\npolicy1\n\u5bf9\u5e94\u7684\u7b56\u7565\uff09\n\n\n\n\npolicy1\n\u5bf9\u5e94\nChannel.Groups[\"Application\"].Policies[\"policy1\"]\n\n\nOrg1/policy2\n\u5bf9\u5e94\nChannel.Groups[\"Application\"].Groups[\"Org1\"].Policies[\"policy2\"]\n\n\n/Channel/policy3\n\u5bf9\u5e94\nChannel.Policies[\"policy3\"]\n\n\n\n\nNote that if a \nmod_policy\n references a policy which does not exist, the item cannot be modified.\n\n\n\u6ce8\u610f\uff0c\u5982\u679c\nmod_policy\n\u5f15\u7528\u4e86\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u7b56\u7565\uff0c\u90a3\u4e48\u8be5\u5143\u7d20\u4e0d\u53ef\u4fee\u6539\u3002\n\n\nConfiguration updates / \u66f4\u65b0\u914d\u7f6e\n\n\nConfiguration updates are submitted as an \nEnvelope\n message of type \nHeaderType_CONFIG_UPDATE\n. The \nPayload\n \ndata\n of the transaction is a marshaled \nConfigUpdateEnvelope\n. The \nConfigUpdateEnvelope\n is defined as follows:\n\n\n\u66f4\u65b0\u914d\u7f6e\u662f\u63d0\u4ea4\u4e00\u4e2a\nHeaderType_CONFIG_UPDATE\n\u7c7b\u578b\u7684\nEnvelope\n\u6d88\u606f\uff0c\u4ea4\u6613\u7684\nPayload.data\n\u5b57\u6bb5\u662f\u5e8f\u5217\u5316\u7684\nConfigUpdateEnvelope\n\uff0c\u5176\u5b9a\u4e49\u5982\u4e0b\uff1a\n\n\nmessage ConfigUpdateEnvelope {\n    bytes config_update = 1;                 // A marshaled ConfigUpdate structure\n    repeated ConfigSignature signatures = 2; // Signatures over the config_update\n}\n\n\n\nThe \nsignatures\n field contains the set of signatures which authorizes the config update. Its message definition is:\n\n\n\u5176\u4e2d\nsignatures\n\u5b57\u6bb5\u5305\u542b\u4e86\u6388\u6743\u66f4\u65b0\u914d\u7f6e\u7684\u7b7e\u540d\u96c6\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a\n\n\nmessage ConfigSignature {\n    bytes signature_header = 1; // A marshaled SignatureHeader\n    bytes signature = 2;        // Signature over the concatenation signatureHeader bytes and config bytes\n}\n\n\n\nThe \nsignature_header\n is as defined for standard transactions, while the signature is over the concatenation of the \nsignature_header\n bytes and the \nconfig_update\n bytes from the \nConfigUpdateEnvelope\n message.\n\n\nsignature_header\n\u5982\u6807\u51c6\u4ea4\u6613\u6240\u5b9a\u4e49\uff0c\u800c\u7b7e\u540d\u5219\u662f\nsignature_header\n\u5b57\u8282\u548c\nConfigUpdateEnvelope\n\u4e2d\u7684\nconfig_update\n\u5b57\u8282\u7684\u62fc\u63a5\u3002\n\n\nThe \nConfigUpdateEnvelope\n \nconfig_update\n bytes are a marshaled \nConfigUpdate\n message which is defined as follows:\n\n\nConfigUpdateEnvelope\n\u4e2d\u7684\nconfig_update\n\u5b57\u6bb5\u662f\u5e8f\u5217\u5316\u7684\nConfigUpdate\n\uff0c\u5176\u5b9a\u4e49\u4e3a\uff1a\n\n\nmessage ConfigUpdate {\n    string channel_id = 1;     // Which channel this config update is for\n    ConfigGroup read_set = 2;  // ReadSet explicitly lists the portion of the config which was read, this should be sparse with only Version set\n    ConfigGroup write_set = 3; // WriteSet lists the portion of the config which was written, this should included updated Versions\n}\n\n\n\nThe \nchannel_id\n is the channel ID the update is bound for, this is necessary to scope the signatures which support this reconfiguration.\n\n\n\u5176\u4e2d\nchannel_id\n\u662f\u914d\u7f6e\u66f4\u65b0\u6240\u5bf9\u5e94\u7684channel ID\uff0c\u8be5\u5b57\u6bb5\u662f\u5fc5\u8981\uff0c\u56e0\u4e3a\u5b83\u754c\u5b9a\u4e86\u652f\u6301\u672c\u6b21\u914d\u7f6e\u66f4\u65b0\u7684\u6240\u9700\u7684\u7b7e\u540d\u8303\u56f4\u3002\n\n\nThe \nread_set\n specifies a subset of the existing configuration, specified sparsely where only the \nversion\n field is set and no other fields must be populated. The particular \nConfigValue\n \nvalue\n or \nConfigPolicy\n \npolicy\n fields should never be set in the \nread_set\n. The \nConfigGroup\n may have a subset of its map fields populated, so as to reference an element deeper in the config tree. For instance, to include the \nApplication\n group in the \nread_set\n, its parent (the \nChannel\n group) must also be included in the read set, but, the \nChannel\n group does not need to populate all of the keys, such as the \nOrderer\n \ngroup\n key, or any of the \nvalues\n or \npolicies\n keys.\n\n\nread_set\n\u662f\u73b0\u6709\u914d\u7f6e\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u5176\u4e2d\u4ec5\u542b\nversion\n\u5b57\u6bb5\uff0c\nConfigValue.value\n\u548c\nConfigPolicy.policy\n\u7b49\u5176\u4ed6\u5b57\u6bb5\u4e0d\u5305\u542b\u5728\nread_set\n\u4e2d\u3002\nConfigGroup\n\u4f1amap\u5b57\u6bb5\u7ec4\u6210\u7684\u5b50\u96c6\uff0c\u4ee5\u4fbf\u5f15\u7528\u914d\u7f6e\u6811\u7684\u6df1\u5c42\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u4e3a\u4f7f\nApplication\ngroup\u5305\u542b\u5230\nread_set\n\uff0c\u5b83\u7684\u4e0a\u5c42\uff08\nChannel\ngroup\uff09\u4e5f\u5fc5\u987b\u5305\u542b\u5230\nread_set\n\u4e2d\uff0c\u4f46\u4e0d\u5fc5\u5c06\nChannel\ngroup\u4e2d\u6240\u6709\u7684key\u90fd\u5305\u62ec\u8fdb\u53bb\uff0c\u6bd4\u5982\nOrderer``group\n\u6216\u8005\u4efb\u4f55\nvalues\n\u6216\npolicies\n\u3002\n\n\nThe \nwrite_set\n specifies the pieces of configuration which are modified. Because of the hierarchical nature of the configuration, a write to an element deep in the hierarchy must contain the higher level elements in its \nwrite_set\n as well. However, for any element in the \nwrite_set\n which is also specified in the \nread_set\n at the same version, the element should be specified sparsely, just as in the \nread_set\n.\n\n\nwrite_set\n\u6307\u5b9a\u4e86\u8981\u88ab\u4fee\u6539\u7684\u90a3\u90e8\u5206\u914d\u7f6e\u3002\u7531\u4e8e\u914d\u7f6e\u7684\u5206\u5c42\u7279\u6027\uff0c\u4fee\u6539\u6df1\u5c42\u5143\u7d20\u5c31\u5fc5\u987b\u5728\nwrite_set\n\u4e2d\u5305\u542b\u5176\u4e0a\u5c42\u5143\u7d20\u3002\nwrite_set\n\u4e2d\u7684\u4efb\u610f\u5143\u7d20\u90fd\u4f1a\u5728\nread_set\n\u4e2d\u6307\u5b9a\u76f8\u540c\u7248\u672c\u7684\u8be5\u5143\u7d20\u3002\n\n\nFor example, given the configuration:\n\n\n\u4f8b\u5982\uff0c\u7ed9\u51fa\u5982\u4e0b\u914d\u7f6e\uff1a\n\n\nChannel: (version 0)\n    Orderer (version 0)\n    Appplication (version 3)\n       Org1 (version 2)\n\n\n\nTo submit a configuration update which modifies \nOrg1\n, the \nread_set\n would be:\n\n\n\u4fee\u6539\nOrg1\n\u63d0\u4ea4\u7684\nread_set\n\u5e94\u4e3a\uff1a\n\n\nChannel: (version 0)\n    Application: (version 3)\n\n\n\nand the write_set would be\n\n\n\u5bf9\u5e94\u7684\nwrite_set\n\u5e94\u662f\uff1a\n\n\nChannel: (version 0)\n    Application: (version 3)\n        Org1 (version 3)\n\n\n\nWhen the \nCONFIG_UPDATE\n is received, the orderer computes the resulting \nCONFIG\n by doing the following:\n\n\n\u63a5\u6536\u5230\nCONFIG_UPDATE\n\u540e\uff0corderer\u4f1a\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u8ba1\u7b97\nCONFIG\n\u7ed3\u679c\uff1a\n\n\n\n\n\n\nVerifies the \nchannel_id\n and \nread_set\n. All elements in the \nread_set\n must exist at the given versions.\n\n\n\u6821\u9a8c\nchannel_id\n\u548c\nread_set\n\uff0c\nread_set\n\u4e2d\u6240\u6709\u5143\u7d20\u5fc5\u987b\u5b58\u5728\u5bf9\u5e94\u7684\u7248\u672c\u3002\n2. Computes the update set by collecting all elements in the \nwrite_set\n which do not appear at the same version in the \nread_set\n.\n\n\n\u6536\u96c6\nread_set\n\u4e0e\nwrite_set\n\u4e2d\u7248\u672c\u4e0d\u4e00\u81f4\u7684\u5143\u7d20\uff0c\u8ba1\u7b97\u66f4\u65b0\u96c6\u3002\n3. Verifies that each element in the update set increments the version number of the element update by exactly 1.\n\n\n\u6821\u9a8c\u66f4\u65b0\u96c6\u4e2d\u7684\u5143\u7d20\u7684\u7248\u672c\u53f7\u662f\u5426\u9012\u589e1\n4. Verifies that the signature set attached to the \nConfigUpdateEnvelope\n satisfies the \nmod_policy\n for each element in the update set.\n\n\n\u6821\u9a8c\u66f4\u65b0\u96c6\u4e2d\u6bcf\u4e2a\u5143\u7d20\uff0c\nConfigUpdateEnvelope\n\u7684\u7b7e\u540d\u6ee1\u8db3\nmod_policy\n\u3002\n5. Computes a new complete version of the config by applying the update set to the current config.\n\n\n\u901a\u8fc7\u5c06\u66f4\u65b0\u96c6\u5e94\u7528\u4e8e\u5f53\u524d\u914d\u7f6e\uff0c\u8ba1\u7b97\u8be5\u914d\u7f6e\u7684\u5b8c\u6574\u65b0\u7248\u672c\n6.  Writes the new config into a \nConfigEnvelope\n which includes the \nCONFIG_UPDATE\n as the \nlast_update\n field and the new config encoded in the \nconfig\n field, along with the incremented \nsequence\n value.\n\n\n\u5c06\u65b0\u914d\u7f6e\u5199\u6210\nConfigEnvelope\n\u4f5c\u4e3a\nCONFIG_UPDATE\n\u8d4b\u7ed9\nlast_update\n\u5b57\u6bb5\uff0c\u65b0\u7684\u914d\u7f6e\u8d4b\u7ed9\nconfig\n\u5b57\u6bb5\uff0c\nsequence\n\u5b57\u6bb5\u81ea\u589e\u3002\n7. Writes the new \nConfigEnvelope\n into a \nEnvelope\n of type \nCONFIG\n, and ultimately writes this as the sole transaction in a new configuration block.\n\n\n\u5c06\nConfigEnvelope\n\u5199\u6210\nCONFIG\n\u7c7b\u578b\u7684\nEnvelope\n\uff0c\u6700\u7ec8\u5c06\u6b64\u4f5c\u4e3a\u552f\u4e00\u4ea4\u6613\u5199\u5165\u914d\u7f6e\u533a\u5757\u3002\u3001\n\n\n\n\n\n\nWhen the peer (or any other receiver for \nDeliver\n) receives this configuration block, it should verify that the config was appropriately validated by applying the last_update message to the current config and verifying that the orderer-computed \nconfig\n field contains the correct new configuration.\n\n\n\u5f53peer\uff08\u6216\u8005\u4efb\u610f\u5176\u4ed6\u63a5\u6536\nDeliver\n\u8005\uff09\u63a5\u6536\u5230\u8fd9\u4e2a\u914d\u7f6e\u533a\u5757\u540e\uff0c\u5c31\u4f1a\u901a\u8fc7\u5c06\nlast_update\n\u4fe1\u606f\u5e94\u7528\u5230\u5f53\u524d\u914d\u7f6e\u5e76\u6821\u9a8corderer\u8ba1\u7b97\u7684\nconfig\n\u5b57\u6bb5\u662f\u5426\u5305\u542b\u6b63\u786e\u7684\u65b0\u914d\u7f6e\uff0c\u6765\u9a8c\u8bc1\u8be5\u914d\u7f6e\u662f\u5426\u88ab\u6b63\u786e\u6821\u9a8c\u3002\n\n\nPermitted configuration groups and values / \u7ec4\u548c\u503c\u5f97\u914d\u7f6e\u8bb8\u53ef\n\n\nAny valid configuration is a subset of the following configuration. Here we use the notation \npeer.\nMSG\n to define a \nConfigValue\n whose \nvalue\n field is a marshaled proto message of name \nMSG\n defined in \nfabric/protos/peer/configuration.proto\n. The notations \ncommon.\nMSG\n, \nmsp.\nMSG\n, and \norderer.\nMSG\n correspond similarly, but with their messages defined in \nfabric/protos/common/configuration.proto\n, \nfabric/protos/msp/mspconfig.proto\n, and \nfabric/protos/orderer/configuration.proto\n respectively.\n\n\n\u6709\u6548\u7684\u914d\u7f6e\u90fd\u662f\u4e0b\u9762\u914d\u7f6e\u7684\u5b50\u96c6\u3002\u5728\u6b64\uff0c\u7528\npeer.\nMSG\n\u8868\u793a\u4e00\u4e2a\nConfigValue\n\uff0c\u5176\nvalue\n\u5b57\u6bb5\u662f\u79f0\u4e3a\nMSG\n\u7684\u5e8f\u5217\u5316\u540e\u7684\u4fe1\u606f\uff0c\u5b9a\u4e49\u5728\nfabric/protos/peer/configuration.proto\n\u3002\ncommon.\nMSG\n\uff0c\nmsp.\nMSG\n\u548c\norderer.\nMSG\n\u5206\u522b\u5b9a\u4e49\u5728\nfabric/protos/common/configuration.proto\n\uff0c\nfabric/protos/msp/mspconfig.proto\n\u548c\nfabric/protos/orderer/configuration.proto\n\u3002\n\n\nNote, that the keys \n{{org_name}}\n and \n{{consortium_name}}\n represent arbitrary names, and indicate an element which may be repeated with different names.\n\n\n\u6ce8\u610f\uff0c\u4e0b\u9762\u7684\n{{org_name}}\n \u548c \n{{consortium_name}}\n\u662f\u4efb\u610f\u7684\u540d\u5b57\uff0c\u8868\u793a\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u4e0d\u540c\u540d\u79f0\u7684\u5143\u7d20\u3002\n\n\nConfigGroup{\n    Groups: map\nstring, *ConfigGroup\n {\n        \"Application\":\nConfigGroup{\n            Groups:map\nString, *ConfigGroup\n {\n                {{org_name}}:\nConfigGroup{\n                    Values:map\nstring, *ConfigValue\n{\n                        \"MSP\":msp.MSPConfig,\n                        \"AnchorPeers\":peer.AnchorPeers,\n                    },\n                },\n            },\n        },\n        \"Orderer\":\nConfigGroup{\n            Groups:map\nString, *ConfigGroup\n {\n                {{org_name}}:\nConfigGroup{\n                    Values:map\nstring, *ConfigValue\n{\n                        \"MSP\":msp.MSPConfig,\n                    },\n                },\n            },\n\n            Values:map\nstring, *ConfigValue\n {\n                \"ConsensusType\":orderer.ConsensusType,\n                \"BatchSize\":orderer.BatchSize,\n                \"BatchTimeout\":orderer.BatchTimeout,\n                \"KafkaBrokers\":orderer.KafkaBrokers,\n            },\n        },\n        \"Consortiums\":\nConfigGroup{\n            Groups:map\nString, *ConfigGroup\n {\n                {{consortium_name}}:\nConfigGroup{\n                    Groups:map\nstring, *ConfigGroup\n {\n                        {{org_name}}:\nConfigGroup{\n                            Values:map\nstring, *ConfigValue\n{\n                                \"MSP\":msp.MSPConfig,\n                            },\n                        },\n                    },\n                    Values:map\nstring, *ConfigValue\n {\n                        \"ChannelCreationPolicy\":common.Policy,\n                    }\n                },\n            },\n        },\n    },\n\n    Values: map\nstring, *ConfigValue\n {\n        \"HashingAlgorithm\":common.HashingAlgorithm,\n        \"BlockHashingDataStructure\":common.BlockDataHashingStructure,\n        \"Consortium\":common.Consortium,\n        \"OrdererAddresses\":common.OrdererAddresses,\n    },\n}\n\n\n\nOrderer system channel configuration / Order channel \u914d\u7f6e\n\n\nThe ordering system channel needs to define ordering parameters, and consortiums for creating channels. There must be exactly one ordering system channel for an ordering service, and it is the first channel to be created (or more accurately bootstrapped). It is recommended never to define an Application section inside of the ordering system channel genesis configuration, but may be done for testing. Note that any member with read access to the ordering system channel may see all channel creations, so this channel\u2019s access should be restricted.\n\n\nordering\u7cfb\u7edfchannel\u5b9a\u4e49\u4e86\u521b\u5efachannel\u7684ordering\u53c2\u6570\u548cconsortiums\u3002ordering service\u5fc5\u987b\u6709\u4e00\u4e2aordering\u7cfb\u7edfchannel\uff0c\u8fd9\u662f\u88ab\u521b\u5efa\u7684\u7b2c\u4e00\u4e2achannel\u3002\u5efa\u8bae\u4e0d\u8981\u5728ordering\u7cfb\u7edfchannel\u521d\u59cb\u914d\u7f6e\u4e2d\u5b9a\u4e49application\u90e8\u5206\uff0c\u4f46\u662f\u6d4b\u8bd5\u662f\u53ef\u4ee5\u8fd9\u4e48\u505a\u3002\u6ce8\u610f\uff0c\u4efb\u4f55\u5bf9ordering\u7cfb\u7edfchannel\u6709\u8bfb\u6743\u9650\u7684\u6210\u5458\u90fd\u53ef\u4ee5\u67e5\u770b\u6240\u6709channel\u521b\u5efa\uff0c\u56e0\u6b64channel\u7684\u8bbf\u95ee\u5e94\u53d7\u9650\u5236\u3002\n\n\nThe ordering parameters are defined as the following subset of config:\n\n\nordering\u53c2\u6570\u5b9a\u4e49\u5982\u4e0b\uff1a\n\n\nConfigGroup{\n    Groups: map\nstring, *ConfigGroup\n {\n        \"Orderer\":\nConfigGroup{\n            Groups:map\nString, *ConfigGroup\n {\n                {{org_name}}:\nConfigGroup{\n                    Values:map\nstring, *ConfigValue\n{\n                        \"MSP\":msp.MSPConfig,\n                    },\n                },\n            },\n\n            Values:map\nstring, *ConfigValue\n {\n                \"ConsensusType\":orderer.ConsensusType,\n                \"BatchSize\":orderer.BatchSize,\n                \"BatchTimeout\":orderer.BatchTimeout,\n                \"KafkaBrokers\":orderer.KafkaBrokers,\n            },\n        },\n    },\n\n\n\nEach organization participating in ordering has a group element under the \nOrderer\n group. This group defines a single parameter \nMSP\n which contains the cryptographic identity information for that organization. The \nValues\n of the \nOrderer\n group determine how the ordering nodes function. They exist per channel, so \norderer.BatchTimeout\n for instance may be specified differently on one channel than another.\n\n\nordering\u4e2d\u7684\u6bcf\u4e2a\u7ec4\u7ec7\u90fd\u5728\nOrderer\n\u7ec4\u4e0b\u6709\u4e00\u4e2a\u7ec4\u5143\u7d20\uff0c\u8fd9\u4e2a\u7ec4\u5b9a\u4e49\u4e86\u4e00\u4e2a\nMSP\n\u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u5305\u542b\u8be5\u7ec4\u7ec7\u7684\u52a0\u5bc6\u8eab\u4efd\u4fe1\u606f\u3002\nOrderer\n\u7ec4\u4e2d\u7684\nValues\n\u51b3\u5b9a\u4e86ordering\u8282\u70b9\u7684\u529f\u80fd\u3002\u4ed6\u4eec\u5b58\u5728\u4e8e\u6bcf\u4e2achannel\u4e2d\uff0c\u6240\u4ee5\u50cf\norderer.BatchTimeout\n\u5c31\u53ef\u5728\u4e0d\u540cchannel\u4e2d\u6307\u5b9a\u4e0d\u540c\u503c\u3002\n\n\nAt startup, the orderer is faced with a filesystem which contains information for many channels. The orderer identifies the system channel by identifying the channel with the consortiums group defined. The consortiums group has the following structure.\n\n\n\u542f\u52a8\u65f6\uff0corderer\u9762\u5bf9\u542b\u6709\u5f88\u591achannel\u4fe1\u606f\u7684\u6587\u4ef6\u7cfb\u7edf\uff0corderer\u901a\u8fc7\u8bc6\u522b\u5e26\u6709consortiums\u7ec4\u5b9a\u4e49\u7684channel\u6765\u6807\u8bc6\u7cfb\u7edfchannel\u3002consortiums\u7ec4\u7ed3\u6784\u5982\u4e0b\u3002\n\n\nConfigGroup{\n    Groups: map\nstring, *ConfigGroup\n {\n        \"Consortiums\":\nConfigGroup{\n            Groups:map\nString, *ConfigGroup\n {\n                {{consortium_name}}:\nConfigGroup{\n                    Groups:map\nstring, *ConfigGroup\n {\n                        {{org_name}}:\nConfigGroup{\n                            Values:map\nstring, *ConfigValue\n{\n                                \"MSP\":msp.MSPConfig,\n                            },\n                        },\n                    },\n                    Values:map\nstring, *ConfigValue\n {\n                        \"ChannelCreationPolicy\":common.Policy,\n                    }\n                },\n            },\n        },\n    },\n},\n\n\n\nNote that each consortium defines a set of members, just like the organizational members for the ordering orgs. Each consortium also defines a \nChannelCreationPolicy\n. This is a policy which is applied to authorize channel creation requests. Typically, this value will be set to an \nImplicitMetaPolicy\n requiring that the new members of the channel sign to authorize the channel creation. More details about channel creation follow later in this document.\n\n\n\u6ce8\u610f\uff0c\u6bcf\u4e2aconsortium\u5b9a\u4e49\u4e00\u7ec4\u6210\u5458\uff0c\u5c31\u884cordering\u7ec4\u7ec7\u7684\u7ec4\u7ec7\u6210\u5458\u4e00\u6837\u3002\u6bcf\u4e2aconsortium\u4e5f\u90fd\u5b9a\u4e49\u4e86\u4e00\u4e2a\nChannelCreationPolicy\n\uff0c\u5b83\u662f\u4e00\u79cd\u5e94\u7528\u4e8e\u6388\u6743channel\u521b\u5efa\u8bf7\u6c42\u7684\u7b56\u7565\uff0c\u901a\u5e38\u8fd9\u4e2a\u503c\u8bbe\u4e3a\nImplicitMetaPolicy\n\uff0c\u8981\u6c42channel\u7684\u65b0\u6210\u5458\u7b7e\u540d\u6388\u6743channel\u521b\u5efa\u3002\u6709\u5173channel\u521b\u5efa\u66f4\u4fe1\u606f\u7684\u5185\u5bb9\uff0c\u8bf7\u53c2\u9605\u6587\u6863\u540e\u9762\u7684\u5185\u5bb9\u3002\n\n\nApplication channel configuration / APP channel \u914d\u7f6e\n\n\nApplication configuration is for channels which are designed for application type transactions. It is defined as follows:\n\n\n\u5e94\u7528\u7a0b\u5e8f\u914d\u7f6e\u7528\u4e8e\u4e3a\u5e94\u7528\u7c7b\u578b\u4ea4\u6613\u8bbe\u8ba1\u7684channel\u3002\u5176\u5b9a\u4e49\u5982\u4e0b\uff1a\n\n\nConfigGroup{\n    Groups: map\nstring, *ConfigGroup\n {\n        \"Application\":\nConfigGroup{\n            Groups:map\nString, *ConfigGroup\n {\n                {{org_name}}:\nConfigGroup{\n                    Values:map\nstring, *ConfigValue\n{\n                        \"MSP\":msp.MSPConfig,\n                        \"AnchorPeers\":peer.AnchorPeers,\n                    },\n                },\n            },\n        },\n    },\n}\n\n\n\nJust like with the \nOrderer\n section, each organization is encoded as a group. However, instead of only encoding the \nMSP\n identity information, each org additionally encodes a list of \nAnchorPeers\n. This list allows the peers of different organizations to contact each other for peer gossip networking.\n\n\n\u5c31\u50cf\nOrderer\n\u90e8\u5206\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u88ab\u7f16\u7801\u4e3a\u4e00\u4e2a\u7ec4\u3002\u7136\u800c\uff0capp channel\u4e0d\u4ec5\u6709\nMSP\n\u8eab\u4efd\u4fe1\u606f\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u90fd\u9644\u52a0\u4e86\u4e00\u4e2a\nAnchorPeers\n\u5217\u8868\u3002\u8fd9\u4e2a\u5217\u8868\u5141\u8bb8\u4e0d\u540c\u7ec4\u7ec7\u7684\u8282\u70b9\u5f7c\u6b64\u8054\u7cfb\u3002\n\n\nThe application channel encodes a copy of the orderer orgs and consensus options to allow for deterministic updating of these parameters, so the same \nOrderer\n section from the orderer system channel configuration is included. However from an application perspective this may be largely ignored.\n\n\n\u5e94\u7528\u7a0b\u5e8fchannel\u901a\u8fc7\u5bf9orderer\u7ec4\u7ec7\u548c\u5171\u8bc6\u9009\u9879\u7684\u7f16\u7801\uff0c\u4ee5\u5141\u8bb8\u5bf9\u8fd9\u4e9b\u53c2\u6570\u8fdb\u884c\u786e\u5b9a\u6027\u66f4\u65b0\uff0c\u56e0\u6b64\u5305\u542b\u4e86orderer\u7cfb\u7edfchannel\u914d\u7f6e\u7684\u76f8\u540c\nOrderer\n\u90e8\u5206\u3002\u4f46\u4ece\u5e94\u7528\u89d2\u5ea6\u770b\uff0c\u8fd9\u4f1a\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u88ab\u5ffd\u7565\u3002\n\n\nChannel creation / \u521b\u5efachannel\n\n\nWhen the orderer receives a \nCONFIG_UPDATE\n for a channel which does not exist, the orderer assumes that this must be a channel creation request and performs the following.\n\n\n\u5f53Orderer \u63a5\u6536\u5230\u5bf9\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684channel\u7684\nCONFIG_UPDATE\n\u4fe1\u606f\u65f6\uff0corderer\u5c31\u4f1a\u5047\u8bbe\u8fd9\u662f\u4e2a\u521b\u5efachannel\u7684\u8bf7\u6c42\u5e76\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\n\n\n\n\n\nThe orderer identifies the consortium which the channel creation request is to be performed for. It does this by looking at the \nConsortium\n value of the top level group.\n\n\n\u901a\u8fc7\u67e5\u770b\u9ad8\u5c42\u7ec4\u4e2d\u7684\nConsortium\n\u503c\uff0corderer\u6807\u8bc6\u6240\u8981\u6267\u884c\u521b\u5efachannel\u8bf7\u6c42\u7684consortium\n\uff08\u8bd1\u6ce8\uff1a\u8fd9\u4e2a\u8bcd\u6682\u65f6\u4e0d\u77e5\u7ffb\u8bd1\u6210\u4ec0\u4e48\u597d\uff09\n\u3002\n2. The orderer verifies that the organizations included in the \nApplication\n group are a subset of the organizations included in the corresponding consortium and that the \nApplicationGroup\n is set to \nversion\n \n1\n.\n\n\norderer\u9a8c\u8bc1Application\u7ec4\u4e2d\u7684\u7ec4\u7ec7\u662f\u5bf9\u5e94\u7684consortium\u4e2d\u7ec4\u7ec7\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u9a8c\u8bc1\nApplicationGroup\n\u7684\u7248\u672c\u662f1\u3002\n3. The orderer verifies that if the consortium has members, that the new channel also has application members (creation consortiums and channels with no members is useful for testing only).\n\n\norderer\u9a8c\u8bc1consortium\u662f\u5426\u6709\u6210\u5458\uff0c\u65b0\u7684channel\u4e5f\u4f1a\u6709application\u6210\u5458\uff08\u521b\u5efa\u6ca1\u6709\u6210\u5458\u7684consortiums\u548cchannel\u53ea\u7528\u4e8e\u6d4b\u8bd5\uff09\u3002\n4. The orderer creates a template configuration by taking the \nOrderer\n group from the ordering system channel, and creating an \nApplication\n group with the newly specified members and specifying its \nmod_policy\n to be the \nChannelCreationPolicy\n as specified in the consortium config. Note that the policy is evaluated in the context of the new configuration, so a policy requiring \nALL\n members, would require signatures from all the new channel members, not all the members of the consortium.\n\n\norderer\u4eceordering\u7cfb\u7edfchannel\u53d6\u5f97\nOrderer\n\u7ec4\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u65b0\u6307\u5b9a\u6210\u5458\u7684\nApplication\n\u7ec4\uff0c\u5e76\u5c06\u5176\nmod_policy\n\u6307\u5b9a\u4e3a\u5728consortium config\u4e2d\u6307\u5b9a\u7684\nChannelCreationPolicy\n\uff0c\u4ece\u800c\u521b\u5efa\u4e00\u4e2a\u6a21\u677f\u914d\u7f6e\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u7b56\u7565\uff08mod_policy\uff09\u662f\u57fa\u4e8e\u65b0\u914d\u7f6e\u7684\u4e0a\u4e0b\u6587\u7684\uff0c\u56e0\u6b64\u9700\u8981\u6240\u6709\u6210\u5458\u7684\u7b56\u7565\u5c31\u662f\u8981\u9700\u8981\u65b0channel\u4e2d\u6240\u6709\u6210\u5458\u7684\u7b7e\u540d\uff0c\u800c\u4e0d\u662fconsortium\u4e2d\u7684\u6240\u6709\u6210\u5458\u3002\n5. The orderer then applies the \nCONFIG_UPDATE\n as an update to this template configuration. Because the \nCONFIG_UPDATE\n applies modifications to the \nApplication\n group (its \nversion\n is 1), the config code validates these updates against the \nChannelCreationPolicy\n. If the channel creation contains any other modifications, such as to an individual org\u2019s anchor peers, the corresponding mod policy for the element will be invoked.\n\n\norderer\u7528\nCONFIG_UPDATE\n\u66f4\u65b0\u8fd9\u4e2a\u6a21\u677f\u914d\u7f6e\u3002\u56e0\u4e3a\nCONFIG_UPDATE\n\u7528\u4e8e\nApplication\n\u7ec4\uff08\u5176\u7248\u672c\u662f1\uff09\u7684\u4fee\u6539\uff0c\u6240\u4ee5\u914d\u7f6e\u7801\u6839\u636e\nChannelCreationPolicy\n\u9a8c\u8bc1\u8fd9\u4e9b\u66f4\u65b0\u3002\u5982\u679cchannel\u521b\u5efa\u5305\u542b\u4efb\u4f55\u5176\u5b83\u4fee\u6539\uff0c\u4f8b\u5982\u4fee\u6539\u5355\u4e2a\u7ec4\u7ec7\u7684\u951a\u8282\u70b9\uff0c\u5219\u8c03\u7528\u8be5\u5143\u7d20\u7684\u76f8\u5e94mod\u7b56\u7565\u3002\n6. The new \nCONFIG\n transaction with the new channel config is wrapped and sent for ordering on the ordering system channel. After ordering, the channel is created.\n\n\n\u5e26\u6709\u65b0channel\u914d\u7f6e\u7684\nCONFIG\n\u4ea4\u6613\u88ab\u5305\u88c5\u5e76\u901a\u8fc7order\u7cfb\u7edfchannel\u53d1\u9001\u5230ordering\uff0cordering\u4e4b\u540echannel\u5c31\u521b\u5efa\u5b8c\u6210\u3002", 
            "title": "Channel \u914d\u7f6e(configtx)"
        }, 
        {
            "location": "/configtx_zh/#anatomy-of-a-configuration", 
            "text": "Configuration is stored as a transaction of type  HeaderType_CONFIG  in a block with no other transactions. These blocks are referred to as  Configuration Blocks , the first of which is referred to as the  Genesis Block .  \u914d\u7f6e\u4f5c\u4e3a\u4e00\u79cd HeaderType_CONFIG \u7c7b\u578b\u7684\u4ea4\u6613\u5355\u72ec\u5b58\u50a8\u5728\u4e00\u4e2ablock\u4e2d\uff08\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2ablock\u4e0d\u518d\u5305\u542b\u5176\u4ed6\u4ea4\u6613\uff09\uff0c\u8fd9\u4e2ablock\u88ab\u79f0\u4e3a \u914d\u7f6e\u533a\u5757 \uff0c\u5176\u4e2d\u7684\u7b2c\u4e00\u4e2a\u79f0\u4e3a  \u521b\u4e16\u533a\u5757 \u3002  The proto structures for configuration are stored in  fabric/protos/common/configtx.proto . The Envelope of type  HeaderType_CONFIG  encodes a  ConfigEnvelope  message as the  Payload   data  field. The proto for  ConfigEnvelope  is defined as follows:  \u914d\u7f6e\u7684\u6570\u636e\u7ed3\u6784\u5728\u6587\u4ef6 fabric/protos/common/configtx.proto \u4e2d\uff0c\u7f16\u7801\u540e\u7684 ConfigEnvelope \u4fe1\u606f\u4f5c\u4e3a HeaderType_CONFIG \u7c7b\u578b\u7684 Envelope \u4e2d Payload \u7684 Data \u5b57\u6bb5\u503c\u3002 \uff08\u8bd1\u6ce8\uff1aEnvelope.payload.Header.channel_header.type= HeaderType_CONFIG\uff0cEnvelope.payload.data = []byte(ConfigEnvelope)\uff09 ConfigEnvelope \u5b9a\u4e49\u5982\u4e0b\uff1a  message ConfigEnvelope {\n    Config config = 1;        // A marshaled Config structure\n    Envelope last_update = 2; // The last CONFIG_UPDATE message which generated this current configuration\n                              // Note that CONFIG_UPDATE has a Payload.Data of a Marshaled ConfigUpdate\n}  The  last_update  field is defined below in the Updates to configuration section, but is only necessary when validating the configuration, not reading it. Instead, the currently committed configuration is stored in the  config  field, containing a  Config  message.  last_update \u5b57\u6bb5\u5728\u4e0b\u9762\u7684\u201c\u66f4\u65b0\u914d\u7f6e\u201d\u4e00\u8282\u5b9a\u4e49\uff0c\u8be5\u5b57\u6bb5\u53ea\u7528\u4e8e\u9a8c\u8bc1\u914d\u7f6e\uff0c\u800c\u4e0d\u4f1a\u8bfb\u4ed6\u3002\u5f53\u524d\u63d0\u4ea4\u7684\u914d\u7f6e\u5b58\u50a8\u5728 config \u5b57\u6bb5\uff0c\u662f\u4e00\u4e2a Config \u4fe1\u606f\u3002  // Config represents the config for a particular channel\nmessage Config {\n    uint64 sequence = 1;\n    ConfigGroup channel_group = 2;\n}  The  sequence  number is incremented by one for each committed configuration. The  channel_group  field is the root group which contains the configuration. The  ConfigGroup  structure is recursively defined, and builds a tree of groups, each of which contains values and policies. It is defined as follows:  \u5176\u4e2d sequence \u5b57\u6bb5\u662f\u6bcf\u6b21\u63d0\u4ea4\u914d\u7f6e\u9012\u589e\u7684\u6570\u5b57\uff1b channel_group \u5b57\u6bb5\u662f\u5305\u542b\u8be5\u914d\u7f6e\u7684\u6839\u7ec4\u3002 ConfigGroup \u7ed3\u6784\u662f\u9012\u5f52\u5b9a\u4e49\u7684\uff0c\u6784\u5efa\u4e86\u4e00\u4e2a\u7ec4\u6811\uff0c\u5176\u4e2d\u6bcf\u4e2a\u7ec4\u90fd\u5305\u542b\u503c\u548c\u7b56\u7565\u3002\u5176\u7ed3\u6784\u5982\u4e0b\uff1a  // ConfigGroup is the hierarchical data structure for holding config\nmessage ConfigGroup {\n    uint64 version = 1;\n    map string,ConfigGroup  groups = 2;\n    map string,ConfigValue  values = 3;\n    map string,ConfigPolicy  policies = 4;\n    string mod_policy = 5;\n}  Because  ConfigGroup  is a recursive structure, consider an example hierarchical arrangement of  ConfigGroup s (expressed for clarity in golang notation).  ConfigGroup \u662f\u9012\u5f52\u7ed3\u6784\uff0c\u6b64\u5904\u7ed9\u51fa\u4e00\u4e2a\u7528golang\u8868\u793a\u7684\u5206\u5c42\u6392\u5217\u7684\u793a\u4f8b\uff1a  // \u5047\u8bbe\u5b9a\u4e49\u4e86\u4ee5\u4e0bgroup\nvar root, child1, child2, grandChild1, grandChild2, grandChild3 *ConfigGroup\n\n// Set the following values\nroot.Groups[\"child1\"] = child1\nroot.Groups[\"child2\"] = child2\nchild1.Groups[\"grandChild1\"] = grandChild1\nchild2.Groups[\"grandChild2\"] = grandChild2\nchild2.Groups[\"grandChild3\"] = grandChild3\n\n// The resulting config structure of groups looks like:\n// root:\n//     child1:\n//         grandChild1\n//     child2:\n//         grandChild2\n//         grandChild3  Each group defines a level in the config hierarchy, and each group has an associated set of values (indexed by string key) and policies (also indexed by string key).  \u6bcf\u4e2a\u7ec4\u90fd\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5206\u5c42\u7ed3\u6784\u4e2d\u7684\u7ea7\u522b\uff0c\u4e14\u6bcf\u4e2a\u7ec4\u90fd\u6709\u4e00\u4e2a\u76f8\u5173\u7684\u503c\u96c6\uff08\u4ee5string\u4e3akey\uff09\u548c\u7b56\u7565\uff08\u4ee5string\u4e3akey\uff09\u3002  Values are defined by:  \u503c\u5b9a\u4e49\uff1a  // ConfigValue represents an individual piece of config data\nmessage ConfigValue {\n    uint64 version = 1;\n    bytes value = 2;\n    string mod_policy = 3;\n}  Policies are defined by:\n\u7b56\u7565\u5b9a\u4e49\uff1a  message ConfigPolicy {\n    uint64 version = 1;\n    Policy policy = 2;\n    string mod_policy = 3;\n}  Note that Values, Policies, and Groups all have a  version  and a  mod_policy .  \u6ce8\u610f\uff0cConfigGroup\u3001ConfigValue\u3001ConfigPolicy\u90fd\u6709 version \u548c mod_policy \u5b57\u6bb5\u3002  The  ersion  of an element is incremented each time that element is modified. The  mod_policy  is used to govern the required signatures to modify that element.   \u6bcf\u6b21\u4fee\u6539\u5143\u7d20\u65f6\uff0c\u5176 version \u9012\u589e\uff0c mod_policy \u7528\u4e8e\u7ba1\u7406\u4fee\u6539\u8be5\u5143\u7d20\u6240\u9700\u7684\u7b7e\u540d\u3002  For Groups, modification is adding or removing elements to the Values, Policies, or Groups maps (or changing the  mod_policy ). For Values and Policies, modification is changing the Value and Policy fields respectively (or changing the mod_policy).   \u5bf9\u4e8eGroups\uff0c\u4fee\u6539\u5c31\u662f\u6dfb\u52a0\u6216\u5220\u9664Values\u3001Policies\u3001\u6216Groups\u4e2d\u7684\u5143\u7d20\uff08\u6216\u8005\u662f\u6539\u53d8 mod_policy \uff09 \uff08\u8bd1\u6ce8\uff0c\u5176\u5b9e\u5c31\u662f ConfigGroup \u4e2d\u9664 version \u5b57\u6bb5\u5916\u5176\u4ed6\u5b57\u6bb5\u7684\u53d8\u5316\uff09 \uff1b\u5bf9\u4e8eValues\u548cPolicies\uff0c\u4fee\u6539\u5c31\u662f\u6539\u53d8 value \u6216 policy \u5b57\u6bb5\uff08\u6216\u8005\u6539\u53d8 mod_policy \uff09\u3002  Each element\u2019s  mod_policy  is evaluated in the context of the current level of the config.  \u6bcf\u4e2a\u5143\u7d20\u7684 mod_policy \u90fd\u53ea\u5728\u5f53\u524d\u914d\u7f6e\u7ea7\u522b(level)\u4e2d\u6709\u6548\u3002  Consider the following example mod policies defined at  Channel.Groups[\"Application\"]  (Here, we use the golang map reference syntax, so  Channel.Groups[\"Application\"].Policies[\"policy1\"]  refers to the base  Channel  group\u2019s  Application  group\u2019s  Policies  map\u2019s  policy1  policy.)  \u4e0b\u9762\u662f\u4e00\u4e2a\u5b9a\u4e49\u5728 Channel.Groups[\"Application\"] \u4e2d\u7684\u7b56\u7565\u7684\u793a\u4f8b\uff08\u8fd9\u91cc\u7528\u7684\u662fgolang\u8bed\u6cd5\uff0c\u56e0\u6b64 Channel.Groups[\"Application\"].Policies[\"policy1\"] \u8868\u793a\u6839\u7ec4 Channel \u7684\u5b50\u7ec4 Application \u7684 Policies \u91cc\u7684 policy1 \u5bf9\u5e94\u7684\u7b56\u7565\uff09   policy1 \u5bf9\u5e94 Channel.Groups[\"Application\"].Policies[\"policy1\"]  Org1/policy2 \u5bf9\u5e94 Channel.Groups[\"Application\"].Groups[\"Org1\"].Policies[\"policy2\"]  /Channel/policy3 \u5bf9\u5e94 Channel.Policies[\"policy3\"]   Note that if a  mod_policy  references a policy which does not exist, the item cannot be modified.  \u6ce8\u610f\uff0c\u5982\u679c mod_policy \u5f15\u7528\u4e86\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u7b56\u7565\uff0c\u90a3\u4e48\u8be5\u5143\u7d20\u4e0d\u53ef\u4fee\u6539\u3002", 
            "title": "Anatomy of a configuration / \u914d\u7f6e\u5256\u6790"
        }, 
        {
            "location": "/configtx_zh/#configuration-updates", 
            "text": "Configuration updates are submitted as an  Envelope  message of type  HeaderType_CONFIG_UPDATE . The  Payload   data  of the transaction is a marshaled  ConfigUpdateEnvelope . The  ConfigUpdateEnvelope  is defined as follows:  \u66f4\u65b0\u914d\u7f6e\u662f\u63d0\u4ea4\u4e00\u4e2a HeaderType_CONFIG_UPDATE \u7c7b\u578b\u7684 Envelope \u6d88\u606f\uff0c\u4ea4\u6613\u7684 Payload.data \u5b57\u6bb5\u662f\u5e8f\u5217\u5316\u7684 ConfigUpdateEnvelope \uff0c\u5176\u5b9a\u4e49\u5982\u4e0b\uff1a  message ConfigUpdateEnvelope {\n    bytes config_update = 1;                 // A marshaled ConfigUpdate structure\n    repeated ConfigSignature signatures = 2; // Signatures over the config_update\n}  The  signatures  field contains the set of signatures which authorizes the config update. Its message definition is:  \u5176\u4e2d signatures \u5b57\u6bb5\u5305\u542b\u4e86\u6388\u6743\u66f4\u65b0\u914d\u7f6e\u7684\u7b7e\u540d\u96c6\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a  message ConfigSignature {\n    bytes signature_header = 1; // A marshaled SignatureHeader\n    bytes signature = 2;        // Signature over the concatenation signatureHeader bytes and config bytes\n}  The  signature_header  is as defined for standard transactions, while the signature is over the concatenation of the  signature_header  bytes and the  config_update  bytes from the  ConfigUpdateEnvelope  message.  signature_header \u5982\u6807\u51c6\u4ea4\u6613\u6240\u5b9a\u4e49\uff0c\u800c\u7b7e\u540d\u5219\u662f signature_header \u5b57\u8282\u548c ConfigUpdateEnvelope \u4e2d\u7684 config_update \u5b57\u8282\u7684\u62fc\u63a5\u3002  The  ConfigUpdateEnvelope   config_update  bytes are a marshaled  ConfigUpdate  message which is defined as follows:  ConfigUpdateEnvelope \u4e2d\u7684 config_update \u5b57\u6bb5\u662f\u5e8f\u5217\u5316\u7684 ConfigUpdate \uff0c\u5176\u5b9a\u4e49\u4e3a\uff1a  message ConfigUpdate {\n    string channel_id = 1;     // Which channel this config update is for\n    ConfigGroup read_set = 2;  // ReadSet explicitly lists the portion of the config which was read, this should be sparse with only Version set\n    ConfigGroup write_set = 3; // WriteSet lists the portion of the config which was written, this should included updated Versions\n}  The  channel_id  is the channel ID the update is bound for, this is necessary to scope the signatures which support this reconfiguration.  \u5176\u4e2d channel_id \u662f\u914d\u7f6e\u66f4\u65b0\u6240\u5bf9\u5e94\u7684channel ID\uff0c\u8be5\u5b57\u6bb5\u662f\u5fc5\u8981\uff0c\u56e0\u4e3a\u5b83\u754c\u5b9a\u4e86\u652f\u6301\u672c\u6b21\u914d\u7f6e\u66f4\u65b0\u7684\u6240\u9700\u7684\u7b7e\u540d\u8303\u56f4\u3002  The  read_set  specifies a subset of the existing configuration, specified sparsely where only the  version  field is set and no other fields must be populated. The particular  ConfigValue   value  or  ConfigPolicy   policy  fields should never be set in the  read_set . The  ConfigGroup  may have a subset of its map fields populated, so as to reference an element deeper in the config tree. For instance, to include the  Application  group in the  read_set , its parent (the  Channel  group) must also be included in the read set, but, the  Channel  group does not need to populate all of the keys, such as the  Orderer   group  key, or any of the  values  or  policies  keys.  read_set \u662f\u73b0\u6709\u914d\u7f6e\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u5176\u4e2d\u4ec5\u542b version \u5b57\u6bb5\uff0c ConfigValue.value \u548c ConfigPolicy.policy \u7b49\u5176\u4ed6\u5b57\u6bb5\u4e0d\u5305\u542b\u5728 read_set \u4e2d\u3002 ConfigGroup \u4f1amap\u5b57\u6bb5\u7ec4\u6210\u7684\u5b50\u96c6\uff0c\u4ee5\u4fbf\u5f15\u7528\u914d\u7f6e\u6811\u7684\u6df1\u5c42\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u4e3a\u4f7f Application group\u5305\u542b\u5230 read_set \uff0c\u5b83\u7684\u4e0a\u5c42\uff08 Channel group\uff09\u4e5f\u5fc5\u987b\u5305\u542b\u5230 read_set \u4e2d\uff0c\u4f46\u4e0d\u5fc5\u5c06 Channel group\u4e2d\u6240\u6709\u7684key\u90fd\u5305\u62ec\u8fdb\u53bb\uff0c\u6bd4\u5982 Orderer``group \u6216\u8005\u4efb\u4f55 values \u6216 policies \u3002  The  write_set  specifies the pieces of configuration which are modified. Because of the hierarchical nature of the configuration, a write to an element deep in the hierarchy must contain the higher level elements in its  write_set  as well. However, for any element in the  write_set  which is also specified in the  read_set  at the same version, the element should be specified sparsely, just as in the  read_set .  write_set \u6307\u5b9a\u4e86\u8981\u88ab\u4fee\u6539\u7684\u90a3\u90e8\u5206\u914d\u7f6e\u3002\u7531\u4e8e\u914d\u7f6e\u7684\u5206\u5c42\u7279\u6027\uff0c\u4fee\u6539\u6df1\u5c42\u5143\u7d20\u5c31\u5fc5\u987b\u5728 write_set \u4e2d\u5305\u542b\u5176\u4e0a\u5c42\u5143\u7d20\u3002 write_set \u4e2d\u7684\u4efb\u610f\u5143\u7d20\u90fd\u4f1a\u5728 read_set \u4e2d\u6307\u5b9a\u76f8\u540c\u7248\u672c\u7684\u8be5\u5143\u7d20\u3002  For example, given the configuration:  \u4f8b\u5982\uff0c\u7ed9\u51fa\u5982\u4e0b\u914d\u7f6e\uff1a  Channel: (version 0)\n    Orderer (version 0)\n    Appplication (version 3)\n       Org1 (version 2)  To submit a configuration update which modifies  Org1 , the  read_set  would be:  \u4fee\u6539 Org1 \u63d0\u4ea4\u7684 read_set \u5e94\u4e3a\uff1a  Channel: (version 0)\n    Application: (version 3)  and the write_set would be  \u5bf9\u5e94\u7684 write_set \u5e94\u662f\uff1a  Channel: (version 0)\n    Application: (version 3)\n        Org1 (version 3)  When the  CONFIG_UPDATE  is received, the orderer computes the resulting  CONFIG  by doing the following:  \u63a5\u6536\u5230 CONFIG_UPDATE \u540e\uff0corderer\u4f1a\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u8ba1\u7b97 CONFIG \u7ed3\u679c\uff1a    Verifies the  channel_id  and  read_set . All elements in the  read_set  must exist at the given versions.  \u6821\u9a8c channel_id \u548c read_set \uff0c read_set \u4e2d\u6240\u6709\u5143\u7d20\u5fc5\u987b\u5b58\u5728\u5bf9\u5e94\u7684\u7248\u672c\u3002\n2. Computes the update set by collecting all elements in the  write_set  which do not appear at the same version in the  read_set .  \u6536\u96c6 read_set \u4e0e write_set \u4e2d\u7248\u672c\u4e0d\u4e00\u81f4\u7684\u5143\u7d20\uff0c\u8ba1\u7b97\u66f4\u65b0\u96c6\u3002\n3. Verifies that each element in the update set increments the version number of the element update by exactly 1.  \u6821\u9a8c\u66f4\u65b0\u96c6\u4e2d\u7684\u5143\u7d20\u7684\u7248\u672c\u53f7\u662f\u5426\u9012\u589e1\n4. Verifies that the signature set attached to the  ConfigUpdateEnvelope  satisfies the  mod_policy  for each element in the update set.  \u6821\u9a8c\u66f4\u65b0\u96c6\u4e2d\u6bcf\u4e2a\u5143\u7d20\uff0c ConfigUpdateEnvelope \u7684\u7b7e\u540d\u6ee1\u8db3 mod_policy \u3002\n5. Computes a new complete version of the config by applying the update set to the current config.  \u901a\u8fc7\u5c06\u66f4\u65b0\u96c6\u5e94\u7528\u4e8e\u5f53\u524d\u914d\u7f6e\uff0c\u8ba1\u7b97\u8be5\u914d\u7f6e\u7684\u5b8c\u6574\u65b0\u7248\u672c\n6.  Writes the new config into a  ConfigEnvelope  which includes the  CONFIG_UPDATE  as the  last_update  field and the new config encoded in the  config  field, along with the incremented  sequence  value.  \u5c06\u65b0\u914d\u7f6e\u5199\u6210 ConfigEnvelope \u4f5c\u4e3a CONFIG_UPDATE \u8d4b\u7ed9 last_update \u5b57\u6bb5\uff0c\u65b0\u7684\u914d\u7f6e\u8d4b\u7ed9 config \u5b57\u6bb5\uff0c sequence \u5b57\u6bb5\u81ea\u589e\u3002\n7. Writes the new  ConfigEnvelope  into a  Envelope  of type  CONFIG , and ultimately writes this as the sole transaction in a new configuration block.  \u5c06 ConfigEnvelope \u5199\u6210 CONFIG \u7c7b\u578b\u7684 Envelope \uff0c\u6700\u7ec8\u5c06\u6b64\u4f5c\u4e3a\u552f\u4e00\u4ea4\u6613\u5199\u5165\u914d\u7f6e\u533a\u5757\u3002\u3001    When the peer (or any other receiver for  Deliver ) receives this configuration block, it should verify that the config was appropriately validated by applying the last_update message to the current config and verifying that the orderer-computed  config  field contains the correct new configuration.  \u5f53peer\uff08\u6216\u8005\u4efb\u610f\u5176\u4ed6\u63a5\u6536 Deliver \u8005\uff09\u63a5\u6536\u5230\u8fd9\u4e2a\u914d\u7f6e\u533a\u5757\u540e\uff0c\u5c31\u4f1a\u901a\u8fc7\u5c06 last_update \u4fe1\u606f\u5e94\u7528\u5230\u5f53\u524d\u914d\u7f6e\u5e76\u6821\u9a8corderer\u8ba1\u7b97\u7684 config \u5b57\u6bb5\u662f\u5426\u5305\u542b\u6b63\u786e\u7684\u65b0\u914d\u7f6e\uff0c\u6765\u9a8c\u8bc1\u8be5\u914d\u7f6e\u662f\u5426\u88ab\u6b63\u786e\u6821\u9a8c\u3002", 
            "title": "Configuration updates / \u66f4\u65b0\u914d\u7f6e"
        }, 
        {
            "location": "/configtx_zh/#permitted-configuration-groups-and-values", 
            "text": "Any valid configuration is a subset of the following configuration. Here we use the notation  peer. MSG  to define a  ConfigValue  whose  value  field is a marshaled proto message of name  MSG  defined in  fabric/protos/peer/configuration.proto . The notations  common. MSG ,  msp. MSG , and  orderer. MSG  correspond similarly, but with their messages defined in  fabric/protos/common/configuration.proto ,  fabric/protos/msp/mspconfig.proto , and  fabric/protos/orderer/configuration.proto  respectively.  \u6709\u6548\u7684\u914d\u7f6e\u90fd\u662f\u4e0b\u9762\u914d\u7f6e\u7684\u5b50\u96c6\u3002\u5728\u6b64\uff0c\u7528 peer. MSG \u8868\u793a\u4e00\u4e2a ConfigValue \uff0c\u5176 value \u5b57\u6bb5\u662f\u79f0\u4e3a MSG \u7684\u5e8f\u5217\u5316\u540e\u7684\u4fe1\u606f\uff0c\u5b9a\u4e49\u5728 fabric/protos/peer/configuration.proto \u3002 common. MSG \uff0c msp. MSG \u548c orderer. MSG \u5206\u522b\u5b9a\u4e49\u5728 fabric/protos/common/configuration.proto \uff0c fabric/protos/msp/mspconfig.proto \u548c fabric/protos/orderer/configuration.proto \u3002  Note, that the keys  {{org_name}}  and  {{consortium_name}}  represent arbitrary names, and indicate an element which may be repeated with different names.  \u6ce8\u610f\uff0c\u4e0b\u9762\u7684 {{org_name}}  \u548c  {{consortium_name}} \u662f\u4efb\u610f\u7684\u540d\u5b57\uff0c\u8868\u793a\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u4e0d\u540c\u540d\u79f0\u7684\u5143\u7d20\u3002  ConfigGroup{\n    Groups: map string, *ConfigGroup  {\n        \"Application\": ConfigGroup{\n            Groups:map String, *ConfigGroup  {\n                {{org_name}}: ConfigGroup{\n                    Values:map string, *ConfigValue {\n                        \"MSP\":msp.MSPConfig,\n                        \"AnchorPeers\":peer.AnchorPeers,\n                    },\n                },\n            },\n        },\n        \"Orderer\": ConfigGroup{\n            Groups:map String, *ConfigGroup  {\n                {{org_name}}: ConfigGroup{\n                    Values:map string, *ConfigValue {\n                        \"MSP\":msp.MSPConfig,\n                    },\n                },\n            },\n\n            Values:map string, *ConfigValue  {\n                \"ConsensusType\":orderer.ConsensusType,\n                \"BatchSize\":orderer.BatchSize,\n                \"BatchTimeout\":orderer.BatchTimeout,\n                \"KafkaBrokers\":orderer.KafkaBrokers,\n            },\n        },\n        \"Consortiums\": ConfigGroup{\n            Groups:map String, *ConfigGroup  {\n                {{consortium_name}}: ConfigGroup{\n                    Groups:map string, *ConfigGroup  {\n                        {{org_name}}: ConfigGroup{\n                            Values:map string, *ConfigValue {\n                                \"MSP\":msp.MSPConfig,\n                            },\n                        },\n                    },\n                    Values:map string, *ConfigValue  {\n                        \"ChannelCreationPolicy\":common.Policy,\n                    }\n                },\n            },\n        },\n    },\n\n    Values: map string, *ConfigValue  {\n        \"HashingAlgorithm\":common.HashingAlgorithm,\n        \"BlockHashingDataStructure\":common.BlockDataHashingStructure,\n        \"Consortium\":common.Consortium,\n        \"OrdererAddresses\":common.OrdererAddresses,\n    },\n}", 
            "title": "Permitted configuration groups and values / \u7ec4\u548c\u503c\u5f97\u914d\u7f6e\u8bb8\u53ef"
        }, 
        {
            "location": "/configtx_zh/#orderer-system-channel-configuration-order-channel", 
            "text": "The ordering system channel needs to define ordering parameters, and consortiums for creating channels. There must be exactly one ordering system channel for an ordering service, and it is the first channel to be created (or more accurately bootstrapped). It is recommended never to define an Application section inside of the ordering system channel genesis configuration, but may be done for testing. Note that any member with read access to the ordering system channel may see all channel creations, so this channel\u2019s access should be restricted.  ordering\u7cfb\u7edfchannel\u5b9a\u4e49\u4e86\u521b\u5efachannel\u7684ordering\u53c2\u6570\u548cconsortiums\u3002ordering service\u5fc5\u987b\u6709\u4e00\u4e2aordering\u7cfb\u7edfchannel\uff0c\u8fd9\u662f\u88ab\u521b\u5efa\u7684\u7b2c\u4e00\u4e2achannel\u3002\u5efa\u8bae\u4e0d\u8981\u5728ordering\u7cfb\u7edfchannel\u521d\u59cb\u914d\u7f6e\u4e2d\u5b9a\u4e49application\u90e8\u5206\uff0c\u4f46\u662f\u6d4b\u8bd5\u662f\u53ef\u4ee5\u8fd9\u4e48\u505a\u3002\u6ce8\u610f\uff0c\u4efb\u4f55\u5bf9ordering\u7cfb\u7edfchannel\u6709\u8bfb\u6743\u9650\u7684\u6210\u5458\u90fd\u53ef\u4ee5\u67e5\u770b\u6240\u6709channel\u521b\u5efa\uff0c\u56e0\u6b64channel\u7684\u8bbf\u95ee\u5e94\u53d7\u9650\u5236\u3002  The ordering parameters are defined as the following subset of config:  ordering\u53c2\u6570\u5b9a\u4e49\u5982\u4e0b\uff1a  ConfigGroup{\n    Groups: map string, *ConfigGroup  {\n        \"Orderer\": ConfigGroup{\n            Groups:map String, *ConfigGroup  {\n                {{org_name}}: ConfigGroup{\n                    Values:map string, *ConfigValue {\n                        \"MSP\":msp.MSPConfig,\n                    },\n                },\n            },\n\n            Values:map string, *ConfigValue  {\n                \"ConsensusType\":orderer.ConsensusType,\n                \"BatchSize\":orderer.BatchSize,\n                \"BatchTimeout\":orderer.BatchTimeout,\n                \"KafkaBrokers\":orderer.KafkaBrokers,\n            },\n        },\n    },  Each organization participating in ordering has a group element under the  Orderer  group. This group defines a single parameter  MSP  which contains the cryptographic identity information for that organization. The  Values  of the  Orderer  group determine how the ordering nodes function. They exist per channel, so  orderer.BatchTimeout  for instance may be specified differently on one channel than another.  ordering\u4e2d\u7684\u6bcf\u4e2a\u7ec4\u7ec7\u90fd\u5728 Orderer \u7ec4\u4e0b\u6709\u4e00\u4e2a\u7ec4\u5143\u7d20\uff0c\u8fd9\u4e2a\u7ec4\u5b9a\u4e49\u4e86\u4e00\u4e2a MSP \u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u5305\u542b\u8be5\u7ec4\u7ec7\u7684\u52a0\u5bc6\u8eab\u4efd\u4fe1\u606f\u3002 Orderer \u7ec4\u4e2d\u7684 Values \u51b3\u5b9a\u4e86ordering\u8282\u70b9\u7684\u529f\u80fd\u3002\u4ed6\u4eec\u5b58\u5728\u4e8e\u6bcf\u4e2achannel\u4e2d\uff0c\u6240\u4ee5\u50cf orderer.BatchTimeout \u5c31\u53ef\u5728\u4e0d\u540cchannel\u4e2d\u6307\u5b9a\u4e0d\u540c\u503c\u3002  At startup, the orderer is faced with a filesystem which contains information for many channels. The orderer identifies the system channel by identifying the channel with the consortiums group defined. The consortiums group has the following structure.  \u542f\u52a8\u65f6\uff0corderer\u9762\u5bf9\u542b\u6709\u5f88\u591achannel\u4fe1\u606f\u7684\u6587\u4ef6\u7cfb\u7edf\uff0corderer\u901a\u8fc7\u8bc6\u522b\u5e26\u6709consortiums\u7ec4\u5b9a\u4e49\u7684channel\u6765\u6807\u8bc6\u7cfb\u7edfchannel\u3002consortiums\u7ec4\u7ed3\u6784\u5982\u4e0b\u3002  ConfigGroup{\n    Groups: map string, *ConfigGroup  {\n        \"Consortiums\": ConfigGroup{\n            Groups:map String, *ConfigGroup  {\n                {{consortium_name}}: ConfigGroup{\n                    Groups:map string, *ConfigGroup  {\n                        {{org_name}}: ConfigGroup{\n                            Values:map string, *ConfigValue {\n                                \"MSP\":msp.MSPConfig,\n                            },\n                        },\n                    },\n                    Values:map string, *ConfigValue  {\n                        \"ChannelCreationPolicy\":common.Policy,\n                    }\n                },\n            },\n        },\n    },\n},  Note that each consortium defines a set of members, just like the organizational members for the ordering orgs. Each consortium also defines a  ChannelCreationPolicy . This is a policy which is applied to authorize channel creation requests. Typically, this value will be set to an  ImplicitMetaPolicy  requiring that the new members of the channel sign to authorize the channel creation. More details about channel creation follow later in this document.  \u6ce8\u610f\uff0c\u6bcf\u4e2aconsortium\u5b9a\u4e49\u4e00\u7ec4\u6210\u5458\uff0c\u5c31\u884cordering\u7ec4\u7ec7\u7684\u7ec4\u7ec7\u6210\u5458\u4e00\u6837\u3002\u6bcf\u4e2aconsortium\u4e5f\u90fd\u5b9a\u4e49\u4e86\u4e00\u4e2a ChannelCreationPolicy \uff0c\u5b83\u662f\u4e00\u79cd\u5e94\u7528\u4e8e\u6388\u6743channel\u521b\u5efa\u8bf7\u6c42\u7684\u7b56\u7565\uff0c\u901a\u5e38\u8fd9\u4e2a\u503c\u8bbe\u4e3a ImplicitMetaPolicy \uff0c\u8981\u6c42channel\u7684\u65b0\u6210\u5458\u7b7e\u540d\u6388\u6743channel\u521b\u5efa\u3002\u6709\u5173channel\u521b\u5efa\u66f4\u4fe1\u606f\u7684\u5185\u5bb9\uff0c\u8bf7\u53c2\u9605\u6587\u6863\u540e\u9762\u7684\u5185\u5bb9\u3002", 
            "title": "Orderer system channel configuration / Order channel \u914d\u7f6e"
        }, 
        {
            "location": "/configtx_zh/#application-channel-configuration-app-channel", 
            "text": "Application configuration is for channels which are designed for application type transactions. It is defined as follows:  \u5e94\u7528\u7a0b\u5e8f\u914d\u7f6e\u7528\u4e8e\u4e3a\u5e94\u7528\u7c7b\u578b\u4ea4\u6613\u8bbe\u8ba1\u7684channel\u3002\u5176\u5b9a\u4e49\u5982\u4e0b\uff1a  ConfigGroup{\n    Groups: map string, *ConfigGroup  {\n        \"Application\": ConfigGroup{\n            Groups:map String, *ConfigGroup  {\n                {{org_name}}: ConfigGroup{\n                    Values:map string, *ConfigValue {\n                        \"MSP\":msp.MSPConfig,\n                        \"AnchorPeers\":peer.AnchorPeers,\n                    },\n                },\n            },\n        },\n    },\n}  Just like with the  Orderer  section, each organization is encoded as a group. However, instead of only encoding the  MSP  identity information, each org additionally encodes a list of  AnchorPeers . This list allows the peers of different organizations to contact each other for peer gossip networking.  \u5c31\u50cf Orderer \u90e8\u5206\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u88ab\u7f16\u7801\u4e3a\u4e00\u4e2a\u7ec4\u3002\u7136\u800c\uff0capp channel\u4e0d\u4ec5\u6709 MSP \u8eab\u4efd\u4fe1\u606f\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u90fd\u9644\u52a0\u4e86\u4e00\u4e2a AnchorPeers \u5217\u8868\u3002\u8fd9\u4e2a\u5217\u8868\u5141\u8bb8\u4e0d\u540c\u7ec4\u7ec7\u7684\u8282\u70b9\u5f7c\u6b64\u8054\u7cfb\u3002  The application channel encodes a copy of the orderer orgs and consensus options to allow for deterministic updating of these parameters, so the same  Orderer  section from the orderer system channel configuration is included. However from an application perspective this may be largely ignored.  \u5e94\u7528\u7a0b\u5e8fchannel\u901a\u8fc7\u5bf9orderer\u7ec4\u7ec7\u548c\u5171\u8bc6\u9009\u9879\u7684\u7f16\u7801\uff0c\u4ee5\u5141\u8bb8\u5bf9\u8fd9\u4e9b\u53c2\u6570\u8fdb\u884c\u786e\u5b9a\u6027\u66f4\u65b0\uff0c\u56e0\u6b64\u5305\u542b\u4e86orderer\u7cfb\u7edfchannel\u914d\u7f6e\u7684\u76f8\u540c Orderer \u90e8\u5206\u3002\u4f46\u4ece\u5e94\u7528\u89d2\u5ea6\u770b\uff0c\u8fd9\u4f1a\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u88ab\u5ffd\u7565\u3002", 
            "title": "Application channel configuration / APP channel \u914d\u7f6e"
        }, 
        {
            "location": "/configtx_zh/#channel-creation-channel", 
            "text": "When the orderer receives a  CONFIG_UPDATE  for a channel which does not exist, the orderer assumes that this must be a channel creation request and performs the following.  \u5f53Orderer \u63a5\u6536\u5230\u5bf9\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684channel\u7684 CONFIG_UPDATE \u4fe1\u606f\u65f6\uff0corderer\u5c31\u4f1a\u5047\u8bbe\u8fd9\u662f\u4e2a\u521b\u5efachannel\u7684\u8bf7\u6c42\u5e76\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a    The orderer identifies the consortium which the channel creation request is to be performed for. It does this by looking at the  Consortium  value of the top level group.  \u901a\u8fc7\u67e5\u770b\u9ad8\u5c42\u7ec4\u4e2d\u7684 Consortium \u503c\uff0corderer\u6807\u8bc6\u6240\u8981\u6267\u884c\u521b\u5efachannel\u8bf7\u6c42\u7684consortium \uff08\u8bd1\u6ce8\uff1a\u8fd9\u4e2a\u8bcd\u6682\u65f6\u4e0d\u77e5\u7ffb\u8bd1\u6210\u4ec0\u4e48\u597d\uff09 \u3002\n2. The orderer verifies that the organizations included in the  Application  group are a subset of the organizations included in the corresponding consortium and that the  ApplicationGroup  is set to  version   1 .  orderer\u9a8c\u8bc1Application\u7ec4\u4e2d\u7684\u7ec4\u7ec7\u662f\u5bf9\u5e94\u7684consortium\u4e2d\u7ec4\u7ec7\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u9a8c\u8bc1 ApplicationGroup \u7684\u7248\u672c\u662f1\u3002\n3. The orderer verifies that if the consortium has members, that the new channel also has application members (creation consortiums and channels with no members is useful for testing only).  orderer\u9a8c\u8bc1consortium\u662f\u5426\u6709\u6210\u5458\uff0c\u65b0\u7684channel\u4e5f\u4f1a\u6709application\u6210\u5458\uff08\u521b\u5efa\u6ca1\u6709\u6210\u5458\u7684consortiums\u548cchannel\u53ea\u7528\u4e8e\u6d4b\u8bd5\uff09\u3002\n4. The orderer creates a template configuration by taking the  Orderer  group from the ordering system channel, and creating an  Application  group with the newly specified members and specifying its  mod_policy  to be the  ChannelCreationPolicy  as specified in the consortium config. Note that the policy is evaluated in the context of the new configuration, so a policy requiring  ALL  members, would require signatures from all the new channel members, not all the members of the consortium.  orderer\u4eceordering\u7cfb\u7edfchannel\u53d6\u5f97 Orderer \u7ec4\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u65b0\u6307\u5b9a\u6210\u5458\u7684 Application \u7ec4\uff0c\u5e76\u5c06\u5176 mod_policy \u6307\u5b9a\u4e3a\u5728consortium config\u4e2d\u6307\u5b9a\u7684 ChannelCreationPolicy \uff0c\u4ece\u800c\u521b\u5efa\u4e00\u4e2a\u6a21\u677f\u914d\u7f6e\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u7b56\u7565\uff08mod_policy\uff09\u662f\u57fa\u4e8e\u65b0\u914d\u7f6e\u7684\u4e0a\u4e0b\u6587\u7684\uff0c\u56e0\u6b64\u9700\u8981\u6240\u6709\u6210\u5458\u7684\u7b56\u7565\u5c31\u662f\u8981\u9700\u8981\u65b0channel\u4e2d\u6240\u6709\u6210\u5458\u7684\u7b7e\u540d\uff0c\u800c\u4e0d\u662fconsortium\u4e2d\u7684\u6240\u6709\u6210\u5458\u3002\n5. The orderer then applies the  CONFIG_UPDATE  as an update to this template configuration. Because the  CONFIG_UPDATE  applies modifications to the  Application  group (its  version  is 1), the config code validates these updates against the  ChannelCreationPolicy . If the channel creation contains any other modifications, such as to an individual org\u2019s anchor peers, the corresponding mod policy for the element will be invoked.  orderer\u7528 CONFIG_UPDATE \u66f4\u65b0\u8fd9\u4e2a\u6a21\u677f\u914d\u7f6e\u3002\u56e0\u4e3a CONFIG_UPDATE \u7528\u4e8e Application \u7ec4\uff08\u5176\u7248\u672c\u662f1\uff09\u7684\u4fee\u6539\uff0c\u6240\u4ee5\u914d\u7f6e\u7801\u6839\u636e ChannelCreationPolicy \u9a8c\u8bc1\u8fd9\u4e9b\u66f4\u65b0\u3002\u5982\u679cchannel\u521b\u5efa\u5305\u542b\u4efb\u4f55\u5176\u5b83\u4fee\u6539\uff0c\u4f8b\u5982\u4fee\u6539\u5355\u4e2a\u7ec4\u7ec7\u7684\u951a\u8282\u70b9\uff0c\u5219\u8c03\u7528\u8be5\u5143\u7d20\u7684\u76f8\u5e94mod\u7b56\u7565\u3002\n6. The new  CONFIG  transaction with the new channel config is wrapped and sent for ordering on the ordering system channel. After ordering, the channel is created.  \u5e26\u6709\u65b0channel\u914d\u7f6e\u7684 CONFIG \u4ea4\u6613\u88ab\u5305\u88c5\u5e76\u901a\u8fc7order\u7cfb\u7edfchannel\u53d1\u9001\u5230ordering\uff0cordering\u4e4b\u540echannel\u5c31\u521b\u5efa\u5b8c\u6210\u3002", 
            "title": "Channel creation / \u521b\u5efachannel"
        }, 
        {
            "location": "/configtxgen_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nFei Cao\n\n\n\n\n\n\n\n\n\n\nThis document describe the usage for the configtxgen utility for manipulating Hyperledger Fabric channel configuration.\n\n\n\u672c\u6587\u6863\u63cf\u8ff0\u4e86\nconfigtxgen\n\u5de5\u5177\u7684\u7528\u6cd5\uff0c\u8be5\u5de5\u5177\u7528\u6765\u64cd\u4f5c\u8d85\u7ea7\u8d26\u672cFabric\u7684\u901a\u9053\u914d\u7f6e\u3002\n\n\nFor now, the tool is primarily focused on generating the genesis block for bootstrapping the orderer, but it is intended to be enhanced in the future for generating new channel configurations as well as reconfiguring existing channels.\n\n\n\u76ee\u524d\uff0c\u8be5\u5de5\u5177\u4e3b\u8981\u4fa7\u91cd\u4e8e\u751f\u6210\u5f15\u5bfc\u5171\u8bc6\u8282\u70b9\u7684\u521b\u4e16\u7eaa\u5757\uff0c\u4f46\u662f\u5c06\u6765\u9884\u8ba1\u589e\u52a0\u751f\u6210\u65b0\u901a\u9053\u7684\u914d\u7f6e\u4ee5\u53ca\u91cd\u65b0\u914d\u7f6e\u5df2\u6709\u7684\u901a\u9053\u3002\n\n\nConfiguration Profiles - \u914d\u7f6e\u6587\u4ef6\n\n\nThe configuration parameters supplied to the configtxgen tool are primarily provided by the configtx.yaml file. This file is located at fabric/sampleconfig/configtx.yaml in the fabric.git repository.\n\n\nconfigtxgen\u5de5\u5177\u7684\u914d\u7f6e\u53c2\u6570\u4e3b\u8981\u7531\nconfigtx.yaml\n\u6587\u4ef6\u63d0\u4f9b\u3002\u5728fabric\u5e93\u4e2d\uff0c\u914d\u7f6e\u6587\u4ef6\u5728\nfabric/sampleconfig/configtx.yaml\n\u3002\n\n\nThis configuration file is split primarily into three pieces.\n\n\n\u6b64\u914d\u7f6e\u6587\u4ef6\u4e3b\u8981\u5206\u4e3a\u4e09\u90e8\u5206\u3002\n\n\n1.The Profiles section. By default, this section includes some sample configurations which can be used for development or testing scenarios, and refer to crypto material present in the fabric.git tree. These profiles can make a good starting point for construction a real deployment profile. The configtxgen tool allows you to specify the profile it is operating under by passing the -profile flag. Profiles may explicitly declare all configuration, but usually inherit configuration from the defaults in (3) below.\n\n\n1.\nProfiles\n\u90e8\u5206\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u90e8\u5206\u5305\u542b\u4e00\u4e9b\u7528\u4e8e\u5f00\u53d1\u6216\u6d4b\u8bd5\u573a\u666f\u7684\u793a\u4f8b\u914d\u7f6e\uff0c\u8fd9\u4e9b\u914d\u7f6e\u6d89\u53cafabric\u76ee\u5f55\u4e2d\u52a0\u5bc6\u90e8\u5206\u3002\u8fd9\u4e9b\u914d\u7f6e\u80fd\u4e3a\u6784\u5efa\u4e00\u4e2a\u771f\u6b63\u5f00\u53d1\u914d\u7f6e\u505a\u4e00\u4e2a\u826f\u597d\u5f00\u59cb\u3002\nconfigtxgen\n\u5de5\u5177\u5141\u8bb8\u4f60\u901a\u8fc7\n-profile\n\u6807\u7b7e\u6765\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\u3002\nProfiles\n\u90e8\u5206\u53ef\u4ee5\u663e\u5f0f\u58f0\u660e\u6240\u6709\u914d\u7f6e\uff0c\u4f46\u662f\u901a\u5e38\u90fd\u662f\u4ece\u4e00\u4e0b\uff083\uff09\u9ed8\u8ba4\u914d\u7f6e\u4e2d\u7ee7\u627f\u3002\n\n\n2.The Organizations section. By default, this section includes a single reference to the sampleconfig MSP definition. For production deployments, the sample organization should be removed, and the MSP definitions of the network members should be referenced and defined instead. Each element in the Organizations section should be tagged with an anchor label such as \norgName which will allow the definition to be referenced in the Profiles sections.\n\n\n2.\nOrganizations\n\u90e8\u5206\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u90e8\u5206\u5305\u542b\u5b9e\u529b\u914d\u7f6eMSP\u5b9a\u4e49\u7684\u5355\u4e00\u5f15\u7528\u3002\u5bf9\u4e8e\u751f\u4ea7\u90e8\u7f72\uff0c\u5e94\u8be5\u5220\u9664\u793a\u4f8b\u914d\u7f6e\uff0c\u5e76\u5e94\u5f15\u7528\u548c\u5b9a\u4e49\u7f51\u7edc\u6210\u5458\u7684MSP\u5b9a\u4e49\u3002\nOrganizations\n\u90e8\u5206\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u5fc5\u987b\u5e26\u6709\u951a\u6807\u7b7e\uff0c\u5982\norgName\n\uff0c\u8fd9\u4e9b\u6807\u7b7e\u5728\nProfiles\n\u90e8\u5206\u5f15\u7528\u3002\n\n\n3.The default sections. There are default sections for Orderer and Application configuration, these include attributes like BatchTimeout and are generally used as the base inherited values for the profiles.\n\n\n3.\u9ed8\u8ba4\u90e8\u5206\u3002\u6b64\u90e8\u5206\u5305\u62ec\u5171\u8bc6\u548c\u5e94\u7528\u90e8\u5206\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u5305\u62ec\u4e00\u4e9b\u5c5e\u6027\u914d\u7f6e\uff0c\u5982\nBatchTimeout\n\u548c\u4e00\u822c\u7528\u4f5c\u7ee7\u627f\u7684\u57fa\u7840\u503c\u3002\n\n\nThis configuration file may be edited, or, individual properties may be overridden by setting environment variables, such as CONFIGTX_ORDERER_ORDERERTYPE=kafka. Note that the Profiles element and profile name do not need to be specified.\n\n\n\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u88ab\u7f16\u8f91\uff0c\u6216\u8005\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u6765\u91cd\u5199\u5c5e\u6027\u503c\uff0c\u5982\nCONFIGTX_ORDERER_ORDERERTYPE=kafka\n\u3002\u6ce8\u610f\uff0c\u4e0d\u9700\u8981\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\u5143\u7d20\u548c\u914d\u7f6e\u6587\u4ef6\u540d\u79f0\u3002\n\n\nBootstrapping the orderer - \u5f15\u5bfc\u5171\u8bc6\n\n\nAfter creating a configuration profile as desired, simply invoke\n\n\n\u521b\u5efa\u914d\u7f6e\u6587\u4ef6\u540e\uff0c\u7b80\u5355\u8c03\u7528\n\n\nconfigtxgen -profile \nprofile_name\n\n\n\n\n\nThis will produce a genesis.block file in the current directory. You may optionally specify another filename by passing in the -path parameter, or, you may skip the writing of the file by passing the dryRun parameter if you simply wish to test parsing of the file.\n\n\n\u8fd9\u4f1a\u5728\u5f53\u524d\u6587\u4ef6\u76ee\u5f55\u4e0b\u751f\u6210\ngenesis.block\n\u3002\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\n-path\n\u53c2\u6570\u6307\u5b9a\u5176\u4ed6\u6587\u4ef6\u540d\u3002\u5982\u679c\u4f60\u53ea\u5e0c\u671b\u6d4b\u8bd5\u8fd9\u4e2a\u6587\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7\ndryRun\n\u53c2\u6570\u6765\u8df3\u8fc7\u521b\u5efa\u6587\u4ef6\u3002\n\n\nThen, to utilize this genesis block, before starting the orderer, simply specify ORDERER_GENERAL_GENESISMETHOD=file and ORDERER_GENERAL_GENESISFILE=$PWD/genesis.block or modify the orderer.yaml file to encode these values.\n\n\n\u7136\u540e\u4e3a\u4e86\u4f7f\u7528\u751f\u6210\u7684\u521b\u4e16\u5feb\uff0c\u5728\u542f\u52a8orderer\u4e4b\u524d\uff0c\u7b80\u5355\u7684\u901a\u8fc7\u6307\u5b9a\nORDERER_GENERAL_GENESISMETHOD=file\n \u548c\nORDERER_GENERAL_GENESISFILE=$PWD/genesis.block\n \u6216\u8005\u4fee\u6539\norderer.yaml\n\u6587\u4ef6\u7f16\u8f91\u8fd9\u4e9b\u5c5e\u6027\u503c\u3002\n\n\nCreating a channel - \u521b\u5efa\u901a\u9053\n\n\nThe tool can also output a channel creation tx by executing\n\n\n\u6b64\u5de5\u5177\u540c\u6837\u53ef\u4ee5\u521b\u5efa\u901a\u9053\u4ea4\u6613\u901a\u8fc7\u6267\u884c\n\n\nconfigtxgen -profile \nprofile_name\n -channelID \nchannel_name\n -outputCreateChannelTx \ntx_filename\n\n\n\n\n\nThis will output a marshaled Envelope message which may be sent to broadcast to create a channel.\n\n\n\u8fd9\u5c06\u8f93\u51fa\u4e00\u4e2a\nEnvelope\n\u6d88\u606f\uff0c\u7528\u6765\u53d1\u9001\u5e7f\u64ad\u6765\u521b\u5efa\u901a\u9053\u3002\n\n\nReviewing a configuration - \u68c0\u67e5\u914d\u7f6e\n\n\nIn addition to creating configuration, the configtxgen tool is also capable of inspecting configuration.\n\n\n\u9664\u4e86\u521b\u5efa\u914d\u7f6e\uff0c\nconfigtxgen\n\u5de5\u5177\u540c\u6837\u63d0\u4f9b\u68c0\u67e5\u914d\u7f6e\u7684\u529f\u80fd\u3002\n\n\nIt supports inspecting both configuration blocks, and configuration transactions. You may use the inspect flags -inspectBlock and -inspectChannelCreateTx respectively with the path to a file to inspect to output a human readable (JSON) representation of the configuration.\n\n\n\u5b83\u652f\u6301\u68c0\u67e5\u914d\u7f6e\u5757\u548c\u914d\u7f6e\u4ea4\u6613\u3002\u4f60\u53ef\u4ee5\u7528\u68c0\u67e5\u6807\u7b7e\n-inspectBlock\n \u548c \n-inspectChannelCreateTx\n \u5206\u522b\u6307\u5b9a\u6587\u4ef6\u8def\u5f84\u6765\u8f93\u51fa\u53ef\u8bfb\u7684\uff08JSON\uff09\u914d\u7f6e\u3002\n\n\nYou may even wish to combine the inspection with generation. For example:\n\n\n\u4f60\u751a\u81f3\u53ef\u80fd\u5e0c\u671b\u5c06\u521b\u5efa\u4e0e\u68c0\u67e5\u76f8\u7ed3\u5408\u3002\u4f8b\u5982\uff1a\n\n\n$ build/bin/configtxgen -channelID foo -outputBlock foo.block -inspectBlock foo.block\n2017/03/01 21:24:24 Loading configuration\n2017/03/01 21:24:24 Checking for configtx.yaml at:\n2017/03/01 21:24:24 Checking for configtx.yaml at:\n2017/03/01 21:24:24 Checking for configtx.yaml at: /home/yellickj/go/src/github.com/hyperledger/fabric/common/configtx/tool\n2017/03/01 21:24:24 map[orderer:map[BatchSize:map[MaxMessageCount:10 AbsoluteMaxBytes:99 MB PreferredMaxBytes:512 KB] Kafka:map[Brokers:[127.0.0.1:9092]] Organizations:\nnil\n OrdererType:solo Addresses:[127.0.0.1:7050] BatchTimeout:10s] application:map[Organizations:\nnil\n] profiles:map[SampleInsecureSolo:map[Orderer:map[BatchTimeout:10s BatchSize:map[MaxMessageCount:10 AbsoluteMaxBytes:99 MB PreferredMaxBytes:512 KB] Kafka:map[Brokers:[127.0.0.1:9092]] Organizations:\nnil\n OrdererType:solo Addresses:[127.0.0.1:7050]] Application:map[Organizations:\nnil\n]] SampleInsecureKafka:map[Orderer:map[Addresses:[127.0.0.1:7050] BatchTimeout:10s BatchSize:map[AbsoluteMaxBytes:99 MB PreferredMaxBytes:512 KB MaxMessageCount:10] Kafka:map[Brokers:[127.0.0.1:9092]] Organizations:\nnil\n OrdererType:kafka] Application:map[Organizations:\nnil\n]] SampleSingleMSPSolo:map[Orderer:map[OrdererType:solo Addresses:[127.0.0.1:7050] BatchTimeout:10s BatchSize:map[MaxMessageCount:10 AbsoluteMaxBytes:99 MB PreferredMaxBytes:512 KB] Kafka:map[Brokers:[127.0.0.1:9092]] Organizations:[map[Name:SampleOrg ID:DEFAULT MSPDir:msp BCCSP:map[Default:SW SW:map[Hash:SHA3 Security:256 FileKeyStore:map[KeyStore:\nnil\n]]] AnchorPeers:[map[Host:127.0.0.1 Port:7051]]]]] Application:map[Organizations:[map[Name:SampleOrg ID:DEFAULT MSPDir:msp BCCSP:map[Default:SW SW:map[Hash:SHA3 Security:256 FileKeyStore:map[KeyStore:\nnil\n]]] AnchorPeers:[map[Port:7051 Host:127.0.0.1]]]]]]] organizations:[map[Name:SampleOrg ID:DEFAULT MSPDir:msp BCCSP:map[Default:SW SW:map[Hash:SHA3 Security:256 FileKeyStore:map[KeyStore:\nnil\n]]] AnchorPeers:[map[Host:127.0.0.1 Port:7051]]]]]\n2017/03/01 21:24:24 Generating genesis block\n2017/03/01 21:24:24 Writing genesis block\n2017/03/01 21:24:24 Inspecting block\n2017/03/01 21:24:24 Parsing genesis block\nConfig for channel: foo\n{\n    \n: {\n        \nValues\n: {},\n        \nGroups\n: {\n            \n/Channel\n: {\n                \nValues\n: {\n                    \nHashingAlgorithm\n: {\n                        \nVersion\n: \n0\n,\n                        \nModPolicy\n: \n,\n                        \nValue\n: {\n                            \nname\n: \nSHA256\n\n                        }\n                    },\n                    \nBlockDataHashingStructure\n: {\n                        \nVersion\n: \n0\n,\n                        \nModPolicy\n: \n,\n                        \nValue\n: {\n                            \nwidth\n: 4294967295\n                        }\n                    },\n                    \nOrdererAddresses\n: {\n                        \nVersion\n: \n0\n,\n                        \nModPolicy\n: \n,\n                        \nValue\n: {\n                            \naddresses\n: [\n                                \n127.0.0.1:7050\n\n                            ]\n                        }\n                    }\n                },\n                \nGroups\n: {\n                    \n/Channel/Orderer\n: {\n                        \nValues\n: {\n                            \nChainCreationPolicyNames\n: {\n                                \nVersion\n: \n0\n,\n                                \nModPolicy\n: \n,\n                                \nValue\n: {\n                                    \nnames\n: [\n                                        \nAcceptAllPolicy\n\n                                    ]\n                                }\n                            },\n                            \nConsensusType\n: {\n                                \nVersion\n: \n0\n,\n                                \nModPolicy\n: \n,\n                                \nValue\n: {\n                                    \ntype\n: \nsolo\n\n                                }\n                            },\n                            \nBatchSize\n: {\n                                \nVersion\n: \n0\n,\n                                \nModPolicy\n: \n,\n                                \nValue\n: {\n                                    \nmaxMessageCount\n: 10,\n                                    \nabsoluteMaxBytes\n: 103809024,\n                                    \npreferredMaxBytes\n: 524288\n                                }\n                            },\n                            \nBatchTimeout\n: {\n                                \nVersion\n: \n0\n,\n                                \nModPolicy\n: \n,\n                                \nValue\n: {\n                                    \ntimeout\n: \n10s\n\n                                }\n                            },\n                            \nIngressPolicyNames\n: {\n                                \nVersion\n: \n0\n,\n                                \nModPolicy\n: \n,\n                                \nValue\n: {\n                                    \nnames\n: [\n                                        \nAcceptAllPolicy\n\n                                    ]\n                                }\n                            },\n                            \nEgressPolicyNames\n: {\n                                \nVersion\n: \n0\n,\n                                \nModPolicy\n: \n,\n                                \nValue\n: {\n                                    \nnames\n: [\n                                        \nAcceptAllPolicy\n\n                                    ]\n                                }\n                            }\n                        },\n                        \nGroups\n: {}\n                    },\n                    \n/Channel/Application\n: {\n                        \nValues\n: {},\n                        \nGroups\n: {}\n                    }\n                }\n            }\n        }\n    }\n}", 
            "title": "Channel \u914d\u7f6e(configtxgen)"
        }, 
        {
            "location": "/configtxgen_zh/#configuration-profiles-", 
            "text": "The configuration parameters supplied to the configtxgen tool are primarily provided by the configtx.yaml file. This file is located at fabric/sampleconfig/configtx.yaml in the fabric.git repository.  configtxgen\u5de5\u5177\u7684\u914d\u7f6e\u53c2\u6570\u4e3b\u8981\u7531 configtx.yaml \u6587\u4ef6\u63d0\u4f9b\u3002\u5728fabric\u5e93\u4e2d\uff0c\u914d\u7f6e\u6587\u4ef6\u5728 fabric/sampleconfig/configtx.yaml \u3002  This configuration file is split primarily into three pieces.  \u6b64\u914d\u7f6e\u6587\u4ef6\u4e3b\u8981\u5206\u4e3a\u4e09\u90e8\u5206\u3002  1.The Profiles section. By default, this section includes some sample configurations which can be used for development or testing scenarios, and refer to crypto material present in the fabric.git tree. These profiles can make a good starting point for construction a real deployment profile. The configtxgen tool allows you to specify the profile it is operating under by passing the -profile flag. Profiles may explicitly declare all configuration, but usually inherit configuration from the defaults in (3) below.  1. Profiles \u90e8\u5206\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u90e8\u5206\u5305\u542b\u4e00\u4e9b\u7528\u4e8e\u5f00\u53d1\u6216\u6d4b\u8bd5\u573a\u666f\u7684\u793a\u4f8b\u914d\u7f6e\uff0c\u8fd9\u4e9b\u914d\u7f6e\u6d89\u53cafabric\u76ee\u5f55\u4e2d\u52a0\u5bc6\u90e8\u5206\u3002\u8fd9\u4e9b\u914d\u7f6e\u80fd\u4e3a\u6784\u5efa\u4e00\u4e2a\u771f\u6b63\u5f00\u53d1\u914d\u7f6e\u505a\u4e00\u4e2a\u826f\u597d\u5f00\u59cb\u3002 configtxgen \u5de5\u5177\u5141\u8bb8\u4f60\u901a\u8fc7 -profile \u6807\u7b7e\u6765\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\u3002 Profiles \u90e8\u5206\u53ef\u4ee5\u663e\u5f0f\u58f0\u660e\u6240\u6709\u914d\u7f6e\uff0c\u4f46\u662f\u901a\u5e38\u90fd\u662f\u4ece\u4e00\u4e0b\uff083\uff09\u9ed8\u8ba4\u914d\u7f6e\u4e2d\u7ee7\u627f\u3002  2.The Organizations section. By default, this section includes a single reference to the sampleconfig MSP definition. For production deployments, the sample organization should be removed, and the MSP definitions of the network members should be referenced and defined instead. Each element in the Organizations section should be tagged with an anchor label such as  orgName which will allow the definition to be referenced in the Profiles sections.  2. Organizations \u90e8\u5206\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u90e8\u5206\u5305\u542b\u5b9e\u529b\u914d\u7f6eMSP\u5b9a\u4e49\u7684\u5355\u4e00\u5f15\u7528\u3002\u5bf9\u4e8e\u751f\u4ea7\u90e8\u7f72\uff0c\u5e94\u8be5\u5220\u9664\u793a\u4f8b\u914d\u7f6e\uff0c\u5e76\u5e94\u5f15\u7528\u548c\u5b9a\u4e49\u7f51\u7edc\u6210\u5458\u7684MSP\u5b9a\u4e49\u3002 Organizations \u90e8\u5206\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u5fc5\u987b\u5e26\u6709\u951a\u6807\u7b7e\uff0c\u5982 orgName \uff0c\u8fd9\u4e9b\u6807\u7b7e\u5728 Profiles \u90e8\u5206\u5f15\u7528\u3002  3.The default sections. There are default sections for Orderer and Application configuration, these include attributes like BatchTimeout and are generally used as the base inherited values for the profiles.  3.\u9ed8\u8ba4\u90e8\u5206\u3002\u6b64\u90e8\u5206\u5305\u62ec\u5171\u8bc6\u548c\u5e94\u7528\u90e8\u5206\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u5305\u62ec\u4e00\u4e9b\u5c5e\u6027\u914d\u7f6e\uff0c\u5982 BatchTimeout \u548c\u4e00\u822c\u7528\u4f5c\u7ee7\u627f\u7684\u57fa\u7840\u503c\u3002  This configuration file may be edited, or, individual properties may be overridden by setting environment variables, such as CONFIGTX_ORDERER_ORDERERTYPE=kafka. Note that the Profiles element and profile name do not need to be specified.  \u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u88ab\u7f16\u8f91\uff0c\u6216\u8005\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u6765\u91cd\u5199\u5c5e\u6027\u503c\uff0c\u5982 CONFIGTX_ORDERER_ORDERERTYPE=kafka \u3002\u6ce8\u610f\uff0c\u4e0d\u9700\u8981\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\u5143\u7d20\u548c\u914d\u7f6e\u6587\u4ef6\u540d\u79f0\u3002", 
            "title": "Configuration Profiles - \u914d\u7f6e\u6587\u4ef6"
        }, 
        {
            "location": "/configtxgen_zh/#bootstrapping-the-orderer-", 
            "text": "After creating a configuration profile as desired, simply invoke  \u521b\u5efa\u914d\u7f6e\u6587\u4ef6\u540e\uff0c\u7b80\u5355\u8c03\u7528  configtxgen -profile  profile_name   This will produce a genesis.block file in the current directory. You may optionally specify another filename by passing in the -path parameter, or, you may skip the writing of the file by passing the dryRun parameter if you simply wish to test parsing of the file.  \u8fd9\u4f1a\u5728\u5f53\u524d\u6587\u4ef6\u76ee\u5f55\u4e0b\u751f\u6210 genesis.block \u3002\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7 -path \u53c2\u6570\u6307\u5b9a\u5176\u4ed6\u6587\u4ef6\u540d\u3002\u5982\u679c\u4f60\u53ea\u5e0c\u671b\u6d4b\u8bd5\u8fd9\u4e2a\u6587\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7 dryRun \u53c2\u6570\u6765\u8df3\u8fc7\u521b\u5efa\u6587\u4ef6\u3002  Then, to utilize this genesis block, before starting the orderer, simply specify ORDERER_GENERAL_GENESISMETHOD=file and ORDERER_GENERAL_GENESISFILE=$PWD/genesis.block or modify the orderer.yaml file to encode these values.  \u7136\u540e\u4e3a\u4e86\u4f7f\u7528\u751f\u6210\u7684\u521b\u4e16\u5feb\uff0c\u5728\u542f\u52a8orderer\u4e4b\u524d\uff0c\u7b80\u5355\u7684\u901a\u8fc7\u6307\u5b9a ORDERER_GENERAL_GENESISMETHOD=file  \u548c ORDERER_GENERAL_GENESISFILE=$PWD/genesis.block  \u6216\u8005\u4fee\u6539 orderer.yaml \u6587\u4ef6\u7f16\u8f91\u8fd9\u4e9b\u5c5e\u6027\u503c\u3002", 
            "title": "Bootstrapping the orderer - \u5f15\u5bfc\u5171\u8bc6"
        }, 
        {
            "location": "/configtxgen_zh/#creating-a-channel-", 
            "text": "The tool can also output a channel creation tx by executing  \u6b64\u5de5\u5177\u540c\u6837\u53ef\u4ee5\u521b\u5efa\u901a\u9053\u4ea4\u6613\u901a\u8fc7\u6267\u884c  configtxgen -profile  profile_name  -channelID  channel_name  -outputCreateChannelTx  tx_filename   This will output a marshaled Envelope message which may be sent to broadcast to create a channel.  \u8fd9\u5c06\u8f93\u51fa\u4e00\u4e2a Envelope \u6d88\u606f\uff0c\u7528\u6765\u53d1\u9001\u5e7f\u64ad\u6765\u521b\u5efa\u901a\u9053\u3002", 
            "title": "Creating a channel - \u521b\u5efa\u901a\u9053"
        }, 
        {
            "location": "/configtxgen_zh/#reviewing-a-configuration-", 
            "text": "In addition to creating configuration, the configtxgen tool is also capable of inspecting configuration.  \u9664\u4e86\u521b\u5efa\u914d\u7f6e\uff0c configtxgen \u5de5\u5177\u540c\u6837\u63d0\u4f9b\u68c0\u67e5\u914d\u7f6e\u7684\u529f\u80fd\u3002  It supports inspecting both configuration blocks, and configuration transactions. You may use the inspect flags -inspectBlock and -inspectChannelCreateTx respectively with the path to a file to inspect to output a human readable (JSON) representation of the configuration.  \u5b83\u652f\u6301\u68c0\u67e5\u914d\u7f6e\u5757\u548c\u914d\u7f6e\u4ea4\u6613\u3002\u4f60\u53ef\u4ee5\u7528\u68c0\u67e5\u6807\u7b7e -inspectBlock  \u548c  -inspectChannelCreateTx  \u5206\u522b\u6307\u5b9a\u6587\u4ef6\u8def\u5f84\u6765\u8f93\u51fa\u53ef\u8bfb\u7684\uff08JSON\uff09\u914d\u7f6e\u3002  You may even wish to combine the inspection with generation. For example:  \u4f60\u751a\u81f3\u53ef\u80fd\u5e0c\u671b\u5c06\u521b\u5efa\u4e0e\u68c0\u67e5\u76f8\u7ed3\u5408\u3002\u4f8b\u5982\uff1a  $ build/bin/configtxgen -channelID foo -outputBlock foo.block -inspectBlock foo.block\n2017/03/01 21:24:24 Loading configuration\n2017/03/01 21:24:24 Checking for configtx.yaml at:\n2017/03/01 21:24:24 Checking for configtx.yaml at:\n2017/03/01 21:24:24 Checking for configtx.yaml at: /home/yellickj/go/src/github.com/hyperledger/fabric/common/configtx/tool\n2017/03/01 21:24:24 map[orderer:map[BatchSize:map[MaxMessageCount:10 AbsoluteMaxBytes:99 MB PreferredMaxBytes:512 KB] Kafka:map[Brokers:[127.0.0.1:9092]] Organizations: nil  OrdererType:solo Addresses:[127.0.0.1:7050] BatchTimeout:10s] application:map[Organizations: nil ] profiles:map[SampleInsecureSolo:map[Orderer:map[BatchTimeout:10s BatchSize:map[MaxMessageCount:10 AbsoluteMaxBytes:99 MB PreferredMaxBytes:512 KB] Kafka:map[Brokers:[127.0.0.1:9092]] Organizations: nil  OrdererType:solo Addresses:[127.0.0.1:7050]] Application:map[Organizations: nil ]] SampleInsecureKafka:map[Orderer:map[Addresses:[127.0.0.1:7050] BatchTimeout:10s BatchSize:map[AbsoluteMaxBytes:99 MB PreferredMaxBytes:512 KB MaxMessageCount:10] Kafka:map[Brokers:[127.0.0.1:9092]] Organizations: nil  OrdererType:kafka] Application:map[Organizations: nil ]] SampleSingleMSPSolo:map[Orderer:map[OrdererType:solo Addresses:[127.0.0.1:7050] BatchTimeout:10s BatchSize:map[MaxMessageCount:10 AbsoluteMaxBytes:99 MB PreferredMaxBytes:512 KB] Kafka:map[Brokers:[127.0.0.1:9092]] Organizations:[map[Name:SampleOrg ID:DEFAULT MSPDir:msp BCCSP:map[Default:SW SW:map[Hash:SHA3 Security:256 FileKeyStore:map[KeyStore: nil ]]] AnchorPeers:[map[Host:127.0.0.1 Port:7051]]]]] Application:map[Organizations:[map[Name:SampleOrg ID:DEFAULT MSPDir:msp BCCSP:map[Default:SW SW:map[Hash:SHA3 Security:256 FileKeyStore:map[KeyStore: nil ]]] AnchorPeers:[map[Port:7051 Host:127.0.0.1]]]]]]] organizations:[map[Name:SampleOrg ID:DEFAULT MSPDir:msp BCCSP:map[Default:SW SW:map[Hash:SHA3 Security:256 FileKeyStore:map[KeyStore: nil ]]] AnchorPeers:[map[Host:127.0.0.1 Port:7051]]]]]\n2017/03/01 21:24:24 Generating genesis block\n2017/03/01 21:24:24 Writing genesis block\n2017/03/01 21:24:24 Inspecting block\n2017/03/01 21:24:24 Parsing genesis block\nConfig for channel: foo\n{\n     : {\n         Values : {},\n         Groups : {\n             /Channel : {\n                 Values : {\n                     HashingAlgorithm : {\n                         Version :  0 ,\n                         ModPolicy :  ,\n                         Value : {\n                             name :  SHA256 \n                        }\n                    },\n                     BlockDataHashingStructure : {\n                         Version :  0 ,\n                         ModPolicy :  ,\n                         Value : {\n                             width : 4294967295\n                        }\n                    },\n                     OrdererAddresses : {\n                         Version :  0 ,\n                         ModPolicy :  ,\n                         Value : {\n                             addresses : [\n                                 127.0.0.1:7050 \n                            ]\n                        }\n                    }\n                },\n                 Groups : {\n                     /Channel/Orderer : {\n                         Values : {\n                             ChainCreationPolicyNames : {\n                                 Version :  0 ,\n                                 ModPolicy :  ,\n                                 Value : {\n                                     names : [\n                                         AcceptAllPolicy \n                                    ]\n                                }\n                            },\n                             ConsensusType : {\n                                 Version :  0 ,\n                                 ModPolicy :  ,\n                                 Value : {\n                                     type :  solo \n                                }\n                            },\n                             BatchSize : {\n                                 Version :  0 ,\n                                 ModPolicy :  ,\n                                 Value : {\n                                     maxMessageCount : 10,\n                                     absoluteMaxBytes : 103809024,\n                                     preferredMaxBytes : 524288\n                                }\n                            },\n                             BatchTimeout : {\n                                 Version :  0 ,\n                                 ModPolicy :  ,\n                                 Value : {\n                                     timeout :  10s \n                                }\n                            },\n                             IngressPolicyNames : {\n                                 Version :  0 ,\n                                 ModPolicy :  ,\n                                 Value : {\n                                     names : [\n                                         AcceptAllPolicy \n                                    ]\n                                }\n                            },\n                             EgressPolicyNames : {\n                                 Version :  0 ,\n                                 ModPolicy :  ,\n                                 Value : {\n                                     names : [\n                                         AcceptAllPolicy \n                                    ]\n                                }\n                            }\n                        },\n                         Groups : {}\n                    },\n                     /Channel/Application : {\n                         Values : {},\n                         Groups : {}\n                    }\n                }\n            }\n        }\n    }\n}", 
            "title": "Reviewing a configuration - \u68c0\u67e5\u914d\u7f6e"
        }, 
        {
            "location": "/configtxlator_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nShaoxi Qiu\n\n\n\n\n\n\n\n\n\n\n\u6982\u89c8\uff08Overview\uff09\n\n\nThe \nconfigtxlator\n tool was created to support reconfiguration independent\nof SDKs. Channel configuration is stored as a transaction in configuration\nblocks of a channel and may be manipulated directly, such as in the bdd behave\ntests.  However, at the time of this writing, no SDK natively supports\nmanipulating the configuration directly, so the \nconfigtxlator\n tool is\ndesigned to provide an API which consumers of any SDK may interact with to\nassist with configuration updates.\n\n\n\u5f00\u53d1 \nconfigtxlator\n \u5de5\u5177\u662f\u4e3a\u4e86\u652f\u6301\u72ec\u7acb\u4e8eSDK\u6765\u8fdb\u884c\u91cd\u65b0\u914d\u7f6e\u3002\u901a\u9053\u914d\u7f6e\u901a\u8fc7\u4e00\u4e2a\u4ea4\u6613\u7684\u5f62\u5f0f\u5b58\u50a8\u5728\u901a\u9053\u7684\u914d\u7f6e\u533a\u5757\u4e2d\uff0c\u5e76\u4e14\u80fd\u591f\u76f4\u63a5\u88ab\u4fee\u6539\uff0c\u5c31\u50cfbdd\u884c\u4e3a\u6d4b\u8bd5\u3002\n\u7136\u800c\uff0c\u5728\u672c\u6587\u5199\u4f5c\u7684\u65f6\u95f4\uff0c\u8fd8\u6ca1\u6709SDK\u539f\u751f\u652f\u6301\u76f4\u63a5\u4fee\u6539\u914d\u7f6e\uff0c\u6240\u4ee5 \nconfigtxlator\n \u5de5\u5177\u88ab\u8bbe\u8ba1\u4e3a\u63d0\u4f9b\u4e00\u4e2aAPI\u8ba9\u4efb\u610f\u4e00\u4e2aSDK\u7684\u7528\u6237\u90fd\u80fd\u591f\u4e0e\u4e4b\u4ea4\u4e92\u6765\u66f4\u65b0\u914d\u7f6e\u3002\n\n\nThe tool name is a portmanteau of \nconfigtx\n and \ntranslator\n and is intended to\nconvey that the tool simply converts between different equivalent data\nrepresentations. It does not generate configuration. It does not submit or\nretrieve configuration. It does not modify configuration itself, it simply\nprovides some bijective operations between different views of the configtx\nformat.\n\n\n\u5de5\u5177\u7684\u540d\u79f0\u662f \nconfigtx\n \u548c \ntranslator\n \u7684\u62fc\u63a5\uff0c\u610f\u5728\u4f20\u8fbe\u8be5\u5de5\u5177\u7b80\u5355\u5730\u5728\u4e0d\u540c\u7684\u7b49\u6548\u6570\u636e\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002\n\u5b83\u4e0d\u4ea7\u751f\u914d\u7f6e\u3002\u4e5f\u4e0d\u63d0\u4ea4\u6216\u64a4\u56de\u914d\u7f6e\u3002\u5b83\u4e0d\u4fee\u6539\u914d\u7f6e\u672c\u8eab\uff0c\u53ea\u662f\u7b80\u5355\u5730\u63d0\u4f9b\u4e00\u4e9b\u914d\u7f6e\u683c\u5f0f\u7684\u4e0d\u540c\u7684\u53cc\u5c04\u5c55\u73b0\u3002\n\n\n\u8bd1\u8005\u6ce8\uff1a\u65e2\u662f\u5355\u5c04\u53c8\u662f\u6ee1\u5c04\u7684\u51fd\u6570\u79f0\u4e3a\u53cc\u5c04. \u51fd\u6570\u4e3a\u53cc\u5c04\u5f53\u4e14\u4ec5\u5f53\u6bcf\u4e2a\u53ef\u80fd\u7684\u50cf\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u53d8\u91cf\u4e0e\u4e4b\u5bf9\u5e94\u3002\u53c2\u8003\uff1ahttp://www.cnblogs.com/wanghetao/archive/2012/03/16/2400619.html\n\n\nThe standard usage is expected to be:\n\n\n\n\nSDK retrieves latest config\n \u00a02. \nconfigtxlator\n produces human readable version of config\n\n\nUser or application edits the config\n\n\nconfigtxlator\n is used to compute config update representation of\n     changes to the config\n\n\nSDK submits signs and submits config\n\n\n\n\n\u6807\u51c6\u7528\u6cd5\uff1a\n\n\n1. SDK \u53d6\u51fa\u6700\u65b0\u7684\u914d\u7f6e\n \u00a02. \u00a0\nconfigtxlator\n \u5de5\u5177\u4ea7\u751f\u53ef\u8bfb\u7248\u672c\u7684\u914d\u7f6e\u6587\u4ef6\n \u00a03. \u7528\u6237\u6216\u8005\u5e94\u7528\u7f16\u8f91\u914d\u7f6e\u6587\u4ef6\n \u00a04. \u4f7f\u7528\u00a0\nconfigtxlator\n \u5de5\u5177\u8ba1\u7b97\u66f4\u65b0\u7684\u914d\u7f6e\u4e0e\u539f\u6709\u914d\u7f6e\u7684\u5dee\u5f02\n \u00a05. SDK \u63d0\u4ea4\u914d\u7f6e\u4ee5\u53ca\u7b7e\u540d\n\n\nThe \nconfigtxlator\n tool exposes a truly stateless REST API for interacting\nwith configuration elements.  These REST components support converting the\nnative configuration format to/from a human readable JSON representation, as\nwell as computing configuration updates based on the difference between two\nconfigurations.\n\n\nconfigtxlator\n \u5de5\u5177\u66b4\u9732\u4e00\u4e2a\u5b8c\u5168\u65e0\u72b6\u6001\u7684 REST API \u63a5\u53e3\u7528\u6765\u548c\u914d\u7f6e\u5300\u901f\u8fdb\u884c\u4ea4\u4e92\u3002 \n \u8fd9\u4e9b REST \u7ec4\u4ef6\u652f\u6301\u672c\u5730\u7684\u914d\u7f6e\u548c\u53ef\u8bfb\u7684JSON\u683c\u5f0f\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u76f8\u4e92\u8f6c\u6362\uff0c \u540c\u65f6\u6839\u636e\u914d\u7f6e\u6587\u4ef6\u7684\u5dee\u5f02\u8ba1\u7b97\u914d\u7f6e\u7684\u66f4\u65b0\u3002\n\n\nBecause the \nconfigtxlator\n service deliberately does not contain any crypto\nmaterial, or otherwise secret information, it does not include any authorization\nor access control. The anticipated typical deployment would be to operate as\na sandboxed container, locally with the application, so that there is a\ndedicated \nconfigtxlator\n process for each consumer of it.\n\n\n\u56e0\u4e3a \nconfigtxlator\n \u5de5\u5177\u7279\u610f\u6ca1\u6709\u5305\u542b\u4efb\u4f55\u5bc6\u7801\u5de5\u5177\u548c\u5bc6\u94a5\u4fe1\u606f\uff0c \u6240\u6709\u5b83\u6ca1\u6709\u4efb\u4f55\u6743\u9650\u63a7\u5236\u3002\n\u9884\u8ba1\u7684\u5178\u578b\u90e8\u7f72\u65b9\u5f0f\u662f\u8fd0\u884c\u5728\u6c99\u76d2\u5bb9\u5668\u4e2d\uff0c \u6240\u4ee5\u5728\u672c\u5730\u7684\u5e94\u7528\u4e2d\uff0c \u6709\u4e00\u4e2a\u4e13\u7528\u7684 \nconfigtxlator\n \u8fdb\u7a0b\u7ed9\u6bcf\u4e00\u4e2a\u4f7f\u7528\u8005\u3002\n\n\n\u8fd0\u884c configtxlator \u5de5\u5177\uff08Running the configtxlator\uff09\n\n\nThe \nconfigtxlator\n tool can be downloaded with the other Hyperledger Fabric\nplatform-specific binaries. Please see :ref:\ndownload-platform-specific-binaries\n\nfor details.\n\n\nconfigtxlator\n \u5de5\u5177\u53ef\u4ee5\u548c\u5176\u4ed6 Hyperledger Fabric \u5e73\u53f0\u4e13\u7528\u5de5\u5177\u4e00\u6837\u88ab\u4e0b\u8f7d\u4f7f\u7528\u3002\u8be6\u60c5\u8bf7\u67e5\u770b ref:\ndownload-platform-specific-binaries\n \u3002\n\n\nThe tool may be configured to listen on a different port and you may also\nspecify the hostname using the \n--port\n and \n--hostname\n flags. To explore\nthe complete set of commands and flags, run \nconfigtxlator --help\n.\n\n\n\u8be5\u5de5\u5177\u53ef\u4ee5\u914d\u7f6e\u53bb\u76d1\u542c\u4e0d\u540c\u7684\u7aef\u53e3\u548c\u5730\u5740\uff0c\u53ea\u7528 \u00a0\n--port\n \u548c \n--hostname\n \u53c2\u6570\u3002\n\u67e5\u770b\u6240\u6709\u53c2\u6570\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u6267\u884c \nconfigtxlator --help\n.\n\n\nThe binary will start an http server listening on the designated port and is now\nready to process request.\n\n\n\u5de5\u5177\u542f\u52a8\u4e00\u4e2a\u670d\u52a1\u5668\u76d1\u542c\u6307\u5b9a\u7684\u7aef\u53e3\u4e14\u7b49\u5f85\u5904\u7406\u8bf7\u6c42\u3002\n\n\nTo start the \nconfigtxlator\n server:\n\n\n\u6267\u884c\u547d\u4ee4\u542f\u52a8 \nconfigtxlator\n \u670d\u52a1\uff1a\n\n\n.. code:: bash\n\n\nconfigtxlator start\n  2017-06-21 18:16:58.248 HKT [configtxlator] startServer -\n INFO 001 Serving HTTP requests on 0.0.0.0:7059\n\n\n\u539f\u578b\u7ffb\u8bd1\uff08Proto translation\uff09\n\n\nFor extensibility, and because certain fields must be signed over, many proto\nfields are stored as bytes.  This makes the natural proto to JSON translation\nusing the \njsonpb\n package ineffective for producing a human readable version\nof the protobufs.  Instead, the \nconfigtxlator\n exposes a REST component to do\na more sophisticated translation.\n\n\n\u4e3a\u4e86\u53ef\u6269\u5c55\u6027\uff0c\u4ee5\u53ca\u7279\u5b9a\u7684\u5b57\u6bb5\u9700\u8981\u88ab\u7b7e\u540d\uff0c\u8bb8\u591a\u539f\u578b\u5b57\u6bb5\u88ab\u5b58\u50a8\u4e3a\u5b57\u8282\u3002\u4f7f\u7528 \njsonpb\n \u5de5\u5177\u5305\u6765\u8f6c\u6362\u539f\u578b\u548c\u53ef\u8bfb\u7684 JSON \u683c\u5f0f\u56e0\u6b64\u53d8\u5f97\u65e0\u6548\u3002\n\u66ff\u4ee3\u7684\u65b9\u5f0f\u662f\uff0c \nconfigtxlator\n \u66b4\u9732\u4e00\u4e2aREST \u7ec4\u4ef6\u53bb\u505a\u66f4\u590d\u6742\u7684\u7ffb\u8bd1\u3002\n\n\nTo convert a proto to its human readable JSON equivalent, simply post the binary\nproto to the rest target\n\nhttp://$SERVER:$PORT/protolator/decode/\nmessage.Name\n,\nwhere \nmessage.Name\n is the fully qualified proto name of the message.\n\n\n\u8981\u8f6c\u6362\u539f\u578b\u5230\u53ef\u8bfb\u7684 JSON \u683c\u5f0f\uff0c\u53ea\u8981\u53d1\u9001\u4e8c\u8fdb\u5236\u539f\u578b\u5230 rest \u76ee\u6807\n\nhttp://$SERVER:$PORT/protolator/decode/\nmessage.Name\n,\n \nmessage.Name\n \u662f\u5408\u6cd5\u539f\u578b\u540d\u7684\u5168\u79f0\u3002\n\n\nFor instance, to decode a configuration block saved as\n\nconfiguration_block.pb\n, run the command:\n\n\n\u4f8b\u5982\uff0c\u4e3a\u4e86\u89e3\u6790\u4e00\u4e2a\u5b58\u50a8\u4e3a \nconfiguration_block.pb\n \u7684\u914d\u7f6e\u533a\u5757\uff0c\u6267\u884c\u547d\u4ee4\uff1a\n\n\n.. code:: bash\n\n\ncurl -X POST \ndata-binary @configuration_block.pb http://127.0.0.1:7059/protolator/decode/common.Block\n\n\nTo convert the human readable JSON version of the proto message, simply post the\nJSON version to \nhttp://$SERVER:$PORT/protolator/encode/\nmessage.Name\n, where\n\nmessage.Name\n is again the fully qualified proto name of the message.\n\n\n\u8f6c\u6362\u53ef\u8bfb\u7684JSON\u7248\u672c\u4e3a\u539f\u578b\u6570\u636e\uff0c\u53ea\u8981\u53d1\u9001JSON\u7248\u672c\u5230 \nhttp://$SERVER:$PORT/protolator/encode/\nmessage.Name\n \uff0c\n\u8fd9\u91cc\u7684 \nmessage.Name\n \u662f\u5408\u6cd5\u539f\u578b\u7684\u5168\u79f0\u3002\n\n\nFor instance, to re-encode the block saved as \nconfiguration_block.json\n, run\nthe command:\n\n\n\u4f8b\u5982\uff0c\u91cd\u65b0\u7f16\u7801\u5b58\u50a8\u4e3a \nconfiguration_block.json\n \u7684\u914d\u7f6e\u533a\u5757\uff0c\u6267\u884c\u547d\u4ee4\uff1a\n\n\n.. code:: bash\n\n\ncurl -X POST \ndata-binary @configuration_block.json http://127.0.0.1:7059/protolator/encode/common.Block\n\n\nAny of the configuration related protos, including \ncommon.Block\n,\n\ncommon.Envelope\n, \ncommon.ConfigEnvelope\n, \ncommon.ConfigUpdateEnvelope\n,\n\ncommon.Configuration\n, and \ncommon.ConfigUpdate\n are valid targets for\nthese URLs.  In the future, other proto decoding types may be added, such as\nfor endorser transactions.\n\n\n\u4efb\u4f55\u539f\u578b\u76f8\u5173\u7684\u914d\u7f6e\uff0c\u5305\u62ec  \ncommon.Block\n,\n\ncommon.Envelope\n, \ncommon.ConfigEnvelope\n, \ncommon.ConfigUpdateEnvelope\n,\n\ncommon.Configuration\n, \u548c \ncommon.ConfigUpdate\n \u90fd\u662f\u8fd9\u4e9b\u5730\u5740\u7684\u5408\u6cd5\u7684\u76ee\u6807\u3002\n\u672a\u6765\uff0c\u5176\u4ed6\u89e3\u6790\u7c7b\u578b\u53ef\u80fd\u4f1a\u88ab\u589e\u52a0\uff0c\u6bd4\u5982\u80cc\u4e66\u4ea4\u6613\u3002\n\n\n\u914d\u7f6e\u66f4\u65b0\u8ba1\u7b97\uff08Config update computation\uff09\n\n\nGiven two different configurations, it is possible to compute the config update\nwhich transitions between them.  Simply POST the two \ncommon.Config\n proto\nencoded configurations as \nmultipart/formdata\n, with the original as field\n\noriginal\n and the updated as field \nupdated\n, to\n\nhttp://$SERVER:$PORT/configtxlator/compute/update-from-configs\n.\n\n\n\u4e24\u4e2a\u4e0d\u540c\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u8ba1\u7b97\u51fa\u4e24\u4e2a\u914d\u7f6e\u66f4\u65b0\u6240\u9700\u8981\u7684\u4ea4\u6613\u3002\n\u5411  `http://\nSERVER:\nPORT/configtxlator/compute/update-from-configs\n\u53d1\u9001\u4e24\u4e2a\u5df2\u7f16\u7801\u7684\ncommon.Config\n\u539f\u578b\u914d\u7f6e\u4f5c\u4e3a\nmultipart/formdata\n\uff0c\u5176\u4e2d\u539f\u59cb\u914d\u7f6e\u586b\u5165\noriginal\n\u57df\uff0c\u66f4\u65b0\u914d\u7f6e\u586b\u5165\nupdated`` \u57df\u3002\n\n\nFor example, given the original config as the file \noriginal_config.pb\n and\nthe updated config as the file \nupdated_config.pb\n for the channel\n\ndesiredchannel\n:\n\n\n\u4f8b\u5982\uff0c\u5bf9\u4e8e\u901a\u9053 \ndesiredchannel\n \u7684\u539f\u59cb\u914d\u7f6e\u6587\u4ef6 \noriginal_config.pb\n \u548c\u66f4\u65b0\u914d\u7f6e\u6587\u4ef6 \u00a0\nupdated_config.pb\n \uff1a\n\n\n.. code:: bash\n\n\ncurl -X POST -F channel=desiredchannel -F original=@original_config.pb -F updated=@updated_config.pb http://127.0.0.1:7059/configtxlator/compute/update-from-configs\n\n\n\u5f15\u5bfc\u5b9e\u4f8b\uff08Bootstraping example\uff09\n\n\nFirst start the \nconfigtxlator\n:\n\n\n\u9996\u5148\uff0c\u542f\u52a8\u542f\u52a8 \nconfigtxlator\n \u5de5\u5177:\n\n\n.. code:: bash\n\n\n$ configtxlator start\n  2017-05-31 12:57:22.499 EDT [configtxlator] main -\n INFO 001 Serving HTTP requests on port: 7059\n\n\nFirst, produce a genesis block for the ordering system channel:\n\n\n\u7136\u540e\uff0c\u4e3a\u901a\u9053\u4ea7\u751f\u521d\u59cb\u533a\u5757\n\n\n.. code:: bash\n\n\n$ configtxgen -outputBlock genesis_block.pb\n  2017-05-31 14:15:16.634 EDT [common/configtx/tool] main -\n INFO 001 Loading configuration\n  2017-05-31 14:15:16.646 EDT [common/configtx/tool] doOutputBlock -\n INFO 002 Generating genesis block\n  2017-05-31 14:15:16.646 EDT [common/configtx/tool] doOutputBlock -\n INFO 003 Writing genesis block\n\n\nDecode the genesis block into a human editable form:\n\n\n\u89e3\u6790\u521d\u59cb\u533a\u5757\u4e3a\u53ef\u7f16\u8f91\u7684\u5f62\u5f0f\n\n\n.. code:: bash\n\n\ncurl -X POST \ndata-binary @genesis_block.pb http://127.0.0.1:7059/protolator/decode/common.Block \n genesis_block.json\n\n\nEdit the \ngenesis_block.json\n file in your favorite JSON editor, or manipulate\nit programatically.  Here we use the JSON CLI tool \njq\n.  For simplicity, we\nare editing the batch size for the channel, because it is a single numeric\nfield. However, any edits, including policy and MSP edits may be made here.\n\n\n\u4f7f\u7528\u4f60\u559c\u6b22\u7684JSON\u7f16\u8f91\u5668\u7f16\u8f91 \ngenesis_block.json\n \u6587\u4ef6\uff0c\u6216\u4f7f\u7528\u7a0b\u5e8f\u7f16\u8f91\u3002 \u8fd9\u91cc\u9700\u8981\u4f7f\u7528JSON \u00a0\u5de5\u5177 \u00a0\njq\n .\n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u8fd9\u91cc\u7f16\u8f91\u901a\u9053\u7684\u533a\u5757\u5927\u5c0f\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u6570\u5b57\u5b57\u6bb5\u3002\n\u7136\u800c\uff0c\u4efb\u4f55\u4fee\u6539\uff0c\u5305\u62ec\u7b56\u7565\u548cMSP\u90fd\u662f\u53ef\u4ee5\u505a\u7684\u3002\n\n\nFirst, let\ns establish an environment variable to hold the string that defines\nthe path to a property in the json:\n\n\n\u9996\u5148\uff0c\u5efa\u7acb\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\u6765\u5b58\u50a8\u53d8\u91cf\u7684\u8def\u5f84\n\n\n.. code:: bash\n\n\nexport MAXBATCHSIZEPATH=\n.data.data[0].payload.data.config.channel_group.groups.Orderer.values.BatchSize.value.max_message_count\n\n\nNext, let\ns display the value of that property:\n\n\n\u7136\u540e\uff0c\u663e\u793a\u53d8\u91cf\u7684\u503c\n\n\n.. code:: bash\n\n\njq \n$MAXBATCHSIZEPATH\n genesis_block.json\n  10\n\n\nNow, let\ns set the new batch size, and display the new value:\n\n\n\u73b0\u5728\uff0c\u8bbe\u7f6e\u65b0\u7684\u533a\u5757\u5927\u5c0f\uff0c\u5e76\u4e14\u663e\u793a\u65b0\u503c\uff1a\n\n\njq \nMAXBATCHSIZEPATH = 20\" genesis_block.json  > updated_genesis_block.json\n  jq \"\nMAXBATCHSIZEPATH\n updated_genesis_block.json\n  20\n\n\nThe genesis block is now ready to be re-encoded into the native proto form to be\nused for bootstrapping:\n\n\n\u521d\u59cb\u533a\u5757\u73b0\u5728\u5df2\u7ecf\u53ef\u4ee5\u88ab\u91cd\u65b0\u7f16\u7801\u4e3a\u53ef\u7528\u4e8e\u5f15\u5bfc\u542f\u52a8\u7684\u539f\u578b\u683c\u5f0f\uff1a\n\n\n.. code:: bash\n\n\ncurl -X POST \ndata-binary @updated_genesis_block.json http://127.0.0.1:7059/protolator/encode/common.Block \n updated_genesis_block.pb\n\n\nThe \nupdated_genesis_block.pb\n file may now be used as the genesis block for\nbootstrapping an ordering system channel.\n\n\n\u73b0\u5728\uff0c \nupdated_genesis_block.pb\n \u6587\u4ef6\u53ef\u4ee5\u4f5c\u4e3a\u521d\u59cb\u533a\u5757\u6765\u5f15\u5bfc\u901a\u9053\u542f\u52a8\u4e86\u3002\n\n\n\u91cd\u914d\u7f6e\u793a\u4f8b\uff08Reconfiguration example\uff09\n\n\nIn another terminal window, start the orderer using the default options,\nincluding the provisional bootstrapper which will create a \ntestchainid\n\nordering system channel.\n\n\n\u6253\u5f00\u53e6\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\uff0c\u4f7f\u7528\u9ed8\u8ba4\u9009\u9879\u542f\u52a8orderer\uff0c\n\u5305\u62ec\u4e34\u65f6\u7684\u5f15\u5bfc\u7a0b\u5e8f\uff0c\u5c06\u4f1a\u521b\u5efa\u4e00\u4e2a\u540d\u79f0\u4e3a \ntestchainid\n \u7684\u6392\u5e8f\u901a\u9053\u3002\n\n\n.. code:: bash\n\n\nORDERER_GENERAL_LOGLEVEL=debug orderer\n\n\nReconfiguring a channel can be performed in a very similar way to modifying a\ngenesis config.\n\n\n\u91cd\u914d\u7f6e\u4e00\u4e2a\u901a\u9053\u4e0e\u4fee\u6539\u521d\u59cb\u914d\u7f6e\u7c7b\u4f3c\u3002\n\n\nFirst, fetch the config_block proto:\n\n\n\u9996\u5148\uff0c\u83b7\u53d6\u914d\u7f6e\u533a\u5757\u539f\u578b\uff1a\n\n\n.. code:: bash\n\n\n$ peer channel fetch config config_block.pb -o 127.0.0.1:7050 -c testchainid\n  2017-05-31 15:11:37.617 EDT [msp] getMspConfig -\n INFO 001 intermediate certs folder not found at [/home/yellickj/go/src/github.com/hyperledger/fabric/sampleconfig/msp/intermediatecerts]. Skipping.: [stat /home/yellickj/go/src/github.com/hyperledger/fabric/sampleconfig/msp/intermediatecerts: no such file or directory]\n  2017-05-31 15:11:37.617 EDT [msp] getMspConfig -\n INFO 002 crls folder not found at [/home/yellickj/go/src/github.com/hyperledger/fabric/sampleconfig/msp/intermediatecerts]. Skipping.: [stat /home/yellickj/go/src/github.com/hyperledger/fabric/sampleconfig/msp/crls: no such file or directory]\n  Received block:  1\n  Received block:  1\n  2017-05-31 15:11:37.635 EDT [main] main -\n INFO 003 Exiting.....\n\n\nNext, send the config block to the \nconfigtxlator\n service for decoding:\n\n\n\u7136\u540e\uff0c\u53d1\u9001\u914d\u7f6e\u533a\u5757\u5230 \nconfigtxlator\n \u670d\u52a1\u8fdb\u884c\u89e3\u6790\uff1a\n\n\n.. code:: bash\n\n\ncurl -X POST \ndata-binary @config_block.pb http://127.0.0.1:7059/protolator/decode/common.Block \n config_block.json\n\n\nExtract the config section from the block:\n\n\n\u4ece\u533a\u5757\u4e2d\u63d0\u53d6\u914d\u7f6e\u533a\u57df\n\n\n.. code:: bash\n\n\njq .data.data[0].payload.data.config config_block.json \n config.json\n\n\nEdit the config, saving it as a new \nupdated_config.json\n.  Here, we set the\nbatch size to 30.\n\n\n\u7f16\u8f91\u914d\u7f6e\uff0c\u5c06\u7f16\u8f91\u540e\u7684\u5185\u5bb9\u5b58\u653e\u5728 \nupdated_config.json\n \u3002\u8fd9\u91cc\u6211\u4eec\u8bbe\u8ba1\u533a\u5757\u5927\u5c0f\u4e3a30.\n\n\n.. code:: bash\n\n\njq \n.channel_group.groups.Orderer.values.BatchSize.value.max_message_count = 30\n config.json  \n updated_config.json\n\n\nRe-encode both the original config, and the updated config into proto:\n\n\n\u91cd\u65b0\u5c06\u539f\u914d\u7f6e\u4e0e\u65b0\u914d\u7f6e\u8fdb\u884c\u7f16\u7801\uff1a\n\n\n.. code:: bash\n\n\ncurl -X POST \ndata-binary @config.json http://127.0.0.1:7059/protolator/encode/common.Config \n config.pb\n\n\n.. code:: bash\n\n\ncurl -X POST \ndata-binary @updated_config.json http://127.0.0.1:7059/protolator/encode/common.Config \n updated_config.pb\n\n\nNow, with both configs properly encoded, send them to the \nconfigtxlator\n\nservice to compute the config update which transitions between the two.\n\n\n\u73b0\u5728\uff0c\u5c06\u7f16\u7801\u540e\u7684\u6587\u4ef6\u53d1\u9001\u5230 \nconfigtxlator\n \u670d\u52a1\u8fdb\u884c\u8ba1\u7b97\u6bd4\u5bf9\u4e24\u4e2a\u7684\u5dee\u5f02\u3002\n\n\n.. code:: bash\n\n\ncurl -X POST -F original=@config.pb -F updated=@updated_config.pb http://127.0.0.1:7059/configtxlator/compute/update-from-configs -F channel=testchainid \n config_update.pb\n\n\nAt this point, the computed config update is now prepared. Traditionally,\nan SDK would be used to sign and wrap this message. However, in the interest of\nusing only the peer cli, the \nconfigtxlator\n can also be used for this task.\n\n\n\u5230\u6b64\uff0c\u8ba1\u7b97\u51fa\u7684\u914d\u7f6e\u66f4\u65b0\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\u3002\u4e00\u822c\uff0cSDK\u4f1a\u5bf9\u8be5\u6d88\u606f\u8fdb\u884c\u7b7e\u540d\u6253\u5305\u3002\n\u7136\u800c\uff0c\u4e3a\u4e86\u90a3\u4e9b\u53ea\u4f7f\u7528\u8282\u70b9\u547d\u4ee4\uff08peer cli\uff09\u7684\u60c5\u51b5\uff0c \nconfigtxlator\n \u5de5\u5177\u4e5f\u80fd\u8fdb\u884c\u8fd9\u4e2a\u5de5\u4f5c\u3002\n\n\nFirst, we decode the ConfigUpdate so that we may work with it as text:\n\n\n\u9996\u5148\uff0c\u6309\u4e0a\u6587\u6240\u8bf4\u5bf9\u914d\u7f6e\u66f4\u65b0\u8fdb\u884c\u7f16\u7801\uff1a\n\n\n.. code:: bash\n\n\n$ curl -X POST \ndata-binary @config_update.pb http://127.0.0.1:7059/protolator/decode/common.ConfigUpdate \n config_update.json\n\n\nThen, we wrap it in an envelope message:\n\n\n\u7136\u540e\uff0c\u8bb2\u6d88\u606f\u8fdb\u884c\u6253\u5305\uff1a\n\n\n.. code:: bash\n\n\necho \n{\npayload\n:{\nheader\n:{\nchannel_header\n:{\nchannel_id\n:\ntestchainid\n, \ntype\n:2}},\ndata\n:{\nconfig_update\n:\n$(cat config_update.json)\n}}}\n \n config_update_as_envelope.json\n\n\nNext, convert it back into the proto form of a full fledged config\ntransaction:\n\n\n\u63a5\u7740\uff0c\u5c06\u5b83\u8f6c\u6362\u4e3a\u5b8c\u6574\u914d\u7f6e\u7684\u4ea4\u6613\u7684\u539f\u578b\u7ed3\u6784\n\n\n.. code:: bash\n\n\ncurl -X POST \ndata-binary @config_update_as_envelope.json http://127.0.0.1:7059/protolator/encode/common.Envelope \n config_update_as_envelope.pb\n\n\nFinally, submit the config update transaction to ordering to perform a config\nupdate.\n\n\n\u6700\u540e\uff0c\u5c06\u914d\u7f6e\u66f4\u65b0\u4ea4\u6613\u63d0\u4ea4\u5230\u6392\u5e8f\u670d\u52a1\u3002\n\n\n.. code:: bash\n\n\npeer channel update -f config_update_as_envelope.pb -c testchainid -o 127.0.0.1:7050\n\n\n\u589e\u52a0\u7ec4\u7ec7\uff08Adding an organization\uff09\n\n\nFirst start the \nconfigtxlator\n:\n\n\n\u9996\u5148\u542f\u52a8 \nconfigtxlator\n \u670d\u52a1\uff1a\n\n\n.. code:: bash\n\n\n$ configtxlator start\n  2017-05-31 12:57:22.499 EDT [configtxlator] main -\n INFO 001 Serving HTTP requests on port: 7059\n\n\nStart the orderer using the \nSampleDevModeSolo\n profile option.\n\n\n\u4f7f\u7528 \nSampleDevModeSolo\n \u5c5e\u6027\u914d\u7f6e\u6765\u542f\u52a8\u6392\u5e8f\u670d\u52a1\u3002\n\n\n.. code:: bash\n\n\nORDERER_GENERAL_LOGLEVEL=debug ORDERER_GENERAL_GENESISPROFILE=SampleDevModeSolo orderer\n\n\nThe process to add an organization then follows exactly like the batch size\nexample. However, instead of setting the batch size, a new org is defined at\nthe application level. Adding an organization is slightly more involved because\nwe must first create a channel, then modify its membership set.\n\n\n\u589e\u52a0\u7ec4\u7ec7\u7684\u56fd\u653f\u548c\u4fee\u6539\u533a\u5757\u5927\u5c0f\u7684\u8fc7\u7a0b\u7c7b\u4f3c\u3002\u7136\u800c\uff0c\u4e0d\u540c\u4e8e\u8bbe\u7f6e\u533a\u5757\u5927\u5c0f\uff0c\u4e00\u4e2a\u65b0\u7684\u7ec4\u7ec7\u88ab\u5b9a\u4e49\u5728\u5e94\u7528\u5c42\u3002\n\u589e\u52a0\u4e00\u4e2a\u7ec4\u7ec7\u6d89\u53ca\u66f4\u591a\u5185\u5bb9\u56e0\u4e3a\u9700\u8981\u5148\u521b\u5efa\u901a\u9053\uff0c\u7136\u540e\u4fee\u6539\u5b83\u7684\u6210\u5458\u96c6\u3002\n\n\n.. Licensed under Creative Commons Attribution 4.0 International License\n   https://creativecommons.org/licenses/by/4.0/", 
            "title": "Channel \u91cd\u65b0\u914d\u7f6e(configtxlator)"
        }, 
        {
            "location": "/configtxlator_zh/#overview", 
            "text": "The  configtxlator  tool was created to support reconfiguration independent\nof SDKs. Channel configuration is stored as a transaction in configuration\nblocks of a channel and may be manipulated directly, such as in the bdd behave\ntests.  However, at the time of this writing, no SDK natively supports\nmanipulating the configuration directly, so the  configtxlator  tool is\ndesigned to provide an API which consumers of any SDK may interact with to\nassist with configuration updates.  \u5f00\u53d1  configtxlator  \u5de5\u5177\u662f\u4e3a\u4e86\u652f\u6301\u72ec\u7acb\u4e8eSDK\u6765\u8fdb\u884c\u91cd\u65b0\u914d\u7f6e\u3002\u901a\u9053\u914d\u7f6e\u901a\u8fc7\u4e00\u4e2a\u4ea4\u6613\u7684\u5f62\u5f0f\u5b58\u50a8\u5728\u901a\u9053\u7684\u914d\u7f6e\u533a\u5757\u4e2d\uff0c\u5e76\u4e14\u80fd\u591f\u76f4\u63a5\u88ab\u4fee\u6539\uff0c\u5c31\u50cfbdd\u884c\u4e3a\u6d4b\u8bd5\u3002\n\u7136\u800c\uff0c\u5728\u672c\u6587\u5199\u4f5c\u7684\u65f6\u95f4\uff0c\u8fd8\u6ca1\u6709SDK\u539f\u751f\u652f\u6301\u76f4\u63a5\u4fee\u6539\u914d\u7f6e\uff0c\u6240\u4ee5  configtxlator  \u5de5\u5177\u88ab\u8bbe\u8ba1\u4e3a\u63d0\u4f9b\u4e00\u4e2aAPI\u8ba9\u4efb\u610f\u4e00\u4e2aSDK\u7684\u7528\u6237\u90fd\u80fd\u591f\u4e0e\u4e4b\u4ea4\u4e92\u6765\u66f4\u65b0\u914d\u7f6e\u3002  The tool name is a portmanteau of  configtx  and  translator  and is intended to\nconvey that the tool simply converts between different equivalent data\nrepresentations. It does not generate configuration. It does not submit or\nretrieve configuration. It does not modify configuration itself, it simply\nprovides some bijective operations between different views of the configtx\nformat.  \u5de5\u5177\u7684\u540d\u79f0\u662f  configtx  \u548c  translator  \u7684\u62fc\u63a5\uff0c\u610f\u5728\u4f20\u8fbe\u8be5\u5de5\u5177\u7b80\u5355\u5730\u5728\u4e0d\u540c\u7684\u7b49\u6548\u6570\u636e\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002\n\u5b83\u4e0d\u4ea7\u751f\u914d\u7f6e\u3002\u4e5f\u4e0d\u63d0\u4ea4\u6216\u64a4\u56de\u914d\u7f6e\u3002\u5b83\u4e0d\u4fee\u6539\u914d\u7f6e\u672c\u8eab\uff0c\u53ea\u662f\u7b80\u5355\u5730\u63d0\u4f9b\u4e00\u4e9b\u914d\u7f6e\u683c\u5f0f\u7684\u4e0d\u540c\u7684\u53cc\u5c04\u5c55\u73b0\u3002  \u8bd1\u8005\u6ce8\uff1a\u65e2\u662f\u5355\u5c04\u53c8\u662f\u6ee1\u5c04\u7684\u51fd\u6570\u79f0\u4e3a\u53cc\u5c04. \u51fd\u6570\u4e3a\u53cc\u5c04\u5f53\u4e14\u4ec5\u5f53\u6bcf\u4e2a\u53ef\u80fd\u7684\u50cf\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u53d8\u91cf\u4e0e\u4e4b\u5bf9\u5e94\u3002\u53c2\u8003\uff1ahttp://www.cnblogs.com/wanghetao/archive/2012/03/16/2400619.html  The standard usage is expected to be:   SDK retrieves latest config\n \u00a02.  configtxlator  produces human readable version of config  User or application edits the config  configtxlator  is used to compute config update representation of\n     changes to the config  SDK submits signs and submits config   \u6807\u51c6\u7528\u6cd5\uff1a  1. SDK \u53d6\u51fa\u6700\u65b0\u7684\u914d\u7f6e\n \u00a02. \u00a0 configtxlator  \u5de5\u5177\u4ea7\u751f\u53ef\u8bfb\u7248\u672c\u7684\u914d\u7f6e\u6587\u4ef6\n \u00a03. \u7528\u6237\u6216\u8005\u5e94\u7528\u7f16\u8f91\u914d\u7f6e\u6587\u4ef6\n \u00a04. \u4f7f\u7528\u00a0 configtxlator  \u5de5\u5177\u8ba1\u7b97\u66f4\u65b0\u7684\u914d\u7f6e\u4e0e\u539f\u6709\u914d\u7f6e\u7684\u5dee\u5f02\n \u00a05. SDK \u63d0\u4ea4\u914d\u7f6e\u4ee5\u53ca\u7b7e\u540d  The  configtxlator  tool exposes a truly stateless REST API for interacting\nwith configuration elements.  These REST components support converting the\nnative configuration format to/from a human readable JSON representation, as\nwell as computing configuration updates based on the difference between two\nconfigurations.  configtxlator  \u5de5\u5177\u66b4\u9732\u4e00\u4e2a\u5b8c\u5168\u65e0\u72b6\u6001\u7684 REST API \u63a5\u53e3\u7528\u6765\u548c\u914d\u7f6e\u5300\u901f\u8fdb\u884c\u4ea4\u4e92\u3002 \n \u8fd9\u4e9b REST \u7ec4\u4ef6\u652f\u6301\u672c\u5730\u7684\u914d\u7f6e\u548c\u53ef\u8bfb\u7684JSON\u683c\u5f0f\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u76f8\u4e92\u8f6c\u6362\uff0c \u540c\u65f6\u6839\u636e\u914d\u7f6e\u6587\u4ef6\u7684\u5dee\u5f02\u8ba1\u7b97\u914d\u7f6e\u7684\u66f4\u65b0\u3002  Because the  configtxlator  service deliberately does not contain any crypto\nmaterial, or otherwise secret information, it does not include any authorization\nor access control. The anticipated typical deployment would be to operate as\na sandboxed container, locally with the application, so that there is a\ndedicated  configtxlator  process for each consumer of it.  \u56e0\u4e3a  configtxlator  \u5de5\u5177\u7279\u610f\u6ca1\u6709\u5305\u542b\u4efb\u4f55\u5bc6\u7801\u5de5\u5177\u548c\u5bc6\u94a5\u4fe1\u606f\uff0c \u6240\u6709\u5b83\u6ca1\u6709\u4efb\u4f55\u6743\u9650\u63a7\u5236\u3002\n\u9884\u8ba1\u7684\u5178\u578b\u90e8\u7f72\u65b9\u5f0f\u662f\u8fd0\u884c\u5728\u6c99\u76d2\u5bb9\u5668\u4e2d\uff0c \u6240\u4ee5\u5728\u672c\u5730\u7684\u5e94\u7528\u4e2d\uff0c \u6709\u4e00\u4e2a\u4e13\u7528\u7684  configtxlator  \u8fdb\u7a0b\u7ed9\u6bcf\u4e00\u4e2a\u4f7f\u7528\u8005\u3002", 
            "title": "\u6982\u89c8\uff08Overview\uff09"
        }, 
        {
            "location": "/configtxlator_zh/#configtxlator-running-the-configtxlator", 
            "text": "The  configtxlator  tool can be downloaded with the other Hyperledger Fabric\nplatform-specific binaries. Please see :ref: download-platform-specific-binaries \nfor details.  configtxlator  \u5de5\u5177\u53ef\u4ee5\u548c\u5176\u4ed6 Hyperledger Fabric \u5e73\u53f0\u4e13\u7528\u5de5\u5177\u4e00\u6837\u88ab\u4e0b\u8f7d\u4f7f\u7528\u3002\u8be6\u60c5\u8bf7\u67e5\u770b ref: download-platform-specific-binaries  \u3002  The tool may be configured to listen on a different port and you may also\nspecify the hostname using the  --port  and  --hostname  flags. To explore\nthe complete set of commands and flags, run  configtxlator --help .  \u8be5\u5de5\u5177\u53ef\u4ee5\u914d\u7f6e\u53bb\u76d1\u542c\u4e0d\u540c\u7684\u7aef\u53e3\u548c\u5730\u5740\uff0c\u53ea\u7528 \u00a0 --port  \u548c  --hostname  \u53c2\u6570\u3002\n\u67e5\u770b\u6240\u6709\u53c2\u6570\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u6267\u884c  configtxlator --help .  The binary will start an http server listening on the designated port and is now\nready to process request.  \u5de5\u5177\u542f\u52a8\u4e00\u4e2a\u670d\u52a1\u5668\u76d1\u542c\u6307\u5b9a\u7684\u7aef\u53e3\u4e14\u7b49\u5f85\u5904\u7406\u8bf7\u6c42\u3002  To start the  configtxlator  server:  \u6267\u884c\u547d\u4ee4\u542f\u52a8  configtxlator  \u670d\u52a1\uff1a  .. code:: bash  configtxlator start\n  2017-06-21 18:16:58.248 HKT [configtxlator] startServer -  INFO 001 Serving HTTP requests on 0.0.0.0:7059", 
            "title": "\u8fd0\u884c configtxlator \u5de5\u5177\uff08Running the configtxlator\uff09"
        }, 
        {
            "location": "/configtxlator_zh/#proto-translation", 
            "text": "For extensibility, and because certain fields must be signed over, many proto\nfields are stored as bytes.  This makes the natural proto to JSON translation\nusing the  jsonpb  package ineffective for producing a human readable version\nof the protobufs.  Instead, the  configtxlator  exposes a REST component to do\na more sophisticated translation.  \u4e3a\u4e86\u53ef\u6269\u5c55\u6027\uff0c\u4ee5\u53ca\u7279\u5b9a\u7684\u5b57\u6bb5\u9700\u8981\u88ab\u7b7e\u540d\uff0c\u8bb8\u591a\u539f\u578b\u5b57\u6bb5\u88ab\u5b58\u50a8\u4e3a\u5b57\u8282\u3002\u4f7f\u7528  jsonpb  \u5de5\u5177\u5305\u6765\u8f6c\u6362\u539f\u578b\u548c\u53ef\u8bfb\u7684 JSON \u683c\u5f0f\u56e0\u6b64\u53d8\u5f97\u65e0\u6548\u3002\n\u66ff\u4ee3\u7684\u65b9\u5f0f\u662f\uff0c  configtxlator  \u66b4\u9732\u4e00\u4e2aREST \u7ec4\u4ef6\u53bb\u505a\u66f4\u590d\u6742\u7684\u7ffb\u8bd1\u3002  To convert a proto to its human readable JSON equivalent, simply post the binary\nproto to the rest target http://$SERVER:$PORT/protolator/decode/ message.Name ,\nwhere  message.Name  is the fully qualified proto name of the message.  \u8981\u8f6c\u6362\u539f\u578b\u5230\u53ef\u8bfb\u7684 JSON \u683c\u5f0f\uff0c\u53ea\u8981\u53d1\u9001\u4e8c\u8fdb\u5236\u539f\u578b\u5230 rest \u76ee\u6807 http://$SERVER:$PORT/protolator/decode/ message.Name ,\n  message.Name  \u662f\u5408\u6cd5\u539f\u578b\u540d\u7684\u5168\u79f0\u3002  For instance, to decode a configuration block saved as configuration_block.pb , run the command:  \u4f8b\u5982\uff0c\u4e3a\u4e86\u89e3\u6790\u4e00\u4e2a\u5b58\u50a8\u4e3a  configuration_block.pb  \u7684\u914d\u7f6e\u533a\u5757\uff0c\u6267\u884c\u547d\u4ee4\uff1a  .. code:: bash  curl -X POST  data-binary @configuration_block.pb http://127.0.0.1:7059/protolator/decode/common.Block  To convert the human readable JSON version of the proto message, simply post the\nJSON version to  http://$SERVER:$PORT/protolator/encode/ message.Name , where message.Name  is again the fully qualified proto name of the message.  \u8f6c\u6362\u53ef\u8bfb\u7684JSON\u7248\u672c\u4e3a\u539f\u578b\u6570\u636e\uff0c\u53ea\u8981\u53d1\u9001JSON\u7248\u672c\u5230  http://$SERVER:$PORT/protolator/encode/ message.Name  \uff0c\n\u8fd9\u91cc\u7684  message.Name  \u662f\u5408\u6cd5\u539f\u578b\u7684\u5168\u79f0\u3002  For instance, to re-encode the block saved as  configuration_block.json , run\nthe command:  \u4f8b\u5982\uff0c\u91cd\u65b0\u7f16\u7801\u5b58\u50a8\u4e3a  configuration_block.json  \u7684\u914d\u7f6e\u533a\u5757\uff0c\u6267\u884c\u547d\u4ee4\uff1a  .. code:: bash  curl -X POST  data-binary @configuration_block.json http://127.0.0.1:7059/protolator/encode/common.Block  Any of the configuration related protos, including  common.Block , common.Envelope ,  common.ConfigEnvelope ,  common.ConfigUpdateEnvelope , common.Configuration , and  common.ConfigUpdate  are valid targets for\nthese URLs.  In the future, other proto decoding types may be added, such as\nfor endorser transactions.  \u4efb\u4f55\u539f\u578b\u76f8\u5173\u7684\u914d\u7f6e\uff0c\u5305\u62ec   common.Block , common.Envelope ,  common.ConfigEnvelope ,  common.ConfigUpdateEnvelope , common.Configuration , \u548c  common.ConfigUpdate  \u90fd\u662f\u8fd9\u4e9b\u5730\u5740\u7684\u5408\u6cd5\u7684\u76ee\u6807\u3002\n\u672a\u6765\uff0c\u5176\u4ed6\u89e3\u6790\u7c7b\u578b\u53ef\u80fd\u4f1a\u88ab\u589e\u52a0\uff0c\u6bd4\u5982\u80cc\u4e66\u4ea4\u6613\u3002", 
            "title": "\u539f\u578b\u7ffb\u8bd1\uff08Proto translation\uff09"
        }, 
        {
            "location": "/configtxlator_zh/#config-update-computation", 
            "text": "Given two different configurations, it is possible to compute the config update\nwhich transitions between them.  Simply POST the two  common.Config  proto\nencoded configurations as  multipart/formdata , with the original as field original  and the updated as field  updated , to http://$SERVER:$PORT/configtxlator/compute/update-from-configs .  \u4e24\u4e2a\u4e0d\u540c\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u8ba1\u7b97\u51fa\u4e24\u4e2a\u914d\u7f6e\u66f4\u65b0\u6240\u9700\u8981\u7684\u4ea4\u6613\u3002\n\u5411  `http:// SERVER: PORT/configtxlator/compute/update-from-configs \u53d1\u9001\u4e24\u4e2a\u5df2\u7f16\u7801\u7684 common.Config \u539f\u578b\u914d\u7f6e\u4f5c\u4e3a multipart/formdata \uff0c\u5176\u4e2d\u539f\u59cb\u914d\u7f6e\u586b\u5165 original \u57df\uff0c\u66f4\u65b0\u914d\u7f6e\u586b\u5165 updated`` \u57df\u3002  For example, given the original config as the file  original_config.pb  and\nthe updated config as the file  updated_config.pb  for the channel desiredchannel :  \u4f8b\u5982\uff0c\u5bf9\u4e8e\u901a\u9053  desiredchannel  \u7684\u539f\u59cb\u914d\u7f6e\u6587\u4ef6  original_config.pb  \u548c\u66f4\u65b0\u914d\u7f6e\u6587\u4ef6 \u00a0 updated_config.pb  \uff1a  .. code:: bash  curl -X POST -F channel=desiredchannel -F original=@original_config.pb -F updated=@updated_config.pb http://127.0.0.1:7059/configtxlator/compute/update-from-configs", 
            "title": "\u914d\u7f6e\u66f4\u65b0\u8ba1\u7b97\uff08Config update computation\uff09"
        }, 
        {
            "location": "/configtxlator_zh/#bootstraping-example", 
            "text": "First start the  configtxlator :  \u9996\u5148\uff0c\u542f\u52a8\u542f\u52a8  configtxlator  \u5de5\u5177:  .. code:: bash  $ configtxlator start\n  2017-05-31 12:57:22.499 EDT [configtxlator] main -  INFO 001 Serving HTTP requests on port: 7059  First, produce a genesis block for the ordering system channel:  \u7136\u540e\uff0c\u4e3a\u901a\u9053\u4ea7\u751f\u521d\u59cb\u533a\u5757  .. code:: bash  $ configtxgen -outputBlock genesis_block.pb\n  2017-05-31 14:15:16.634 EDT [common/configtx/tool] main -  INFO 001 Loading configuration\n  2017-05-31 14:15:16.646 EDT [common/configtx/tool] doOutputBlock -  INFO 002 Generating genesis block\n  2017-05-31 14:15:16.646 EDT [common/configtx/tool] doOutputBlock -  INFO 003 Writing genesis block  Decode the genesis block into a human editable form:  \u89e3\u6790\u521d\u59cb\u533a\u5757\u4e3a\u53ef\u7f16\u8f91\u7684\u5f62\u5f0f  .. code:: bash  curl -X POST  data-binary @genesis_block.pb http://127.0.0.1:7059/protolator/decode/common.Block   genesis_block.json  Edit the  genesis_block.json  file in your favorite JSON editor, or manipulate\nit programatically.  Here we use the JSON CLI tool  jq .  For simplicity, we\nare editing the batch size for the channel, because it is a single numeric\nfield. However, any edits, including policy and MSP edits may be made here.  \u4f7f\u7528\u4f60\u559c\u6b22\u7684JSON\u7f16\u8f91\u5668\u7f16\u8f91  genesis_block.json  \u6587\u4ef6\uff0c\u6216\u4f7f\u7528\u7a0b\u5e8f\u7f16\u8f91\u3002 \u8fd9\u91cc\u9700\u8981\u4f7f\u7528JSON \u00a0\u5de5\u5177 \u00a0 jq  .\n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u8fd9\u91cc\u7f16\u8f91\u901a\u9053\u7684\u533a\u5757\u5927\u5c0f\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u6570\u5b57\u5b57\u6bb5\u3002\n\u7136\u800c\uff0c\u4efb\u4f55\u4fee\u6539\uff0c\u5305\u62ec\u7b56\u7565\u548cMSP\u90fd\u662f\u53ef\u4ee5\u505a\u7684\u3002  First, let s establish an environment variable to hold the string that defines\nthe path to a property in the json:  \u9996\u5148\uff0c\u5efa\u7acb\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\u6765\u5b58\u50a8\u53d8\u91cf\u7684\u8def\u5f84  .. code:: bash  export MAXBATCHSIZEPATH= .data.data[0].payload.data.config.channel_group.groups.Orderer.values.BatchSize.value.max_message_count  Next, let s display the value of that property:  \u7136\u540e\uff0c\u663e\u793a\u53d8\u91cf\u7684\u503c  .. code:: bash  jq  $MAXBATCHSIZEPATH  genesis_block.json\n  10  Now, let s set the new batch size, and display the new value:  \u73b0\u5728\uff0c\u8bbe\u7f6e\u65b0\u7684\u533a\u5757\u5927\u5c0f\uff0c\u5e76\u4e14\u663e\u793a\u65b0\u503c\uff1a  jq  MAXBATCHSIZEPATH = 20\" genesis_block.json  > updated_genesis_block.json\n  jq \" MAXBATCHSIZEPATH  updated_genesis_block.json\n  20  The genesis block is now ready to be re-encoded into the native proto form to be\nused for bootstrapping:  \u521d\u59cb\u533a\u5757\u73b0\u5728\u5df2\u7ecf\u53ef\u4ee5\u88ab\u91cd\u65b0\u7f16\u7801\u4e3a\u53ef\u7528\u4e8e\u5f15\u5bfc\u542f\u52a8\u7684\u539f\u578b\u683c\u5f0f\uff1a  .. code:: bash  curl -X POST  data-binary @updated_genesis_block.json http://127.0.0.1:7059/protolator/encode/common.Block   updated_genesis_block.pb  The  updated_genesis_block.pb  file may now be used as the genesis block for\nbootstrapping an ordering system channel.  \u73b0\u5728\uff0c  updated_genesis_block.pb  \u6587\u4ef6\u53ef\u4ee5\u4f5c\u4e3a\u521d\u59cb\u533a\u5757\u6765\u5f15\u5bfc\u901a\u9053\u542f\u52a8\u4e86\u3002", 
            "title": "\u5f15\u5bfc\u5b9e\u4f8b\uff08Bootstraping example\uff09"
        }, 
        {
            "location": "/configtxlator_zh/#reconfiguration-example", 
            "text": "In another terminal window, start the orderer using the default options,\nincluding the provisional bootstrapper which will create a  testchainid \nordering system channel.  \u6253\u5f00\u53e6\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\uff0c\u4f7f\u7528\u9ed8\u8ba4\u9009\u9879\u542f\u52a8orderer\uff0c\n\u5305\u62ec\u4e34\u65f6\u7684\u5f15\u5bfc\u7a0b\u5e8f\uff0c\u5c06\u4f1a\u521b\u5efa\u4e00\u4e2a\u540d\u79f0\u4e3a  testchainid  \u7684\u6392\u5e8f\u901a\u9053\u3002  .. code:: bash  ORDERER_GENERAL_LOGLEVEL=debug orderer  Reconfiguring a channel can be performed in a very similar way to modifying a\ngenesis config.  \u91cd\u914d\u7f6e\u4e00\u4e2a\u901a\u9053\u4e0e\u4fee\u6539\u521d\u59cb\u914d\u7f6e\u7c7b\u4f3c\u3002  First, fetch the config_block proto:  \u9996\u5148\uff0c\u83b7\u53d6\u914d\u7f6e\u533a\u5757\u539f\u578b\uff1a  .. code:: bash  $ peer channel fetch config config_block.pb -o 127.0.0.1:7050 -c testchainid\n  2017-05-31 15:11:37.617 EDT [msp] getMspConfig -  INFO 001 intermediate certs folder not found at [/home/yellickj/go/src/github.com/hyperledger/fabric/sampleconfig/msp/intermediatecerts]. Skipping.: [stat /home/yellickj/go/src/github.com/hyperledger/fabric/sampleconfig/msp/intermediatecerts: no such file or directory]\n  2017-05-31 15:11:37.617 EDT [msp] getMspConfig -  INFO 002 crls folder not found at [/home/yellickj/go/src/github.com/hyperledger/fabric/sampleconfig/msp/intermediatecerts]. Skipping.: [stat /home/yellickj/go/src/github.com/hyperledger/fabric/sampleconfig/msp/crls: no such file or directory]\n  Received block:  1\n  Received block:  1\n  2017-05-31 15:11:37.635 EDT [main] main -  INFO 003 Exiting.....  Next, send the config block to the  configtxlator  service for decoding:  \u7136\u540e\uff0c\u53d1\u9001\u914d\u7f6e\u533a\u5757\u5230  configtxlator  \u670d\u52a1\u8fdb\u884c\u89e3\u6790\uff1a  .. code:: bash  curl -X POST  data-binary @config_block.pb http://127.0.0.1:7059/protolator/decode/common.Block   config_block.json  Extract the config section from the block:  \u4ece\u533a\u5757\u4e2d\u63d0\u53d6\u914d\u7f6e\u533a\u57df  .. code:: bash  jq .data.data[0].payload.data.config config_block.json   config.json  Edit the config, saving it as a new  updated_config.json .  Here, we set the\nbatch size to 30.  \u7f16\u8f91\u914d\u7f6e\uff0c\u5c06\u7f16\u8f91\u540e\u7684\u5185\u5bb9\u5b58\u653e\u5728  updated_config.json  \u3002\u8fd9\u91cc\u6211\u4eec\u8bbe\u8ba1\u533a\u5757\u5927\u5c0f\u4e3a30.  .. code:: bash  jq  .channel_group.groups.Orderer.values.BatchSize.value.max_message_count = 30  config.json    updated_config.json  Re-encode both the original config, and the updated config into proto:  \u91cd\u65b0\u5c06\u539f\u914d\u7f6e\u4e0e\u65b0\u914d\u7f6e\u8fdb\u884c\u7f16\u7801\uff1a  .. code:: bash  curl -X POST  data-binary @config.json http://127.0.0.1:7059/protolator/encode/common.Config   config.pb  .. code:: bash  curl -X POST  data-binary @updated_config.json http://127.0.0.1:7059/protolator/encode/common.Config   updated_config.pb  Now, with both configs properly encoded, send them to the  configtxlator \nservice to compute the config update which transitions between the two.  \u73b0\u5728\uff0c\u5c06\u7f16\u7801\u540e\u7684\u6587\u4ef6\u53d1\u9001\u5230  configtxlator  \u670d\u52a1\u8fdb\u884c\u8ba1\u7b97\u6bd4\u5bf9\u4e24\u4e2a\u7684\u5dee\u5f02\u3002  .. code:: bash  curl -X POST -F original=@config.pb -F updated=@updated_config.pb http://127.0.0.1:7059/configtxlator/compute/update-from-configs -F channel=testchainid   config_update.pb  At this point, the computed config update is now prepared. Traditionally,\nan SDK would be used to sign and wrap this message. However, in the interest of\nusing only the peer cli, the  configtxlator  can also be used for this task.  \u5230\u6b64\uff0c\u8ba1\u7b97\u51fa\u7684\u914d\u7f6e\u66f4\u65b0\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\u3002\u4e00\u822c\uff0cSDK\u4f1a\u5bf9\u8be5\u6d88\u606f\u8fdb\u884c\u7b7e\u540d\u6253\u5305\u3002\n\u7136\u800c\uff0c\u4e3a\u4e86\u90a3\u4e9b\u53ea\u4f7f\u7528\u8282\u70b9\u547d\u4ee4\uff08peer cli\uff09\u7684\u60c5\u51b5\uff0c  configtxlator  \u5de5\u5177\u4e5f\u80fd\u8fdb\u884c\u8fd9\u4e2a\u5de5\u4f5c\u3002  First, we decode the ConfigUpdate so that we may work with it as text:  \u9996\u5148\uff0c\u6309\u4e0a\u6587\u6240\u8bf4\u5bf9\u914d\u7f6e\u66f4\u65b0\u8fdb\u884c\u7f16\u7801\uff1a  .. code:: bash  $ curl -X POST  data-binary @config_update.pb http://127.0.0.1:7059/protolator/decode/common.ConfigUpdate   config_update.json  Then, we wrap it in an envelope message:  \u7136\u540e\uff0c\u8bb2\u6d88\u606f\u8fdb\u884c\u6253\u5305\uff1a  .. code:: bash  echo  { payload :{ header :{ channel_header :{ channel_id : testchainid ,  type :2}}, data :{ config_update : $(cat config_update.json) }}}    config_update_as_envelope.json  Next, convert it back into the proto form of a full fledged config\ntransaction:  \u63a5\u7740\uff0c\u5c06\u5b83\u8f6c\u6362\u4e3a\u5b8c\u6574\u914d\u7f6e\u7684\u4ea4\u6613\u7684\u539f\u578b\u7ed3\u6784  .. code:: bash  curl -X POST  data-binary @config_update_as_envelope.json http://127.0.0.1:7059/protolator/encode/common.Envelope   config_update_as_envelope.pb  Finally, submit the config update transaction to ordering to perform a config\nupdate.  \u6700\u540e\uff0c\u5c06\u914d\u7f6e\u66f4\u65b0\u4ea4\u6613\u63d0\u4ea4\u5230\u6392\u5e8f\u670d\u52a1\u3002  .. code:: bash  peer channel update -f config_update_as_envelope.pb -c testchainid -o 127.0.0.1:7050", 
            "title": "\u91cd\u914d\u7f6e\u793a\u4f8b\uff08Reconfiguration example\uff09"
        }, 
        {
            "location": "/configtxlator_zh/#adding-an-organization", 
            "text": "First start the  configtxlator :  \u9996\u5148\u542f\u52a8  configtxlator  \u670d\u52a1\uff1a  .. code:: bash  $ configtxlator start\n  2017-05-31 12:57:22.499 EDT [configtxlator] main -  INFO 001 Serving HTTP requests on port: 7059  Start the orderer using the  SampleDevModeSolo  profile option.  \u4f7f\u7528  SampleDevModeSolo  \u5c5e\u6027\u914d\u7f6e\u6765\u542f\u52a8\u6392\u5e8f\u670d\u52a1\u3002  .. code:: bash  ORDERER_GENERAL_LOGLEVEL=debug ORDERER_GENERAL_GENESISPROFILE=SampleDevModeSolo orderer  The process to add an organization then follows exactly like the batch size\nexample. However, instead of setting the batch size, a new org is defined at\nthe application level. Adding an organization is slightly more involved because\nwe must first create a channel, then modify its membership set.  \u589e\u52a0\u7ec4\u7ec7\u7684\u56fd\u653f\u548c\u4fee\u6539\u533a\u5757\u5927\u5c0f\u7684\u8fc7\u7a0b\u7c7b\u4f3c\u3002\u7136\u800c\uff0c\u4e0d\u540c\u4e8e\u8bbe\u7f6e\u533a\u5757\u5927\u5c0f\uff0c\u4e00\u4e2a\u65b0\u7684\u7ec4\u7ec7\u88ab\u5b9a\u4e49\u5728\u5e94\u7528\u5c42\u3002\n\u589e\u52a0\u4e00\u4e2a\u7ec4\u7ec7\u6d89\u53ca\u66f4\u591a\u5185\u5bb9\u56e0\u4e3a\u9700\u8981\u5148\u521b\u5efa\u901a\u9053\uff0c\u7136\u540e\u4fee\u6539\u5b83\u7684\u6210\u5458\u96c6\u3002  .. Licensed under Creative Commons Attribution 4.0 International License\n   https://creativecommons.org/licenses/by/4.0/", 
            "title": "\u589e\u52a0\u7ec4\u7ec7\uff08Adding an organization\uff09"
        }, 
        {
            "location": "/endorsement-policies_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nLinsheng Yu\n\n\n\n\n\n\n\n\n\n\nEndorsement policies are used to instruct a peer on how to decide whether a transaction is properly endorsed. When a peer receives a transaction, it invokes the VSCC (Validation System Chaincode) associated with the transaction\u2019s Chaincode as part of the transaction validation flow to determine the validity of the transaction. Recall that a transaction contains one or more endorsement from as many endorsing peers. VSCC is tasked to make the following determinations: \n\n\n\n\nall endorsements are valid (i.e. they are valid signatures from valid certificates over the expected message) \n\n\nthere is an appropriate number of endorsements \n\n\nendorsements come from the expected source(s)\n\n\n\n\n\u8282\u70b9\u901a\u8fc7\u80cc\u4e66\u7b56\u7565\u6765\u786e\u5b9a\u4e00\u4e2a\u4ea4\u6613\u662f\u5426\u88ab\u6b63\u786e\u80cc\u4e66\u3002\u5f53\u4e00\u4e2apeer\u63a5\u6536\u4e00\u4e2a\u4ea4\u6613\u540e\uff0c\u5c31\u4f1a\u8c03\u7528\u4e0e\u8be5\u4ea4\u6613Chaincode\u76f8\u5173\u7684VSCC\uff08Chaincode \u5b9e\u4f8b\u5316\u65f6\u6307\u5b9a\u7684\uff09\u4f5c\u4e3a\u4ea4\u6613\u9a8c\u8bc1\u6d41\u7a0b\u7684\u4e00\u90e8\u5206\uff08\u8fd8\u6709RW\u7248\u672c\u9a8c\u8bc1\uff09\u6765\u786e\u5b9a\u4ea4\u6613\u7684\u6709\u6548\u6027\u3002\u4e3a\u6b64\uff0c\u4e00\u4e2a\u4ea4\u6613\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u6765\u81ea\u80cc\u4e66\u8282\u70b9\u7684\u80cc\u4e66\u3002VSCC\u7684\u80cc\u4e66\u6821\u9a8c\u5305\u62ec\uff1a\n\n\n\n\n\u6240\u6709\u7684\u80cc\u4e66\u662f\u6709\u6548\u7684\uff08\u5373\uff0c\u6709\u6548\u8bc1\u4e66\u505a\u7684\u6709\u6548\u7b7e\u540d\uff09\n\n\n\u6070\u5f53\u7684\uff08\u6ee1\u8db3\u8981\u6c42\u7684\uff09\u80cc\u4e66\u6570\u91cf\n\n\n\u80cc\u4e66\u6765\u81ea\u9884\u671f\u7684\u80cc\u4e66\u8282\u70b9\n\n\n\n\nEndorsement policies are a way of specifying the second and third points.\n\n\n\u80cc\u4e66\u7b56\u7565\u5c31\u662f\u7528\u6765\u5b9a\u4e49\u4e0a\u8fb9\u7684\u7b2c\u4e8c\u548c\u7b2c\u4e09\u70b9\u3002\n\n\nEndorsement policy design - \u80cc\u4e66\u7b56\u7565\u8bbe\u8ba1\n\n\nEndorsement policies have two main components: \n\n\n\n\na principal \n\n\na threshold gate\n\n\n\n\nA principal \nP\n identifies the entity whose signature is expected.\n\n\nA threshold gate \nT\n takes two inputs: an integer \nt\n (the threshold) and a list of \nn\n principals or gates; this gate essentially captures the expectation that out of those \nn\n principals or gates, \nt\n are requested to be satisfied.\n\n\n\u80cc\u4e66\u7b56\u7565\u6709\u4e24\u4e2a\u4e3b\u8981\u7ec4\u6210\u90e8\u5206\uff1a\n\n\n\n\n\u4e3b\u4f53\uff08principal\uff09\uff1a\nP\n \u5b9a\u4e49\u4e86\u671f\u671b\u7684\u7b7e\u540d\u6765\u6e90\u5b9e\u4f53\n\n\n\u95e8\u9600\u9608\u503c\uff08threshold gate\uff09\uff1a\nT\n \u6709\u4e24\u4e2a\u53c2\u6570\uff1a\u6574\u6570\nt\n\uff08\u9608\u503c\uff09\u548c\nn\n\u4e2a\u4e3b\u4f53\uff0c\u8868\u793a\u4ece\u8fd9\nn\n\u4e2a\u4e3b\u4f53\u4e2d\u83b7\u53d6\nt\n\u4e2a\u7b7e\u540d\n\n\n\n\nFor example: - \nT(2, 'A', 'B', 'C')\n requests a signature from any 2 principals out of \nA\n, \nB\n or \nC\n; - \nT(1, 'A', T(2, 'B', 'C'))\n requests either one signature from principal \nA\n or 1 signature from \nB\n and \nC\n each.\n\n\n\u4f8b\u5982\uff1a\n\n\n\n\nT(2, 'A', 'B', 'C')\n\u8868\u793a\u9700\u8981\nA\n\u3001\nB\n\u3001\nC\n\u4e2d\u4efb\u610f2\u4e2a\u4e3b\u4f53\u7684\u7b7e\u540d\u80cc\u4e66\n\n\nT(1, 'A', T(2, 'B', 'C'))\n\u8868\u793a\u9700\u8981\u6765\u81ea\u4e3b\u4f53\nA\n\u7684\u7b7e\u540d\u6216\u8005\u6765\u81ea\nB\n\u548c\nC\n\u4e24\u8005\u7684\u7b7e\u540d\u80cc\u4e66\n\n\n\n\nEndorsement policy syntax in the CLI - CLI\u4e2d\u80cc\u4e66\u7b56\u7565\u8bed\u6cd5\n\n\nIn the CLI, a simple language is used to express policies in terms of boolean expressions over principals.\n\n\n\u5728CLI\u4e2d\uff0c\u7528\u4e00\u79cd\u7b80\u5355\u7684\u5e03\u5c14\u8868\u8fbe\u5f0f\u6765\u8868\u793a\u80cc\u4e66\u7b56\u7565\u3002\n\n\nA principal is described in terms of the MSP that is tasked to validate the identity of the signer and of the role that the signer has within that MSP. Currently, two roles are supported: \nmember\n and \nadmin\n. Principals are described as \nMSP\n.\nROLE\n, where \nMSP\n is the MSP ID that is required, and \nROLE\n is either one of the two strings \nmember\n and \nadmin\n. Examples of valid principals are \n'Org0.admin'\n (any administrator of the \nOrg0\n MSP) or \n'Org1.member'\n (any member of the \nOrg1\n MSP).\n\n\nFabric\u4f7f\u7528MSP\u6765\u63cf\u8ff0\u4e3b\u4f53\uff0cMSP\u7528\u4e8e\u9a8c\u8bc1\u7b7e\u540d\u8005\u7684\u8eab\u4efd\u548c\u7b7e\u540d\u8005\u5728MSP\u4e2d\u7684\u89d2\u8272/\u6743\u9650\u3002\u76ee\u524d\u652f\u6301\u4e24\u79cd\u89d2\u8272\uff1a\nmember\n\u548c\nadmin\n\u3002\u4e3b\u4f53\u7684\u63cf\u8ff0\u5f62\u5f0f\u662f\nMSP.ROLE\n\uff0c\u5176\u4e2d\nMSP\n\u662fMSP ID\uff0c\nROLE\n\u662f\nmember\n\u6216\nadmin\n\u3002\u6bd4\u5982\u4e00\u4e2a\u6709\u6548\u7684\u4e3b\u4f53\u53ef\u8868\u793a\u4e3a\n'Org0.admin'\n\uff08MSP\nOrg0\n\u7684\u7ba1\u7406\u5458\uff09\u6216\n'Org1.member'\n\uff08MSP\nOrg1\n\u7684\u6210\u5458\uff09\u3002\n\n\nThe syntax of the language is:\n\n\nCLI\u8bed\u6cd5\u662f\uff1a\n\n\nEXPR(E[, E...])\n\n\nwhere \nEXPR\n is either \nAND\n or \nOR\n, representing the two boolean expressions and \nE\n is either a principal (with the syntax described above) or another nested call to \nEXPR\n.\n\n\n\u5176\u4e2d\nEXPR\n\u662f\nAND\n\u6216\nOR\n\uff0c\u8868\u793a\u5e03\u5c14\u8868\u8fbe\u5f0f\uff1b\nE\n\u662f\u4e0a\u9762\u8bed\u6cd5\u6240\u63cf\u8ff0\u7684\u4e3b\u4f53\u6216\u8005\u662f\u53e6\u4e00\u4e2a\u5d4c\u5957\u8fdb\u53bb\u7684\nEXPR\n\u3002\n\n\nFor example: \n\n\n\n\nAND('Org1.member', 'Org2.member', 'Org3.member')\n requests 1 signature from each of the three principals \n\n\nOR('Org1.member', 'Org2.member')\n requests 1 signature from either one of the two principals \n\n\nOR('Org1.member', AND('Org2.member', 'Org3.member'))\n requests either one signature from a member of the \nOrg1\n MSP or 1 signature from a member of the \nOrg2\n MSP and 1 signature from a member of the \nOrg3\n MSP.\n\n\n\n\n\u4f8b\u5982\uff1a\n\n\n\n\nAND('Org1.member', 'Org2.member', 'Org3.member')\n\u8868\u793a\u9700\u8981\u4e09\u4e2a\u4e3b\u4f53\u5171\u540c\u7b7e\u540d\u80cc\u4e66\n\n\nOR('Org1.member', 'Org2.member')\n\u8868\u793a\u9700\u8981\u4e24\u4e2a\u4e3b\u4f53\u4e4b\u4e00\u7684\u7b7e\u540d\u80cc\u4e66\n\n\nOR('Org1.member', AND('Org2.member', 'Org3.member'))\n\u8868\u793a\u9700\u8981\nOrg1\n\u7684\u7b7e\u540d\u80cc\u4e66\u6216\u8005\nOrg2\n\u548c\nOrg3\n\u5171\u540c\u7684\u7b7e\u540d\u80cc\u4e66\n\n\n\n\nSpecifying endorsement policies for a chaincode - \u4e3achaincode\u6307\u5b9a\u80cc\u4e66\u7b56\u7565\n\n\nUsing this language, a chaincode deployer can request that the endorsements for a chaincode be validated against the specified policy. NOTE - the default policy requires one signature from a member of the \nDEFAULT\n MSP). This is used if a policy is not specified in the CLI.\n\n\n\u90e8\u7f72Chaincode\u65f6\u53ef\u4ee5\u6307\u5b9a\u80cc\u4e66\u7b56\u7565\u3002\u6ce8\u610f\uff1a\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u80cc\u4e66\u7b56\u7565\u5c31\u4f7f\u7528\u9ed8\u8ba4\u7684\u80cc\u4e66\u7b56\u7565\uff0c\u5373\u9700\u8981MSP\nDEFAULT\n\u7684\u4e00\u4e2a\u6210\u5458\u7684\u7b7e\u540d\u80cc\u4e66\u3002\n\n\nThe policy can be specified at deploy time using the \n-P\n switch, followed by the policy.For example:\n\n\n\u90e8\u7f72Chaincode\u65f6\u7528\n-P\n\u6307\u5b9a\u80cc\u4e66\u7b56\u7565\uff0c\u4f8b\u5982\uff1a\n\n\npeer chaincode instantiate -C testchainid -n mycc -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -c '{\"Args\":[\"init\",\"a\",\"100\",\"b\",\"200\"]}' -P \"AND('Org1.member', 'Org2.member')\"\n\n\n\nThis command deploys chaincode \nmycc\n on chain \ntestchainid\n with the policy \nAND('Org1.member', 'Org2.member')\n.\n\n\n\u6b64\u547d\u4ee4\u4f1a\u4ee5\u80cc\u4e66\u7b56\u7565\nAND('Org1.member', 'Org2.member')\n\u5728\u94fe\ntestchainid\n\u4e0a\u90e8\u7f72chaincode\nmycc\n\u3002\n\n\nFuture enhancements - \u672a\u6765\u8ba1\u5212\n\n\nIn this section we list future enhancements for endorsement policies: \n\n\n\n\nalongside the existing way of identifying principals by their relationship with an MSP, we plan to identify principals in terms of the \nOrganization Unit (OU)\n expected in their certificates; this is useful to express policies where we request signatures from any identity displaying a valid certificate with an OU matching the one requested in the definition of the principal. \n\n\ninstead of the syntax \nAND(., .)\n we plan to move to a more intuitive syntax \n. AND .\n\n\nwe plan to expose generalized threshold gates in the language as well alongside \nAND\n (which is the special \nn\n-out-of-\nn\n gate) and OR (which is the special \n1\n-out-of-\nn\n gate)\n\n\n\n\n\u672c\u8282\u5217\u4e3e\u4e86\u80cc\u4e66\u7b56\u7565\u7684\u672a\u6765\u8ba1\u5212\u589e\u5f3a\u529f\u80fd\uff1a\n\n\n\n\n\u9664\u4e86\u901a\u8fc7\u4e0eMSP\u7684\u5173\u7cfb\u786e\u5b9aprincipals\u8eab\u4efd\u7684\u73b0\u6709\u65b9\u5f0f\u5916\uff0c\u6211\u4eec\u8ba1\u5212\u6839\u636e\u8bc1\u4e66\u4e2d\u7684\u7ec4\u7ec7\u5355\u4f4d(OU)\u6765\u6807\u8bc6principals\uff1b\u8fd9\u6837\u5c31\u53ef\u4ee5\u8bf7\u6c42\u4e0e\u80cc\u4e66\u7b56\u7565\u4e2d\u5b9a\u4e49\u7684principal\u7684OU\u76f8\u5339\u914d\uff08\u540c\u4e00\u7ec4\u7ec7\u5355\u4f4d\u5185\uff09\u7684\u4efb\u610f\u5b9e\u4f53\u7684\u7b7e\u540d\u4f5c\u4e3a\u80cc\u4e66\n\n\n\u4ee5\u66f4\u76f4\u89c2\u7684\u8bed\u6cd5\n. AND .\n\u53d6\u4ee3\u8bed\u6cd5\nAND(., .)\n\n\n\u8fd8\u8ba1\u5212\u5c06\u9608\u503c\u653e\u5230\nAND\n\uff08\nn\n-out-of-\nn\n\uff09\u548c \nOR\n (\n1\n-out-of-\nn\n)\u7684\u8bed\u6cd5\u4e2d", 
            "title": "\u80cc\u4e66\u7b56\u7565"
        }, 
        {
            "location": "/endorsement-policies_zh/#endorsement-policy-design-", 
            "text": "Endorsement policies have two main components:    a principal   a threshold gate   A principal  P  identifies the entity whose signature is expected.  A threshold gate  T  takes two inputs: an integer  t  (the threshold) and a list of  n  principals or gates; this gate essentially captures the expectation that out of those  n  principals or gates,  t  are requested to be satisfied.  \u80cc\u4e66\u7b56\u7565\u6709\u4e24\u4e2a\u4e3b\u8981\u7ec4\u6210\u90e8\u5206\uff1a   \u4e3b\u4f53\uff08principal\uff09\uff1a P  \u5b9a\u4e49\u4e86\u671f\u671b\u7684\u7b7e\u540d\u6765\u6e90\u5b9e\u4f53  \u95e8\u9600\u9608\u503c\uff08threshold gate\uff09\uff1a T  \u6709\u4e24\u4e2a\u53c2\u6570\uff1a\u6574\u6570 t \uff08\u9608\u503c\uff09\u548c n \u4e2a\u4e3b\u4f53\uff0c\u8868\u793a\u4ece\u8fd9 n \u4e2a\u4e3b\u4f53\u4e2d\u83b7\u53d6 t \u4e2a\u7b7e\u540d   For example: -  T(2, 'A', 'B', 'C')  requests a signature from any 2 principals out of  A ,  B  or  C ; -  T(1, 'A', T(2, 'B', 'C'))  requests either one signature from principal  A  or 1 signature from  B  and  C  each.  \u4f8b\u5982\uff1a   T(2, 'A', 'B', 'C') \u8868\u793a\u9700\u8981 A \u3001 B \u3001 C \u4e2d\u4efb\u610f2\u4e2a\u4e3b\u4f53\u7684\u7b7e\u540d\u80cc\u4e66  T(1, 'A', T(2, 'B', 'C')) \u8868\u793a\u9700\u8981\u6765\u81ea\u4e3b\u4f53 A \u7684\u7b7e\u540d\u6216\u8005\u6765\u81ea B \u548c C \u4e24\u8005\u7684\u7b7e\u540d\u80cc\u4e66", 
            "title": "Endorsement policy design - \u80cc\u4e66\u7b56\u7565\u8bbe\u8ba1"
        }, 
        {
            "location": "/endorsement-policies_zh/#endorsement-policy-syntax-in-the-cli-cli", 
            "text": "In the CLI, a simple language is used to express policies in terms of boolean expressions over principals.  \u5728CLI\u4e2d\uff0c\u7528\u4e00\u79cd\u7b80\u5355\u7684\u5e03\u5c14\u8868\u8fbe\u5f0f\u6765\u8868\u793a\u80cc\u4e66\u7b56\u7565\u3002  A principal is described in terms of the MSP that is tasked to validate the identity of the signer and of the role that the signer has within that MSP. Currently, two roles are supported:  member  and  admin . Principals are described as  MSP . ROLE , where  MSP  is the MSP ID that is required, and  ROLE  is either one of the two strings  member  and  admin . Examples of valid principals are  'Org0.admin'  (any administrator of the  Org0  MSP) or  'Org1.member'  (any member of the  Org1  MSP).  Fabric\u4f7f\u7528MSP\u6765\u63cf\u8ff0\u4e3b\u4f53\uff0cMSP\u7528\u4e8e\u9a8c\u8bc1\u7b7e\u540d\u8005\u7684\u8eab\u4efd\u548c\u7b7e\u540d\u8005\u5728MSP\u4e2d\u7684\u89d2\u8272/\u6743\u9650\u3002\u76ee\u524d\u652f\u6301\u4e24\u79cd\u89d2\u8272\uff1a member \u548c admin \u3002\u4e3b\u4f53\u7684\u63cf\u8ff0\u5f62\u5f0f\u662f MSP.ROLE \uff0c\u5176\u4e2d MSP \u662fMSP ID\uff0c ROLE \u662f member \u6216 admin \u3002\u6bd4\u5982\u4e00\u4e2a\u6709\u6548\u7684\u4e3b\u4f53\u53ef\u8868\u793a\u4e3a 'Org0.admin' \uff08MSP Org0 \u7684\u7ba1\u7406\u5458\uff09\u6216 'Org1.member' \uff08MSP Org1 \u7684\u6210\u5458\uff09\u3002  The syntax of the language is:  CLI\u8bed\u6cd5\u662f\uff1a  EXPR(E[, E...])  where  EXPR  is either  AND  or  OR , representing the two boolean expressions and  E  is either a principal (with the syntax described above) or another nested call to  EXPR .  \u5176\u4e2d EXPR \u662f AND \u6216 OR \uff0c\u8868\u793a\u5e03\u5c14\u8868\u8fbe\u5f0f\uff1b E \u662f\u4e0a\u9762\u8bed\u6cd5\u6240\u63cf\u8ff0\u7684\u4e3b\u4f53\u6216\u8005\u662f\u53e6\u4e00\u4e2a\u5d4c\u5957\u8fdb\u53bb\u7684 EXPR \u3002  For example:    AND('Org1.member', 'Org2.member', 'Org3.member')  requests 1 signature from each of the three principals   OR('Org1.member', 'Org2.member')  requests 1 signature from either one of the two principals   OR('Org1.member', AND('Org2.member', 'Org3.member'))  requests either one signature from a member of the  Org1  MSP or 1 signature from a member of the  Org2  MSP and 1 signature from a member of the  Org3  MSP.   \u4f8b\u5982\uff1a   AND('Org1.member', 'Org2.member', 'Org3.member') \u8868\u793a\u9700\u8981\u4e09\u4e2a\u4e3b\u4f53\u5171\u540c\u7b7e\u540d\u80cc\u4e66  OR('Org1.member', 'Org2.member') \u8868\u793a\u9700\u8981\u4e24\u4e2a\u4e3b\u4f53\u4e4b\u4e00\u7684\u7b7e\u540d\u80cc\u4e66  OR('Org1.member', AND('Org2.member', 'Org3.member')) \u8868\u793a\u9700\u8981 Org1 \u7684\u7b7e\u540d\u80cc\u4e66\u6216\u8005 Org2 \u548c Org3 \u5171\u540c\u7684\u7b7e\u540d\u80cc\u4e66", 
            "title": "Endorsement policy syntax in the CLI - CLI\u4e2d\u80cc\u4e66\u7b56\u7565\u8bed\u6cd5"
        }, 
        {
            "location": "/endorsement-policies_zh/#specifying-endorsement-policies-for-a-chaincode-chaincode", 
            "text": "Using this language, a chaincode deployer can request that the endorsements for a chaincode be validated against the specified policy. NOTE - the default policy requires one signature from a member of the  DEFAULT  MSP). This is used if a policy is not specified in the CLI.  \u90e8\u7f72Chaincode\u65f6\u53ef\u4ee5\u6307\u5b9a\u80cc\u4e66\u7b56\u7565\u3002\u6ce8\u610f\uff1a\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u80cc\u4e66\u7b56\u7565\u5c31\u4f7f\u7528\u9ed8\u8ba4\u7684\u80cc\u4e66\u7b56\u7565\uff0c\u5373\u9700\u8981MSP DEFAULT \u7684\u4e00\u4e2a\u6210\u5458\u7684\u7b7e\u540d\u80cc\u4e66\u3002  The policy can be specified at deploy time using the  -P  switch, followed by the policy.For example:  \u90e8\u7f72Chaincode\u65f6\u7528 -P \u6307\u5b9a\u80cc\u4e66\u7b56\u7565\uff0c\u4f8b\u5982\uff1a  peer chaincode instantiate -C testchainid -n mycc -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -c '{\"Args\":[\"init\",\"a\",\"100\",\"b\",\"200\"]}' -P \"AND('Org1.member', 'Org2.member')\"  This command deploys chaincode  mycc  on chain  testchainid  with the policy  AND('Org1.member', 'Org2.member') .  \u6b64\u547d\u4ee4\u4f1a\u4ee5\u80cc\u4e66\u7b56\u7565 AND('Org1.member', 'Org2.member') \u5728\u94fe testchainid \u4e0a\u90e8\u7f72chaincode mycc \u3002", 
            "title": "Specifying endorsement policies for a chaincode - \u4e3achaincode\u6307\u5b9a\u80cc\u4e66\u7b56\u7565"
        }, 
        {
            "location": "/endorsement-policies_zh/#future-enhancements-", 
            "text": "In this section we list future enhancements for endorsement policies:    alongside the existing way of identifying principals by their relationship with an MSP, we plan to identify principals in terms of the  Organization Unit (OU)  expected in their certificates; this is useful to express policies where we request signatures from any identity displaying a valid certificate with an OU matching the one requested in the definition of the principal.   instead of the syntax  AND(., .)  we plan to move to a more intuitive syntax  . AND .  we plan to expose generalized threshold gates in the language as well alongside  AND  (which is the special  n -out-of- n  gate) and OR (which is the special  1 -out-of- n  gate)   \u672c\u8282\u5217\u4e3e\u4e86\u80cc\u4e66\u7b56\u7565\u7684\u672a\u6765\u8ba1\u5212\u589e\u5f3a\u529f\u80fd\uff1a   \u9664\u4e86\u901a\u8fc7\u4e0eMSP\u7684\u5173\u7cfb\u786e\u5b9aprincipals\u8eab\u4efd\u7684\u73b0\u6709\u65b9\u5f0f\u5916\uff0c\u6211\u4eec\u8ba1\u5212\u6839\u636e\u8bc1\u4e66\u4e2d\u7684\u7ec4\u7ec7\u5355\u4f4d(OU)\u6765\u6807\u8bc6principals\uff1b\u8fd9\u6837\u5c31\u53ef\u4ee5\u8bf7\u6c42\u4e0e\u80cc\u4e66\u7b56\u7565\u4e2d\u5b9a\u4e49\u7684principal\u7684OU\u76f8\u5339\u914d\uff08\u540c\u4e00\u7ec4\u7ec7\u5355\u4f4d\u5185\uff09\u7684\u4efb\u610f\u5b9e\u4f53\u7684\u7b7e\u540d\u4f5c\u4e3a\u80cc\u4e66  \u4ee5\u66f4\u76f4\u89c2\u7684\u8bed\u6cd5 . AND . \u53d6\u4ee3\u8bed\u6cd5 AND(., .)  \u8fd8\u8ba1\u5212\u5c06\u9608\u503c\u653e\u5230 AND \uff08 n -out-of- n \uff09\u548c  OR  ( 1 -out-of- n )\u7684\u8bed\u6cd5\u4e2d", 
            "title": "Future enhancements - \u672a\u6765\u8ba1\u5212"
        }, 
        {
            "location": "/error-handling_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nZhangjiong Xuan\n\n\n\n\n\n\n\n\n\n\n1.1. \u603b\u4f53\u6982\u89c8\n\n\nThe Hyperledger Fabric error handling framework can be found in the source repository under common/errors. It defines a new type of error, CallStackError, to use in place of the standard error type provided by Go.\n\n\nFabric\u7684\u9519\u8bef\u5904\u7406\u6846\u67b6\u53ef\u4ee5\u5728Fabric\u4ee3\u7801\u4ed3\u5e93\u7684common/errors\u76ee\u5f55\u4e0b\u627e\u5230\u3002\u5b83\u5b9a\u4e49\u4e86\u4e00\u79cd\u65b0\u7684\u9519\u8bef\u7c7b\u578b\uff0c\nCallStackError\n,\u7528\u4e8e\u53d6\u4ee3\nGo\n\u6807\u51c6\u5e93\u4e2d\u5b9e\u73b0\u7684\u9519\u8bef\u7c7b\u578b\u3002\n\n\nA CallStackError consists of the following:\n\n\n\n\nComponent code - a name for the general area of the code that is generating the error. Component codes should consist of three uppercase letters. Numerics and special characters are not allowed. A set of component codes is defined in common/errors/codes.go\n\n\nReason code - a short code to help identify the reason the error occurred. Reason codes should consist of three numeric values. Letters and special characters are not allowed. A set of reason codes is defined in common/error/codes.go\n\n\nError code - the component code and reason code separated by a colon, e.g. MSP:404\n\n\nError message - the text that describes the error. This is the same as the input provided to fmt.Errorf() and Errors.New(). If an error has been wrapped into the current error, its message will be appended.\n\n\nCallstack - the callstack at the time the error is created. If an error has been wrapped into the current error, its error message and callstack will be appended to retain the context of the wrapped error.\n\n\n\n\n\u4e00\u4e2a\nCallStackError\n\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n\n\n\nComponent code\n - \u4e00\u4e2a\u751f\u6210\u9519\u8bef\u4fe1\u606f\u7684\u9519\u8bef\u7801\u7684\u901a\u7528\u533a\u57df\u7684\u7ec4\u4ef6\u540d\u79f0\u3002Component codes\u5e94\u8be5\u75313\u4e2a\u5927\u5199\u5b57\u6bcd\u7ec4\u6210\u3002\u4e0d\u5141\u8bb8\u51fa\u73b0\u6570\u5b57\u548c\u7279\u6b8a\u5b57\u7b26\u3002\u4e00\u7cfb\u5217component codes\u88ab\u5b9a\u4e49\u5728\ncommon/errors/codes.go\n\u6587\u4ef6\u4e2d\u3002\n\n\nReason code\n - \u4e00\u4e2a\u7528\u4e8e\u5728\u9519\u8bef\u51fa\u73b0\u65f6\u5b9a\u4f4d\u9519\u8bef\u539f\u56e0\u7684\u8f83\u77ed\u7684\u9519\u8bef\u7801\u3002Reason codes\u5e94\u8be5\u75313\u4f4d\u6570\u5b57\u7ec4\u6210\u3002\u4e0d\u5141\u8bb8\u51fa\u73b0\u5b57\u6bcd\u548c\u7279\u6b8a\u5b57\u7b26\u3002\u4e00\u7cfb\u5217reason codes\u88ab\u5b9a\u4e49\u5728\ncommon/errors/codes.go\n\u6587\u4ef6\u4e2d\u3002\n\n\nError code\n - \u7531\u5192\u53f7\u5206\u9694\u7684component code\u548creason code\u7ec4\u6210\u7684\u9519\u8bef\u7801\uff0c\u4f8b\u5982\nMSP\uff1a404\n\u3002\n\n\nError message\n - \u63cf\u8ff0\u9519\u8bef\u4fe1\u606f\u7684\u6587\u672c\u3002\u8fd9\u4e0e\u63d0\u4f9b\u7684\nfmt.Errorf()\n\u548c\nErrors.New()\n\u7c7b\u4f3c\u3002\u5982\u679c\u4e00\u4e2a\u9519\u8bef\u88ab\u5305\u542b\u5230\u5f53\u524d\u7684\u9519\u8bef\u4e2d\uff0c\u90a3\u4e48\u5b83\u7684\u9519\u8bef\u6d88\u606f\u5c06\u88ab\u9644\u52a0\u3002\n\n\nCallstack\n - \u9519\u8bef\u51fa\u73b0\u65f6\u7684\u8c03\u7528\u5806\u6808\u3002\u5982\u679c\u4e00\u4e2a\u9519\u8bef\u88ab\u5305\u542b\u5728\u5f53\u524d\u7684\u9519\u8bef\u4e2d\uff0c\u90a3\u4e48\u5b83\u7684\u9519\u8bef\u6d88\u606f\u548c\u8c03\u7528\u5806\u6808\u4fe1\u606f\u4f1a\u88ab\u9644\u52a0\u5230\u88ab\u5305\u542b\u7684\u9519\u8bef\u7684\u4e0a\u4e0b\u6587\u4e2d\u3002\n\n\n\n\nThe CallStackError interface exposes the following functions:\n\n\n\n\nError() - returns the error message with callstack appended\n\n\nMessage() - returns the error message (without callstack appended)\n\n\nGetComponentCode() - returns the 3-character component code\n\n\nGetReasonCode() - returns the 3-digit reason code\n\n\nGetErrorCode() - returns the error code, which is \u201ccomponent:reason\u201d\n\n\nGetStack() - returns just the callstack\n\n\nWrapError(error) - wraps the provided error into the CallStackError\n\n\n\n\nCallstack\n\u63a5\u53e3\u66b4\u9732\u4e86\u4ee5\u4e0b\u65b9\u6cd5\uff1a\n\n\n\n\nError()\n - \u8fd4\u56de\u4e00\u4e2a\u5e26\u6709\u8c03\u7528\u5806\u6808\u7684\u9519\u8bef\u6d88\u606f\u3002\n\n\nMessage()\n - \u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u6d88\u606f\u3002\uff08\u4e0d\u5305\u542b\u8c03\u7528\u5806\u6808\u4fe1\u606f\uff09\u3002\n\n\nGetComponentCode()\n - \u8fd4\u56de\u75313\u4e2a\u5b57\u6bcd\u7ec4\u6210\u7684\u7ec4\u4ef6\u4ee3\u7801\u3002\n\n\nGetReasonCode()\n - \u8fd4\u56de\u75313\u4e2a\u6570\u5b57\u7ec4\u6210\u7684\u9519\u8bef\u539f\u56e0\u4ee3\u7801\u3002\n\n\nGetErrorCode()\n - \u8fd4\u56de\u9519\u8bef\u4ee3\u7801\uff0c\u7531\ncomponent:reason\n\u7ec4\u6210\u3002\n\n\nGetStack()\n - \u4ec5\u8fd4\u56de\u8c03\u7528\u5806\u6808\u3002\n\n\nWrapError(error)\n - \u5c06\u63d0\u4f9b\u7684\u9519\u8bef\u5305\u88c5\u8fdb\nCallStackError\n\u3002\n\n\n\n\n1.2. \u4f7f\u7528\u8bf4\u660e\n\n\nThe new error handling framework should be used in place of all calls to fmt.Errorf() or Errors.new(). Using this framework will provide error codes to check against as well as the option to generate a callstack that will be appended to the error message.\n\n\n\u5e94\u8be5\u4f7f\u7528\u65b0\u7684\u9519\u8bef\u5904\u7406\u6846\u67b6\u6765\u66ff\u6362\u6240\u6709\u8c03\u7528\nfmt.Errorf()\n\u6216\u8005\nErrors.new()\n\u7684\u5730\u65b9\u3002\u7528\u65b0\u7684\u9519\u8bef\u5904\u7406\u6846\u67b6\u5c06\u63d0\u4f9b\u9519\u8bef\u4ee3\u7801\u4ee5\u53ca\u5c06\u9644\u52a0\u5230\u9519\u8bef\u6d88\u606f\u7684\u8c03\u7528\u5806\u6808\u4fe1\u606f\u7684\u9009\u9879\u3002\n\n\nUsing the framework is simple and will only require an easy tweak to your code.\n\n\n\u4f7f\u7528\u8fd9\u4e2a\u9519\u8bef\u6846\u67b6\u7b80\u5355\u6613\u7528\uff0c\u53ea\u9700\u8981\u7b80\u5355\u5730\u8c03\u6574\u4f60\u7684\u4ee3\u7801\u3002\n\n\nFirst, you\u2019ll need to import github.com/hyperledger/fabric/common/errors into any file that uses this framework.\n\n\n\u9996\u5148\uff0c\u60a8\u9700\u8981\u5c06\ngithub.com/hyperleger/fabric/common/errors\n\u5bfc\u5165\u5230\u4f7f\u7528\u6b64\u6846\u67b6\u7684\u4efb\u4f55\u6587\u4ef6\u4e2d\u3002\n\n\nLet\u2019s take the following as an example from core/chaincode/chaincode_support.go:\n\n\n\u4ee5\ncore/chaincode/chaincode_support.go\n\u4e3a\u4f8b\uff1a\n\n\nerr = fmt.Errorf(\nError starting container: %s\n, err)\n\n\n\n\nFor this error, we will simply call the constructor for Error and pass a component code, reason code, followed by the error message. At the end, we then call the WrapError() function, passing along the error itself.\n\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u9519\u8bef\uff0c\u6211\u4eec\u5c06\u7b80\u5355\u5730\u8c03\u7528Error\u7684\u6784\u9020\u51fd\u6570\uff0c\u5e76\u4f20\u9012\u4e00\u4e2a\u7ec4\u4ef6\u4ee3\u7801\uff0c\u539f\u56e0\u4ee3\u7801\uff0c\u7136\u540e\u662f\u9519\u8bef\u6d88\u606f\u3002\u6700\u540e\uff0c\u6211\u4eec\u8c03\u7528\nWrapError()\n\u51fd\u6570\uff0c\u4f20\u9012\u9519\u8bef\u672c\u8eab\u3002\n\n\nfmt.Errorf(\nError starting container: %s\n, err)\n\n\n\n\n\u53d8\u6210\n\n\nerrors.ErrorWithCallstack(\nCHA\n, \n505\n, \nError starting container\n).WrapError(err)\n\n\n\n\nYou could also just leave the message as is without any problems:\n\n\n\u60a8\u4e5f\u53ef\u4ee5\u4ec5\u7f16\u5199\u9519\u8bef\u4fe1\u606f\uff0c\u4e5f\u4e0d\u4f1a\u6709\u4efb\u4f55\u95ee\u9898\uff1a\n\n\nerrors.ErrorWithCallstack(\nCHA\n, \n505\n, \nError starting container: %s\n, err)\n\n\n\n\nWith this usage you will be able to format the error message from the previous error into the new error, but will lose the ability to print the callstack (if the wrapped error is a CallStackError).\n\n\n\u5982\u679c\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u60a8\u5c06\u80fd\u591f\u5c06\u4e0a\u4e00\u4e2a\u9519\u8bef\u6d88\u606f\u683c\u5f0f\u5316\u6210\u4e00\u4e2a\u65b0\u7684\u9519\u8bef\uff0c\u4f46\u662f\u5c06\u5931\u53bb\u6253\u5370\u8c03\u7528\u5806\u6808\u7684\u80fd\u529b\uff08\u5982\u679c\u5305\u88c5\u7684\u9519\u8bef\u662fCallStack\uff09\u3002\n\n\nA second example to highlight a scenario that involves formatting directives for parameters other than errors, while still wrapping an error, is as follows:\n\n\n\u53e6\u4e00\u4e2a\u51f8\u663e\u7684\u4f8b\u5b50\u6d89\u53ca\u4e86\u683c\u5f0f\u5316\u9519\u8bef\u4ee5\u5916\u7684\u53c2\u6570\u6307\u4ee4\uff0c\u540c\u65f6\u4ecd\u7136\u5305\u542b\u4e86\u9519\u8bef\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\n\nfmt.Errorf(\nfailed to get deployment payload %s - %s\n, canName, err)\n\n\n\n\n\u53d8\u6210\n\n\nerrors.ErrorWithCallstack(\nCHA\n, \n506\n, \nFailed to get deployment payload %s\n, canName).WrapError(err)\n\n\n\n\n1.3. \u663e\u793a\u9519\u8bef\u6d88\u606f\n\n\nOnce the error has been created using the framework, displaying the error message is as simple as:\n\n\n\u4e00\u65e6\u4f7f\u7528\u6846\u67b6\u521b\u5efa\u5566\u9519\u8bef\uff0c\u663e\u793a\u9519\u8bef\u6d88\u606f\u5c06\u5341\u5206\u7b80\u5355\uff1a\n\n\nlogger.Errorf(err)\n\n\n\n\n\u6216\u8005\n\n\nfmt.Println(err)\n\n\n\n\n\u6216\u8005\n\n\nfmt.Printf(\n%s\\n\n,err)\n\n\n\n\n\u6765\u81ea\npeer/common/common.go\n\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a\n\n\nerrors.ErrorWithCallstack(\nPER\n, \n404\n, \nError trying to connect to local peer\n).WrapError(err)\n\n\n\n\n\u5c06\u663e\u793a\u9519\u8bef\u6d88\u606f\uff1a\n\n\nPER:404 - Error trying to connect to local peer\nCaused by: grpc: timed out when dialing\n\n\n\n\nNote\nThe callstacks have not been displayed for this example for the sake of brevity.\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u4e3a\u4e86\u7b80\u6d01\u8d77\u89c1\uff0c\u672c\u793a\u4f8b\u5c1a\u672a\u5c55\u793a\u8c03\u7528\u5806\u6808\u4fe1\u606f\u3002\n\n\n\n\n\n\n1.4. Hyperledger Fabric\u4e2d\u9519\u8bef\u5904\u7406\u7684\u4e00\u822c\u51c6\u5219\n\n\n\n\nIf it is some sort of best effort thing you are doing, you should log the error and ignore it.\n\n\nIf you are servicing a user request, you should log the error and return it.\n\n\nIf the error comes from elsewhere, you have the choice to wrap the error or not. Typically, it\u2019s best to not wrap the error and simply return it as is. However, for certain cases where a utility function is called, wrapping the error with a new component and reason code can help an end user understand where the error is really occurring without inspecting the callstack.\n\n\n\n\nA panic should be handled within the same layer by throwing an internal error code/start a recovery process and should not be allowed to propagate to other packages.\n\n\n\n\n\n\n\u5982\u679c\u8fd9\u662f\u4f60\u6b63\u5728\u52aa\u529b\u505a\u7684\u67d0\u79cd\u4e8b\u60c5\uff0c\u4f60\u5e94\u8be5\u8bb0\u5f55\u9519\u8bef\u5e76\u5ffd\u7565\u5b83\u3002\n\n\n\n\n\u5982\u679c\u4f60\u6b63\u5728\u4e3a\u7528\u6237\u8bf7\u6c42\u63d0\u4f9b\u670d\u52a1\uff0c\u5219\u5e94\u8be5\u8bb0\u5f55\u9519\u8bef\u5e76\u8fd4\u56de\u3002\n\n\n\u5982\u679c\u9519\u8bef\u6765\u81ea\u5176\u5b83\u5730\u65b9\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5305\u88c5\u9519\u8bef\u3002\u901a\u5e38\uff0c\u6700\u597d\u4e0d\u8981\u5305\u88c5\u9519\u8bef\uff0c\u8ba9\u5b83\u539f\u6837\u8fd4\u56de\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u5de5\u5177\u51fd\u6570\u8c03\u7528\u7684\u67d0\u4e9b\u60c5\u51b5\uff0c\u4f7f\u7528component code\u548creason code\u6765\u5305\u88c5\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u5728\u4e0d\u68c0\u67e5\u8c03\u7528\u5806\u6808\u7684\u60c5\u51b5\u4e0b\u4e86\u89e3\u6b63\u771f\u53d1\u751f\u9519\u8bef\u7684\u4f4d\u7f6e\u3002\n\n\n\u4e00\u4e2apanic \u5e94\u8be5\u5728\u540c\u4e00\u5c42\u901a\u8fc7\u629b\u51fa\u5185\u90e8\u9519\u8bef\u4ee3\u7801/\u542f\u52a8\u4e00\u4e2a\u6062\u590d\u8fdb\u7a0b\u6765\u5904\u7406\uff0c\u800c\u4e14\u4e0d\u5141\u8bb8\u4f20\u64ad\u5230\u5176\u4ed6\u8f6f\u4ef6\u5305\u3002", 
            "title": "\u9519\u8bef\u5904\u7406"
        }, 
        {
            "location": "/error-handling_zh/#11", 
            "text": "The Hyperledger Fabric error handling framework can be found in the source repository under common/errors. It defines a new type of error, CallStackError, to use in place of the standard error type provided by Go.  Fabric\u7684\u9519\u8bef\u5904\u7406\u6846\u67b6\u53ef\u4ee5\u5728Fabric\u4ee3\u7801\u4ed3\u5e93\u7684common/errors\u76ee\u5f55\u4e0b\u627e\u5230\u3002\u5b83\u5b9a\u4e49\u4e86\u4e00\u79cd\u65b0\u7684\u9519\u8bef\u7c7b\u578b\uff0c CallStackError ,\u7528\u4e8e\u53d6\u4ee3 Go \u6807\u51c6\u5e93\u4e2d\u5b9e\u73b0\u7684\u9519\u8bef\u7c7b\u578b\u3002  A CallStackError consists of the following:   Component code - a name for the general area of the code that is generating the error. Component codes should consist of three uppercase letters. Numerics and special characters are not allowed. A set of component codes is defined in common/errors/codes.go  Reason code - a short code to help identify the reason the error occurred. Reason codes should consist of three numeric values. Letters and special characters are not allowed. A set of reason codes is defined in common/error/codes.go  Error code - the component code and reason code separated by a colon, e.g. MSP:404  Error message - the text that describes the error. This is the same as the input provided to fmt.Errorf() and Errors.New(). If an error has been wrapped into the current error, its message will be appended.  Callstack - the callstack at the time the error is created. If an error has been wrapped into the current error, its error message and callstack will be appended to retain the context of the wrapped error.   \u4e00\u4e2a CallStackError \u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a   Component code  - \u4e00\u4e2a\u751f\u6210\u9519\u8bef\u4fe1\u606f\u7684\u9519\u8bef\u7801\u7684\u901a\u7528\u533a\u57df\u7684\u7ec4\u4ef6\u540d\u79f0\u3002Component codes\u5e94\u8be5\u75313\u4e2a\u5927\u5199\u5b57\u6bcd\u7ec4\u6210\u3002\u4e0d\u5141\u8bb8\u51fa\u73b0\u6570\u5b57\u548c\u7279\u6b8a\u5b57\u7b26\u3002\u4e00\u7cfb\u5217component codes\u88ab\u5b9a\u4e49\u5728 common/errors/codes.go \u6587\u4ef6\u4e2d\u3002  Reason code  - \u4e00\u4e2a\u7528\u4e8e\u5728\u9519\u8bef\u51fa\u73b0\u65f6\u5b9a\u4f4d\u9519\u8bef\u539f\u56e0\u7684\u8f83\u77ed\u7684\u9519\u8bef\u7801\u3002Reason codes\u5e94\u8be5\u75313\u4f4d\u6570\u5b57\u7ec4\u6210\u3002\u4e0d\u5141\u8bb8\u51fa\u73b0\u5b57\u6bcd\u548c\u7279\u6b8a\u5b57\u7b26\u3002\u4e00\u7cfb\u5217reason codes\u88ab\u5b9a\u4e49\u5728 common/errors/codes.go \u6587\u4ef6\u4e2d\u3002  Error code  - \u7531\u5192\u53f7\u5206\u9694\u7684component code\u548creason code\u7ec4\u6210\u7684\u9519\u8bef\u7801\uff0c\u4f8b\u5982 MSP\uff1a404 \u3002  Error message  - \u63cf\u8ff0\u9519\u8bef\u4fe1\u606f\u7684\u6587\u672c\u3002\u8fd9\u4e0e\u63d0\u4f9b\u7684 fmt.Errorf() \u548c Errors.New() \u7c7b\u4f3c\u3002\u5982\u679c\u4e00\u4e2a\u9519\u8bef\u88ab\u5305\u542b\u5230\u5f53\u524d\u7684\u9519\u8bef\u4e2d\uff0c\u90a3\u4e48\u5b83\u7684\u9519\u8bef\u6d88\u606f\u5c06\u88ab\u9644\u52a0\u3002  Callstack  - \u9519\u8bef\u51fa\u73b0\u65f6\u7684\u8c03\u7528\u5806\u6808\u3002\u5982\u679c\u4e00\u4e2a\u9519\u8bef\u88ab\u5305\u542b\u5728\u5f53\u524d\u7684\u9519\u8bef\u4e2d\uff0c\u90a3\u4e48\u5b83\u7684\u9519\u8bef\u6d88\u606f\u548c\u8c03\u7528\u5806\u6808\u4fe1\u606f\u4f1a\u88ab\u9644\u52a0\u5230\u88ab\u5305\u542b\u7684\u9519\u8bef\u7684\u4e0a\u4e0b\u6587\u4e2d\u3002   The CallStackError interface exposes the following functions:   Error() - returns the error message with callstack appended  Message() - returns the error message (without callstack appended)  GetComponentCode() - returns the 3-character component code  GetReasonCode() - returns the 3-digit reason code  GetErrorCode() - returns the error code, which is \u201ccomponent:reason\u201d  GetStack() - returns just the callstack  WrapError(error) - wraps the provided error into the CallStackError   Callstack \u63a5\u53e3\u66b4\u9732\u4e86\u4ee5\u4e0b\u65b9\u6cd5\uff1a   Error()  - \u8fd4\u56de\u4e00\u4e2a\u5e26\u6709\u8c03\u7528\u5806\u6808\u7684\u9519\u8bef\u6d88\u606f\u3002  Message()  - \u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u6d88\u606f\u3002\uff08\u4e0d\u5305\u542b\u8c03\u7528\u5806\u6808\u4fe1\u606f\uff09\u3002  GetComponentCode()  - \u8fd4\u56de\u75313\u4e2a\u5b57\u6bcd\u7ec4\u6210\u7684\u7ec4\u4ef6\u4ee3\u7801\u3002  GetReasonCode()  - \u8fd4\u56de\u75313\u4e2a\u6570\u5b57\u7ec4\u6210\u7684\u9519\u8bef\u539f\u56e0\u4ee3\u7801\u3002  GetErrorCode()  - \u8fd4\u56de\u9519\u8bef\u4ee3\u7801\uff0c\u7531 component:reason \u7ec4\u6210\u3002  GetStack()  - \u4ec5\u8fd4\u56de\u8c03\u7528\u5806\u6808\u3002  WrapError(error)  - \u5c06\u63d0\u4f9b\u7684\u9519\u8bef\u5305\u88c5\u8fdb CallStackError \u3002", 
            "title": "1.1. \u603b\u4f53\u6982\u89c8"
        }, 
        {
            "location": "/error-handling_zh/#12", 
            "text": "The new error handling framework should be used in place of all calls to fmt.Errorf() or Errors.new(). Using this framework will provide error codes to check against as well as the option to generate a callstack that will be appended to the error message.  \u5e94\u8be5\u4f7f\u7528\u65b0\u7684\u9519\u8bef\u5904\u7406\u6846\u67b6\u6765\u66ff\u6362\u6240\u6709\u8c03\u7528 fmt.Errorf() \u6216\u8005 Errors.new() \u7684\u5730\u65b9\u3002\u7528\u65b0\u7684\u9519\u8bef\u5904\u7406\u6846\u67b6\u5c06\u63d0\u4f9b\u9519\u8bef\u4ee3\u7801\u4ee5\u53ca\u5c06\u9644\u52a0\u5230\u9519\u8bef\u6d88\u606f\u7684\u8c03\u7528\u5806\u6808\u4fe1\u606f\u7684\u9009\u9879\u3002  Using the framework is simple and will only require an easy tweak to your code.  \u4f7f\u7528\u8fd9\u4e2a\u9519\u8bef\u6846\u67b6\u7b80\u5355\u6613\u7528\uff0c\u53ea\u9700\u8981\u7b80\u5355\u5730\u8c03\u6574\u4f60\u7684\u4ee3\u7801\u3002  First, you\u2019ll need to import github.com/hyperledger/fabric/common/errors into any file that uses this framework.  \u9996\u5148\uff0c\u60a8\u9700\u8981\u5c06 github.com/hyperleger/fabric/common/errors \u5bfc\u5165\u5230\u4f7f\u7528\u6b64\u6846\u67b6\u7684\u4efb\u4f55\u6587\u4ef6\u4e2d\u3002  Let\u2019s take the following as an example from core/chaincode/chaincode_support.go:  \u4ee5 core/chaincode/chaincode_support.go \u4e3a\u4f8b\uff1a  err = fmt.Errorf( Error starting container: %s , err)  For this error, we will simply call the constructor for Error and pass a component code, reason code, followed by the error message. At the end, we then call the WrapError() function, passing along the error itself.  \u5bf9\u4e8e\u8fd9\u4e2a\u9519\u8bef\uff0c\u6211\u4eec\u5c06\u7b80\u5355\u5730\u8c03\u7528Error\u7684\u6784\u9020\u51fd\u6570\uff0c\u5e76\u4f20\u9012\u4e00\u4e2a\u7ec4\u4ef6\u4ee3\u7801\uff0c\u539f\u56e0\u4ee3\u7801\uff0c\u7136\u540e\u662f\u9519\u8bef\u6d88\u606f\u3002\u6700\u540e\uff0c\u6211\u4eec\u8c03\u7528 WrapError() \u51fd\u6570\uff0c\u4f20\u9012\u9519\u8bef\u672c\u8eab\u3002  fmt.Errorf( Error starting container: %s , err)  \u53d8\u6210  errors.ErrorWithCallstack( CHA ,  505 ,  Error starting container ).WrapError(err)  You could also just leave the message as is without any problems:  \u60a8\u4e5f\u53ef\u4ee5\u4ec5\u7f16\u5199\u9519\u8bef\u4fe1\u606f\uff0c\u4e5f\u4e0d\u4f1a\u6709\u4efb\u4f55\u95ee\u9898\uff1a  errors.ErrorWithCallstack( CHA ,  505 ,  Error starting container: %s , err)  With this usage you will be able to format the error message from the previous error into the new error, but will lose the ability to print the callstack (if the wrapped error is a CallStackError).  \u5982\u679c\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u60a8\u5c06\u80fd\u591f\u5c06\u4e0a\u4e00\u4e2a\u9519\u8bef\u6d88\u606f\u683c\u5f0f\u5316\u6210\u4e00\u4e2a\u65b0\u7684\u9519\u8bef\uff0c\u4f46\u662f\u5c06\u5931\u53bb\u6253\u5370\u8c03\u7528\u5806\u6808\u7684\u80fd\u529b\uff08\u5982\u679c\u5305\u88c5\u7684\u9519\u8bef\u662fCallStack\uff09\u3002  A second example to highlight a scenario that involves formatting directives for parameters other than errors, while still wrapping an error, is as follows:  \u53e6\u4e00\u4e2a\u51f8\u663e\u7684\u4f8b\u5b50\u6d89\u53ca\u4e86\u683c\u5f0f\u5316\u9519\u8bef\u4ee5\u5916\u7684\u53c2\u6570\u6307\u4ee4\uff0c\u540c\u65f6\u4ecd\u7136\u5305\u542b\u4e86\u9519\u8bef\uff0c\u5982\u4e0b\u6240\u793a\uff1a  fmt.Errorf( failed to get deployment payload %s - %s , canName, err)  \u53d8\u6210  errors.ErrorWithCallstack( CHA ,  506 ,  Failed to get deployment payload %s , canName).WrapError(err)", 
            "title": "1.2. \u4f7f\u7528\u8bf4\u660e"
        }, 
        {
            "location": "/error-handling_zh/#13", 
            "text": "Once the error has been created using the framework, displaying the error message is as simple as:  \u4e00\u65e6\u4f7f\u7528\u6846\u67b6\u521b\u5efa\u5566\u9519\u8bef\uff0c\u663e\u793a\u9519\u8bef\u6d88\u606f\u5c06\u5341\u5206\u7b80\u5355\uff1a  logger.Errorf(err)  \u6216\u8005  fmt.Println(err)  \u6216\u8005  fmt.Printf( %s\\n ,err)  \u6765\u81ea peer/common/common.go \u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a  errors.ErrorWithCallstack( PER ,  404 ,  Error trying to connect to local peer ).WrapError(err)  \u5c06\u663e\u793a\u9519\u8bef\u6d88\u606f\uff1a  PER:404 - Error trying to connect to local peer\nCaused by: grpc: timed out when dialing  Note\nThe callstacks have not been displayed for this example for the sake of brevity.   \u6ce8\u610f   \u4e3a\u4e86\u7b80\u6d01\u8d77\u89c1\uff0c\u672c\u793a\u4f8b\u5c1a\u672a\u5c55\u793a\u8c03\u7528\u5806\u6808\u4fe1\u606f\u3002", 
            "title": "1.3. \u663e\u793a\u9519\u8bef\u6d88\u606f"
        }, 
        {
            "location": "/error-handling_zh/#14-hyperledger-fabric", 
            "text": "If it is some sort of best effort thing you are doing, you should log the error and ignore it.  If you are servicing a user request, you should log the error and return it.  If the error comes from elsewhere, you have the choice to wrap the error or not. Typically, it\u2019s best to not wrap the error and simply return it as is. However, for certain cases where a utility function is called, wrapping the error with a new component and reason code can help an end user understand where the error is really occurring without inspecting the callstack.   A panic should be handled within the same layer by throwing an internal error code/start a recovery process and should not be allowed to propagate to other packages.    \u5982\u679c\u8fd9\u662f\u4f60\u6b63\u5728\u52aa\u529b\u505a\u7684\u67d0\u79cd\u4e8b\u60c5\uff0c\u4f60\u5e94\u8be5\u8bb0\u5f55\u9519\u8bef\u5e76\u5ffd\u7565\u5b83\u3002   \u5982\u679c\u4f60\u6b63\u5728\u4e3a\u7528\u6237\u8bf7\u6c42\u63d0\u4f9b\u670d\u52a1\uff0c\u5219\u5e94\u8be5\u8bb0\u5f55\u9519\u8bef\u5e76\u8fd4\u56de\u3002  \u5982\u679c\u9519\u8bef\u6765\u81ea\u5176\u5b83\u5730\u65b9\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5305\u88c5\u9519\u8bef\u3002\u901a\u5e38\uff0c\u6700\u597d\u4e0d\u8981\u5305\u88c5\u9519\u8bef\uff0c\u8ba9\u5b83\u539f\u6837\u8fd4\u56de\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u5de5\u5177\u51fd\u6570\u8c03\u7528\u7684\u67d0\u4e9b\u60c5\u51b5\uff0c\u4f7f\u7528component code\u548creason code\u6765\u5305\u88c5\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u5728\u4e0d\u68c0\u67e5\u8c03\u7528\u5806\u6808\u7684\u60c5\u51b5\u4e0b\u4e86\u89e3\u6b63\u771f\u53d1\u751f\u9519\u8bef\u7684\u4f4d\u7f6e\u3002  \u4e00\u4e2apanic \u5e94\u8be5\u5728\u540c\u4e00\u5c42\u901a\u8fc7\u629b\u51fa\u5185\u90e8\u9519\u8bef\u4ee3\u7801/\u542f\u52a8\u4e00\u4e2a\u6062\u590d\u8fdb\u7a0b\u6765\u5904\u7406\uff0c\u800c\u4e14\u4e0d\u5141\u8bb8\u4f20\u64ad\u5230\u5176\u4ed6\u8f6f\u4ef6\u5305\u3002", 
            "title": "1.4. Hyperledger Fabric\u4e2d\u9519\u8bef\u5904\u7406\u7684\u4e00\u822c\u51c6\u5219"
        }, 
        {
            "location": "/logging-control_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nYi Zeng\n\n\n\n\n\n\n\n\n\n\nOverview\u6982\u8ff0\n\n\nLogging in the peer application and in the shim interface to chaincodes is programmed using facilities provided by the github.com/op/go-logging package. This package supports\n\n\n\u65e5\u5fd7\u529f\u80fd\u5728\u8282\u70b9\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u94fe\u4e0a\u4ee3\u7801\u7684shim\u63a5\u53e3\u4e2d\u4f7f\u7528\uff0c\u6700\u7ec8\u5728github.com/op/go-logging\u5305\u5b9e\u73b0\u3002\u8fd9\u4e2a\u5305\u652f\u6301\uff1a\n\n\n\n\nLogging control based on the severity of the message\n    \u57fa\u4e8e\u6d88\u606f\u7684\u4e25\u91cd\u7a0b\u5ea6\u8fdb\u884c\u65e5\u5fd7\u63a7\u5236\n\n\nLogging control based on the software module generating the message\n    \u57fa\u4e8e\u8f6f\u4ef6\u6a21\u5757\u4ea7\u751f\u7684\u6d88\u606f\u8fdb\u884c\u65e5\u5fd7\u63a7\u5236\n\n\nDifferent pretty-printing options based on the severity of the message\n    \u57fa\u4e8e\u6d88\u606f\u7684\u4e25\u91cd\u7a0b\u5ea6\u7f8e\u89c2\u7684\u6253\u5370\u5230\u4e0d\u540c\u7684\u683c\u5f0f\u7684\u9009\u9879\n\n\n\n\nAll logs are currently directed to stderr, and the pretty-printing is currently fixed. However global and module-level control of logging by severity is provided for both users and developers. There are currently no formalized rules for the types of information provided at each severity level, however when submitting bug reports the developers may want to see full logs down to the DEBUG level.\n\n\n\u6240\u6709\u65e5\u5fd7\u76ee\u524d\u90fd\u88ab\u5b9a\u5411\u5230stderr\uff0c\u800cpretty-printing\u76ee\u524d\u662f\u56fa\u5b9a\u7684\u3002\u7136\u800c\uff0c\u4e3a\u7528\u6237\u548c\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4e86\u4e25\u683c\u7ea7\u522b\u7684\u5168\u5c40\u548c\u6a21\u5757\u7ea7\u522b\u7684\u65e5\u5fd7\u8bb0\u5f55\u63a7\u5236\u3002\u76ee\u524d\u6ca1\u6709\u5173\u4e8e\u6bcf\u4e2a\u4e25\u91cd\u6027\u7ea7\u522b\u63d0\u4f9b\u7684\u4fe1\u606f\u7c7b\u578b\u7684\u6b63\u5f0f\u89c4\u5219\uff0c\u4f46\u662f\u5f53\u63d0\u4ea4\u9519\u8bef\u62a5\u544a\u65f6\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u80fd\u5e0c\u671b\u770b\u5230\u5b8c\u6574\u7684\u5230DEBUG\u7ea7\u522b\u7684\u65e5\u5fd7\u8bb0\u5f55\u3002\n\n\nIn pretty-printed logs the logging level is indicated both by color and by a 4-character code, e.g, \u201cERRO\u201d for ERROR, \u201cDEBU\u201d for DEBUG, etc. In the logging context a module is an arbitrary name (string) given by developers to groups of related messages. In the pretty-printed example below, the logging modules \u201cpeer\u201d, \u201crest\u201d and \u201cmain\u201d are generating logs.\n\n\n\u5728pretty-printed\u7684\u65e5\u5fd7\u4e2d\uff0c\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u7531\u989c\u8272\u548c4\u4e2a\u5b57\u7b26\u7684\u4ee3\u7801\u6307\u793a\uff0c\u4f8b\u5982ERROR\u7684\u201cERRO\u201d\uff0cDEBUG\u7684\u201cDEBU\u201d\u7b49\u3002\u5728\u65e5\u5fd7\u4e0a\u4e0b\u6587\u4e2d\uff0c\u6a21\u5757\u662f\u6307\u7531\u5f00\u53d1\u8005\u6307\u5b9a\u7684\u4efb\u610f\u540d\u79f0\uff08\u5b57\u7b26\u4e32\uff09\u7684\u76f8\u5173\u6d88\u606f\u7684\u7ec4\u3002\u5728\u4ee5\u4e0bpretty-printed\u7684\u4f8b\u5b50\u4e2d\uff0c\u65e5\u5fd7\u6a21\u5757\u201cpeer\u201d\uff0c\u201crest\u201d\u548c\u201cmain\u201d\u90fd\u4ea7\u751f\u4e86\u65e5\u5fd7\u3002\n\n\n16:47:09.634 [peer] GetLocalAddress -\n INFO 033 Auto detected peer address: 9.3.158.178:7051\n16:47:09.635 [rest] StartOpenchainRESTServer -\n INFO 035 Initializing the REST service...\n16:47:09.635 [main] serve -\n INFO 036 Starting peer with id=name:\nvp1\n , network id=dev, address=9.3.158.178:7051, discovery.rootnode=, validator=true\n\n\n\n\nAn arbitrary number of logging modules can be created at runtime, therefore there is no \u201cmaster list\u201d of modules, and logging control constructs can not check whether logging modules actually do or will exist. Also note that the logging module system does not understand hierarchy or wildcarding: You may see module names like \u201cfoo/bar\u201d in the code, but the logging system only sees a flat string. It doesn\u2019t understand that \u201cfoo/bar\u201d is related to \u201cfoo\u201d in any way, or that \u201cfoo/*\u201d might indicate all \u201csubmodules\u201d of foo.\n\n\n\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u521b\u5efa\u4efb\u610f\u6570\u91cf\u7684\u65e5\u5fd7\u8bb0\u5f55\u6a21\u5757\uff0c\u56e0\u6b64\u6ca1\u6709\u6a21\u5757\u7684\u201c\u4e3b\u5217\u8868\u201d\u4e00\u8bf4\uff0c\u65e5\u5fd7\u63a7\u5236\u7ed3\u6784\u4e0d\u80fd\u68c0\u67e5\u65e5\u5fd7\u6a21\u5757\u662f\u5426\u5b9e\u9645\u6267\u884c\u6216\u5c06\u5b58\u5728\u3002\u53e6\u8bf7\u6ce8\u610f\uff0c\u65e5\u5fd7\u8bb0\u5f55\u6a21\u5757\u7cfb\u7edf\u4e0d\u660e\u767d\u5c42\u6b21\u7ed3\u6784\u6216\u901a\u914d\u7b26\uff1a\u60a8\u53ef\u80fd\u4f1a\u5728\u4ee3\u7801\u4e2d\u770b\u5230\u6a21\u5757\u540d\u79f0\uff0c\u5982\u201cfoo/bar\u201d\uff0c\u4f46\u65e5\u5fd7\u8bb0\u5f55\u7cfb\u7edf\u53ea\u80fd\u770b\u5230\u4e00\u4e2a\u6241\u5e73\u7684\u5b57\u7b26\u4e32\u3002\u5b83\u4e0d\u660e\u767d\u201cfoo/bar\u201d\u4e0e\u201cfoo\u201d\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u6216\u8005\u201cfoo/*\u201d\u53ef\u80fd\u8868\u793afoo\u7684\u6240\u6709\u201c\u5b50\u6a21\u5757\u201d\u3002\n\n\npeer\n\n\nThe logging level of the peer command can be controlled from the command line for each invocation using the \nlogging-level flag, for example\n\n\npeer\u547d\u4ee4\u7684\u65e5\u5fd7\u7b49\u7ea7\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u63a7\u5236\uff0c\u6bcf\u6b21\u8c03\u7528peer\u65f6\u4f7f\u7528\nlogging-level\uff0c\u4f8b\u5982\uff1a\n\n\npeer node start --logging-level=debug\n\n\n\n\nThe default logging level for each individual peer subcommand can also be set in the core.yaml file. For example the key logging.node sets the default level for the node subcommmand. Comments in the file also explain how the logging level can be overridden in various ways by using environment varaibles.\n\n\n\u6bcf\u4e2a\u5355\u72ec\u7684peer\u547d\u4ee4\u7684\u9ed8\u8ba4\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u4e5f\u53ef\u4ee5\u5728core.yaml\u6587\u4ef6\u4e2d\u8bbe\u7f6e\u3002\u4f8b\u5982\uff0c\u952elogging.node\u7528\u4e8e\u8bbe\u7f6enode\u5b50\u547d\u4ee4\u7684\u9ed8\u8ba4\u7ea7\u522b\u3002\u8be5\u6587\u4e2d\u7684\u6ce8\u91ca\u8fd8\u89e3\u91ca\u4e86\u5982\u4f55\u901a\u8fc7\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u4ee5\u5404\u79cd\u65b9\u5f0f\u8986\u76d6\u65e5\u5fd7\u7ea7\u522b\u3002\n\n\nLogging severity levels are specified using case-insensitive strings chosen from\n\n\n\u4f7f\u7528\u4ee5\u4e0b\u9009\u62e9\u7684\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u6307\u5b9a\u65e5\u5fd7\u4e25\u91cd\u7ea7\u522b\uff1a\n\n\nCRITICAL | ERROR | WARNING | NOTICE | INFO | DEBUG\n\n\n\n\nThe full logging level specification for the peer is of the form\n\n\npeer\u7684\u5b8c\u6574\u65e5\u5fd7\u7ea7\u522b\u7684\u89c4\u683c\u5982\u4e0b\u683c\u5f0f\uff1a\n\n\n[\nmodule\n[,\nmodule\n...]=]\nlevel\n[:[\nmodule\n[,\nmodule\n...]=]\nlevel\n...]\n\n\n\n\nA logging level by itself is taken as the overall default. Otherwise, overrides for individual or groups of modules can be specified using the\n\n\n\u672c\u8eab\u7684\u65e5\u5fd7\u7ea7\u522b\u88ab\u89c6\u4e3a\u603b\u4f53\u9ed8\u8ba4\u503c\u3002\u53e6\u5916\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u6307\u5b9a\u5355\u4e2a\u6216\u591a\u4e2a\u6a21\u5757\u7ec4\u7684\u65e5\u5fd7\u7b49\u7ea7\u7684\u8986\u76d6:\n\n\nmodule\n[,\nmodule\n...]=\nlevel\n\n\n\n\n\nsyntax. Examples of specifications (valid for all of \nlogging-level, environment variable and core.yaml settings):\n\n\n\u8bed\u6cd5\u3002\u89c4\u8303\u793a\u4f8b\uff08\u9002\u7528\u4e8e\u6240\u6709\u7684\nlogging-level\uff0c\u73af\u5883\u53d8\u91cf\u548ccore.yaml\u8bbe\u7f6e\uff09\uff1a\n\n\ninfo                                       - Set default to INFO\nwarning:main,db=debug:chaincode=info       - Default WARNING; Override for main,db,chaincode\nchaincode=info:main=debug:db=debug:warning - Same as above\n\n\n\n\nGo chaincodes\n\n\nThe standard mechanism to log within a chaincode application is to integrate with the logging transport exposed to each chaincode instance via the peer. The chaincode \nshim\n package provides APIs that allow a chaincode to create and manage logging objects whose logs will be formatted and interleaved consistently with the \nshim\n logs.\n\n\n\u94fe\u4e0a\u4ee3\u7801\u5e94\u7528\u7a0b\u5e8f\u4e2d\u65e5\u5fd7\u7684\u6807\u51c6\u673a\u5236\u662f\u901a\u8fc7peer\u4e0e\u66b4\u9732\u4e8e\u6bcf\u4e2a\u94fe\u7801\u5b9e\u4f8b\u7684\u65e5\u5fd7\u4f20\u8f93\u8fdb\u884c\u96c6\u6210\u3002 \u94fe\u4e0a\u4ee3\u7801\u7684\nshim\n\u5305\u63d0\u4f9b\u4e86API\uff0c\u5141\u8bb8\u94fe\u7801\u521b\u5efa\u548c\u7ba1\u7406\u65e5\u5fd7\u8bb0\u5f55\u5bf9\u8c61\uff0c\u65e5\u5fd7\u5bf9\u8c61\u7684\u65e5\u5fd7\u5c06\u88ab\u683c\u5f0f\u5316\uff0c\u5e76\u4e0e\nshim\n\u65e5\u5fd7\u4ea4\u7ec7\u5728\u4e86\u4e00\u8d77\u3002\n\n\nAs independently executed programs, user-provided chaincodes may technically also produce output on stdout/stderr. While naturally useful for \u201cdevmode\u201d, these channels are normally disabled on a production network to mitigate abuse from broken or malicious code. However, it is possible to enable this output even for peer-managed containers (e.g. \u201cnetmode\u201d) on a per-peer basis via the CORE_VM_DOCKER_ATTACHSTDOUT=true configuration option.\n\n\n\u4f5c\u4e3a\u72ec\u7acb\u6267\u884c\u7684\u7a0b\u5e8f\uff0c\u7528\u6237\u63d0\u4f9b\u7684\u94fe\u7801\u5728\u6280\u672f\u4e0a\u4e5f\u53ef\u4ee5\u5728stdout / stderr\u4e0a\u4ea7\u751f\u8f93\u51fa\u3002\u867d\u7136\u5bf9\u201c\u5f00\u53d1\u6a21\u5f0f\u201d\u6709\u7528\uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f\u901a\u5e38\u5728\u751f\u4ea7\u73af\u5883\u4e0a\u88ab\u7981\u7528\uff0c\u4ee5\u51cf\u8f7b\u7834\u574f\u6216\u6076\u610f\u4ee3\u7801\u7684\u6ee5\u7528\u3002\u7136\u800c\uff0c\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7CORE_VM_DOCKER_ATTACHSTDOUT = true\u914d\u7f6e\u9009\u9879\u5728\u6bcf\u4e2apeer-peer\u7684\u57fa\u7840\u4e0a\u4e3apeer\u7ba1\u7406\u7684\u5bb9\u5668\uff08\u4f8b\u5982\u201cnetmode\u201d\uff09\u542f\u7528\u6b64\u8f93\u51fa\u3002\n\n\nOnce enabled, each chaincode will receive its own logging channel keyed by its container-id. Any output written to either stdout or stderr will be integrated with the peer\u2019s log on a per-line basis. It is not recommended to enable this for production.\n\n\n\u4e00\u65e6\u542f\u7528\uff0c\u6bcf\u4e2a\u94fe\u7801\u5c06\u63a5\u6536\u5176\u81ea\u5df1\u7684\u65e5\u5fd7\u901a\u9053\uff0c\u5176\u7531container-id\u6807\u8bc6\u3002\u5199\u5165stdout\u6216stderr\u7684\u4efb\u4f55\u8f93\u51fa\u5c06\u4e0epeer\u7684\u65e5\u5fd7\u6309\u7167\u6bcf\u884c\u8fdb\u884c\u96c6\u6210\u3002\u4e0d\u5efa\u8bae\u5c06\u5176\u7528\u4e8e\u751f\u4ea7\u3002\n\n\nAPI\n\n\nNewLogger(name string) *ChaincodeLogger\n - Create a logging object for use by a chaincode\n\n\n(c *ChaincodeLogger) SetLevel(level LoggingLevel)\n - Set the logging level of the logger\n\n\n(c *ChaincodeLogger) IsEnabledFor(level LoggingLevel) bool\n - Return true if logs will be generated at the given level\n\n\nLogLevel(levelString string) (LoggingLevel, error)\n - Convert a string to a LoggingLevel\n\n\nA \nLoggingLevel\n is a member of the enumeration\n\n\nLogDebug, LogInfo, LogNotice, LogWarning, LogError, LogCritical\n\n\n\nwhich can be used directly, or generated by passing a case-insensitive version of the strings\n\n\nDEBUG, INFO, NOTICE, WARNING, ERROR, CRITICAL\n\n\n\nto the \nLogLevel\n API.\n\n\nFormatted logging at various severity levels is provided by the functions\n\n\n\u4ee5\u4e0b\u51fd\u6570\u63d0\u4f9b\u4e86\u5404\u79cd\u4e25\u91cd\u7ea7\u522b\u7684\u683c\u5f0f\u5316\u65e5\u5fd7\u8bb0\u5f55\n\n\n(c *ChaincodeLogger) Debug(args ...interface{})\n(c *ChaincodeLogger) Info(args ...interface{})\n(c *ChaincodeLogger) Notice(args ...interface{})\n(c *ChaincodeLogger) Warning(args ...interface{})\n(c *ChaincodeLogger) Error(args ...interface{})\n(c *ChaincodeLogger) Critical(args ...interface{})\n\n(c *ChaincodeLogger) Debugf(format string, args ...interface{})\n(c *ChaincodeLogger) Infof(format string, args ...interface{})\n(c *ChaincodeLogger) Noticef(format string, args ...interface{})\n(c *ChaincodeLogger) Warningf(format string, args ...interface{})\n(c *ChaincodeLogger) Errorf(format string, args ...interface{})\n(c *ChaincodeLogger) Criticalf(format string, args ...interface{})\n\n\n\n\nThe \nf\n forms of the logging APIs provide for precise control over the formatting of the logs. The non-\nf\n forms of the APIs currently insert a space between the printed representations of the arguments, and arbitrarily choose the formats to use.\n\n\n\u65e5\u5fd7API\u7684\nf\n\u5f62\u5f0f\u53ef\u4ee5\u7cbe\u786e\u63a7\u5236\u65e5\u5fd7\u683c\u5f0f\u3002 API\u7684\u975e\nf\n\u5f62\u5f0f\u5f53\u524d\u5728\u53c2\u6570\u7684\u6253\u5370\u8868\u793a\u4e4b\u95f4\u63d2\u5165\u4e00\u4e2a\u7a7a\u683c\uff0c\u5e76\u4efb\u610f\u9009\u62e9\u8981\u4f7f\u7528\u7684\u683c\u5f0f\u3002\n\n\nIn the current implementation, the logs produced by the \nshim\n and a \nChaincodeLogger\n are timestamped, marked with the logger name and severity level, and written to \nstderr\n. Note that logging level control is currently based on the name provided when the \nChaincodeLogger\n is created. To avoid ambiguities, all \nChaincodeLogger\n should be given unique names other than \u201cshim\u201d. The logger name will appear in all log messages created by the logger. The \nshim\n logs as \u201cshim\u201d.\n\n\n\u5728\u5f53\u524d\u5b9e\u73b0\u4e2d\uff0c\u7531\nshim\n\u548c\nChaincodeLogger\n\u751f\u6210\u7684\u65e5\u5fd7\u662f\u65f6\u95f4\u6233\u7684\uff0c\u6807\u6709\u8bb0\u5f55\u5668\u540d\u79f0\u548c\u4e25\u91cd\u6027\u7ea7\u522b\uff0c\u5e76\u5199\u5165\nstderr\n\u3002\u8bf7\u6ce8\u610f\uff0c\u65e5\u5fd7\u7ea7\u522b\u63a7\u5236\u5f53\u524d\u57fa\u4e8e\u521b\u5efa\nChaincodeLogger\n\u65f6\u63d0\u4f9b\u7684\u540d\u79f0\u3002\u4e3a\u4e86\u907f\u514d\u6b67\u4e49\uff0c\u6240\u6709\nChaincodeLogger\n\u5e94\u8be5\u88ab\u8d4b\u4e88\u9664\u201cshim\u201d\u4e4b\u5916\u7684\u552f\u4e00\u540d\u79f0\u3002\u8bb0\u5f55\u5668\u540d\u79f0\u5c06\u663e\u793a\u5728\u7531\u8bb0\u5f55\u5668\u521b\u5efa\u7684\u6240\u6709\u65e5\u5fd7\u6d88\u606f\u4e2d\u3002\u57ab\u7247\u8bb0\u5f55\u4e3a\u201cshim\u201d\u3002\n\n\nGo language chaincodes can also control the logging level of the chaincode shim interface through the \nSetLoggingLevel\n API.\n\n\nGo\u8bed\u8a00\u94fe\u63a5\u4ee3\u7801\u8fd8\u53ef\u4ee5\u901a\u8fc7SetLoggingLevel API\u6765\u63a7\u5236\u94fe\u5f0f\u4ee3\u7801\u57ab\u7247\u754c\u9762\u7684\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u3002\n\n\nSetLoggingLevel(LoggingLevel level)\n - Control the logging level of the shim  \u63a7\u5236shim\u7684\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\n\n\nThe default logging level for the shim is \nLogDebug\n.\n\n\nshim\u7684\u9ed8\u8ba4\u65e5\u5fd7\u7ea7\u522b\u4e3aLogDebug\u3002\n\n\nBelow is a simple example of how a chaincode might create a private logging object logging at the \nLogInfo\n level, and also control the amount of logging provided by the \nshim\n based on an environment variable.\n\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u8bf4\u660e\u94fe\u7801\u5982\u4f55\u521b\u5efa\nLogInfo\n\u7ea7\u522b\u7684\u4e13\u7528\u65e5\u5fd7\u5bf9\u8c61\u65e5\u5fd7\u8bb0\u5f55\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u57fa\u4e8e\u73af\u5883\u53d8\u91cf\u6765\u63a7\u5236\u7531\nshim\n\u63d0\u4f9b\u7684\u65e5\u5fd7\u91cf\u3002\n\n\nvar logger = shim.NewLogger(\nmyChaincode\n)\n\nfunc main() {\n\n    logger.SetLevel(shim.LogInfo)\n\n    logLevel, _ := shim.LogLevel(os.Getenv(\nSHIM_LOGGING_LEVEL\n))\n    shim.SetLoggingLevel(logLevel)\n    ...\n}", 
            "title": "\u65e5\u5fd7\u63a7\u5236"
        }, 
        {
            "location": "/logging-control_zh/#overview", 
            "text": "Logging in the peer application and in the shim interface to chaincodes is programmed using facilities provided by the github.com/op/go-logging package. This package supports  \u65e5\u5fd7\u529f\u80fd\u5728\u8282\u70b9\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u94fe\u4e0a\u4ee3\u7801\u7684shim\u63a5\u53e3\u4e2d\u4f7f\u7528\uff0c\u6700\u7ec8\u5728github.com/op/go-logging\u5305\u5b9e\u73b0\u3002\u8fd9\u4e2a\u5305\u652f\u6301\uff1a   Logging control based on the severity of the message\n    \u57fa\u4e8e\u6d88\u606f\u7684\u4e25\u91cd\u7a0b\u5ea6\u8fdb\u884c\u65e5\u5fd7\u63a7\u5236  Logging control based on the software module generating the message\n    \u57fa\u4e8e\u8f6f\u4ef6\u6a21\u5757\u4ea7\u751f\u7684\u6d88\u606f\u8fdb\u884c\u65e5\u5fd7\u63a7\u5236  Different pretty-printing options based on the severity of the message\n    \u57fa\u4e8e\u6d88\u606f\u7684\u4e25\u91cd\u7a0b\u5ea6\u7f8e\u89c2\u7684\u6253\u5370\u5230\u4e0d\u540c\u7684\u683c\u5f0f\u7684\u9009\u9879   All logs are currently directed to stderr, and the pretty-printing is currently fixed. However global and module-level control of logging by severity is provided for both users and developers. There are currently no formalized rules for the types of information provided at each severity level, however when submitting bug reports the developers may want to see full logs down to the DEBUG level.  \u6240\u6709\u65e5\u5fd7\u76ee\u524d\u90fd\u88ab\u5b9a\u5411\u5230stderr\uff0c\u800cpretty-printing\u76ee\u524d\u662f\u56fa\u5b9a\u7684\u3002\u7136\u800c\uff0c\u4e3a\u7528\u6237\u548c\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4e86\u4e25\u683c\u7ea7\u522b\u7684\u5168\u5c40\u548c\u6a21\u5757\u7ea7\u522b\u7684\u65e5\u5fd7\u8bb0\u5f55\u63a7\u5236\u3002\u76ee\u524d\u6ca1\u6709\u5173\u4e8e\u6bcf\u4e2a\u4e25\u91cd\u6027\u7ea7\u522b\u63d0\u4f9b\u7684\u4fe1\u606f\u7c7b\u578b\u7684\u6b63\u5f0f\u89c4\u5219\uff0c\u4f46\u662f\u5f53\u63d0\u4ea4\u9519\u8bef\u62a5\u544a\u65f6\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u80fd\u5e0c\u671b\u770b\u5230\u5b8c\u6574\u7684\u5230DEBUG\u7ea7\u522b\u7684\u65e5\u5fd7\u8bb0\u5f55\u3002  In pretty-printed logs the logging level is indicated both by color and by a 4-character code, e.g, \u201cERRO\u201d for ERROR, \u201cDEBU\u201d for DEBUG, etc. In the logging context a module is an arbitrary name (string) given by developers to groups of related messages. In the pretty-printed example below, the logging modules \u201cpeer\u201d, \u201crest\u201d and \u201cmain\u201d are generating logs.  \u5728pretty-printed\u7684\u65e5\u5fd7\u4e2d\uff0c\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u7531\u989c\u8272\u548c4\u4e2a\u5b57\u7b26\u7684\u4ee3\u7801\u6307\u793a\uff0c\u4f8b\u5982ERROR\u7684\u201cERRO\u201d\uff0cDEBUG\u7684\u201cDEBU\u201d\u7b49\u3002\u5728\u65e5\u5fd7\u4e0a\u4e0b\u6587\u4e2d\uff0c\u6a21\u5757\u662f\u6307\u7531\u5f00\u53d1\u8005\u6307\u5b9a\u7684\u4efb\u610f\u540d\u79f0\uff08\u5b57\u7b26\u4e32\uff09\u7684\u76f8\u5173\u6d88\u606f\u7684\u7ec4\u3002\u5728\u4ee5\u4e0bpretty-printed\u7684\u4f8b\u5b50\u4e2d\uff0c\u65e5\u5fd7\u6a21\u5757\u201cpeer\u201d\uff0c\u201crest\u201d\u548c\u201cmain\u201d\u90fd\u4ea7\u751f\u4e86\u65e5\u5fd7\u3002  16:47:09.634 [peer] GetLocalAddress -  INFO 033 Auto detected peer address: 9.3.158.178:7051\n16:47:09.635 [rest] StartOpenchainRESTServer -  INFO 035 Initializing the REST service...\n16:47:09.635 [main] serve -  INFO 036 Starting peer with id=name: vp1  , network id=dev, address=9.3.158.178:7051, discovery.rootnode=, validator=true  An arbitrary number of logging modules can be created at runtime, therefore there is no \u201cmaster list\u201d of modules, and logging control constructs can not check whether logging modules actually do or will exist. Also note that the logging module system does not understand hierarchy or wildcarding: You may see module names like \u201cfoo/bar\u201d in the code, but the logging system only sees a flat string. It doesn\u2019t understand that \u201cfoo/bar\u201d is related to \u201cfoo\u201d in any way, or that \u201cfoo/*\u201d might indicate all \u201csubmodules\u201d of foo.  \u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u521b\u5efa\u4efb\u610f\u6570\u91cf\u7684\u65e5\u5fd7\u8bb0\u5f55\u6a21\u5757\uff0c\u56e0\u6b64\u6ca1\u6709\u6a21\u5757\u7684\u201c\u4e3b\u5217\u8868\u201d\u4e00\u8bf4\uff0c\u65e5\u5fd7\u63a7\u5236\u7ed3\u6784\u4e0d\u80fd\u68c0\u67e5\u65e5\u5fd7\u6a21\u5757\u662f\u5426\u5b9e\u9645\u6267\u884c\u6216\u5c06\u5b58\u5728\u3002\u53e6\u8bf7\u6ce8\u610f\uff0c\u65e5\u5fd7\u8bb0\u5f55\u6a21\u5757\u7cfb\u7edf\u4e0d\u660e\u767d\u5c42\u6b21\u7ed3\u6784\u6216\u901a\u914d\u7b26\uff1a\u60a8\u53ef\u80fd\u4f1a\u5728\u4ee3\u7801\u4e2d\u770b\u5230\u6a21\u5757\u540d\u79f0\uff0c\u5982\u201cfoo/bar\u201d\uff0c\u4f46\u65e5\u5fd7\u8bb0\u5f55\u7cfb\u7edf\u53ea\u80fd\u770b\u5230\u4e00\u4e2a\u6241\u5e73\u7684\u5b57\u7b26\u4e32\u3002\u5b83\u4e0d\u660e\u767d\u201cfoo/bar\u201d\u4e0e\u201cfoo\u201d\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u6216\u8005\u201cfoo/*\u201d\u53ef\u80fd\u8868\u793afoo\u7684\u6240\u6709\u201c\u5b50\u6a21\u5757\u201d\u3002", 
            "title": "Overview\u6982\u8ff0"
        }, 
        {
            "location": "/logging-control_zh/#peer", 
            "text": "The logging level of the peer command can be controlled from the command line for each invocation using the  logging-level flag, for example  peer\u547d\u4ee4\u7684\u65e5\u5fd7\u7b49\u7ea7\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u63a7\u5236\uff0c\u6bcf\u6b21\u8c03\u7528peer\u65f6\u4f7f\u7528 logging-level\uff0c\u4f8b\u5982\uff1a  peer node start --logging-level=debug  The default logging level for each individual peer subcommand can also be set in the core.yaml file. For example the key logging.node sets the default level for the node subcommmand. Comments in the file also explain how the logging level can be overridden in various ways by using environment varaibles.  \u6bcf\u4e2a\u5355\u72ec\u7684peer\u547d\u4ee4\u7684\u9ed8\u8ba4\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u4e5f\u53ef\u4ee5\u5728core.yaml\u6587\u4ef6\u4e2d\u8bbe\u7f6e\u3002\u4f8b\u5982\uff0c\u952elogging.node\u7528\u4e8e\u8bbe\u7f6enode\u5b50\u547d\u4ee4\u7684\u9ed8\u8ba4\u7ea7\u522b\u3002\u8be5\u6587\u4e2d\u7684\u6ce8\u91ca\u8fd8\u89e3\u91ca\u4e86\u5982\u4f55\u901a\u8fc7\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u4ee5\u5404\u79cd\u65b9\u5f0f\u8986\u76d6\u65e5\u5fd7\u7ea7\u522b\u3002  Logging severity levels are specified using case-insensitive strings chosen from  \u4f7f\u7528\u4ee5\u4e0b\u9009\u62e9\u7684\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u6307\u5b9a\u65e5\u5fd7\u4e25\u91cd\u7ea7\u522b\uff1a  CRITICAL | ERROR | WARNING | NOTICE | INFO | DEBUG  The full logging level specification for the peer is of the form  peer\u7684\u5b8c\u6574\u65e5\u5fd7\u7ea7\u522b\u7684\u89c4\u683c\u5982\u4e0b\u683c\u5f0f\uff1a  [ module [, module ...]=] level [:[ module [, module ...]=] level ...]  A logging level by itself is taken as the overall default. Otherwise, overrides for individual or groups of modules can be specified using the  \u672c\u8eab\u7684\u65e5\u5fd7\u7ea7\u522b\u88ab\u89c6\u4e3a\u603b\u4f53\u9ed8\u8ba4\u503c\u3002\u53e6\u5916\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u6307\u5b9a\u5355\u4e2a\u6216\u591a\u4e2a\u6a21\u5757\u7ec4\u7684\u65e5\u5fd7\u7b49\u7ea7\u7684\u8986\u76d6:  module [, module ...]= level   syntax. Examples of specifications (valid for all of  logging-level, environment variable and core.yaml settings):  \u8bed\u6cd5\u3002\u89c4\u8303\u793a\u4f8b\uff08\u9002\u7528\u4e8e\u6240\u6709\u7684 logging-level\uff0c\u73af\u5883\u53d8\u91cf\u548ccore.yaml\u8bbe\u7f6e\uff09\uff1a  info                                       - Set default to INFO\nwarning:main,db=debug:chaincode=info       - Default WARNING; Override for main,db,chaincode\nchaincode=info:main=debug:db=debug:warning - Same as above", 
            "title": "peer"
        }, 
        {
            "location": "/logging-control_zh/#go-chaincodes", 
            "text": "The standard mechanism to log within a chaincode application is to integrate with the logging transport exposed to each chaincode instance via the peer. The chaincode  shim  package provides APIs that allow a chaincode to create and manage logging objects whose logs will be formatted and interleaved consistently with the  shim  logs.  \u94fe\u4e0a\u4ee3\u7801\u5e94\u7528\u7a0b\u5e8f\u4e2d\u65e5\u5fd7\u7684\u6807\u51c6\u673a\u5236\u662f\u901a\u8fc7peer\u4e0e\u66b4\u9732\u4e8e\u6bcf\u4e2a\u94fe\u7801\u5b9e\u4f8b\u7684\u65e5\u5fd7\u4f20\u8f93\u8fdb\u884c\u96c6\u6210\u3002 \u94fe\u4e0a\u4ee3\u7801\u7684 shim \u5305\u63d0\u4f9b\u4e86API\uff0c\u5141\u8bb8\u94fe\u7801\u521b\u5efa\u548c\u7ba1\u7406\u65e5\u5fd7\u8bb0\u5f55\u5bf9\u8c61\uff0c\u65e5\u5fd7\u5bf9\u8c61\u7684\u65e5\u5fd7\u5c06\u88ab\u683c\u5f0f\u5316\uff0c\u5e76\u4e0e shim \u65e5\u5fd7\u4ea4\u7ec7\u5728\u4e86\u4e00\u8d77\u3002  As independently executed programs, user-provided chaincodes may technically also produce output on stdout/stderr. While naturally useful for \u201cdevmode\u201d, these channels are normally disabled on a production network to mitigate abuse from broken or malicious code. However, it is possible to enable this output even for peer-managed containers (e.g. \u201cnetmode\u201d) on a per-peer basis via the CORE_VM_DOCKER_ATTACHSTDOUT=true configuration option.  \u4f5c\u4e3a\u72ec\u7acb\u6267\u884c\u7684\u7a0b\u5e8f\uff0c\u7528\u6237\u63d0\u4f9b\u7684\u94fe\u7801\u5728\u6280\u672f\u4e0a\u4e5f\u53ef\u4ee5\u5728stdout / stderr\u4e0a\u4ea7\u751f\u8f93\u51fa\u3002\u867d\u7136\u5bf9\u201c\u5f00\u53d1\u6a21\u5f0f\u201d\u6709\u7528\uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f\u901a\u5e38\u5728\u751f\u4ea7\u73af\u5883\u4e0a\u88ab\u7981\u7528\uff0c\u4ee5\u51cf\u8f7b\u7834\u574f\u6216\u6076\u610f\u4ee3\u7801\u7684\u6ee5\u7528\u3002\u7136\u800c\uff0c\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7CORE_VM_DOCKER_ATTACHSTDOUT = true\u914d\u7f6e\u9009\u9879\u5728\u6bcf\u4e2apeer-peer\u7684\u57fa\u7840\u4e0a\u4e3apeer\u7ba1\u7406\u7684\u5bb9\u5668\uff08\u4f8b\u5982\u201cnetmode\u201d\uff09\u542f\u7528\u6b64\u8f93\u51fa\u3002  Once enabled, each chaincode will receive its own logging channel keyed by its container-id. Any output written to either stdout or stderr will be integrated with the peer\u2019s log on a per-line basis. It is not recommended to enable this for production.  \u4e00\u65e6\u542f\u7528\uff0c\u6bcf\u4e2a\u94fe\u7801\u5c06\u63a5\u6536\u5176\u81ea\u5df1\u7684\u65e5\u5fd7\u901a\u9053\uff0c\u5176\u7531container-id\u6807\u8bc6\u3002\u5199\u5165stdout\u6216stderr\u7684\u4efb\u4f55\u8f93\u51fa\u5c06\u4e0epeer\u7684\u65e5\u5fd7\u6309\u7167\u6bcf\u884c\u8fdb\u884c\u96c6\u6210\u3002\u4e0d\u5efa\u8bae\u5c06\u5176\u7528\u4e8e\u751f\u4ea7\u3002", 
            "title": "Go chaincodes"
        }, 
        {
            "location": "/logging-control_zh/#api", 
            "text": "NewLogger(name string) *ChaincodeLogger  - Create a logging object for use by a chaincode  (c *ChaincodeLogger) SetLevel(level LoggingLevel)  - Set the logging level of the logger  (c *ChaincodeLogger) IsEnabledFor(level LoggingLevel) bool  - Return true if logs will be generated at the given level  LogLevel(levelString string) (LoggingLevel, error)  - Convert a string to a LoggingLevel  A  LoggingLevel  is a member of the enumeration  LogDebug, LogInfo, LogNotice, LogWarning, LogError, LogCritical  which can be used directly, or generated by passing a case-insensitive version of the strings  DEBUG, INFO, NOTICE, WARNING, ERROR, CRITICAL  to the  LogLevel  API.  Formatted logging at various severity levels is provided by the functions  \u4ee5\u4e0b\u51fd\u6570\u63d0\u4f9b\u4e86\u5404\u79cd\u4e25\u91cd\u7ea7\u522b\u7684\u683c\u5f0f\u5316\u65e5\u5fd7\u8bb0\u5f55  (c *ChaincodeLogger) Debug(args ...interface{})\n(c *ChaincodeLogger) Info(args ...interface{})\n(c *ChaincodeLogger) Notice(args ...interface{})\n(c *ChaincodeLogger) Warning(args ...interface{})\n(c *ChaincodeLogger) Error(args ...interface{})\n(c *ChaincodeLogger) Critical(args ...interface{})\n\n(c *ChaincodeLogger) Debugf(format string, args ...interface{})\n(c *ChaincodeLogger) Infof(format string, args ...interface{})\n(c *ChaincodeLogger) Noticef(format string, args ...interface{})\n(c *ChaincodeLogger) Warningf(format string, args ...interface{})\n(c *ChaincodeLogger) Errorf(format string, args ...interface{})\n(c *ChaincodeLogger) Criticalf(format string, args ...interface{})  The  f  forms of the logging APIs provide for precise control over the formatting of the logs. The non- f  forms of the APIs currently insert a space between the printed representations of the arguments, and arbitrarily choose the formats to use.  \u65e5\u5fd7API\u7684 f \u5f62\u5f0f\u53ef\u4ee5\u7cbe\u786e\u63a7\u5236\u65e5\u5fd7\u683c\u5f0f\u3002 API\u7684\u975e f \u5f62\u5f0f\u5f53\u524d\u5728\u53c2\u6570\u7684\u6253\u5370\u8868\u793a\u4e4b\u95f4\u63d2\u5165\u4e00\u4e2a\u7a7a\u683c\uff0c\u5e76\u4efb\u610f\u9009\u62e9\u8981\u4f7f\u7528\u7684\u683c\u5f0f\u3002  In the current implementation, the logs produced by the  shim  and a  ChaincodeLogger  are timestamped, marked with the logger name and severity level, and written to  stderr . Note that logging level control is currently based on the name provided when the  ChaincodeLogger  is created. To avoid ambiguities, all  ChaincodeLogger  should be given unique names other than \u201cshim\u201d. The logger name will appear in all log messages created by the logger. The  shim  logs as \u201cshim\u201d.  \u5728\u5f53\u524d\u5b9e\u73b0\u4e2d\uff0c\u7531 shim \u548c ChaincodeLogger \u751f\u6210\u7684\u65e5\u5fd7\u662f\u65f6\u95f4\u6233\u7684\uff0c\u6807\u6709\u8bb0\u5f55\u5668\u540d\u79f0\u548c\u4e25\u91cd\u6027\u7ea7\u522b\uff0c\u5e76\u5199\u5165 stderr \u3002\u8bf7\u6ce8\u610f\uff0c\u65e5\u5fd7\u7ea7\u522b\u63a7\u5236\u5f53\u524d\u57fa\u4e8e\u521b\u5efa ChaincodeLogger \u65f6\u63d0\u4f9b\u7684\u540d\u79f0\u3002\u4e3a\u4e86\u907f\u514d\u6b67\u4e49\uff0c\u6240\u6709 ChaincodeLogger \u5e94\u8be5\u88ab\u8d4b\u4e88\u9664\u201cshim\u201d\u4e4b\u5916\u7684\u552f\u4e00\u540d\u79f0\u3002\u8bb0\u5f55\u5668\u540d\u79f0\u5c06\u663e\u793a\u5728\u7531\u8bb0\u5f55\u5668\u521b\u5efa\u7684\u6240\u6709\u65e5\u5fd7\u6d88\u606f\u4e2d\u3002\u57ab\u7247\u8bb0\u5f55\u4e3a\u201cshim\u201d\u3002  Go language chaincodes can also control the logging level of the chaincode shim interface through the  SetLoggingLevel  API.  Go\u8bed\u8a00\u94fe\u63a5\u4ee3\u7801\u8fd8\u53ef\u4ee5\u901a\u8fc7SetLoggingLevel API\u6765\u63a7\u5236\u94fe\u5f0f\u4ee3\u7801\u57ab\u7247\u754c\u9762\u7684\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u3002  SetLoggingLevel(LoggingLevel level)  - Control the logging level of the shim  \u63a7\u5236shim\u7684\u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b  The default logging level for the shim is  LogDebug .  shim\u7684\u9ed8\u8ba4\u65e5\u5fd7\u7ea7\u522b\u4e3aLogDebug\u3002  Below is a simple example of how a chaincode might create a private logging object logging at the  LogInfo  level, and also control the amount of logging provided by the  shim  based on an environment variable.  \u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u8bf4\u660e\u94fe\u7801\u5982\u4f55\u521b\u5efa LogInfo \u7ea7\u522b\u7684\u4e13\u7528\u65e5\u5fd7\u5bf9\u8c61\u65e5\u5fd7\u8bb0\u5f55\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u57fa\u4e8e\u73af\u5883\u53d8\u91cf\u6765\u63a7\u5236\u7531 shim \u63d0\u4f9b\u7684\u65e5\u5fd7\u91cf\u3002  var logger = shim.NewLogger( myChaincode )\n\nfunc main() {\n\n    logger.SetLevel(shim.LogInfo)\n\n    logLevel, _ := shim.LogLevel(os.Getenv( SHIM_LOGGING_LEVEL ))\n    shim.SetLoggingLevel(logLevel)\n    ...\n}", 
            "title": "API"
        }, 
        {
            "location": "/arch-deep-dive_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nRuijun Ou\n\n\nMin Luo\n\n\n\n\n\n\n\n\nThe v1 architecture delivers the following advantages:\n\n\n\u6b64V1\u7248\u672c\u67b6\u6784\u5b9e\u73b0\u4e86\u4ee5\u4e0b\u6539\u8fdb\uff1a\n\n\n\n\n\n\nChaincode trust flexibility.\u94fe\u7801\u4fe1\u4efb\u7684\u7075\u6d3b\u6027\n The architecture separates trust assumptions for chaincodes (blockchain applications) from trust assumptions for ordering. In other words, the ordering service may be provided by one set of nodes (orderers) and tolerate some of them to fail or misbehave, and the endorsers may be different for each chaincode.\n\n\n\u8be5\u67b6\u6784\u5206\u79bb\u4e86\u94fe\u7801\uff08\u533a\u5757\u94fe\u5e94\u7528\uff09\u7684\u4fe1\u4efb\u5047\u8bbe\u548c\u6392\u5e8f\u7684\u4fe1\u4efb\u5047\u8bbe\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6392\u5e8f\u670d\u52a1\u53ef\u4ee5\u7531\u4e00\u7ec4\u8282\u70b9\uff08\u6392\u5e8f\u8005\uff09\u63d0\u4f9b\uff0c\u53ef\u4ee5\u5bb9\u5fcd\u4e00\u4e9b\u5931\u8d25\u8282\u70b9\u6216\u6076\u610f\u8282\u70b9\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u94fe\u7801\u7684\u80cc\u4e66\u8005\u53ef\u4ee5\u4e0d\u540c\u3002 \n\n\n\n\n\n\nScalability.\u53ef\u6269\u5c55\u6027\n As the endorser nodes responsible for particular chaincode are orthogonal to the orderers, the system may scale better than if these functions were done by the same nodes. In particular, this results when different chaincodes specify disjoint endorsers, which introduces a partitioning of chaincodes between endorsers and allows parallel chaincode execution (endorsement). Besides, chaincode execution, which can potentially be costly, is rem   oved from the critical path of the ordering service.\n\n\n\u4f5c\u4e3a\u7279\u5b9a\u94fe\u7801\u7684\u80cc\u4e66\u8282\u70b9\u548c\u6392\u5e8f\u8005\u662f\u5782\u76f4\u4ea4\u53c9\u5173\u7cfb\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u7cfb\u7edf\u5728\u89c4\u6a21\u4e0a\u6bd4\u8fd9\u4e9b\u529f\u80fd\u90fd\u5728\u540c\u4e00\u8282\u70b9\u5b9e\u73b0\u8981\u597d\u3002\u7279\u522b\u662f\uff0c\u5f53\u4e0d\u540c\u7684\u94fe\u7801\u6307\u5b9a\u4e0d\u540c\u7684\u80cc\u4e66\u8005\u65f6\u66f4\u662f\u5982\u6b64\uff0c\u4e3a\u6b64\u5728\u80cc\u4e66\u8005\u4e4b\u95f4\u5f15\u5165\u4e86\u94fe\u7801\u5206\u533a\u6280\u672f\uff0c\u5141\u8bb8\u94fe\u7801\u5e76\u884c\u6267\u884c\uff08\u548c\u80cc\u4e66\uff09\u3002\u6b64\u5916\uff0c\u94fe\u7801\u7684\u6267\u884c\uff0c\u53ef\u80fd\u6bd4\u8f83\u8017\u8d39\u8ba1\u7b97\u8d44\u6e90\uff0c\u6240\u4ee5\u628a\u5b83\u4ece\u6392\u5e8f\u670d\u52a1\u7684\u5173\u952e\u8def\u5f84\u79fb\u9664\u3002\n\n\n\n\n\n\nConfidentiality.\u673a\u5bc6\u6027\n The architecture facilitates deployment of chaincodes that have confidentiality requirements with respect to the content and state updates of its transactions.\n\n\n\u8be5\u67b6\u6784\u5229\u4e8e\u6709\u4fdd\u5bc6\u6027\u8981\u6c42\u7684\u94fe\u7801\u90e8\u7f72\uff0c\u80fd\u6ee1\u8db3\u4ea4\u6613\u5185\u5bb9\u548c\u72b6\u6001\u66f4\u65b0\u7684\u4fdd\u5bc6\u6027\u8981\u6c42\u3002\n\n\n\n\n\n\nConsensus modularity.\u5171\u8bc6\u6a21\u5757\u5316\n The architecture is modular and allows pluggable consensus (i.e., ordering service) implementations.\n\n\n\u8be5\u67b6\u6784\u662f\u6a21\u5757\u5316\u7684\uff0c\u5141\u8bb8\u53ef\u63d2\u62d4\u7684\u6a21\u5757\u5316\u5171\u8bc6\uff08\u5373\u6392\u5e8f\u670d\u52a1\uff09\u5b9e\u73b0\u3002\n\n\n\n\n\n\nPart I: Hyperledger Fabric v1\u76f8\u5173\u7684\u67b6\u6784\u8981\u7d20(Elements of the architecture relevant to Hyperledger Fabric v1)\n\n\n\n\nSystem architecture / \u7cfb\u7edf\u67b6\u6784\n\n\nBasic workflow of transaction endorsement / \u4ea4\u6613\u80cc\u4e66\u7684\u57fa\u672c\u5de5\u4f5c\u6d41\u7a0b\n\n\nEndorsement policies / \u80cc\u4e66\u7b56\u7565\n\n\n\n\nPart II: \u67b6\u6784\u7684v1\u540e\u671f\u8981\u7d20(Post-v1 elements of the architecture)\n\n\n\n\nLedger checkpointing (pruning) / \u8d26\u672c\u68c0\u67e5\u70b9\uff08\u4fee\u526a\uff09\n\n\n\n\n1. \u7cfb\u7edf\u67b6\u6784(System architecture)\n\n\nThe blockchain is a distributed system consisting of many nodes that communicate with each other. The blockchain runs programs called chaincode, holds state and ledger data, and executes transactions. The chaincode is the central element as transactions are operations invoked on the chaincode. Transactions have to be \u201cendorsed\u201d and only endorsed transactions may be committed and have an effect on the state. There may exist one or more special chaincodes for management functions and parameters, collectively called system chaincodes.\n\n\n\u533a\u5757\u94fe\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u7531\u8bb8\u591a\u76f8\u4e92\u901a\u4fe1\u7684\u8282\u70b9\u7ec4\u6210\u3002\u533a\u5757\u94fe\u8fd0\u884c\u7684\u7a0b\u5e8f\u79f0\u4e3a\u94fe\u7801\uff0c\u4fdd\u5b58\u72b6\u6001\u548c\u8d26\u672c\u6570\u636e\u3001\u6267\u884c\u4ea4\u6613\u3002\u94fe\u7801\u662f\u6838\u5fc3\u8981\u7d20\uff0c\u4ea4\u6613\u64cd\u4f5c\u5728\u94fe\u7801\u4e0a\u8c03\u7528\u3002\u4ea4\u6613\u5fc5\u987b\u88ab\u201c\u80cc\u4e66\u201d\uff0c\u53ea\u6709\u7ecf\u8fc7\u80cc\u4e66\u7684\u4ea4\u6613\u624d\u53ef\u4ee5\u63d0\u4ea4\uff0c\u5e76\u5bf9\u72b6\u6001\u4ea7\u751f\u5f71\u54cd\u3002\u6709\u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u7279\u5b9a\u7684\u94fe\u7801\u7528\u4e8e\u7ba1\u7406\u529f\u80fd\u548c\u53c2\u6570\uff0c\u7edf\u79f0\u4e3a\u7cfb\u7edf\u94fe\u7801\u3002\n\n\n1.1. \u4ea4\u6613(Transactions)\n\n\nTransactions may be of two types:\n\n\n\u4ea4\u6613\u53ef\u4ee5\u6709\u4e24\u79cd\u7c7b\u578b\uff1a\n\n\n\n\n\n\nDeploy transactions\n create new chaincode and take a program as parameter. When a deploy transaction executes successfully, the chaincode has been installed \u201con\u201d the blockchain.\n\n\n\n\n\n\n\u90e8\u7f72\u4ea4\u6613\n \u521b\u5efa\u65b0\u7684\u94fe\u7801\u5e76\u8bbe\u7f6e\u4e00\u4e2a\u7a0b\u5e8f\u4f5c\u4e3a\u53c2\u6570\u3002\u5f53\u4e00\u4e2a\u90e8\u7f72\u4ea4\u6613\u6267\u884c\u6210\u529f\uff0c\u8868\u660e\u94fe\u7801\u5df2\u88ab\u5b89\u88c5\u5230\u533a\u5757\u94fe\u4e0a\u3002\n\n\n\n\n\n\nInvoke transactions\n perform an operation in the context of previously deployed chaincode. An invoke transaction refers to a chaincode and to one of its provided functions. When successful, the chaincode executes the specified function - which may involve modifying the corresponding state, and returning an output.\n\n\n\n\n\n\n\u8c03\u7528\u4ea4\u6613\n \u662f\u5728\u4e4b\u524d\u5df2\u90e8\u7f72\u94fe\u7801\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u4e00\u4e2a\u64cd\u4f5c\u3002\u8c03\u7528\u4ea4\u6613\u5f15\u7528\u94fe\u7801\u63d0\u4f9b\u7684\u4e00\u4e2a\u51fd\u6570\u3002\u5f53\u6210\u529f\u65f6\uff0c\u94fe\u7801\u6267\u884c\u7279\u5b9a\u7684\u51fd\u6570-\u5b83\u53ef\u80fd\u6d89\u53ca\u4fee\u6539\u76f8\u5e94\u7684\u72b6\u6001\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8f93\u51fa\u3002\n\n\n\n\n\n\nAs described later, deploy transactions are special cases of invoke transactions, where a deploy transaction that creates new chaincode, corresponds to an invoke transaction on a system chaincode.\n\n\n\u5982\u540e\u6240\u8ff0\uff0c\u90e8\u7f72\u4ea4\u6613\u662f\u8c03\u7528\u4ea4\u6613\u7684\u7279\u4f8b\uff0c\u90e8\u7f72\u4ea4\u6613\u521b\u5efa\u65b0\u7684\u94fe\u7801\uff0c\u5bf9\u5e94\u4e8e\u7cfb\u7edf\u94fe\u7801\u7684\u4e00\u4e2a\u8c03\u7528\u4ea4\u6613\u3002\n\n\nRemark:\n \nThis document currently assumes that a transaction either creates new chaincode or invokes an operation provided by \none\n already deployed chaincode. This document does not yet describe: a) optimizations for query (read-only) transactions (included in v1), b) support for cross-chaincode transactions (post-v1 feature).\n\n\n\u6ce8\u610f\uff1a\n \n\u672c\u6587\u6863\u76ee\u524d\u5047\u5b9a\u4ea4\u6613\u4e0d\u662f\u521b\u5efa\u94fe\u7801\u5c31\u662f\u8c03\u7528\n\u67d0\u4e2a\n\u5df2\u521b\u5efa\u7684\u94fe\u7801\u3002\u672c\u6587\u6863\u5c1a\u672a\u63cf\u8ff0\uff1aa)\u4ea4\u6613\u4f18\u5316\u67e5\u8be2\uff08\u53ea\u8bfb\uff09\uff08V1\u4e2d\u5305\u542b\uff09\uff1bb)\u8de8\u94fe\u7801\u4ea4\u6613\u652f\u6301\uff08V1\u540e\u671f\u7279\u5f81\uff09\u3002\n\n\n1.2. \u533a\u5757\u94fe\u6570\u636e\u7ed3\u6784(Blockchain datastructures)\n\n\n1.2.1. State / \u72b6\u6001\n\n\nThe latest state of the blockchain (or, simply, state) is modeled as a versioned key/value store (KVS), where keys are names and values are arbitrary blobs. These entries are manipulated by the chaincodes (applications) running on the blockchain through \nput\n and \nget\n KVS-operations. The state is stored persistently and updates to the state are logged. Notice that versioned KVS is adopted as state model, an implementation may use actual KVSs, but also RDBMSs or any other solution.\n\n\n\u533a\u5757\u94fe\u7684\u6700\u65b0\u72b6\u6001\uff08\u7b80\u79f0\u4e3a\uff0c\u72b6\u6001\uff09\u88ab\u5efa\u6a21\u4e3a\u4e00\u4e2a\u7248\u672c\u952e/\u503c\u5b58\u50a8\uff08KVS\uff09\uff0c\u952e\u7684\u540d\u79f0\u548c\u503c\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u3002\u6574\u4f53\u4e0a\u7531\u8fd0\u884c\u5728\u533a\u5757\u94fe\u4e0a\u7684\u94fe\u7801\uff08\u5e94\u7528\uff09\u64cd\u63a7\uff0c\u901a\u8fc7\n\u5b58\n\u548c\n\u53d6\nKVS\u64cd\u4f5c\u5b9e\u73b0\u3002\u72b6\u6001\u6301\u7eed\u5b58\u50a8\u5e76\u4e14\u72b6\u6001\u7684\u66f4\u65b0\u4e5f\u88ab\u8bb0\u5f55\u3002\u6ce8\u610f\u7248\u672cKVS\u88ab\u91c7\u7528\u4e3a\u72b6\u6001\u6a21\u578b\uff0c\u5b9e\u73b0\u53ef\u4ee5\u4f7f\u7528\u5b9e\u9645\u7684KVS\uff0c\u50cfRDBMS\u6216\u5176\u5b83\u65b9\u6848\u3002\n\n\nMore formally, state \ns\n is modeled as an element of a mapping \nK -\n (V X N)\n, where:\n\n\n\u66f4\u6b63\u5f0f\u5730\uff0c\u72b6\u6001s\u5efa\u6a21\u4e3a\u4e00\u4e2a\u5143\u7d20\u6620\u5c04K -\n (V X N)\uff0c\u5176\u4e2d\uff1a\n\n\n\n\nK\n is a set of keys\n\n\nK\n\u662f\u4e00\u7ec4\u952e\n\n\nV\n is a set of values\n\n\nV\n\u662f\u4e00\u7ec4\u503c\n\n\nN\n is an infinite ordered set of version numbers. Injective function \nnext: N -\n N\n takes an element of \nN\n and returns the next version number.\n\n\nN\u662f\u4e00\u4e2a\u65e0\u9650\u6709\u5e8f\u7684\u7248\u672c\u53f7\u96c6\u3002\u5185\u5c04\u51fd\u6570\nnext: N -\n N\n\u83b7\u53d6\nN\n\u7684\u4e00\u4e2a\u5143\u7d20\u5e76\u8fd4\u56de\u4e0b\u4e00\u4e2a\u7248\u672c\u53f7\u3002\n\n\n\n\nBoth \nV\n and \nN\n contain a special element \n\\bot\n, which is in case of \nN\n the lowest element. Initially all keys are mapped to (\\bot,\\bot). For s(k)=(v,ver) we denote v by s(k).value, and \nver\n by \ns(k).version\n.\n\n\nV\n\u548c\nN\n\u90fd\u5305\u542b\u4e00\u4e2a\u7279\u5b9a\u7684\u5143\u7d20\n\\bot\n\uff0c\u8fd9\u662f\nN\n\u7684\u6700\u5e95\u5c42\u5143\u7d20\u7684\u7279\u4f8b\u3002\u6700\u5f00\u59cb\u65f6\u6240\u6709\u7684\u952e\u90fd\u6620\u5c04\u5230\n\uff08\\bot,\\bot\uff09\n\u3002\u5bf9\u4e8e\ns(k)=(v,ver)\n\uff0c\u6211\u4eec\u7528\ns(k).value\n\u4ee3\u8868\nv\n\uff0c\n\u7528\ns(k).version\n\u4ee3\u8868\nver\n\u3002\n\n\nKVS operations are modeled as follows:\n\n\n\n\nput(k,v)\n, for \nk\\in K\n and \nv\\in V\n, takes the blockchain state \ns\n and changes it to \ns'\n such that \ns'(k)=(v,next(s(k).version))\n with \ns'(k')=s(k')\n for all \nk'!=k\n.\n\n\nget(k)\n returns \ns(k)\n.\n\n\n\n\nKVS\u64cd\u4f5c\u6a21\u578b\u5982\u4e0b\uff1a\n\n\n\n\nput(k,v)\n,\u5bf9\u4e8e\nK\u4e2d\u7684k\n\u548c\nV\u4e2d\u7684v\n\uff0c\u5904\u7406\u533a\u5757\u94fe\u72b6\u6001\ns\n\uff0c\u5c06\u5b83\u53d8\u4e3a\ns'\n\uff0c\u8fd9\u6837\ns'(k)=(v,next(s(k).version))\n\uff0c\u4ee5\u53ca\ns'(k')=s(k')\n \u4ee5\u4fdd\u8bc1\u6240\u6709\u7684\nk'!=k\n\u3002\n\n\nget(k)\n\u8fd4\u56de\ns(k)\n\u3002\n\n\n\n\nState is maintained by peers, but not by orderers and clients.\n\n\n\u72b6\u6001\u7531peer\u8282\u70b9\u4fdd\u6301\uff0c\u800c\u4e0d\u662f\u6392\u5e8f\u8282\u70b9\u548c\u5ba2\u6237\u7aef\u3002\n\n\nState partitioning.\n Keys in the KVS can be recognized from their name to belong to a particular chaincode, in the sense that only transaction of a certain chaincode may modify the keys belonging to this chaincode. In principle, any chaincode can read the keys belonging to other chaincodes. \nSupport for cross-chaincode transactions, that modify the state belonging to two or more chaincodes is a post-v1 feature.\n\n\n\u72b6\u6001\u5212\u5206\u3002\nKVS\u4e2d\u7684\u952e\u80fd\u591f\u901a\u8fc7\u5b83\u4eec\u7684\u540d\u5b57\u8bc6\u522b\u5c5e\u4e8e\u54ea\u4e2a\u7279\u5b9a\u7684\u94fe\u7801\u3002\u4ece\u8fd9\u70b9\u4e0a\u8bf4\uff0c\u53ea\u6709\u67d0\u4e2a\u94fe\u7801\u7684\u4ea4\u6613\u53ef\u4ee5\u4fee\u6539\u5c5e\u4e8e\u8fd9\u4e2a\u94fe\u7801\u7684\u952e\u3002\u539f\u5219\u4e0a\uff0c\u4efb\u4f55\u94fe\u7801\u80fd\u591f\u8bfb\u53d6\u5c5e\u4e8e\u5176\u5b83\u94fe\u7801\u7684\u952e\u3002\n\u652f\u6301\u8de8\u94fe\u4ea4\u6613\uff0c\u4fee\u6539\u5c5e\u4e8e\u4e24\u4e2a\u6216\u66f4\u591a\u94fe\u7801\u7684\u72b6\u6001\u662fV1\u540e\u671f\u7684\u7279\u5f81\u3002\n\n\n1.2.2 \u8d26\u672c\uff08Ledger\uff09\n\n\nLedger provides a verifiable history of all successful state changes (we talk about valid transactions) and unsuccessful attempts to change state (we talk about invalid transactions), occurring during the operation of the system.\n\n\n\u8d26\u672c\u63d0\u4f9b\u4e86\u5728\u7cfb\u7edf\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u53d1\u751f\u7684\u53ef\u9a8c\u8bc1\u5386\u53f2\uff0c\u5b83\u5305\u542b\u6240\u6709\u6210\u529f\u7684\u72b6\u6001\u66f4\u6539\uff08\u6211\u4eec\u79f0\u4e3a\u6709\u6548\u4ea4\u6613\uff09\u548c\u4e0d\u6210\u529f\u7684\u72b6\u6001\u66f4\u6539\u5c1d\u8bd5\uff08\u6211\u4eec\u79f0\u4e3a\u65e0\u6548\u4ea4\u6613\uff09\u3002\n\n\nLedger is constructed by the ordering service (see Sec 1.3.3) as a totally ordered hashchain of blocks of (valid or invalid) transactions. The hashchain imposes the total order of blocks in a ledger and each block contains an array of totally ordered transactions. This imposes total order across all transactions.\n\n\n\u8d26\u672c\u662f\u7531\u6392\u5e8f\u670d\u52a1\uff08\u89c11.3.3\u8282\u5185\u5bb9\uff09\u6784\u5efa\u7684\u4e00\u4e2a\u5168\u90e8\u6709\u5e8f\u7684\u4ea4\u6613\u54c8\u5e0c\u94fe\u5757\uff08\u6709\u6548\u7684\u6216\u65e0\u6548\u7684\uff09\u3002\u54c8\u5e0c\u94fe\u5f3a\u5236\u5c06\u5168\u90e8\u6392\u5e8f\u5757\u7f6e\u5165\u8d26\u672c\uff0c\u6bcf\u4e2a\u5757\u5305\u542b\u4e00\u6279\u5168\u90e8\u6392\u5e8f\u4ea4\u6613\u3002\u8fd9\u4e2a\u5f3a\u5236\u5168\u90e8\u6392\u5e8f\u8986\u76d6\u6240\u6709\u4ea4\u6613\u3002\n\n\nLedger is kept at all peers and, optionally, at a subset of orderers. In the context of an orderer we refer to the Ledger as to \nOrdererLedger\n, whereas in the context of a peer we refer to the ledger as to \nPeerLedger\n. \nPeerLedger\n differs from the \nOrdererLedger\n in that peers locally maintain a bitmask that tells apart valid transactions from invalid ones (see Section XX for more details).\n\n\n\u8d26\u672c\u4fdd\u5b58\u5728\u6240\u6709peer\u8282\u70b9\uff0c\u53ef\u9009\u5730\uff0c\u4fdd\u5b58\u5728\u6392\u5e8f\u8005\u7684\u4e00\u4e2a\u5b50\u96c6\u3002\u5728\u8c08\u8bba\u6392\u5e8f\u65f6\u6211\u4eec\u8bf4\u7684\u8d26\u672c\u662f\u6392\u5e8f\u8d26\u672c\uff0c\u800c\u8c08\u8bbapeer\u8282\u70b9\u65f6\u6211\u4eec\u8bf4\u7684\u8d26\u672c\u662fpeer\u8d26\u672c\u3002peer\u8d26\u672c\u4e0e\u6392\u5e8f\u8d26\u672c\u7684\u533a\u522b\u662f\uff0cpeer\u8282\u70b9\u672c\u5730\u7ef4\u62a4\u4e00\u4e2a\u4f4d\u63a9\u7801\u6765\u8868\u660e\u9694\u79bb\u6709\u6548\u4ea4\u6613\u548c\u65e0\u6548\u4ea4\u6613\uff08\u770bXX\u8282\u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u63cf\u8ff0\uff09\u3002\n\n\nPeers may prune \nPeerLedger\n as described in Section XX (post-v1 feature). Orderers maintain \nOrdererLedger\n for fault-tolerance and availability (of the \nPeerLedger\n) and may decide to prune it at anytime, provided that properties of the ordering service (see Sec. 1.3.3) are maintained.\n\n\nPeer\u8282\u70b9\u53ef\u4ee5\u4fee\u526apeer\u8d26\u672c\uff0c\u5177\u4f53\u5728XX\u8282\u63cf\u8ff0\uff08V1\u540e\u671f\u7279\u5f81\uff09\u3002\u6392\u5e8f\u8282\u70b9\u7ef4\u62a4\u6392\u5e8f\u8d26\u672c\u7528\u4e8e\u5b9e\u73b0\u5bb9\u9519\u548c\uff08peer\u8282\u70b9\u8d26\u672c\uff09\u53ef\u7528\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u523b\u51b3\u5b9a\u4fee\u526a\u5b83\uff0c\u53ea\u8981\u6392\u5e8f\u670d\u52a1\uff08\u89c11.3.3\u8282\uff09\u7684\u5c5e\u6027\u5728\u7ef4\u6301\u4e2d\u3002\n\n\nThe ledger allows peers to replay the history of all transactions and to reconstruct the state. Therefore, state as described in Sec 1.2.1 is an optional datastructure.\n\n\n\u8d26\u672c\u5141\u8bb8peer\u8282\u70b9\u91cd\u6f14\u6240\u6709\u4ea4\u6613\u7684\u5386\u53f2\u548c\u91cd\u5efa\u72b6\u6001\u3002\u56e0\u6b64\uff0c\u57281.2.1\u8282\u4e2d\u63cf\u8ff0\u7684\u72b6\u6001\u662f\u4e00\u4e2a\u53ef\u9009\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\n1.3. \u8282\u70b9(Nodes)\n\n\nNodes are the communication entities of the blockchain. A \u201cnode\u201d is only a logical function in the sense that multiple nodes of different types can run on the same physical server. What counts is how nodes are grouped in \u201ctrust domains\u201d and associated to logical entities that control them.\n\n\nNode\u8282\u70b9\u662f\u533a\u5757\u94fe\u7684\u901a\u4fe1\u5b9e\u4f53\u3002\u4e00\u4e2a\u201cnode\u8282\u70b9\u201d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u903b\u8f91\u51fd\u6570\uff0c\u5728\u8fd9\u4e2a\u610f\u4e49\u4e0a\uff0c\u591a\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684node\u8282\u70b9\u53ef\u4ee5\u8fd0\u884c\u5728\u540c\u4e00\u53f0\u7269\u7406\u670d\u52a1\u5668\u4e0a\u3002\u5173\u952e\u5728\u4e8enode\u8282\u70b9\u5982\u4f55\u5728\u201c\u4fe1\u4efb\u57df\u201d\u4e2d\u5206\u7ec4\u548c\u5173\u8054\u63a7\u5236\u5b83\u4eec\u7684\u903b\u8f91\u5b9e\u4f53\u3002\n\n\nThere are three types of nodes:\n\n\n1\u3001\nClient\n or \nsubmitting-client\n: a client that submits an actual transaction-invocation to the endorsers, and broadcasts transaction-proposals to the ordering service.\n\n\n2\u3001\nPeer\n: a node that commits transactions and maintains the state and a copy of the ledger (see Sec, 1.2). Besides, peers can have a special endorser role.\n\n\n3\u3001\nOrdering-service-node\n or \norderer\n: a node running the communication service that implements a delivery guarantee, such as atomic or total order broadcast.\n\n\nThe types of nodes are explained next in more detail.\n\n\n\u6709\u4e09\u79cd\u7c7b\u578b\u7684node\u8282\u70b9\uff1a\n\n\n1\u3001\n\u5ba2\u6237\u7aef\n\u6216\u8005\n\u63d0\u4ea4\u5ba2\u6237\u7aef\n\uff1a\u5ba2\u6237\u7aef\u63d0\u4ea4\u5b9e\u9645\u4ea4\u6613\u8c03\u7528\u5230\u80cc\u4e66\u8005\uff0c\u5e7f\u64ad\u4ea4\u6613\u8bf7\u6c42\u5230\u6392\u5e8f\u670d\u52a1\u8282\u70b9\u3002\n\n\n2\u3001\nPeer\u8282\u70b9\n\uff1a\u63d0\u4ea4\u4ea4\u6613\u3001\u7ef4\u6301\u72b6\u6001\u548c\u8d26\u672c\u7684\u62f7\u8d1d\uff08\u89c11.2\u8282\uff09\u3002\u6b64\u5916\uff0cpeer\u8282\u70b9\u53ef\u4ee5\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u80cc\u4e66\u89d2\u8272\u3002\n\n\n3\u3001\n\u6392\u5e8f\u670d\u52a1\u8282\u70b9\n\u6216\n\u6392\u5e8f\u8005\n\uff1a\u8fd0\u884c\u901a\u4fe1\u670d\u52a1\u5b9e\u73b0\u4ea4\u4ed8\u4fdd\u8bc1\uff0c\u50cf\u539f\u5b50\u6216\u5168\u5e8f\u5e7f\u64ad\u3002\n\n\nNode\u8282\u70b9\u7684\u7c7b\u578b\u63a5\u4e0b\u6765\u8fdb\u884c\u66f4\u8be6\u7ec6\u7684\u89e3\u91ca\u3002\n\n\n1.3.1. \u5ba2\u6237\u7aef(Client)\n\n\nThe client represents the entity that acts on behalf of an end-user. It must connect to a peer for communicating with the blockchain. The client may connect to any peer of its choice. Clients create and thereby invoke transactions.\n\n\nAs detailed in Section 2, clients communicate with both peers and the ordering service.\n\n\n\u5ba2\u6237\u7aef\u4ee3\u8868\u6700\u7ec8\u7528\u6237\u5b9e\u4f53\u3002\u5b83\u5fc5\u987b\u8fde\u63a5\u5230\u4e00\u4e2apeer\u8282\u70b9\u4ee5\u4fbf\u4e0e\u533a\u5757\u94fe\u4ea4\u4e92\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u9009\u62e9\u8fde\u63a5\u4efb\u4f55peer\u8282\u70b9\u3002\u5ba2\u6237\u7aef\u521b\u5efa\u5e76\u8c03\u7528\u4ea4\u6613\u3002\n\n\n\u5982\u7b2c2\u8282\u8be6\u7ec6\u8bf4\u660e\uff0c\u5ba2\u6237\u7aef\u540c\u65f6\u4e0epeer\u8282\u70b9\u548c\u6392\u5e8f\u670d\u52a1\u901a\u4fe1\u3002\n\n\n1.3.2. Peer\n\n\nA peer receives ordered state updates in the form of blocks from the ordering service and maintain the state and the ledger.\n\n\nPeer\u8282\u70b9\u4ee5\u5757\u7684\u5f62\u5f0f\u4ece\u6392\u5e8f\u670d\u52a1\u63a5\u6536\u6709\u5e8f\u72b6\u6001\u66f4\u65b0\uff0c\u7ef4\u62a4\u72b6\u6001\u548c\u8d26\u672c\u3002\n\n\nPeers can additionally take up a special role of an \nendorsing peer\n, or an \nendorser\n. The special function of an \nendorsing peer\n occurs with respect to a particular chaincode and consists in \nendorsing\n a transaction before it is committed. Every chaincode may specify an \nendorsement policy\n that may refer to a set of endorsing peers. The policy defines the necessary and sufficient conditions for a valid transaction endorsement (typically a set of endorsers\u2019 signatures), as described later in Sections 2 and 3. In the special case of deploy transactions that install new chaincode the (deployment) endorsement policy is specified as an endorsement policy of the system chaincode.\n\n\nPeer\u8282\u70b9\u80fd\u9644\u52a0\u4e00\u4e2a\u7279\u6b8a\u7684\n\u80cc\u4e66\u8282\u70b9\u89d2\u8272\n\uff0c\u6216\n\u80cc\u4e66\u8005\n\u3002\n\u80cc\u4e66\u8282\u70b9\n\u7684\u7279\u6b8a\u529f\u80fd\u662f\u5173\u4e8e\u7279\u6b8a\u94fe\u7801\uff0c\u5b58\u5728\u4e8e\u63d0\u4ea4\u4e4b\u524d\n\u80cc\u4e66\n\u4e00\u4e2a\u4ea4\u6613\u3002\u6bcf\u4e2a\u94fe\u7801\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\n\u80cc\u4e66\u7b56\u7565\n\uff0c\u53ef\u4ee5\u5f15\u7528\u4e00\u7ec4\u80cc\u4e66\u8282\u70b9\u3002\u7b56\u7565\u5b9a\u4e49\u4e00\u4e2a\u6709\u6548\u4ea4\u6613\u80cc\u4e66\u7684\u5fc5\u8981\u548c\u5145\u5206\u6761\u4ef6\uff08\u5178\u578b\u7684\u662f\u4e00\u7ec4\u80cc\u4e66\u8005\u7b7e\u540d\uff09\uff0c\u5728\u540e\u9762\u7684\u7b2c2\u8282\u548c\u7b2c3\u8282\u63cf\u8ff0\u3002\u5728\u90e8\u7f72\u4ea4\u6613\u7684\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u5b89\u88c5\u94fe\u7801\uff08\u90e8\u7f72\uff09\u80cc\u4e66\u7b56\u7565\u662f\u7531\u7cfb\u7edf\u94fe\u7801\u7684\u80cc\u4e66\u7b56\u7565\u6307\u5b9a\u3002\n\n\n1.3.3. Orderer\n\n\nThe \norderers\n form the \nordering service\n, i.e., a communication fabric that provides delivery guarantees. The ordering service can be implemented in different ways: ranging from a centralized service (used e.g., in development and testing) to distributed protocols that target different network and node fault models.\n\n\n\u6392\u5e8f\u8005\n\u4ea7\u751f\n\u6392\u5e8f\u670d\u52a1\n\uff0c\u5373\uff0c\u4e00\u4e2a\u63d0\u4f9b\u4ea4\u4ed8\u4fdd\u8bc1\u7684\u901a\u4fe1\u67b6\u6784\u3002\u6392\u5e8f\u670d\u52a1\u80fd\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5b9e\u73b0\uff1a\u4ece\u96c6\u4e2d\u670d\u52a1\u6392\u5e8f\uff08\u4f8b\u5982\uff0c\u5f00\u53d1\u548c\u6d4b\u8bd5\uff09\u7684\u5206\u5e03\u5f0f\u534f\u8bae\uff0c\u6307\u5411\u4e0d\u540c\u7684\u7f51\u7edc\u548c\u8282\u70b9\u6545\u969c\u6a21\u578b\u3002\n\n\nOrdering service provides a shared \ncommunication channel\n to clients and peers, offering a broadcast service for messages containing transactions. Clients connect to the channel and may broadcast messages on the channel which are then delivered to all peers. The channel supports \natomic\n delivery of all messages, that is, message communication with total-order delivery and (implementation specific) reliability. In other words, the channel outputs the same messages to all connected peers and outputs them to all peers in the same logical order. This atomic communication guarantee is also called \ntotal-order broadcast\n, \natomic broadcast\n, or \nconsensus\n in the context of distributed systems. The communicated messages are the candidate transactions for inclusion in the blockchain state.\n\n\n\u6392\u5e8f\u670d\u52a1\u4e3a\u5ba2\u6237\u7aef\u548cpeer\u8282\u70b9\u63d0\u4f9b\u5171\u4eab\u7684\n\u901a\u4fe1\u4fe1\u9053\n\uff0c\u4e3a\u5305\u542b\u4ea4\u6613\u7684\u6d88\u606f\u63d0\u4f9b\u5e7f\u64ad\u670d\u52a1\u3002\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u4fe1\u9053\uff0c\u53ef\u4ee5\u5728\u4fe1\u9053\u4e0a\u5e7f\u64ad\u6d88\u606f\uff0c\u4fe1\u9053\u968f\u540e\u4f20\u9012\u6d88\u606f\u7ed9\u6240\u6709peer\u8282\u70b9\u3002\u4fe1\u9053\u652f\u6301\u6240\u6709\u6d88\u606f\u7684\n\u539f\u5b50\n\u4f20\u9012\uff0c\u610f\u601d\u662f\uff0c\u5168\u90e8\u6392\u5e8f\u4ea4\u4ed8\u7684\u6d88\u606f\u901a\u4fe1\u548c\uff08\u5177\u4f53\u5b9e\u65bd\uff09\u53ef\u9760\u6027\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4fe1\u9053\u8f93\u51fa\u540c\u6837\u7684\u6d88\u606f\u7ed9\u6240\u6709\u8fde\u63a5\u7684peer\u8282\u70b9\u5e76\u4e14\u8f93\u51fa\u7684\u6d88\u606f\u5177\u6709\u540c\u6837\u7684\u903b\u8f91\u987a\u5e8f\u3002\u8fd9\u4e2a\u539f\u5b50\u901a\u4fe1\u4fdd\u8bc1\u4e5f\u79f0\u4e3a\n\u5168\u90e8\u6392\u5e8f\u5e7f\u64ad\n\uff0c\n\u539f\u5b50\u5e7f\u64ad\n\uff0c\u6216\u662f\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684\n\u5171\u8bc6\n\u3002\u901a\u4fe1\u6d88\u606f\u662f\u5305\u542b\u5728\u533a\u5757\u94fe\u72b6\u6001\u4e2d\u7684\u7533\u8bf7\u4ea4\u6613\u3002\n\n\nPartitioning (ordering service channels).\n Ordering service may support multiple \nchannels\n similar to the \ntopics\n of a publish/subscribe (pub/sub) messaging system. Clients can connects to a given channel and can then send messages and obtain the messages that arrive. Channels can be thought of as partitions - clients connecting to one channel are unaware of the existence of other channels, but clients may connect to multiple channels. Even though some ordering service implementations included with Hyperledger Fabric v1 will support multiple channels, for simplicity of presentation, in the rest of this document, we assume ordering service consists of a single channel/topic.\n\n\n\u5206\u9694\uff08\u6392\u5e8f\u670d\u52a1\u4fe1\u9053\uff09\u3002\n\u6392\u5e8f\u670d\u52a1\u53ef\u4ee5\u652f\u6301\u591a\u4e2a\n\u4fe1\u9053\n\uff0c\u7c7b\u4f3c\u53d1\u5e03/\u8ba2\u9605\n\u4e3b\u9898\n\u6d88\u606f\u7cfb\u7edf\u3002\u5ba2\u6237\u7aef\u80fd\u591f\u8fde\u63a5\u5230\u4e00\u4e2a\u7ed9\u5b9a\u7684\u4fe1\u9053\uff0c\u7136\u540e\u80fd\u591f\u53d1\u9001\u6d88\u606f\u548c\u83b7\u5f97\u5230\u8fbe\u7684\u6d88\u606f\u3002\u4fe1\u9053\u80fd\u591f\u88ab\u8ba4\u4e3a\u662f\u5206\u533a-\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u4e00\u4e2a\u4fe1\u9053\u800c\u6ca1\u6709\u5bdf\u89c9\u5230\u5176\u5b83\u4fe1\u9053\u7684\u5b58\u5728\uff0c\u4f46\u5ba2\u6237\u7aef\u53ef\u4ee5\u8fde\u63a5\u5230\u591a\u4e2a\u4fe1\u9053\u3002\u5c3d\u7ba1\u4e00\u4e9b\u6392\u5e8f\u670d\u52a1\u5b9e\u73b0\u5305\u62ecHyperledger Fabric v1\u5c06\u652f\u6301\u591a\u4fe1\u9053\uff0c\u4e3a\u4e86\u9610\u8ff0\u7b80\u5355\uff0c\u5728\u672c\u6587\u6863\u7684\u5269\u4f59\u90e8\u5206\uff0c\u6211\u4eec\u5047\u5b9a\u6392\u5e8f\u670d\u52a1\u5305\u542b\u4e00\u4e2a\u5355\u72ec\u7684\u4fe1\u9053/\u4e3b\u9898\u3002\n\n\nOrdering service API.\n Peers connect to the channel provided by the ordering service, via the interface provided by the ordering service. The ordering service API consists of two basic operations (more generally \nasynchronous events\n):\n\n\n\u6392\u5e8f\u670d\u52a1API\u3002\npeer\u8282\u70b9\u901a\u8fc7\u6392\u5e8f\u670d\u52a1\u63d0\u4f9b\u7684\u63a5\u53e3\u8fde\u63a5\u5230\u6392\u5e8f\u670d\u52a1\u63d0\u4f9b\u7684\u4fe1\u9053\u3002\u6392\u5e8f\u670d\u52a1API\u5305\u542b\u4e24\u4e2a\u57fa\u672c\u64cd\u4f5c\uff08\u66f4\u591a\u662f\n\u5f02\u6b65\u4e8b\u4ef6\n\uff09\uff1a\n\n\nTODO\n add the part of the API for fetching particular blocks under client/peer specified sequence numbers.\n\n\n\n\nbroadcast(blob): a client calls this to broadcast an arbitrary message blob for dissemination over the channel. This is also called request(blob) in the BFT context, when sending a request to a service.\n\n\n\n\n\u5f85\u529e\n\uff1a\u589e\u52a0\u5728\u5ba2\u6237\u7aef/peer\u8282\u70b9\u6307\u5b9a\u5e8f\u5217\u53f7\u4e0b\u53d6\u5f97\u7279\u5b9a\u5757\u7684API\u3002\n\n\n\n\n\n\nbroadcast(blob): \u5ba2\u6237\u7aef\u8c03\u7528\u6b64\u51fd\u6570\u6765\u5e7f\u64ad\u4efb\u610f\u6d88\u606fblob\u5728\u5168\u4fe1\u9053\u6563\u64ad\u3002\u8fd9\u5728BFT\u73af\u5883\u4e0b\u4e5f\u79f0\u4e3arequest(blob)\uff0c\u5f53\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\u5230\u670d\u52a1\u5668\u65f6\u3002\n\n\n\n\n\n\ndeliver(seqno, prevhash, blob): the ordering service calls this on the peer to deliver the message blob with the specified non-negative integer sequence number (seqno) and hash of the most recently delivered blob (prevhash). In other words, it is an output event from the ordering service. deliver() is also sometimes called notify() in pub-sub systems or commit() in BFT systems.\n\n\n\n\n\n\ndeliver(seqno, prevhash, blob):\u6392\u5e8f\u670d\u52a1\u5728peer\u8282\u70b9\u4f20\u9001\u5e26\u6709\u975e\u8d1f\u6574\u578b\u5e8f\u5217\u53f7\uff08seqno\uff09\u548cblob\u7684\u6700\u8fd1\u54c8\u5e0c(prevhash)\u7684\u6d88\u606fblob\u65f6\u8c03\u7528\u8fd9\u4e2a\u3002\u6362\u8a00\u4e4b\uff0c\u5b83\u662f\u4ece\u6392\u5e8f\u670d\u52a1\u4ea7\u751f\u7684\u8f93\u51fa\u4e8b\u4ef6\u3002deliver()\u6709\u65f6\u5728\u53d1\u5e03/\u8ba2\u9605\u7cfb\u7edf\u4e5f\u79f0\u4e3anotify() \uff0c\u6216\u5728BFT\u7cfb\u7edf\u4e2d\u79f0\u4e3acommit()\u3002\n\n\n\n\n\n\nLedger and block formation.\n The ledger (see also Sec. 1.2.2) contains all data output by the ordering service. In a nutshell, it is a sequence of deliver(seqno, prevhash, blob) events, which form a hash chain according to the computation of prevhash described before.\n\n\n\u8d26\u672c\u548c\u5757\u6784\u6210\u3002\n \u8d26\u672c\uff08\u89c11.2.2\uff09\u5305\u542b\u4e86\u6392\u5e8f\u670d\u52a1\u8f93\u51fa\u7684\u6240\u6709\u6570\u636e\u3002\u6982\u62ec\u5730\u8bf4\uff0c\u5b83\u662f\u4e00\u7cfb\u5217deliver(seqno, prevhash, blob)\u4e8b\u4ef6\uff0c\u6839\u636e\u4e4b\u524d\u63cf\u8ff0\u7684prevhash\u8ba1\u7b97\u5f62\u6210\u7684\u4e00\u4e2a\u54c8\u5e0c\u94fe\u3002\n\n\nMost of the time, for efficiency reasons, instead of outputting individual transactions (blobs), the ordering service will group (batch) the blobs and output blocks within a single deliver event. In this case, the ordering service must impose and convey a deterministic ordering of the blobs within each block. The number of blobs in a block may be chosen dynamically by an ordering service implementation.\n\n\n\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u51fa\u4e8e\u6548\u7387\u7684\u539f\u56e0\uff0c\u4ee3\u66ff\u8f93\u51fa\u5355\u4e2a\u4ea4\u6613\uff08blobs\uff09\uff0c\u6392\u5e8f\u670d\u52a1\u4f1a\u6279\u91cf\u8f93\u51fablobs\uff0c\u800c\u4e14\u8f93\u51fa\u5757\u5728\u4e00\u4e2a\u5355\u4e2a\u4ea4\u4ed8\u4e8b\u4ef6\u4e2d\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6392\u5e8f\u670d\u52a1\u5fc5\u987b\u5728\u6bcf\u4e2a\u5757\u5185\u5b9e\u65bd\u548c\u4f20\u9012blobs\u7684\u786e\u5b9a\u987a\u5e8f\u3002\u5757\u5185blobs\u7684\u6570\u91cf\u53ef\u4ee5\u7531\u6392\u5e8f\u670d\u52a1\u5b9e\u73b0\u52a8\u6001\u9009\u62e9\u3002\n\n\nIn the following, for ease of presentation, we define ordering service properties (rest of this subsection) and explain the workflow of transaction endorsement (Section 2) assuming one blob per deliver event. These are easily extended to blocks, assuming that a deliver event for a block corresponds to a sequence of individual deliver events for each blob within a block, according to the above mentioned deterministic ordering of blobs within a blocs.\n\n\n\u63a5\u4e0b\u6765\uff0c\u4e3a\u4e86\u4fbf\u4e8e\u8bf4\u660e\uff0c\u6211\u4eec\u5b9a\u4e49\u6392\u5e8f\u670d\u52a1\u7684\u5c5e\u6027\uff08\u672c\u8282\u7684\u5269\u4f59\u90e8\u5206\uff09\u548c\u89e3\u91ca\u4ea4\u6613\u80cc\u4e66\u7684\u5de5\u4f5c\u6d41\u7a0b\uff08\u7b2c2\u8282\uff09\uff0c\u5047\u5b9a\u6bcf\u4e2adeliver\u4e8b\u4ef6\u4e00\u4e2ablob\u3002\u8fd9\u4e9b\u5bb9\u6613\u6269\u5c55\u5230\u5757\uff0c\u5047\u5b9a\u4e00\u4e2a\u5757\u7684deliver\u4e8b\u4ef6\u5bf9\u5e94\u4e00\u7cfb\u5217\u5355\u4e2adeliver\u4e8b\u4ef6\uff0c\u5bf9\u4e8e\u5757\u5185\u7684\u6bcf\u4e2ablob\uff0c\u6839\u636e\u4e0a\u8ff0\u63cf\u8ff0\u786e\u5b9a\u5757\u5185blobs\u987a\u5e8f\u3002\n\n\nOrdering service properties\n\n\nThe guarantees of the ordering service (or atomic-broadcast channel) stipulate what happens to a broadcasted message and what relations exist among delivered messages. These guarantees are as follows:\n\n\n\u6392\u5e8f\u670d\u52a1\u7279\u6027\n\n\n\u6392\u5e8f\u670d\u52a1\u7684\u4fdd\u8bc1\uff08\u6216\u539f\u5b50\u5e7f\u64ad\u4fe1\u9053\uff09\u89c4\u5b9a\u4e86\u5e7f\u64ad\u6d88\u606f\u7684\u53d1\u751f\u548c\u4ea4\u4ed8\u6d88\u606f\u4e4b\u95f4\u5b58\u5728\u4ec0\u4e48\u5173\u7cfb\u3002\u8fd9\u4e9b\u4fdd\u8bc1\u5982\u4e0b\uff1a\n\n\n1\u3001\nSafety (consistency guarantees)\n: As long as peers are connected for sufficiently long periods of time to the channel (they can disconnect or crash, but will restart and reconnect), they will see an \nidentical\n series of delivered (seqno, prevhash, blob) messages. This means the outputs (deliver() events) occur in the \nsame order\n on all peers and according to sequence number and carry \nidentical content\n (blob and prevhash) for the same sequence number. Note this is only a logical order, and a deliver(seqno, prevhash, blob) on one peer is not required to occur in any real-time relation to deliver(seqno, prevhash, blob) that outputs the same message at another peer. Put differently, given a particular seqno, no two correct peers deliver different prevhash or blob values. Moreover, no value blob is delivered unless some client (peer) actually called broadcast(blob) and, preferably, every broadcasted blob is only delivered once.\n\n\n1\u3001\n\u5b89\u5168\u6027\uff08\u4e00\u81f4\u6027\u4fdd\u8bc1\uff09\n\uff1a\u53ea\u8981peer\u8282\u70b9\u8fde\u63a5\u5230\u4fe1\u9053\u8db3\u591f\u957f\u7684\u65f6\u95f4\uff08\u5b83\u4eec\u80fd\u591f\u65ad\u5f00\u6216\u5954\u6e83\uff0c\u4f46\u4f1a\u91cd\u542f\u548c\u91cd\u65b0\u8fde\u63a5\uff09\uff0c\u5b83\u4eec\u4f1a\u770b\u5230\u4ea4\u4ed8\uff08seqno,prevhash,blob\uff09\u6d88\u606f\u7684\n\u540c\u7b49\n\u5e8f\u5217\u3002\u8fd9\u610f\u5473\u7740\u5411\u6240\u6709peer\u8282\u70b9\u8f93\u51fa\uff08deliver()events\uff09\n\u76f8\u540c\u6392\u5e8f\n\uff0c\u4ee5\u53ca\u6839\u636e\u5e8f\u5217\u53f7\u548c\u4e3a\u76f8\u540c\u5e8f\u5217\u53f7\u643a\u5e26\n\u540c\u7b49\u5185\u5bb9\n\uff08blob\u548cprevhash\uff09\u3002\u6ce8\u610f\u8fd9\u4ec5\u662f\u4e00\u4e2a\u903b\u8f91\u987a\u5e8f\uff0c\u5728\u4e00\u4e2apeer\u8282\u70b9\u4e0a\u7684deliver(seqno,prevhash,blob)\u662f\u4e0d\u9700\u8981\u4e0e\u53e6\u5916\u4e00\u4e2apeer\u8282\u70b9\u8f93\u51fa\u7684deliver(seqno,prevhash,blob)\u53d1\u751f\u4efb\u4f55\u5b9e\u65f6\u5173\u7cfb\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u7279\u5b9a\u7684seqno\uff0c\u6ca1\u6709\u4e24\u4e2a\u6b63\u786e\u7684peer\u8282\u70b9\u4ea4\u4ed8\u4e0d\u540c\u7684prehash\u6216blob\u503c\u3002\u800c\u4e14\uff0c\u6ca1\u6709\u503cblob\u4ea4\u4ed8\u9664\u975e\u4e00\u4e9b\u5ba2\u6237\u7aef\uff08peer\u8282\u70b9\uff09\u5b9e\u9645\u662f\u5e7f\u64ad\uff08blob\uff09\uff0c\u4ee5\u53ca\u66f4\u597d\u7684\uff0c\u6bcf\u4e2a\u5e7f\u64adblob\u53ea\u4ea4\u4ed8\u4e00\u6b21\u3002\n\n\nFurthermore, the deliver() event contains the cryptographic hash of the data in the previous deliver() event (prevhash). When the ordering service implements atomic broadcast guarantees, prevhash is the cryptographic hash of the parameters from the deliver() event with sequence number seqno-1. This establishes a hash chain across deliver() events, which is used to help verify the integrity of the ordering service output, as discussed in Sections 4 and 5 later. In the special case of the first deliver() event, prevhash has a default value.\n\n\n\u6b64\u5916\uff0cdeliver()\u4e8b\u4ef6\u5305\u542b\u4e4b\u524ddeliver()\u4e8b\u4ef6\uff08prevhash\uff09\u7684\u6570\u636e\u52a0\u5bc6\u54c8\u5e0c\u3002\u5f53\u6392\u5e8f\u670d\u52a1\u5b9e\u73b0\u539f\u5b50\u5e7f\u64ad\u4fdd\u8bc1\uff0cprevhash\u662f\u4ece\u5e8f\u5217\u53f7\u4e3aseqno-1\u7684deliver()\u4e8b\u4ef6\u5f97\u5230\u7684\u53c2\u6570\u7684\u52a0\u5bc6\u54c8\u5e0c\uff0c\u8fd9\u5728\u7b2c4\u8282\u548c\u7b2c5\u8282\u8ba8\u8bba\u3002\u5bf9\u4e8e\u7b2c\u4e00\u4e2adeliver()\u4e8b\u4ef6\u7279\u4f8b\uff0cprevhash\u6709\u4e00\u4e2a\u7f3a\u7701\u503c\u3002\n\n\n2\u3001\nLiveness (delivery guarantee)\n: Liveness guarantees of the ordering service are specified by a ordering service implementation. The exact guarantees may depend on the network and node fault model.\n\n\nIn principle, if the submitting client does not fail, the ordering service should guarantee that every correct peer that connects to the ordering service eventually delivers every submitted transaction.\n\n\n2\u3001\n\u6d3b\u8dc3\u5ea6\uff08\u4ea4\u4ed8\u4fdd\u8bc1\uff09\n\uff1a\u6392\u5e8f\u670d\u52a1\u7684\u6d3b\u8dc3\u5ea6\u4fdd\u8bc1\u7531\u6392\u5e8f\u670d\u52a1\u5b9e\u73b0\u786e\u5b9a\u3002\u51c6\u786e\u7684\u4fdd\u8bc1\u53ef\u4ee5\u4f9d\u8d56\u4e8e\u7f51\u7edc\u548c\u8282\u70b9\u6545\u969c\u6a21\u578b\u3002\n\n\n\u539f\u5219\u4e0a\uff0c\u5982\u679c\u63d0\u4ea4\u5ba2\u6237\u7aef\u6ca1\u6709\u5931\u8d25\uff0c\u6392\u5e8f\u670d\u52a1\u5e94\u8be5\u4fdd\u8bc1\u6bcf\u4e2a\u8fde\u63a5\u5230\u6392\u5e8f\u670d\u52a1\u7684\u6b63\u786epeer\u8282\u70b9\u7ec8\u7a76\u4ea4\u4ed8\u6bcf\u4e2a\u63d0\u4ea4\u4ea4\u6613\u3002\n\n\nTo summarize, the ordering service ensures the following properties:\n\n\n\u6982\u62ec\u5730\u8bf4\uff0c\u6392\u5e8f\u670d\u52a1\u786e\u4fdd\u4ee5\u4e0b\u7279\u6027\uff1a\n\n\n\n\n\n\nAgreement.\n For any two events at correct peers deliver(seqno, prevhash0, blob0) and deliver(seqno, prevhash1, blob1) with the same seqno, prevhash0==prevhash1 and blob0==blob1;\n\n\n\n\n\n\n\u4e00\u81f4. \n\u5bf9\u4e8e\u4efb\u4f55\u4e24\u4e2a\u5177\u6709\u76f8\u540cseqno\u7684\u6b63\u786epeer\u8282\u70b9\u7684\u4e8b\u4ef6deliver(seqno, prevhash0, blob0)\u548cdeliver(seqno, prevhash1, blob1) , \u5219prevhash0==prevhash1\uff0c\u4ee5\u53ca blob0==blob1;\n\n\n\n\n\n\nHashchain integrity.\n For any two events at correct peers deliver(seqno-1, prevhash0, blob0) and deliver(seqno, prevhash, blob), prevhash = HASH(seqno-1||prevhash0||blob0).\n\n\n\n\n\n\n\u54c8\u5e0c\u94fe\u5b8c\u6574\u6027\u3002\n\u5bf9\u4e8e\u4efb\u4f55\u5728\u6b63\u786epeer\u8282\u70b9\u7684\u4e24\u4e2a\u4e8b\u4ef6deliver(seqno-1, prevhash0, blob0)\u548cdeliver(seqno, prevhash, blob), prevhash = HASH(seqno-1||prevhash0||blob0).\n\n\n\n\n\n\nNo skipping.\n If an ordering service outputs deliver(seqno, prevhash, blob) at a correct peer p, such that seqno\n0, then p already delivered an event deliver(seqno-1, prevhash0, blob0).\n\n\n\n\n\n\n\u6ca1\u6709\u8df3\u8fc7.\n \u5982\u679c\u6392\u5e8f\u670d\u52a1\u5728\u6b63\u786epeer\u8282\u70b9p\u8f93\u51fadeliver(seqno, prevhash, blob) , \u8fd9\u6837\u7684\u8bddseqno\n0, \u7136\u540ep\u5df2\u7ecf\u4ea4\u4ed8\u4e8b\u4ef6deliver(seqno-1, prevhash0, blob0).\n\n\n\n\n\n\nNo creation.\n Any event deliver(seqno, prevhash, blob) at a correct peer must be preceded by a broadcast(blob) event at some (possibly distinct) peer;\n\n\n\n\n\n\n\u6ca1\u6709\u521b\u9020.\n \u4efb\u4f55\u5728\u6b63\u786epeer\u8282\u70b9\u4e0a\u7684\u4e8b\u4ef6deliver(seqno, prevhash, blob)\u5fc5\u987b\u4e4b\u524d\u4e00\u5b9a\u6709\u4e00\u4e2abroadcast(blob)\u4e8b\u4ef6\u5728\u4e00\u4e9b(\u53ef\u80fd\u662f\u4e0d\u540c\u7684)peer\u8282\u70b9\u4e0a;\n\n\n\n\n\n\nNo duplication (optional, yet desirable).\n For any two events broadcast(blob) and broadcast(blob\n), when two events deliver(seqno0, prevhash0, blob) and deliver(seqno1, prevhash1, blob\n) occur at correct peers and blob == blob\n, then seqno0==seqno1 and prevhash0==prevhash1.\n\n\n\n\n\n\n\u6ca1\u6709\u91cd\u590d (\u53ef\u9009,\u4f46\u53ef\u53d6).\n \u5bf9\u4e8e\u4efb\u4f55\u4e24\u4e2a\u4e8b\u4ef6broadcast(blob)\u548cbroadcast(blob\n), \u5f53\u4e24\u4e2a\u4e8b\u4ef6deliver(seqno0, prevhash0, blob) \u548c deliver(seqno1, prevhash1, blob\n) \u53d1\u751f\u5728\u6b63\u786e\u7684\u8282\u70b9 \u548c blob == blob\n, \u90a3\u4e48 seqno0==seqno1 \u548c prevhash0==prevhash1.\n\n\n\n\n\n\nLiveness.\n If a correct client invokes an event broadcast(blob) then every correct peer \u201ceventually\u201d issues an event deliver(\n, \n, blob), where * denotes an arbitrary value.\n\n\n\n\n\n\n\u6d3b\u8dc3\u6027\u3002\n\u5982\u679c\u6b63\u786e\u7684\u5ba2\u6237\u7aef\u8c03\u7528\u4e8b\u4ef6broadcast(blob)\u90a3\u4e48\u6bcf\u4e2a\u6b63\u786e\u7684peer\u8282\u70b9\u201c\u6700\u7ec8\u201d\u53d1\u51fa\u4e8b\u4ef6deliver(\n, \n, blob)\uff0c\u5176\u4e2d*\u8868\u793a\u4efb\u610f\u503c\u3002\n\n\n\n\n\n\n2. \u4ea4\u6613\u80cc\u4e66\u7684\u57fa\u672c\u5de5\u4f5c\u6d41\u7a0b(Basic workflow of transaction endorsement)\n\n\nIn the following we outline the high-level request flow for a transaction.\n\nRemark:\n \nNotice that the following protocol does not assume that all transactions are deterministic, i.e., it allows for non-deterministic transactions.\n\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u6982\u8ff0\u4e00\u4e2a\u4ea4\u6613\u7684\u9ad8\u7ea7\u8bf7\u6c42\u6d41\u7a0b\u3002\n\n\n\u5907\u6ce8\uff1a\u6ce8\u610f\u4e0b\u9762\u7684\u534f\u8bae\n\u4e0d\u5047\u5b9a\u6240\u6709\u7684\u4ea4\u6613\u662f\u786e\u5b9a\u7684\uff0c\u5373\uff0c\u5b83\u5141\u8bb8\u4e0d\u786e\u5b9a\u4ea4\u6613\n\u3002\n\n\n2.1. \u5ba2\u6237\u7aef\u521b\u5efa\u4ea4\u6613\u548c\u53d1\u9001\u7ed9\u5b83\u9009\u62e9\u7684\u80cc\u4e66peer\u8282\u70b9\uff08The client creates a transaction and sends it to endorsing peers of its choice\uff09\n\n\nTo invoke a transaction, the client sends a PROPOSE message to a set of endorsing peers of its choice (possibly not at the same time - see Sections 2.1.2. and 2.3.). The set of endorsing peers for a given chaincodeID is made available to client via peer, which in turn knows the set of endorsing peers from endorsement policy (see Section 3). For example, the transaction could be sent to all endorsers of a given chaincodeID. That said, some endorsers could be offline, others may object and choose not to endorse the transaction. The submitting client tries to satisfy the policy expression with the endorsers available.\n\n\n\u8c03\u7528\u4ea4\u6613\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2aPROPOSE\u6d88\u606f\u5230\u5b83\u9009\u62e9\u7684\u4e00\u7ec4\u80cc\u4e66peer\u8282\u70b9\uff08\u53ef\u80fd\u4e0d\u662f\u540c\u4e00\u65f6\u95f4\uff0c\u89c1\u7b2c2.1.2\u8282\u548c\u7b2c2.3\u8282\uff09\u3002\u7ed9\u5b9achaincodeID\u7684\n\n\n\u80cc\u4e66peer\u8282\u70b9\u7684\u8bbe\u7f6e\u7531\u5ba2\u6237\u7aef\u901a\u8fc7peer\u8282\u70b9\u5b9e\u73b0\uff0c\u4ece\u80cc\u4e66\u7b56\u7565\uff08\u89c1\u7b2c3\u8282\uff09\u77e5\u9053\u80cc\u4e66peer\u8282\u70b9\u7684\u8bbe\u7f6e\u3002\u4f8b\u5982\uff0c\u4ea4\u6613\u80fd\u88ab\u53d1\u9001\u7ed9\u6240\u6709\u7ed9\u5b9a\n\n\nchaincodeID\u80cc\u4e66\u8005.\u90a3\u5c31\u662f\u8bf4\uff0c\u4e00\u4e9b\u80cc\u4e66\u8005\u80fd\u591f\u79bb\u7ebf\uff0c\u5176\u5b83\u4eba\u53ef\u80fd\u53cd\u5bf9\u548c\u9009\u62e9\u4e0d\u4e3a\u4ea4\u6613\u80cc\u4e66\u3002\u63d0\u4ea4\u5ba2\u6237\u7aef\u5c1d\u8bd5\u6ee1\u8db3\u80cc\u4e66\u8005\u53ef\u7528\u7684\u80cc\u4e66\u7b56\u7565\u8868\u8fbe\u3002\n\n\nIn the following, we first detail PROPOSE message format and then discuss possible patterns of interaction between submitting client and endorsers.\n\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9996\u5148\u63cf\u8ff0PROPOSE\u6d88\u606f\u683c\u5f0f\uff0c\u7136\u540e\u8ba8\u8bba\u5728\u63d0\u4ea4\u5ba2\u6237\u7aef\u548c\u80cc\u4e66\u8005\u4e4b\u95f4\u53ef\u80fd\u7684\u4e92\u52a8\u6a21\u5f0f\u3002\n\n\n2.1.1. \nPROPOSE\n\u6d88\u606f\u683c\u5f0f(\nPROPOSE\n message format)\n\n\nThe format of a PROPOSE message is \n, where tx is a mandatory and anchor optional argument explained in the following.\n\n\n\u4e00\u4e2aPROPOSE\u6d88\u606f\u7684\u683c\u5f0f\u662f\n\uff0c\u5176\u4e2dtx\u662f\u5f3a\u5236\u7684\uff0canchor\u53ef\u9009\u53c2\u6570\u5728\u4e0b\u9762\u5217\u51fa\u3002\n\n\n\n\ntx=\n, where\n\n\nclientID is an ID of the submitting client,\n\n\nchaincodeID refers to the chaincode to which the transaction pertains,\n\n\ntxPayload is the payload containing the submitted transaction itself,\n\n\ntimestamp is a monotonically increasing (for every new transaction) integer maintained by the client,\n\n\n\n\nclientSig is signature of a client on other fields of tx.\n\n\n\n\n\n\nclientID \u662f\u63d0\u4ea4\u5ba2\u6237\u7aef\u7684\u8eab\u4efd\uff0c\n\n\n\n\nchaincodeID \u5f15\u7528\u4ea4\u6613\u76f8\u5173\u7684\u94fe\u7801\uff0c\n\n\ntxPayload \u662f\u63d0\u4ea4\u4ea4\u6613\u81ea\u8eab\u7684\u8f7d\u4f53,\n\n\ntimestamp \u662f\u7531\u5ba2\u6237\u7aef\u7ef4\u62a4\u7684\u4e00\u4e2a\u5355\u72ec\u9012\u589e(\u4e3a\u6bcf\u4e00\u7b14\u4ea4\u6613)\u6574\u578b\u503c,\n\n\nclientSig \u662ftx\u7684\u5176\u5b83\u57df\u5ba2\u6237\u7aef\u7b7e\u540d.\n\n\n\n\nThe details of txPayload will differ between invoke transactions and deploy transactions (i.e., invoke transactions referring to a deploy-specific system chaincode). \n\n\ntxPayload\u7684\u7ec6\u8282\u4f1a\u5728\u8c03\u7528\u4ea4\u6613\u548c\u90e8\u7f72\u4ea4\u6613\u4e4b\u95f4\u6709\u6240\u4e0d\u540c\uff08\u5373\uff0c\u8c03\u7528\u4ea4\u6613\u5f15\u7528\u90e8\u7f72\u6307\u5b9a\u7684\u7cfb\u7edf\u94fe\u7801\uff09\u3002\n\n\nFor an \ninvoke transaction\n, txPayload would consist of two fields\n\n\n\n\ntxPayload = \n, where\n\n\noperation denotes the chaincode operation (function) and arguments,\n\n\nmetadata denotes attributes related to the invocation.\n\n\n\n\n\u5bf9\u4e8e\n\u8c03\u7528\u4ea4\u6613\n\uff0ctxPayload\u4f1a\u5305\u542b\u4e24\u4e2a\u57df\n\n\n\n\n\n\ntxPayload = \n, \u5176\u4e2d\n\n\n\n\n\n\noperation \u8868\u793a\u94fe\u7801\u64cd\u4f5c\uff08\u51fd\u6570\uff09\u548c\u53c2\u6570,\n\n\n\n\n\n\nmetadata \u8868\u793a\u8c03\u7528\u76f8\u5173\u7684\u5c5e\u6027.\n\n\n\n\n\n\nFor a \ndeploy transaction\n, txPayload would consist of three fields\n- txPayload = \n, where\n  - source denotes the source code of the chaincode,\n  - metadata denotes attributes related to the chaincode and application,\n  - policies contains policies related to the chaincode that are accessible to all peers, such as the endorsement policy. Note that endorsement policies are not supplied with txPayload in a deploy transaction, but txPayload of a deploy contains endorsement policy ID and its parameters (see Section 3).\n\n\n\u5bf9\u4e8e\n\u90e8\u7f72\u4ea4\u6613\n\uff0ctxPayload\u4f1a\u5305\u542b\u4e09\u4e2a\u57df\n\n\ntxPayload = \n, \u5176\u4e2d\n\n\nsource \u8868\u793a\u94fe\u7801\u7684\u6e90\u7801\n\n\nmetadata \u8868\u793a\u94fe\u7801\u548c\u5e94\u7528\u7684\u76f8\u5173\u5c5e\u6027\n\n\npolicies \u5305\u542b\u6240\u6709peer\u8282\u70b9\u53ef\u8bbf\u95ee\u7684\u94fe\u7801\u7684\u76f8\u5173\u7b56\u7565\uff0c\u50cf\u80cc\u4e66\u7b56\u7565\u3002\u6ce8\u610f\u80cc\u4e66\u7b56\u7565\u5728\u90e8\u7f72\u4ea4\u6613\u4e2d\u4e0d\u652f\u6301txPayload\uff0c\u4f46\u90e8\u7f72\u7684txPayload\u5305\u542b\u80cc\u4e66\u7b56\u7565ID\u548c\u5b83\u7684\u53c2\u6570\uff08\u89c1\u7b2c3\u8282\uff09\u3002\n\n\n\n\n\n\nanchor contains \nread version dependencies\n, or more specifically, key-version pairs (i.e., anchor is a subset of KxN), that binds or \u201canchors\u201d the PROPOSE request to specified versions of keys in a KVS (see Section 1.2.). If the client specifies the anchor argument, an endorser endorses a transaction only upon read version numbers of corresponding keys in its local KVS match anchor (see Section 2.2. for more details).\n\n\n\n\n\n\nanchor\u5305\u542b\n\u8bfb\u7248\u672c\u4f9d\u8d56\n\uff0c\u6216\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u952e-\u7248\u672c\u5bf9\uff08\u5373\uff0canchor\u662fKxN\u7684\u4e00\u4e2a\u5b50\u96c6\uff09\uff0c\u5b83\u6346\u7ed1\u6216\u201c\u951a\u201dPROPOSE\u8bf7\u6c42\u5230\u6307\u5b9aKVS\u4e2dkey\u7684\u7248\u672c\uff08\u7b2c1.2\u8282\uff09\u3002\u5982\u679c\u5ba2\u6237\u7aef\u6307\u5b9aanchor\u53c2\u6570\uff0c\u80cc\u4e66\u8005\u80cc\u4e66\u4ea4\u6613\u7684\u60c5\u51b5\u662f\uff0c\u53ea\u57fa\u4e8e\u8bfb\u5b83\u672c\u5730KVS\u5339\u914danchor\u4e2d\u7684\u76f8\u5e94KEY\u7684\u7248\u672c\u53f7\uff08\u66f4\u8be6\u7ec6\u5185\u5bb9\u89c1\u7b2c2.2\u8282\uff09\u3002\n\n\n\n\n\n\nCryptographic hash of tx is used by all nodes as a unique transaction identifier tid (i.e., tid=HASH(tx)). The client stores tid in memory and waits for responses from endorsing peers.\n\n\ntx\u52a0\u5bc6\u54c8\u5e0c\u88ab\u6240\u6709node\u8282\u70b9\u7528\u4f5c\u552f\u4e00\u7684\u4ea4\u6613\u6807\u8bc6tid\uff08\u5373\uff0ctid=HASH(tx)\uff09\u3002\u5ba2\u6237\u7aef\u4fdd\u5b58tid\u5728\u5185\u5b58\u4e2d\uff0c\u7b49\u5f85\u80cc\u4e66peer\u8282\u70b9\u7684\u54cd\u5e94\u3002\n\n\n2.1.2.\u6d88\u606f\u6a21\u5f0f(Message patterns)\n\n\nThe client decides on the sequence of interaction with endorsers. For example, a client would typically send \n (i.e., without the anchor argument) to a single endorser, which would then produce the version dependencies (anchor) which the client can later on use as an argument of its PROPOSE message to other endorsers. As another example, the client could directly send \n (without anchor) to all endorsers of its choice. Different patterns of communication are possible and client is free to decide on those (see also Section 2.3.).\n\n\n\u5ba2\u6237\u7aef\u51b3\u5b9a\u4e0e\u80cc\u4e66\u8005\u4e92\u52a8\u7684\u987a\u5e8f\u3002\u4f8b\u5982\uff0c\u5ba2\u6237\u7aef\u901a\u5e38\u4f1a\u53d1\u9001\n\uff08\u5373\uff0c\u6ca1\u6709anchor\u53c2\u6570\uff09\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u80cc\u4e66\u8005\uff0c\u80cc\u4e66\u8005\u968f\u540e\u4ea7\u751f\u7248\u672c\u4f9d\u8d56\uff08anchor\uff09,\u5ba2\u6237\u7aef\u53ef\u4ee5\u5728\u665a\u4e9b\u65f6\u5019\u4f7f\u7528\u8fd9\u4e2a\u7248\u672c\u4f9d\u8d56\uff08anchor\uff09\u4f5c\u4e3a\u5b83\u7684PROPOSE\u6d88\u606f\u53c2\u6570\uff0c\u53d1\u9001\u7ed9\u5176\u5b83\u80cc\u4e66\u8005\u3002\u53e6\u5916\u7684\u4f8b\u5b50\uff0c\u5ba2\u6237\u7aef\u80fd\u76f4\u63a5\u53d1\u9001\n\uff08\u6ca1\u6709anchor\uff09\u5230\u5b83\u9009\u62e9\u7684\u6240\u6709\u80cc\u4e66\u8005\u3002\u4e0d\u540c\u7684\u901a\u4fe1\u6a21\u5f0f\u90fd\u6709\u53ef\u80fd\uff0c\u5ba2\u6237\u7aef\u5728\u8fd9\u65b9\u9762\u662f\u81ea\u7531\u7684\uff08\u4e5f\u89c1\u7b2c2.3\u8282\uff09\u3002\n\n\n2.2. \u80cc\u4e66peer\u8282\u70b9\u6a21\u62df\u4ea4\u6613\u548c\u4ea7\u751f\u80cc\u4e66\u7b7e\u540d(The endorsing peer simulates a transaction and produces an endorsement signature)\n\n\nOn reception of a \n message from a client, the endorsing peer epID first verifies the client\u2019s signature clientSig and then simulates a transaction. If the client specifies anchor then endorsing peer simulates the transactions only upon read version numbers (i.e., readset as defined below) of corresponding keys in its local KVS match those version numbers specified by anchor.\n\n\n\u5728\u4ece\u5ba2\u6237\u7aef\u63a5\u6536\n\u6d88\u606f\u65f6\uff0c\u80cc\u4e66peer\u8282\u70b9epID\u9996\u5148\u6821\u9a8c\u5ba2\u6237\u7aef\u7b7e\u540dclientSig\uff0c\u7136\u540e\u6a21\u62df\u4e00\u4e2a\u4ea4\u6613\u3002\u5982\u679c\u5ba2\u6237\u7aef\u6307\u5b9a\u4e86anchor\uff0c\u90a3\u4e48\u80cc\u4e66peer\u8282\u70b9\u6a21\u62df\u4ea4\u6613\u53ea\u57fa\u4e8e\u5728\u5b83\u672c\u5730KVS\u5339\u914d\u7684\u7531anchor\u6307\u5b9a\u7684\u7248\u672c\u53f7\u5bf9\u5e94\u7684key\u8bfb\u7248\u672c\u53f7\uff08\u5373\uff0c\u4e0b\u9762\u5b9a\u4e49\u7684readset\uff09\u3002\n\n\nSimulating a transaction involves endorsing peer tentatively executing a transaction (txPayload), by invoking the chaincode to which the transaction refers (chaincodeID) and the copy of the state that the endorsing peer locally holds.\n\n\n\u6a21\u62df\u4e00\u4e2a\u4ea4\u6613\u6d89\u53ca\u80cc\u4e66\u8282\u70b9\u5c1d\u8bd5\u6267\u884c\u4e00\u4e2a\u4ea4\u6613(txPayload), \u901a\u8fc7\u8c03\u7528\u94fe\u7801\u5230\u4ea4\u6613\u5f15\u7528\uff08chaincodeID\uff09\u548c\u80cc\u4e66peer\u8282\u70b9\u672c\u5730\u6301\u6709\u7684\u72b6\u6001\u62f7\u8d1d\u3002\n\n\nAs a result of the execution, the endorsing peer computes read version dependencies (readset) and state updates (writeset), also called MVCC+postimage info in DB language.\n\n\n\u4f5c\u4e3a\u6267\u884c\u7684\u7ed3\u679c\uff0c\u80cc\u4e66peer\u8282\u70b9\u8ba1\u7b97\u8bfb\u7248\u672c\u4f9d\u8d56\uff08readset\uff09\u548c\u72b6\u6001\u66f4\u65b0\uff08writeset\uff09\uff0c\u4e5f\u5728DB\u8bed\u8a00\u4e2d\u79f0\u4e3aMVCC+postimage info\u3002\n\n\nRecall that the state consists of key/value (k/v) pairs. All k/v entries are versioned, that is, every entry contains ordered version information, which is incremented every time when the value stored under a key is updated. The peer that interprets the transaction records all k/v pairs accessed by the chaincode, either for reading or for writing, but the peer does not yet update its state. More specifically:\n\n\n\u56de\u987e\u72b6\u6001\u5305\u542b\u952e/\u503c\u5bf9\u3002\u6240\u6709\u952e/\u503c\u5bf9\u5b9e\u4f53\u90fd\u662f\u7248\u672c\u5316\u7684\uff0c\u90a3\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e2a\u5b9e\u4f53\u5305\u542b\u6392\u5e8f\u7248\u672c\u4fe1\u606f\uff0c\u5b83\u662f\u5728\u6bcf\u6b21\u952e\u7684\u503c\u66f4\u65b0\u65f6\u589e\u52a0\u7684\u3002\u89e3\u91ca\u4ea4\u6613\u7684peer\u8282\u70b9\u8bb0\u5f55\u4e86\u6240\u6709\u7684\u88ab\u94fe\u7801\u8bbf\u95ee\u7684\u952e/\u503c\u5bf9\uff0c\u4e0d\u7ba1\u8bfb\u6216\u662f\u5199\uff0cpeer\u8282\u70b9\u4e0d\u4f1a\u66f4\u65b0\u5b83\u7684\u72b6\u6001\u3002\u66f4\u5177\u4f53\u5730\u8bf4\uff1a\n\n\n\n\n\n\nGiven state s before an endorsing peer executes a transaction, for every key k read by the transaction, pair (k,s(k).version) is added to readset.\n\n\n\n\n\n\n\u5728\u80cc\u4e66\u8282\u70b9\u6267\u884c\u4e00\u4e2a\u4ea4\u6613\u524d\u7ed9\u5b9a\u72b6\u6001s\uff0c\u88ab\u4ea4\u6613\u8bfb\u53d6\u7684\u6bcf\u4e2a\u952ek\uff0c\u952e/\u503c\u5bf9(k,s(k).version)\u88ab\u6dfb\u52a0\u5230readset\u3002\n\n\n\n\n\n\nAdditionally, for every key k modified by the transaction to the new value v\n, pair (k,v\n) is added to writeset. Alternatively, v\n could be the delta of the new value to previous value (s(k).value).\n\n\n\n\n\n\n\u6b64\u5916\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u88ab\u4ea4\u6613\u7f16\u8f91\u7684\u952ek\u5230\u503cv\n\uff0c\u952e/\u503c\u5bf9(k,v\n)\u88ab\u6dfb\u52a0\u5230writeset\u3002\u6216\u8005\uff0cv\n\u80fd\u6210\u4e3a\u65b0\u503c\u4e0e\u524d\u503c(s(k).value)\u7684\u589e\u91cf\u3002\n\n\n\n\n\n\nIf a client specifies anchor in the PROPOSE message then client specified anchor must equal readset produced by endorsing peer when simulating the transaction.\n\n\n\u5982\u679c\u5ba2\u6237\u7aef\u5728PROPOSE\u6d88\u606f\u4e2d\u6307\u5b9a\u4e86anchor\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u6307\u5b9a\u7684anchor\u5728\u6a21\u62df\u4ea4\u6613\u65f6\u5fc5\u987b\u7b49\u4e8e\u80cc\u4e66peer\u8282\u70b9\u4ea7\u751f\u7684readset.\n\n\nThen, the peer forwards internally tran-proposal (and possibly tx) to the part of its (peer\u2019s) logic that endorses a transaction, referred to as endorsing logic. By default, endorsing logic at a peer accepts the tran-proposal and simply signs the tran-proposal. However, endorsing logic may interpret arbitrary functionality, to, e.g., interact with legacy systems with tran-proposal and tx as inputs to reach the decision whether to endorse a transaction or not.\n\u7136\u540e\uff0cpeer\u8282\u70b9\u5185\u90e8\u63d0\u4ea4\u4ea4\u6613\u63d0\u6848\uff08\u53ef\u80fd\u662ftx\uff09\u5230\u5b83\u7684\u903b\u8f91\u90e8\u5206\u6765\u80cc\u4e66\u4ea4\u6613\uff0c\u79f0\u4e3a\u80cc\u4e66\u903b\u8f91\u3002\u7f3a\u7701\u65f6\uff0c\u4e00\u4e2apeer\u8282\u70b9\u7684\u80cc\u4e66\u903b\u8f91\u63a5\u53d7\u4ea4\u6613\u63d0\u6848\u5e76\u7b80\u5355\u7b7e\u7f72\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u80cc\u4e66\u903b\u8f91\u53ef\u4ee5\u6267\u884c\u4efb\u610f\u529f\u80fd\uff0c\u5230\uff0c\u4f8b\u5982\uff0c\u4e0e\u539f\u6709\u7cfb\u7edf\u4ea4\u4e92\u4ea4\u6613\u63d0\u6848\u548ctx\u4f5c\u4e3a\u8f93\u5165\u6765\u5f97\u77e5\u662f\u5426\u80cc\u4e66\u4ea4\u6613\u3002\n\n\nIf endorsing logic decides to endorse a transaction, it sends \n message to the submitting client(tx.clientID), where:\n\n\n\u5982\u679c\u80cc\u4e66\u903b\u8f91\u51b3\u5b9a\u80cc\u4e66\u4e00\u4e2a\u4ea4\u6613\uff0c\u5b83\u53d1\u9001\n \u6d88\u606f\u5230\u63d0\u4ea4\u5ba2\u6237\u7aef\uff0c\u5176\u4e2d:\n\n\n\n\n\n\ntran-proposal := (epID,tid,chaincodeID,txContentBlob,readset,writeset),\nwhere txContentBlob is chaincode/transaction specific information. The intention is to have txContentBlob used as some representation of tx (e.g., txContentBlob=tx.txPayload).\n\n\n\n\n\n\nepSig is the endorsing peer\u2019s signature on tran-proposal\n\n\n\n\n\n\n\u4ea4\u6613\u63d0\u6848 \uff1a=tran-proposal := (epID,tid,chaincodeID,txContentBlob,readset,writeset),\n\u5176\u4e2d txContentBlob \u662f\u94fe\u7801/\u4ea4\u6613\u4e13\u7528\u4fe1\u606f\u3002\u76ee\u7684\u662f\u8ba9txContentBlob \u7528\u4f5ctx\u7684\u4e00\u4e9b\u9648\u8ff0 (\u4f8b\u5982, txContentBlob=tx.txPayload).\n\n\n\n\n\n\nepSig \u662f\u80cc\u4e66peer\u8282\u70b9\u7684\u4ea4\u6613\u63d0\u6848\u7b7e\u540d\u3002\n\n\n\n\n\n\nElse, in case the endorsing logic refuses to endorse the transaction, an endorser \nmay\n send a message (TRANSACTION-INVALID, tid, REJECTED) to the submitting client.\n\n\n\u5426\u5219\uff0c\u5047\u4f7f\u80cc\u4e66\u903b\u8f91\u62d2\u7edd\u80cc\u4e66\u4ea4\u6613\uff0c\u80cc\u4e66\u8005\n\u53ef\u4ee5\n\u53d1\u9001\u6d88\u606f(TRANSACTION-INVALID, tid, REJECTED)\u5230\u63d0\u4ea4\u5ba2\u6237\u7aef\u3002\n\n\nNotice that an endorser does not change its state in this step, the updates produced by transaction simulation in the context of endorsement do not affect the state!\n\n\n\u6ce8\u610f\u80cc\u4e66\u8005\u5728\u8fd9\u4e00\u6b65\u4e0d\u80fd\u6539\u53d8\u5b83\u7684\u72b6\u6001\uff0c\u5728\u80cc\u4e66\u6ca1\u6709\u5f71\u54cd\u72b6\u6001\u7684\u60c5\u51b5\u4e0b\u4ea4\u6613\u6a21\u62df\u4ea7\u751f\u72b6\u6001\u66f4\u65b0\u3002\n\n\n2.3. \u63d0\u4ea4\u5ba2\u6237\u7aef\u6536\u96c6\u4ea4\u6613\u80cc\u4e66\u5e76\u901a\u8fc7\u6392\u5e8f\u670d\u52a1\u5e7f\u64ad\u5b83(The submitting client collects an endorsement for a transaction and broadcasts it through ordering service)\n\n\nThe submitting client waits until it receives \u201cenough\u201d messages and signatures on (TRANSACTION-ENDORSED, tid, \n, \n) statements to conclude that the transaction proposal is endorsed. As discussed in Section 2.1.2., this may involve one or more round-trips of interaction with endorsers.\n\n\n\u63d0\u4ea4\u5ba2\u6237\u7aef\u4e00\u76f4\u7b49\u5f85\u76f4\u5230\u5b83\u5728(TRANSACTION-ENDORSED, tid, \n, \n)\u4e0a\u6536\u96c6\u5230\u201c\u8db3\u591f\u201d\u7684\u6d88\u606f\u548c\u7b7e\u540d\u6765\u63a8\u65ad\u51fa\u4ea4\u6613\u63d0\u6848\u5df2\u80cc\u4e66\u3002\u50cf\u57282.1.2\u8282\u8ba8\u8bba\u7684\u90a3\u6837\uff0c\u8fd9\u53ef\u80fd\u6d89\u53ca\u4e00\u4e2a\u6216\u591a\u4e2a\u4e0e\u80cc\u4e66\u8005\u7684\u5f80\u8fd4\u3002\n\n\nThe exact number of \u201cenough\u201d depend on the chaincode endorsement policy (see also Section 3). If the endorsement policy is satisfied, the transaction has been endorsed; note that it is not yet committed. The collection of signed TRANSACTION-ENDORSED messages from endorsing peers which establish that a transaction is endorsed is called an endorsement and denoted by endorsement.\n\n\n\u201c\u8db3\u591f\u201d\u7684\u51c6\u786e\u6570\u5b57\u53d6\u51b3\u4e8e\u94fe\u7801\u80cc\u4e66\u7b56\u7565\uff08\u4e5f\u89c1\u7b2c3\u8282\uff09\u3002\u5982\u679c\u80cc\u4e66\u7b56\u7565\u662f\u5b89\u5168\u7684\uff0c\u4ea4\u6613\u5df2\u7ecf\u80cc\u4e66\uff1b\u6ce8\u610f\u5b83\u8fd8\u6ca1\u63d0\u4ea4\u3002\u7b7e\u7f72TRANSACTION-ENDORSED\u6d88\u606f\u7684\u6536\u96c6\u4ece\u80cc\u4e66peer\u8282\u70b9\u6765\uff0c\u80cc\u4e66peer\u8282\u70b9\u5efa\u7acb\u4e86\u4ea4\u6613\u662f\u80cc\u4e66\u7684\u79f0\u4e3a\u80cc\u4e66\u5e76\u4ee5\u80cc\u4e66\u4e3a\u540d\u79f0\u3002\n\n\nIf the submitting client does not manage to collect an endorsement for a transaction proposal, it abandons this transaction with an option to retry later.\n\n\n\u5982\u679c\u63d0\u4ea4\u5ba2\u6237\u7aef\u6ca1\u6709\u8bbe\u6cd5\u4e3a\u4ea4\u6613\u63d0\u6848\u6536\u96c6\u80cc\u4e66\uff0c\u5219\u653e\u5f03\u8fd9\u4e2a\u4ea4\u6613\uff0c\u7a0d\u540e\u518d\u8bd5\u3002\n\n\nFor transaction with a valid endorsement, we now start using the ordering service. The submitting client invokes ordering service using the broadcast(blob), where blob=endorsement. If the client does not have capability of invoking ordering service directly, it may proxy its broadcast through some peer of its choice. Such a peer must be trusted by the client not to remove any message from the endorsement or otherwise the transaction may be deemed invalid. Notice that, however, a proxy peer may not fabricate a valid endorsement.\n\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5177\u6709\u6709\u6548\u80cc\u4e66\u7684\u4ea4\u6613\uff0c\u6211\u4eec\u73b0\u5728\u5f00\u59cb\u4f7f\u7528\u6392\u5e8f\u670d\u52a1\u3002\u63d0\u4ea4\u5ba2\u6237\u7aef\u4f7f\u7528broadcast(blob)\u8c03\u7528\u6392\u5e8f\u670d\u52a1\uff0c\u5176\u4e2dblob=endorsement.\u5982\u679c\u5ba2\u6237\u7aef\u6ca1\u6709\u80fd\u529b\u76f4\u63a5\u8c03\u7528\u6392\u5e8f\u670d\u52a1\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u5b83\u9009\u62e9\u7684peer\u8282\u70b9\u4ee3\u7406\u5e7f\u64ad\u3002\u8fd9\u6837\u7684peer\u8282\u70b9\u5fc5\u987b\u88ab\u5ba2\u6237\u7aef\u4fe1\u4efb\u4e0d\u4f1a\u4ece\u80cc\u4e66\u79fb\u9664\u4efb\u4f55\u6d88\u606f\u6216\u5176\u5b83\u53ef\u80fd\u88ab\u65e0\u6548\u7684\u4ea4\u6613\u3002\u6ce8\u610f\u4e00\u70b9\uff0c\u65e0\u8bba\u5982\u4f55\uff0c\u4ee3\u7406peer\u8282\u70b9\u4e0d\u53ef\u80fd\u5236\u9020\u6709\u6548\u80cc\u4e66\u3002\n\n\n2.4. \u6392\u5e8f\u670d\u52a1\u5411peer\u8282\u70b9\u63d0\u4ea4\u4ea4\u6613(The ordering service delivers a transactions to the peers)\n\n\nWhen an event deliver(seqno, prevhash, blob) occurs and a peer has applied all state updates for blobs with sequence number lower than seqno, a peer does the following:\n\n\n\u5f53\u4e00\u4e2a\u4e8b\u4ef6(seqno, prevhash, blob)\u53d1\u751f\u5e76\u4e14\u4e00\u4e2apeer\u8282\u70b9\u5df2\u4e3a\u6240\u6709\u5e8f\u5217\u53f7\u4f4e\u4e8eseqno\u7684blosbs\u66f4\u65b0\u72b6\u6001\uff0cpeer\u8282\u70b9\u6267\u884c\u5982\u4e0b\u6d41\u7a0b\uff1a\n\n\n\n\n\n\nIt checks that the blob.endorsement is valid according to the policy of the chaincode (blob.tran-proposal.chaincodeID) to which it refers.\n\n\n\n\n\n\n\u5b83\u68c0\u67e5blob.endorsement\u662f\u6709\u6548\u7684\uff0c\u6839\u636e\u7684\u662f\u5b83\u5f15\u7528\u7684\u94fe\u7801(blob.tran-proposal.chaincodeID)\u3002\n\n\n\n\n\n\nIn a typical case, it also verifies that the dependencies (blob.endorsement.tran-proposal.readset) have not been violated meanwhile. In more complex use cases, tran-proposal fields in endorsement may differ and in this case endorsement policy (Section 3) specifies how the state evolves.\n\n\n\n\n\n\n\u5728\u5178\u578b\u60c5\u51b5\u4e0b\uff0c\u5b83\u4e5f\u9a8c\u8bc1\u4e86\u4f9d\u8d56(blob.endorsement.tran-proposal.readset)\u5728\u671f\u95f4\u6ca1\u6709\u88ab\u8fdd\u53cd\u3002\u5728\u66f4\u590d\u6742\u7684\u7528\u4f8b\u4e2d\uff0c\u80cc\u4e66\u4e2d\u7684\u4ea4\u6613\u63d0\u6848\u57df\u53ef\u80fd\u4e0d\u540c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u80cc\u4e66\u7b56\u7565\uff08\u7b2c3\u8282\uff09\u6307\u5b9a\u72b6\u6001\u5982\u4f55\u5f62\u6210\u3002\n\n\n\n\n\n\nVerification of dependencies can be implemented in different ways, according to a consistency property or \u201cisolation guarantee\u201d that is chosen for the state updates. \nSerializability\n is a default isolation guarantee, unless chaincode endorsement policy specifies a different one. Serializability can be provided by requiring the version associated with every key in the readset to be equal to that key\u2019s version in the state, and rejecting transactions that do not satisfy this requirement.\n\n\n\u4f9d\u8d56\u7684\u9a8c\u8bc1\u80fd\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u6839\u636e\u4e00\u81f4\u6027\u5c5e\u6027\u6216\u4e3a\u72b6\u6001\u66f4\u65b0\u9009\u62e9\u7684\u201c\u5b64\u7acb\u4fdd\u8bc1\u201d\u3002\nSerializability\n\u662f\u4e00\u4e2a\u7f3a\u7701\u7684\u5b64\u7acb\u4fdd\u8bc1\uff0c\u9664\u975e\u94fe\u7801\u80cc\u4e66\u7b56\u7565\u6307\u5b9a\u4e00\u4e2a\u4e0d\u540c\u7684\u3002Serializability\u80fd\u591f\u901a\u8fc7\u5728readset\u4e2d\u7684\u6bcf\u4e2akey\u5173\u8054\u7684\u7248\u672c\u88ab\u63d0\u4f9b\uff0c\u76f8\u5f53\u4e8ekey\u5728\u72b6\u6001\u4e2d\u7684\u7248\u672c\uff0c\u5e76\u62d2\u7edd\u4e0d\u6ee1\u8db3\u8fd9\u4e2a\u8981\u6c42\u7684\u4ea4\u6613\u3002\n\n\n\n\n\n\nIf all these checks pass, the transaction is deemed \nvalid\n or \ncommitted\n. In this case, the peer marks the transaction with 1 in the bitmask of the PeerLedger, applies blob.endorsement.tran-proposal.writeset to blockchain state (if tran-proposals are the same, otherwise endorsement policy logic defines the function that takes blob.endorsement).\n\n\n\n\n\n\n\u5982\u679c\u6240\u6709\u8fd9\u4e9b\u68c0\u67e5\u901a\u8fc7\uff0c\u4ea4\u6613\u88ab\u89c6\u4e3a\n\u6709\u6548\n\u6216\n\u627f\u8bfa\n\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cpeer\u8282\u70b9\u5728PeerLedger\u75281\u6807\u8bb0\u4ea4\u6613\uff0c\u9002\u7528\u4e8eblob.endorsement.tran-proposal.writeset\u533a\u5757\u94fe\u72b6\u6001\uff08\u5982\u679c\u4ea4\u6613\u63d0\u6848\u662f\u76f8\u540c\u7684\uff0c\u5176\u5b83\u80cc\u4e66\u7b56\u7565\u903b\u8f91\u5b9a\u4e49\u4e86\u51fd\u6570\u5904\u7406blob.endorsement\uff09\u3002\n\n\n\n\n\n\nIf the endorsement policy verification of blob.endorsement fails, the transaction is invalid and the peer marks the transaction with 0 in the bitmask of the PeerLedger. It is important to note that invalid transactions do not change the state.\n\n\n\n\n\n\n\u5982\u679cblob.endorsement\u80cc\u4e66\u7b56\u7565\u9a8c\u8bc1\u5931\u8d25\uff0c\u4ea4\u6613\u65e0\u6548\uff0c\u5e76\u4e14peer\u8282\u70b9\u5728PeerLedger\u7684\u4f4d\u63a9\u7801\u75280\u6807\u8bb0\u4ea4\u6613\u3002\u91cd\u8981\u7684\u662f\u8981\u6ce8\u610f\u65e0\u6548\u4ea4\u6613\u4e0d\u4f1a\u6539\u53d8\u72b6\u6001\u3002\n\n\n\n\n\n\nNote that this is sufficient to have all (correct) peers have the same state after processing a deliver event (block) with a given sequence number. Namely, by the guarantees of the ordering service, all correct peers will receive an identical sequence of deliver(seqno, prevhash, blob) events. As the evaluation of the endorsement policy and evaluation of version dependencies in readset are deterministic, all correct peers will also come to the same conclusion whether a transaction contained in a blob is valid. Hence, all peers commit and apply the same sequence of transactions and update their state in the same way.\n\n\n\u6ce8\u610f\uff0c\u8fd9\u91cc\u6709\u8db3\u591f\u7684\u8ba9\u6240\u6709\uff08\u6b63\u786e\uff09peer\u8282\u70b9\u5728\u5904\u7406\u4e00\u4e2a\u7ed9\u5b9a\u5e8f\u5217\u53f7\u7684deliver\u4e8b\u4ef6\uff08\u5757\uff09\u4e4b\u540e\u5177\u6709\u540c\u6837\u7684\u72b6\u6001\u3002\u5373\uff0c\u901a\u8fc7\u6392\u5e8f\u670d\u52a1\u7684\u4fdd\u8bc1\uff0c\u6240\u6709\u6b63\u786e\u7684peer\u8282\u70b9\u4f1a\u6536\u5230\u76f8\u540c\u7684deliver(seqno, prevhash, blob)\u4e8b\u4ef6\u5e8f\u5217\u3002\u5f53\u80cc\u4e66\u7b56\u7565\u7684\u8bc4\u4f30\u548creadset\u4e2d\u7248\u672c\u4f9d\u8d56\u7684\u8bc4\u4f30\u662f\u786e\u5b9a\u7684\uff0c\u6240\u6709\u6b63\u786e\u7684peer\u8282\u70b9\u4e5f\u4f1a\u5f97\u51fa\u76f8\u540c\u7684\u7ed3\u8bba\uff0c\u5173\u4e8e\u5305\u542b\u5728blob\u4e2d\u7684\u4ea4\u6613\u662f\u5426\u6709\u6548\u3002\u56e0\u6b64\uff0c\u6240\u6709peer\u8282\u70b9\u63d0\u4ea4\u548c\u5e94\u7528\u540c\u6837\u4ea4\u6613\u5e8f\u5217\u5e76\u7528\u540c\u6837\u7684\u65b9\u5f0f\u66f4\u65b0\u5b83\u4eec\u7684\u72b6\u6001\u3002\n\n\n\n\n:alt: Illustration of the transaction flow (common-case path).\n\n\nFigure 1. Illustration of one possible transaction flow (common-case path).\n\n\n\u56fe1 \u4e00\u79cd\u53ef\u80fd\u7684\u4ea4\u6613\u6d41\u7a0b\u8bf4\u660e\uff08\u4e00\u822c\u60c5\u51b5\u8def\u5f84\uff09\n\n\n3. \u80cc\u4e66\u7b56\u7565(Eorsement policies)\n\n\n3.1. \u80cc\u4e66\u7b56\u7565\u89c4\u8303(Endorsement policy specification)\n\n\nAn \nendorsement policy\n, is a condition on what endorses a transaction. Blockchain peers have a pre-specified set of endorsement policies, which are referenced by a deploy transaction that installs specific chaincode. Endorsement policies can be parametrized, and these parameters can be specified by a deploy transaction.\n\n\n\u80cc\u4e66\u7b56\u7565\n\uff0c\u662f\u80cc\u4e66\u4e00\u4e2a\u4ea4\u6613\u7684\u6761\u4ef6\u3002\u533a\u5757\u94fepeer\u8282\u70b9\u6709\u4e00\u7ec4\u9884\u5148\u786e\u5b9a\u7684\u80cc\u4e66\u7b56\u7565\uff0c\u5b83\u88ab\u5b89\u88c5\u7279\u5b9a\u94fe\u7801\u7684\u90e8\u7f72\u4ea4\u6613\u5f15\u7528\u3002\u80cc\u4e66\u7b56\u7565\u80fd\u53c2\u6570\u5316\uff0c\u8fd9\u4e9b\u53c2\u6570\u80fd\u88ab\u90e8\u7f72\u4ea4\u6613\u6307\u5b9a\u3002\n\n\nTo guarantee blockchain and security properties, the set of endorsement policies \nshould be a set of proven policies\n with limited set of functions in order to ensure bounded execution time (termination), determinism, performance and security guarantees.\n\n\n\u4e3a\u4e86\u4fdd\u8bc1\u533a\u5757\u94fe\u548c\u5b89\u5168\u7279\u6027\uff0c\u80cc\u4e66\u7b56\u7565\u7ec4\n\u5e94\u8be5\u662f\u4e00\u7ec4\u9a8c\u8bc1\u8fc7\u7684\u7b56\u7565\n\uff0c\u5177\u6709\u6709\u9650\u529f\u80fd\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6709\u9650\u7684\u6267\u884c\u65f6\u95f4\uff08\u7ec8\u6b62\uff09\uff0c\u51b3\u5b9a\u3001\u6027\u80fd\u548c\u5b89\u5168\u4fdd\u8bc1\u3002\n\n\nDynamic addition of endorsement policies (e.g., by deploy transaction on chaincode deploy time) is very sensitive in terms of bounded policy evaluation time (termination), determinism, performance and security guarantees. Therefore, dynamic addition of endorsement policies is not allowed, but can be supported in future.\n\n\n\u80cc\u4e66\u7b56\u7565\u7684\u52a8\u6001\u6dfb\u52a0\uff08\u5373\uff0c\u5728\u94fe\u7801\u90e8\u7f72\u65f6\u95f4\u7531\u90e8\u7f72\u4ea4\u6613\u6dfb\u52a0\uff09\u662f\u5bf9\u80cc\u4e66\u8bc4\u4f30\u65f6\u95f4\u9650\u5236\uff08\u7ec8\u6b62\uff09\u3001\u51b3\u5b9a\u3001\u6027\u80fd\u548c\u5b89\u5168\u4fdd\u8bc1\u975e\u5e38\u654f\u611f\u7684\u3002\u56e0\u6b64\uff0c\u52a8\u6001\u6dfb\u52a0\u80cc\u4e66\u7b56\u7565\u662f\u4e0d\u5141\u8bb8\u7684\uff0c\u4f46\u5c06\u6765\u80fd\u652f\u6301\u3002\n\n\n3.2. \u9488\u5bf9\u80cc\u4e66\u7b56\u7565\u7684\u4ea4\u6613\u8bc4\u4f30(Transaction evaluation against endorsement policy)\n\n\nA transaction is declared valid only if it has been endorsed according to the policy. An invoke transaction for a chaincode will first have to obtain an endorsement that satisfies the chaincode\u2019s policy or it will not be committed. This takes place through the interaction between the submitting client and endorsing peers as explained in Section 2.\n\n\n\u4ea4\u6613\u53ea\u6709\u7ecf\u8fc7\u6839\u636e\u80cc\u4e66\u7b56\u7565\u7684\u80cc\u4e66\u624d\u4f1a\u5ba3\u5e03\u6709\u6548\u3002\u5bf9\u4e8e\u94fe\u7801\u7684\u8c03\u7528\u4ea4\u6613\u9996\u5148\u9700\u8981\u7684\u5230\u4e00\u4e2a\u6ee1\u8db3\u94fe\u7801\u7b56\u7565\u7684\u80cc\u4e66\uff0c\u6216\u4e0d\u63d0\u4ea4\u3002\u8fd9\u901a\u8fc7\u5728\u63d0\u4ea4\u5ba2\u6237\u7aef\u548c\u80cc\u4e66peer\u8282\u70b9\u4e4b\u95f4\u7684\u4e92\u52a8\u53d1\u751f\uff0c\u5728\u7b2c2\u8282\u89e3\u91ca\u3002\n\n\nFormally the endorsement policy is a predicate on the endorsement, and potentially further state that evaluates to TRUE or FALSE. For deploy transactions the endorsement is obtained according to a system-wide policy (for example, from the system chaincode).\n\n\n\u6b63\u5f0f\u7684\u80cc\u4e66\u7b56\u7565\u662f\u4ee5\u80cc\u4e66\u4e3a\u57fa\u7840\uff0c\u4ee5\u53ca\u6f5c\u5728\u7684\u8fdb\u4e00\u6b65\u8bc4\u4f30\u4e3a\u771f\u5047\u72b6\u6001\u3002\u5bf9\u4e8e\u90e8\u7f72\u4ea4\u6613\uff0c\u83b7\u5f97\u80cc\u4e66\u7684\u4f9d\u636e\u662f\u7cfb\u7edf\u7cfb\u7edf\u8303\u56f4\u7b56\u7565\uff08\u4f8b\u5982\uff0c\u6765\u81ea\u7cfb\u7edf\u94fe\u7801\uff09\u3002\n\n\nAn endorsement policy predicate refers to certain variables. Potentially it may refer to:\n1\u3001keys or identities relating to the chaincode (found in the metadata of the chaincode), for example, a set of endorsers;\n2\u3001further metadata of the chaincode;\n3\u3001elements of the endorsement and endorsement.tran-proposal;\n4\u3001and potentially more.\n\n\n\u80cc\u4e66\u7b56\u7565\u65ad\u8a00\u5f15\u7528\u4e00\u5b9a\u7684\u53d8\u91cf\u3002\u6f5c\u5728\u53ef\u80fd\u5f15\u7528\u7684\u662f\uff1a\n\n\n1\u3001\u4e0e\u94fe\u7801\u6709\u5173\u7684\u94a5\u5319\u6216\u8eab\u4efd\uff08\u5728\u94fe\u7801\u5143\u6570\u636e\u4e2d\u80fd\u53d1\u73b0\uff09\uff0c\u4f8b\u5982\uff0c\u4e00\u7ec4\u80cc\u4e66\u8005\uff1b\n\n\n2\u3001\u94fe\u7801\u8fdb\u4e00\u6b65\u7684\u5143\u6570\u636e\uff1b\n\n\n3\u3001endorsement and endorsement.tran-proposal\u7684\u5143\u7d20\uff1b\n\n\n4\u3001\u5176\u5b83\u66f4\u591a\u3002\n\n\nThe above list is ordered by increasing expressiveness and complexity, that is, it will be relatively simple to support policies that only refer to keys and identities of nodes.\n\n\n\u4e0a\u9762\u7684\u5217\u8868\u6839\u636e\u8868\u73b0\u548c\u590d\u6742\u6027\u6392\u5e8f\uff0c\u610f\u601d\u662f\u8bf4\uff0c\u5b83\u5c06\u4f1a\u662f\u76f8\u5bf9\u7b80\u5355\u7684\u652f\u6301\u7b56\u7565\uff0c\u53ea\u5f15\u7528node\u8282\u70b9\u7684\u94a5\u5319\u548c\u8eab\u4efd\u3002\n\n\nThe evaluation of an endorsement policy predicate must be deterministic. An endorsement shall be evaluated locally by every peer such that a peer does not need to interact with other peers, yet all correct peers evaluate the endorsement policy in the same way.\n\n\n\u80cc\u4e66\u7b56\u7565\u65ad\u8a00\u7684\u8bc4\u4f30\u5fc5\u987b\u88ab\u786e\u5b9a\u3002\u80cc\u4e66\u5e94\u5f53\u88ab\u6bcf\u4e2apeer\u8282\u70b9\u672c\u5730\u8bc4\u4f30\uff0c\u8fd9\u6837\u8fd9\u4e2apeer\u8282\u70b9\u5c31\u4e0d\u9700\u8981\u548c\u5176\u5b83peer\u8282\u70b9\u5728\u8fd9\u4ef6\u4e8b\u60c5\u4e0a\u4ea4\u4e92\uff0c\u4f46\u6240\u6709\u6b63\u786e\u7684peer\u8282\u70b9\u90fd\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u8bc4\u4f30\u80cc\u4e66\u7b56\u7565\u3002\n\n\n3.3. \u80cc\u4e66\u7b56\u7565\u4f8b\u5b50(Example endorsement policies)\n\n\nThe predicate may contain logical expressions and evaluates to TRUE or FALSE. Typically the condition will use digital signatures on the transaction invocation issued by endorsing peers for the chaincode.\n\n\n\u65ad\u8a00\u53ef\u4ee5\u5305\u542b\u903b\u8f91\u8868\u8fbe\u5f0f\u548c\u8bc4\u4f30\u771f\u5047\u3002\u901a\u5e38\u60c5\u51b5\u4f1a\u5bf9\u80cc\u4e66\u8282\u70b9\u4e3a\u94fe\u7801\u53d1\u51fa\u7684\u4ea4\u6613\u8bf7\u6c42\u4f7f\u7528\u6570\u5b57\u7b7e\u540d\u3002\n\n\nSuppose the chaincode specifies the endorser set E = {Alice, Bob, Charlie, Dave, Eve, Frank, George}. Some example policies:\n\n\n\u5047\u5b9a\u94fe\u7801\u6307\u5b9a\u80cc\u4e66\u8005\u96c6E = {Alice, Bob, Charlie, Dave, Eve, Frank, George}.\u4e00\u4e9b\u4f8b\u5b50\u7b56\u7565\u5982\u4e0b\uff1a\n\n\n\n\nA valid signature from on the same tran-proposal from all members of E.\n\n\nA valid signature from any single member of E.\n\n\n\n\nValid signatures on the same tran-proposal from endorsing peers according to the condition (Alice OR Bob) AND (any two of: Charlie, Dave, Eve, Frank, George).\n\n\n\n\n\n\n\u4e00\u4e2a\u6709\u6548\u7b7e\u540d\u6765\u81ea\u5168\u4f53E\u7684\u6210\u5458\u7684\u540c\u6837\u7684\u4ea4\u6613\u63d0\u6848\u3002\n\n\n\n\n\u4e00\u4e2a\u6709\u6548\u7b7e\u540d\u6765\u81eaE\u7684\u4efb\u4e00\u5355\u4e2a\u6210\u5458\u3002\n\n\n\n\n\u4ece\u80cc\u4e66peer\u8282\u70b9\u6765\u7684\u540c\u4e00\u4ea4\u6613\u63d0\u6848\u7684\u6709\u6548\u7b7e\u540d\u6761\u4ef6\u662f\uff1a(Alice OR Bob) AND (any two of: Charlie, Dave, Eve, Frank, George).\n\n\n\n\n\n\nValid signatures on the same tran-proposal by any 5 out of the 7 endorsers. (More generally, for chaincode with n \n 3f endorsers, valid signatures by any 2f+1 out of the n endorsers, or by any group of more than (n+f)/2 endorsers.)\n\n\n\n\n\n\n\u540c\u4e00\u63d0\u6848\u7684\u6709\u6548\u7b7e\u540d\u4e3a7\u540d\u80cc\u4e66\u8005\u7684\u4efb\u610f5\u540d\u3002\uff08\u66f4\u5e38\u7528\u7684\uff0c\u94fe\u7801n\n3f\u80cc\u4e66\u8005\uff0cn\u540d\u80cc\u4e66\u8005\u6709\u4efb\u610f2f+1\u6709\u6548\u7b7e\u540d\uff0c\u6216\u4efb\u610f\u5927\u4e8e(n+f)/2\u80cc\u4e66\u8005\u5c0f\u7ec4\u6709\u6548\u7b7e\u540d\uff09\n\n\n\n\n\n\nSuppose there is an assignment of \u201cstake\u201d or \u201cweights\u201d to the endorsers, like {Alice=49, Bob=15, Charlie=15, Dave=10, Eve=7, Frank=3, George=1}, where the total stake is 100: The policy requires valid signatures from a set that has a majority of the stake (i.e., a group with combined stake strictly more than 50), such as {Alice, X} with any X different from George, or {everyone together except Alice}. And so on.\n\n\n\n\n\n\n\u5047\u5b9a\u80cc\u4e66\u8005\u6709\u4e00\u4e2a\u201c\u80a1\u4efd\u201d\u6216\u201c\u6743\u91cd\u201d\u7684\u4efb\u52a1\uff0c\u50cf{Alice=49, Bob=15, Charlie=15, Dave=10, Eve=7, Frank=3, George=1}, \u5176\u4e2d\u5168\u90e8\u80a1\u4efd\u662f100\uff1a\u7b56\u7565\u9700\u8981\u4e00\u7ec4\u5360\u5927\u591a\u6570\u80a1\u4efd\u7684\u6709\u6548\u7b7e\u540d\uff08\u5373\uff0c\u4e00\u7ec4\u5408\u5e76\u80a1\u4efd\u5b8c\u5168\u8d85\u8fc750\uff09\uff0c\u50cf{Alice, X}\uff0cX\u53ea\u8981\u4e0d\u662fGeorge\u7684\u4efb\u4f55\u4eba\uff0c\u6216{\u9664\u53bbAlice\u4ee5\u5916\u7684\u6240\u6709\u4eba}\uff0c\u7b49\u7b49\u3002\n\n\n\n\n\n\nThe assignment of stake in the previous example condition could be static (fixed in the metadata of the chaincode) or dynamic (e.g., dependent on the state of the chaincode and be modified during the execution).\n\n\n\n\n\n\n\u5047\u5b9a\u524d\u9762\u4f8b\u5b50\u4e2d\u7684\u80a1\u6743\u6761\u4ef6\u662f\u9759\u6001\u7684\uff08\u56fa\u5b9a\u5728\u94fe\u7801\u7684\u5143\u6570\u636e\u4e2d\uff09\u6216\u52a8\u6001\u7684\uff08\u4f8b\u5982\uff0c\u53d6\u51b3\u4e8e\u94fe\u7801\u7684\u72b6\u6001\u548c\u5728\u6267\u884c\u4e2d\u4fee\u6539\uff09\u3002\n\n\n\n\n\n\nValid signatures from (Alice OR Bob) on tran-proposal1 and valid signatures from (any two of: Charlie, Dave, Eve, Frank, George) on tran-proposal2, where tran-proposal1 and tran-proposal2 differ only in their endorsing peers and state updates.\n\n\n\n\n\n\n\u4ea4\u6613\u63d0\u68481\u7684\u6709\u6548\u7b7e\u540d\u6765\u81ea(Alice OR Bob) \u548c\u4ea4\u6613\u63d0\u68482\u6709\u6548\u7b7e\u540d\u6765\u81ea\uff08Charlie, Dave, Eve, Frank, George\u4e2d\u7684\u4efb\u4f55\u4e24\u4e2a\uff09\uff0c\u5176\u4e2d\u4ea4\u6613\u63d0\u68481\u548c\u4ea4\u6613\u63d0\u68482\u7684\u4e0d\u540c\u53ea\u5728\u5b83\u4eec\u7684\u80cc\u4e66peer\u8282\u70b9\u548c\u72b6\u6001\u66f4\u65b0\u3002\n\n\n\n\n\n\nHow useful these policies are will depend on the application, on the desired resilience of the solution against failures or misbehavior of endorsers, and on various other properties.\n\n\n\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u7b56\u7565\u53d6\u51b3\u4e8e\u5e94\u7528\u3001\u5931\u8d25\u6216\u6076\u610f\u80cc\u4e66\u8005\u7684\u6062\u590d\u80fd\u529b\u548c\u5404\u79cd\u5176\u5b83\u7279\u6027\u3002\n\n\n4 (post-v1). \u8bc1\u5b9e\u8d26\u672c\u548c\u8282\u70b9\u8d26\u672c\u68c0\u67e5\uff08\u4fee\u526a\uff09(Validated ledger and PeerLedger checkpointing (pruning))\n\n\n4.1. \u9a8c\u8bc1\u8d26\u672c\uff08Validated ledger (VLedger)\uff09\n\n\nTo maintain the abstraction of a ledger that contains only valid and committed transactions (that appears in Bitcoin, for example), peers may, in addition to state and Ledger, maintain the \nValidated Ledger (or VLedger)\n. This is a hash chain derived from the ledger by filtering out invalid transactions.\n\n\n\u7ef4\u62a4\u4e00\u4e2a\u8d26\u672c\u7684\u62bd\u8c61\uff0c\u53ea\u5305\u542b\u6709\u6548\u548c\u63d0\u4ea4\u4ea4\u6613\uff08\u4f8b\u5982\u6bd4\u7279\u5e01\u7684\u65b9\u6848\uff09\uff0cpeer\u8282\u70b9\u53ef\u4ee5\uff0c\u9664\u72b6\u6001\u548c\u8d26\u672c\u5916\uff0c\u7ef4\u62a4\n\u8bc1\u5b9e\u8d26\u672c\uff08\u6216VLedger\uff09\n\u3002\u8fd9\u662f\u4e00\u4e2a\u54c8\u5e0c\u94fe\uff0c\u6765\u81ea\u8fc7\u6ee4\u6389\u65e0\u6548\u4ea4\u6613\u7684\u8d26\u672c\u3002\n\n\nThe construction of the VLedger blocks (called here vBlocks) proceeds as follows. As the PeerLedger blocks may contain invalid transactions (i.e., transactions with invalid endorsement or with invalid version dependencies), such transactions are filtered out by peers before a transaction from a block becomes added to a vBlock. Every peer does this by itself (e.g., by using the bitmask associated with PeerLedger). A vBlock is defined as a block without the invalid transactions, that have been filtered out. Such vBlocks are inherently dynamic in size and may be empty. An illustration of vBlock construction is given in the figure below. \n\n\n\u8bc1\u5b9e\u8d26\u672c\u5757\u7684\u751f\u6210\u6309\u5982\u4e0b\u987a\u5e8f\u3002\u5f53\u8282\u70b9\u8d26\u672c\u5757\u53ef\u80fd\u5305\u542b\u65e0\u6548\u4ea4\u6613\uff08\u5373\uff0c\u4ea4\u6613\u7684\u80cc\u4e66\u65e0\u6548\u6216\u7248\u672c\u4f9d\u8d56\u65e0\u6548\uff09\uff0c\u8fd9\u6837\u7684\u4ea4\u6613\u88abpeer\u8282\u70b9\u5728\u4ea4\u6613\u4ece\u5757\u53d8\u4e3a\u8bc1\u5b9e\u5757\u4e4b\u524d\u8fc7\u6ee4\u6389\u3002\u6bcf\u4e2apeer\u8282\u70b9\u81ea\u8eab\u5b9e\u73b0\u8fd9\u70b9\uff08\u4f8b\u5982\uff0c\u4f7f\u7528\u8282\u70b9\u8d26\u672c\u5173\u8054\u7684\u4f4d\u63a9\u7801\uff09\u3002\u8bc1\u5b9e\u5757\u88ab\u5b9a\u4e49\u4e3a\u6ca1\u6709\u65e0\u6548\u4ea4\u6613\u7684\u5757\uff0c\u662f\u8fdb\u8fc7\u8fc7\u6ee4\u7684\u5757\u3002\u8fd9\u6837\u8bc1\u5b9e\u5757\u5728\u5927\u5c0f\u4e0a\u662f\u52a8\u6001\u7684\u4e5f\u53ef\u80fd\u662f\u7a7a\u7684\u3002\u8bc1\u5b9e\u5757\u751f\u6210\u7684\u8bf4\u660e\u5728\u4e0b\u56fe\u4e2d\u7ed9\u51fa\u3002\n\n\n\n\nFigure 2. Illustration of validated ledger block (vBlock) formation from ledger (PeerLedger) blocks.\n\n\n\u56fe2 \u4ece\u8282\u70b9\u8d26\u672c\u5757\u5f62\u6210\u8bc1\u5b9e\u8d26\u672c\u5757\n\n\nvBlocks are chained together to a hash chain by every peer. More specifically, every block of a validated ledger contains:\n\n\n\u8bc1\u5b9e\u5757\u88ab\u6bcf\u4e2apeer\u8282\u70b9\u94fe\u63a5\u5728\u4e00\u8d77\u5f62\u6210\u4e00\u4e2a\u54c8\u5e0c\u94fe\u3002\u66f4\u5177\u4f53\u5730\uff0c\u8bc1\u5b9e\u8d26\u672c\u7684\u6bcf\u4e2a\u5757\u5305\u542b\uff1a\n\n\n\n\nThe hash of the previous vBlock.\n\n\nvBlock number.\n\n\nAn ordered list of all valid transactions committed by the peers since the last vBlock was computed (i.e., list of valid transactions in a corresponding block).\n\n\n\n\nThe hash of the corresponding block (in PeerLedger) from which the current vBlock is derived.\n\n\n\n\n\n\n\u524d\u8bc1\u5b9e\u5757\u7684\u54c8\u5e0c\u3002\n\n\n\n\n\u8bc1\u5b9e\u5757\u7f16\u53f7\u3002\n\n\n\u4ece\u4e0a\u4e00\u4e2a\u8bc1\u5b9e\u5757\u88ab\u8ba1\u7b97\u51fa\u4ee5\u6765\u6240\u6709peer\u8282\u70b9\u63d0\u4ea4\u4ea4\u6613\u7684\u6392\u5e8f\u5217\u8868\uff08\u5373\uff0c\u5728\u76f8\u5e94\u5757\u4e2d\u7684\u6709\u6548\u4ea4\u6613\u5217\u8868\uff09\u3002\n\n\n\u76f8\u5e94\u5757\u7684\u54c8\u5e0c\uff08\u5728\u8282\u70b9\u8d26\u672c\u4e2d\uff09\uff0c\u6765\u81ea\u5f97\u51fa\u7684\u5f53\u524d\u8bc1\u5b9e\u5757\u3002\n\n\n\n\nAll this information is concatenated and hashed by a peer, producing the hash of the vBlock in the validated ledger.\n\n\n\u6240\u6709\u8fd9\u4e9b\u4fe1\u606f\u90fd\u88abpeer\u8282\u70b9\u7ea7\u8054\u548c\u54c8\u5e0c\uff0c\u4ea7\u751f\u8bc1\u5b9e\u8d26\u672c\u4e2d\u8bc1\u5b9e\u5757\u7684\u54c8\u5e0c\u3002\n\n\n4.2. \u8282\u70b9\u8d26\u672c\u68c0\u67e5(\nPeerLedger\n Checkpointing)\n\n\nThe ledger contains invalid transactions, which may not necessarily be recorded forever. However, peers cannot simply discard PeerLedger blocks and thereby prune PeerLedger once they establish the corresponding vBlocks. Namely, in this case, if a new peer joins the network, other peers could not transfer the discarded blocks (pertaining to PeerLedger) to the joining peer, nor convince the joining peer of the validity of their vBlocks.\n\n\n\u8d26\u672c\u5305\u542b\u7684\u65e0\u6548\u4ea4\u6613\uff0c\u6ca1\u6709\u5fc5\u8981\u6c38\u4e45\u8bb0\u5f55\u3002\u7136\u800c\uff0c\u4e00\u65e6\u5efa\u7acb\u76f8\u5e94\u7684\u8bc1\u5b9e\u5757\uff0cpeer\u8282\u70b9\u4e0d\u80fd\u7b80\u5355\u5730\u4e22\u5f03\u8282\u70b9\u8d26\u672c\u5757\u4ece\u800c\u4fee\u526a\u8282\u70b9\u8d26\u672c\u3002\u5373\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u65b0\u7684peer\u8282\u70b9\u52a0\u5165\u4e86\u7f51\u7edc\uff0c\u5176\u5b83peer\u8282\u70b9\u4e0d\u80fd\u8f6c\u79fb\u4e22\u5f03\u5757\uff08\u4e0e\u8282\u70b9\u8d26\u672c\u6709\u5173\u7684\uff09\u5230\u65b0\u52a0\u5165\u7684\u8282\u70b9\uff0c\u4e5f\u4e0d\u80fd\u4f7f\u65b0\u52a0\u5165\u7684peer\u8282\u70b9\u627f\u8ba4\u5b83\u4eec\u7684\u8bc1\u5b9e\u5757\u3002\n\n\nTo facilitate pruning of the PeerLedger, this document describes a checkpointing mechanism. This mechanism establishes the validity of the vBlocks across the peer network and allows checkpointed vBlocks to replace the discarded PeerLedger blocks. This, in turn, reduces storage space, as there is no need to store invalid transactions. It also reduces the work to reconstruct the state for new peers that join the network (as they do not need to establish validity of individual transactions when reconstructing the state by replaying PeerLedger, but may simply replay the state updates contained in the validated ledger).\n\n\n\u4e3a\u4e86\u4fbf\u4e8e\u8282\u70b9\u8d26\u672c\u4fee\u526a\uff0c\u8fd9\u4e2a\u6587\u6863\u63cf\u8ff0\u4e00\u4e2a\u68c0\u67e5\u70b9\u673a\u5236\u3002\u8fd9\u4e2a\u673a\u5236\u5efa\u7acb\u4e86\u8bc1\u5b9e\u5757\u7684\u6709\u6548\u6027\uff0c\u8d2f\u7a7f\u8282\u70b9\u7f51\u7edc\uff0c\u5141\u8bb8\u68c0\u67e5\u70b9\u8bc1\u5b9e\u5757\u66ff\u6362\u4e22\u5f03\u7684\u8282\u70b9\u8d26\u672c\u5757\u3002\u8fd9\uff0c\u53cd\u8fc7\u6765\uff0c\u51cf\u5c11\u4e86\u5b58\u50a8\u7a7a\u95f4\uff0c\u56e0\u4e3a\u6ca1\u6709\u5fc5\u8981\u5b58\u50a8\u65e0\u6548\u4ea4\u6613\u3002\u5b83\u4e5f\u51cf\u5c11\u4e86\u65b0\u52a0\u5165\u7684peer\u8282\u70b9\u91cd\u6784\u72b6\u6001\u7684\u5de5\u4f5c\u91cf\uff08\u5f53\u901a\u8fc7\u91cd\u6f14\u8282\u70b9\u8d26\u672c\u91cd\u6784\u72b6\u6001\u65f6\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u9700\u8981\u5efa\u7acb\u6709\u6548\u7684\u5355\u4e2a\u4ea4\u6613\uff0c\u4f46\u53ef\u4ee5\u7b80\u5355\u91cd\u6f14\u5305\u542b\u5728\u8282\u70b9\u8d26\u672c\u4e2d\u7684\u72b6\u6001\u66f4\u65b0\u3002\uff09\n\n\n4.2.1. \u68c0\u67e5\u70b9\u534f\u8bae(Checkpointing protocol)\n\n\nCheckpointing is performed periodically by the peers every CHK blocks, where CHK is a configurable parameter. To initiate a checkpoint, the peers broadcast (e.g., gossip) to other peers message \n, where blockno is the current blocknumber and blocknohash is its respective hash, stateHash is the hash of the latest state (produced by e.g., a Merkle hash) upon validation of block blockno and peerSig is peer\u2019s signature on (CHECKPOINT,blocknohash,blockno,stateHash), referring to the validated ledger.\n\n\n\u68c0\u67e5\u70b9\u662f\u7531peer\u8282\u70b9\u6bcf\u4e2aCHK\u5757\u5468\u671f\u6027\u5730\u5f62\u6210\uff0c\u8fd9\u91ccCHK\u662f\u4e00\u4e2a\u53ef\u914d\u7f6e\u53c2\u6570\u3002\u5f00\u8f9f\u4e00\u4e2a\u68c0\u67e5\u70b9\uff0cpeer\u8282\u70b9\u5e7f\u64ad\uff08\u4f8b\u5982\uff0c\u4f20\u64ad\uff09\u7ed9\u5176\u5b83peer\u8282\u70b9 \n, \u5176\u4e2d\uff0cblockno\u662f\u5f53\u524d\u5757\u7f16\u53f7\uff0cblocknohash\u662f\u5404\u81ea\u7684\u54c8\u5e0c\uff0cstateHash\u662f\u6700\u65b0\u72b6\u6001\u7684\u54c8\u5e0c\uff08\u4ea7\u751f\u4e8e\uff0c\u4f8b\u5982Merkle hash\uff09\uff0c\u57fa\u4e8e\u786e\u8ba4\u7684\u5757\u7f16\u53f7\uff0cpeerSig\u662fpeer\u8282\u70b9\u7684\u5bf9(CHECKPOINT,blocknohash,blockno,stateHash)\u7684\u7b7e\u540d\uff0c\u5f15\u7528\u4e86\u8bc1\u5b9e\u8d26\u672c\u3002\n\n\nA peer collects CHECKPOINT messages until it obtains enough correctly signed messages with matching blockno, blocknohash and stateHash to establish a valid checkpoint (see Section 4.2.2.).\n\n\npeer\u8282\u70b9\u6536\u96c6CHECKPOINT\u6d88\u606f\u76f4\u5230\u5b83\u5f97\u5230\u5339\u914dblockno, blocknohash \u548c stateHash \u7684\u8db3\u591f\u6b63\u786e\u7684\u7b7e\u540d\u6d88\u606f\u6765\u5efa\u7acb\u4e00\u4e2a\u6709\u6548\u7684\u68c0\u67e5\u70b9\u3002\uff08\u89c14.2.2\u8282\uff09\n\n\nUpon establishing a valid checkpoint for block number blockno with blocknohash, a peer:\n- if blockno\nlatestValidCheckpoint.blockno, then a peer assigns latestValidCheckpoint=(blocknohash,blockno),\n- stores the set of respective peer signatures that constitute a valid checkpoint into the set latestValidCheckpointProof,\n- stores the state corresponding to stateHash to latestValidCheckpointedState,\n- (optionally) prunes its PeerLedger up to block number blockno (inclusive).\n\n\n\u5728\u4e3a\u5757\u7f16\u53f7blockno \u548c blocknohash\u5efa\u7acb\u4e86\u6709\u6548\u7684\u68c0\u67e5\u70b9\u7684\u57fa\u7840\u4e0a\uff0cpeer\u8282\u70b9\uff1a\n- \u5982\u679c blockno\nlatestValidCheckpoint.blockno, \u90a3\u4e48peer\u8282\u70b9\u5206\u914d latestValidCheckpoint=(blocknohash,blockno),\n- \u5b58\u50a8\u5404peer\u8282\u70b9\u7684\u7b7e\u540d\u96c6\uff0c\u5b83\u6784\u6210\u4e86\u6709\u6548\u7684\u68c0\u67e5\u70b9\u5230\u96c6\u5408latestValidCheckpointProof,\n- \u5b58\u50a8\u72b6\u6001\u76f8\u5e94\u7684stateHash \u5230 latestValidCheckpointedState,\n- \uff08\u53ef\u9009\u7684\uff09\u4fee\u526a\u5b83\u7684\u8282\u70b9\u8d26\u672c\u5230\u5757\u7f16blockno (\u5305\u542b).\n\n\n4.2.2. \u6709\u6548\u68c0\u67e5\u70b9(Valid checkpoints)\n\n\nClearly, the checkpointing protocol raises the following questions: When can a peer prune its \nPeerLedger\n? How many \nCHECKPOINT\n messages are \u201csufficiently many\u201d?. This is defined by a checkpoint validity policy, with (at least) two possible approaches, which may also be combined:\n\n\n\u663e\u7136\uff0c\u68c0\u67e5\u70b9\u534f\u8bae\u589e\u52a0\u4e86\u4e0b\u9762\u7684\u95ee\u9898\uff1apeer\u8282\u70b9\u4ec0\u4e48\u65f6\u5019\u80fd\u4fee\u526a\u5b83\u7684\u8282\u70b9\u8d26\u672c\uff1f\u591a\u5c11\u68c0\u67e5\u70b9\u6d88\u606f\u662f\u8db3\u591f\u591a\u7684\uff1f\u8fd9\u7531\u68c0\u67e5\u70b9\u6709\u6548\u7b56\u7565\u5b9a\u4e49\uff0c\u8981\u6709\uff08\u81f3\u5c11\uff09\u4e24\u79cd\u53ef\u80fd\u7684\u65b9\u6cd5\u4e14\u4e5f\u80fd\u5408\u5e76\uff1a\n\n\n\n\n\n\nLocal (peer-specific) checkpoint validity policy (LCVP). A local policy at a given peer p may specify a set of peers which peer p trusts and whose CHECKPOINT messages are sufficient to establish a valid checkpoint. For example, LCVP at peer Alice may define that Alice needs to receive CHECKPOINT message from Bob, or from both Charlie and Dave.\n\n\n\n\n\n\nLocal (peer-specific) checkpoint validity policy (LCVP).\u7ed9\u5b9apeer\u8282\u70b9p\u4e0a\u7684\u672c\u5730\u7b56\u7565\u53ef\u4ee5\u786e\u5b9a\u4e00\u7ec4peer\u8282\u70b9\uff0c\u8fd9\u4e00\u7ec4peer\u8282\u70b9\u662fp\u4fe1\u4efb\u7684\u4e14\u5b83\u7684CHECKPOINT\u6d88\u606f\u662f\u8db3\u591f\u5efa\u7acb\u4e00\u4e2a\u6709\u6548\u7684\u68c0\u67e5\u70b9\u3002\u4f8b\u5982\uff0c\u5728peer\u8282\u70b9Alice\u4e0a\u7684LCVP\u53ef\u4ee5\u5b9a\u4e49\u672c\u5730\uff08peer\u786e\u5b9a\uff09\u68c0\u67e5\u70b9\u6709\u6548\u6027\u7b56\u7565\uff08LCVP\uff09\u3002\n\n\n\n\n\n\nGlobal checkpoint validity policy (GCVP). A checkpoint validity policy may be specified globally. This is similar to a local peer policy, except that it is stipulated at the system (blockchain) granularity, rather than peer granularity. For instance, GCVP may specify that:\n\n\n\n\n\n\nGlobal checkpoint validity policy (GCVP).\u68c0\u67e5\u70b9\u6709\u6548\u7b56\u7565\u53ef\u4ee5\u786e\u5b9a\u4e3a\u5168\u5c40\u7684\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u672c\u5730\u8282\u70b9\u7b56\u7565\uff0c\u9664\u975e\u5728\u7cfb\u7edf\u94fe\u95f4\u9694\u4e0a\u89c4\u5b9a\uff0c\u597d\u4e8e\u8282\u70b9\u95f4\u9694\u3002\u4f8b\u5982\uff0cGCVP\u53ef\u4ee5\u6307\u5b9a\uff1a\n\n\n\n\n\n\neach peer may trust a checkpoint if confirmed by 11 different peers.\n\n\n\n\n\n\nin a specific deployment in which every orderer is collocated with a peer in the same machine (i.e., trust domain) and where up to f orderers may be (Byzantine) faulty, each peer may trust a checkpoint if confirmed by f+1 different peers collocated with orderers.\n\n\n\n\n\n\n\u6bcf\u4e2apeer\u8282\u70b9\u53ef\u4ee5\u4fe1\u4efb\u4e00\u4e2a\u753111\u5404\u4e0d\u540cpeer\u8282\u70b9\u786e\u8ba4\u7684\u68c0\u67e5\u70b9\u3002\n\n\n\n\n\u5728\u5177\u4f53\u90e8\u7f72\u4e2d\u6bcf\u4e2a\u6392\u5e8f\u8005\u4e0epeer\u8282\u70b9\u914d\u7f6e\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\uff08\u5373\uff0c\u4fe1\u4efb\u57df\uff09\uff0c\u591a\u8fbef\u4e2a\u6392\u5e8f\u8005\u53ef\u4ee5\u662f\uff08\u62dc\u5360\u5ead\uff09\u9519\u8bef\uff0c\u6bcf\u4e2apeer\u8282\u70b9\u53ef\u4ee5\u4fe1\u4efb\u4e00\u4e2a\u68c0\u67e5\u70b9\uff0c\u5982\u679c\u7ecf\u8fc7f+1\u4e2a\u6392\u5e8f\u8005\u914d\u7f6e\u7684\u4e0d\u540c\u7684\u8282\u70b9\u786e\u8ba4\u3002", 
            "title": "\u67b6\u6784\u8bf4\u660e"
        }, 
        {
            "location": "/arch-deep-dive_zh/#1-system-architecture", 
            "text": "The blockchain is a distributed system consisting of many nodes that communicate with each other. The blockchain runs programs called chaincode, holds state and ledger data, and executes transactions. The chaincode is the central element as transactions are operations invoked on the chaincode. Transactions have to be \u201cendorsed\u201d and only endorsed transactions may be committed and have an effect on the state. There may exist one or more special chaincodes for management functions and parameters, collectively called system chaincodes.  \u533a\u5757\u94fe\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u7531\u8bb8\u591a\u76f8\u4e92\u901a\u4fe1\u7684\u8282\u70b9\u7ec4\u6210\u3002\u533a\u5757\u94fe\u8fd0\u884c\u7684\u7a0b\u5e8f\u79f0\u4e3a\u94fe\u7801\uff0c\u4fdd\u5b58\u72b6\u6001\u548c\u8d26\u672c\u6570\u636e\u3001\u6267\u884c\u4ea4\u6613\u3002\u94fe\u7801\u662f\u6838\u5fc3\u8981\u7d20\uff0c\u4ea4\u6613\u64cd\u4f5c\u5728\u94fe\u7801\u4e0a\u8c03\u7528\u3002\u4ea4\u6613\u5fc5\u987b\u88ab\u201c\u80cc\u4e66\u201d\uff0c\u53ea\u6709\u7ecf\u8fc7\u80cc\u4e66\u7684\u4ea4\u6613\u624d\u53ef\u4ee5\u63d0\u4ea4\uff0c\u5e76\u5bf9\u72b6\u6001\u4ea7\u751f\u5f71\u54cd\u3002\u6709\u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u7279\u5b9a\u7684\u94fe\u7801\u7528\u4e8e\u7ba1\u7406\u529f\u80fd\u548c\u53c2\u6570\uff0c\u7edf\u79f0\u4e3a\u7cfb\u7edf\u94fe\u7801\u3002", 
            "title": "1. \u7cfb\u7edf\u67b6\u6784(System architecture)"
        }, 
        {
            "location": "/arch-deep-dive_zh/#11-transactions", 
            "text": "Transactions may be of two types:  \u4ea4\u6613\u53ef\u4ee5\u6709\u4e24\u79cd\u7c7b\u578b\uff1a    Deploy transactions  create new chaincode and take a program as parameter. When a deploy transaction executes successfully, the chaincode has been installed \u201con\u201d the blockchain.    \u90e8\u7f72\u4ea4\u6613  \u521b\u5efa\u65b0\u7684\u94fe\u7801\u5e76\u8bbe\u7f6e\u4e00\u4e2a\u7a0b\u5e8f\u4f5c\u4e3a\u53c2\u6570\u3002\u5f53\u4e00\u4e2a\u90e8\u7f72\u4ea4\u6613\u6267\u884c\u6210\u529f\uff0c\u8868\u660e\u94fe\u7801\u5df2\u88ab\u5b89\u88c5\u5230\u533a\u5757\u94fe\u4e0a\u3002    Invoke transactions  perform an operation in the context of previously deployed chaincode. An invoke transaction refers to a chaincode and to one of its provided functions. When successful, the chaincode executes the specified function - which may involve modifying the corresponding state, and returning an output.    \u8c03\u7528\u4ea4\u6613  \u662f\u5728\u4e4b\u524d\u5df2\u90e8\u7f72\u94fe\u7801\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u4e00\u4e2a\u64cd\u4f5c\u3002\u8c03\u7528\u4ea4\u6613\u5f15\u7528\u94fe\u7801\u63d0\u4f9b\u7684\u4e00\u4e2a\u51fd\u6570\u3002\u5f53\u6210\u529f\u65f6\uff0c\u94fe\u7801\u6267\u884c\u7279\u5b9a\u7684\u51fd\u6570-\u5b83\u53ef\u80fd\u6d89\u53ca\u4fee\u6539\u76f8\u5e94\u7684\u72b6\u6001\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8f93\u51fa\u3002    As described later, deploy transactions are special cases of invoke transactions, where a deploy transaction that creates new chaincode, corresponds to an invoke transaction on a system chaincode.  \u5982\u540e\u6240\u8ff0\uff0c\u90e8\u7f72\u4ea4\u6613\u662f\u8c03\u7528\u4ea4\u6613\u7684\u7279\u4f8b\uff0c\u90e8\u7f72\u4ea4\u6613\u521b\u5efa\u65b0\u7684\u94fe\u7801\uff0c\u5bf9\u5e94\u4e8e\u7cfb\u7edf\u94fe\u7801\u7684\u4e00\u4e2a\u8c03\u7528\u4ea4\u6613\u3002  Remark:   This document currently assumes that a transaction either creates new chaincode or invokes an operation provided by  one  already deployed chaincode. This document does not yet describe: a) optimizations for query (read-only) transactions (included in v1), b) support for cross-chaincode transactions (post-v1 feature).  \u6ce8\u610f\uff1a   \u672c\u6587\u6863\u76ee\u524d\u5047\u5b9a\u4ea4\u6613\u4e0d\u662f\u521b\u5efa\u94fe\u7801\u5c31\u662f\u8c03\u7528 \u67d0\u4e2a \u5df2\u521b\u5efa\u7684\u94fe\u7801\u3002\u672c\u6587\u6863\u5c1a\u672a\u63cf\u8ff0\uff1aa)\u4ea4\u6613\u4f18\u5316\u67e5\u8be2\uff08\u53ea\u8bfb\uff09\uff08V1\u4e2d\u5305\u542b\uff09\uff1bb)\u8de8\u94fe\u7801\u4ea4\u6613\u652f\u6301\uff08V1\u540e\u671f\u7279\u5f81\uff09\u3002", 
            "title": "1.1. \u4ea4\u6613(Transactions)"
        }, 
        {
            "location": "/arch-deep-dive_zh/#12-blockchain-datastructures", 
            "text": "", 
            "title": "1.2. \u533a\u5757\u94fe\u6570\u636e\u7ed3\u6784(Blockchain datastructures)"
        }, 
        {
            "location": "/arch-deep-dive_zh/#121-state", 
            "text": "The latest state of the blockchain (or, simply, state) is modeled as a versioned key/value store (KVS), where keys are names and values are arbitrary blobs. These entries are manipulated by the chaincodes (applications) running on the blockchain through  put  and  get  KVS-operations. The state is stored persistently and updates to the state are logged. Notice that versioned KVS is adopted as state model, an implementation may use actual KVSs, but also RDBMSs or any other solution.  \u533a\u5757\u94fe\u7684\u6700\u65b0\u72b6\u6001\uff08\u7b80\u79f0\u4e3a\uff0c\u72b6\u6001\uff09\u88ab\u5efa\u6a21\u4e3a\u4e00\u4e2a\u7248\u672c\u952e/\u503c\u5b58\u50a8\uff08KVS\uff09\uff0c\u952e\u7684\u540d\u79f0\u548c\u503c\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u3002\u6574\u4f53\u4e0a\u7531\u8fd0\u884c\u5728\u533a\u5757\u94fe\u4e0a\u7684\u94fe\u7801\uff08\u5e94\u7528\uff09\u64cd\u63a7\uff0c\u901a\u8fc7 \u5b58 \u548c \u53d6 KVS\u64cd\u4f5c\u5b9e\u73b0\u3002\u72b6\u6001\u6301\u7eed\u5b58\u50a8\u5e76\u4e14\u72b6\u6001\u7684\u66f4\u65b0\u4e5f\u88ab\u8bb0\u5f55\u3002\u6ce8\u610f\u7248\u672cKVS\u88ab\u91c7\u7528\u4e3a\u72b6\u6001\u6a21\u578b\uff0c\u5b9e\u73b0\u53ef\u4ee5\u4f7f\u7528\u5b9e\u9645\u7684KVS\uff0c\u50cfRDBMS\u6216\u5176\u5b83\u65b9\u6848\u3002  More formally, state  s  is modeled as an element of a mapping  K -  (V X N) , where:  \u66f4\u6b63\u5f0f\u5730\uff0c\u72b6\u6001s\u5efa\u6a21\u4e3a\u4e00\u4e2a\u5143\u7d20\u6620\u5c04K -  (V X N)\uff0c\u5176\u4e2d\uff1a   K  is a set of keys  K \u662f\u4e00\u7ec4\u952e  V  is a set of values  V \u662f\u4e00\u7ec4\u503c  N  is an infinite ordered set of version numbers. Injective function  next: N -  N  takes an element of  N  and returns the next version number.  N\u662f\u4e00\u4e2a\u65e0\u9650\u6709\u5e8f\u7684\u7248\u672c\u53f7\u96c6\u3002\u5185\u5c04\u51fd\u6570 next: N -  N \u83b7\u53d6 N \u7684\u4e00\u4e2a\u5143\u7d20\u5e76\u8fd4\u56de\u4e0b\u4e00\u4e2a\u7248\u672c\u53f7\u3002   Both  V  and  N  contain a special element  \\bot , which is in case of  N  the lowest element. Initially all keys are mapped to (\\bot,\\bot). For s(k)=(v,ver) we denote v by s(k).value, and  ver  by  s(k).version .  V \u548c N \u90fd\u5305\u542b\u4e00\u4e2a\u7279\u5b9a\u7684\u5143\u7d20 \\bot \uff0c\u8fd9\u662f N \u7684\u6700\u5e95\u5c42\u5143\u7d20\u7684\u7279\u4f8b\u3002\u6700\u5f00\u59cb\u65f6\u6240\u6709\u7684\u952e\u90fd\u6620\u5c04\u5230 \uff08\\bot,\\bot\uff09 \u3002\u5bf9\u4e8e s(k)=(v,ver) \uff0c\u6211\u4eec\u7528 s(k).value \u4ee3\u8868 v \uff0c\n\u7528 s(k).version \u4ee3\u8868 ver \u3002  KVS operations are modeled as follows:   put(k,v) , for  k\\in K  and  v\\in V , takes the blockchain state  s  and changes it to  s'  such that  s'(k)=(v,next(s(k).version))  with  s'(k')=s(k')  for all  k'!=k .  get(k)  returns  s(k) .   KVS\u64cd\u4f5c\u6a21\u578b\u5982\u4e0b\uff1a   put(k,v) ,\u5bf9\u4e8e K\u4e2d\u7684k \u548c V\u4e2d\u7684v \uff0c\u5904\u7406\u533a\u5757\u94fe\u72b6\u6001 s \uff0c\u5c06\u5b83\u53d8\u4e3a s' \uff0c\u8fd9\u6837 s'(k)=(v,next(s(k).version)) \uff0c\u4ee5\u53ca s'(k')=s(k')  \u4ee5\u4fdd\u8bc1\u6240\u6709\u7684 k'!=k \u3002  get(k) \u8fd4\u56de s(k) \u3002   State is maintained by peers, but not by orderers and clients.  \u72b6\u6001\u7531peer\u8282\u70b9\u4fdd\u6301\uff0c\u800c\u4e0d\u662f\u6392\u5e8f\u8282\u70b9\u548c\u5ba2\u6237\u7aef\u3002  State partitioning.  Keys in the KVS can be recognized from their name to belong to a particular chaincode, in the sense that only transaction of a certain chaincode may modify the keys belonging to this chaincode. In principle, any chaincode can read the keys belonging to other chaincodes.  Support for cross-chaincode transactions, that modify the state belonging to two or more chaincodes is a post-v1 feature.  \u72b6\u6001\u5212\u5206\u3002 KVS\u4e2d\u7684\u952e\u80fd\u591f\u901a\u8fc7\u5b83\u4eec\u7684\u540d\u5b57\u8bc6\u522b\u5c5e\u4e8e\u54ea\u4e2a\u7279\u5b9a\u7684\u94fe\u7801\u3002\u4ece\u8fd9\u70b9\u4e0a\u8bf4\uff0c\u53ea\u6709\u67d0\u4e2a\u94fe\u7801\u7684\u4ea4\u6613\u53ef\u4ee5\u4fee\u6539\u5c5e\u4e8e\u8fd9\u4e2a\u94fe\u7801\u7684\u952e\u3002\u539f\u5219\u4e0a\uff0c\u4efb\u4f55\u94fe\u7801\u80fd\u591f\u8bfb\u53d6\u5c5e\u4e8e\u5176\u5b83\u94fe\u7801\u7684\u952e\u3002 \u652f\u6301\u8de8\u94fe\u4ea4\u6613\uff0c\u4fee\u6539\u5c5e\u4e8e\u4e24\u4e2a\u6216\u66f4\u591a\u94fe\u7801\u7684\u72b6\u6001\u662fV1\u540e\u671f\u7684\u7279\u5f81\u3002", 
            "title": "1.2.1. State / \u72b6\u6001"
        }, 
        {
            "location": "/arch-deep-dive_zh/#122-ledger", 
            "text": "Ledger provides a verifiable history of all successful state changes (we talk about valid transactions) and unsuccessful attempts to change state (we talk about invalid transactions), occurring during the operation of the system.  \u8d26\u672c\u63d0\u4f9b\u4e86\u5728\u7cfb\u7edf\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u53d1\u751f\u7684\u53ef\u9a8c\u8bc1\u5386\u53f2\uff0c\u5b83\u5305\u542b\u6240\u6709\u6210\u529f\u7684\u72b6\u6001\u66f4\u6539\uff08\u6211\u4eec\u79f0\u4e3a\u6709\u6548\u4ea4\u6613\uff09\u548c\u4e0d\u6210\u529f\u7684\u72b6\u6001\u66f4\u6539\u5c1d\u8bd5\uff08\u6211\u4eec\u79f0\u4e3a\u65e0\u6548\u4ea4\u6613\uff09\u3002  Ledger is constructed by the ordering service (see Sec 1.3.3) as a totally ordered hashchain of blocks of (valid or invalid) transactions. The hashchain imposes the total order of blocks in a ledger and each block contains an array of totally ordered transactions. This imposes total order across all transactions.  \u8d26\u672c\u662f\u7531\u6392\u5e8f\u670d\u52a1\uff08\u89c11.3.3\u8282\u5185\u5bb9\uff09\u6784\u5efa\u7684\u4e00\u4e2a\u5168\u90e8\u6709\u5e8f\u7684\u4ea4\u6613\u54c8\u5e0c\u94fe\u5757\uff08\u6709\u6548\u7684\u6216\u65e0\u6548\u7684\uff09\u3002\u54c8\u5e0c\u94fe\u5f3a\u5236\u5c06\u5168\u90e8\u6392\u5e8f\u5757\u7f6e\u5165\u8d26\u672c\uff0c\u6bcf\u4e2a\u5757\u5305\u542b\u4e00\u6279\u5168\u90e8\u6392\u5e8f\u4ea4\u6613\u3002\u8fd9\u4e2a\u5f3a\u5236\u5168\u90e8\u6392\u5e8f\u8986\u76d6\u6240\u6709\u4ea4\u6613\u3002  Ledger is kept at all peers and, optionally, at a subset of orderers. In the context of an orderer we refer to the Ledger as to  OrdererLedger , whereas in the context of a peer we refer to the ledger as to  PeerLedger .  PeerLedger  differs from the  OrdererLedger  in that peers locally maintain a bitmask that tells apart valid transactions from invalid ones (see Section XX for more details).  \u8d26\u672c\u4fdd\u5b58\u5728\u6240\u6709peer\u8282\u70b9\uff0c\u53ef\u9009\u5730\uff0c\u4fdd\u5b58\u5728\u6392\u5e8f\u8005\u7684\u4e00\u4e2a\u5b50\u96c6\u3002\u5728\u8c08\u8bba\u6392\u5e8f\u65f6\u6211\u4eec\u8bf4\u7684\u8d26\u672c\u662f\u6392\u5e8f\u8d26\u672c\uff0c\u800c\u8c08\u8bbapeer\u8282\u70b9\u65f6\u6211\u4eec\u8bf4\u7684\u8d26\u672c\u662fpeer\u8d26\u672c\u3002peer\u8d26\u672c\u4e0e\u6392\u5e8f\u8d26\u672c\u7684\u533a\u522b\u662f\uff0cpeer\u8282\u70b9\u672c\u5730\u7ef4\u62a4\u4e00\u4e2a\u4f4d\u63a9\u7801\u6765\u8868\u660e\u9694\u79bb\u6709\u6548\u4ea4\u6613\u548c\u65e0\u6548\u4ea4\u6613\uff08\u770bXX\u8282\u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u63cf\u8ff0\uff09\u3002  Peers may prune  PeerLedger  as described in Section XX (post-v1 feature). Orderers maintain  OrdererLedger  for fault-tolerance and availability (of the  PeerLedger ) and may decide to prune it at anytime, provided that properties of the ordering service (see Sec. 1.3.3) are maintained.  Peer\u8282\u70b9\u53ef\u4ee5\u4fee\u526apeer\u8d26\u672c\uff0c\u5177\u4f53\u5728XX\u8282\u63cf\u8ff0\uff08V1\u540e\u671f\u7279\u5f81\uff09\u3002\u6392\u5e8f\u8282\u70b9\u7ef4\u62a4\u6392\u5e8f\u8d26\u672c\u7528\u4e8e\u5b9e\u73b0\u5bb9\u9519\u548c\uff08peer\u8282\u70b9\u8d26\u672c\uff09\u53ef\u7528\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u523b\u51b3\u5b9a\u4fee\u526a\u5b83\uff0c\u53ea\u8981\u6392\u5e8f\u670d\u52a1\uff08\u89c11.3.3\u8282\uff09\u7684\u5c5e\u6027\u5728\u7ef4\u6301\u4e2d\u3002  The ledger allows peers to replay the history of all transactions and to reconstruct the state. Therefore, state as described in Sec 1.2.1 is an optional datastructure.  \u8d26\u672c\u5141\u8bb8peer\u8282\u70b9\u91cd\u6f14\u6240\u6709\u4ea4\u6613\u7684\u5386\u53f2\u548c\u91cd\u5efa\u72b6\u6001\u3002\u56e0\u6b64\uff0c\u57281.2.1\u8282\u4e2d\u63cf\u8ff0\u7684\u72b6\u6001\u662f\u4e00\u4e2a\u53ef\u9009\u7684\u6570\u636e\u7ed3\u6784\u3002", 
            "title": "1.2.2 \u8d26\u672c\uff08Ledger\uff09"
        }, 
        {
            "location": "/arch-deep-dive_zh/#13-nodes", 
            "text": "Nodes are the communication entities of the blockchain. A \u201cnode\u201d is only a logical function in the sense that multiple nodes of different types can run on the same physical server. What counts is how nodes are grouped in \u201ctrust domains\u201d and associated to logical entities that control them.  Node\u8282\u70b9\u662f\u533a\u5757\u94fe\u7684\u901a\u4fe1\u5b9e\u4f53\u3002\u4e00\u4e2a\u201cnode\u8282\u70b9\u201d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u903b\u8f91\u51fd\u6570\uff0c\u5728\u8fd9\u4e2a\u610f\u4e49\u4e0a\uff0c\u591a\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684node\u8282\u70b9\u53ef\u4ee5\u8fd0\u884c\u5728\u540c\u4e00\u53f0\u7269\u7406\u670d\u52a1\u5668\u4e0a\u3002\u5173\u952e\u5728\u4e8enode\u8282\u70b9\u5982\u4f55\u5728\u201c\u4fe1\u4efb\u57df\u201d\u4e2d\u5206\u7ec4\u548c\u5173\u8054\u63a7\u5236\u5b83\u4eec\u7684\u903b\u8f91\u5b9e\u4f53\u3002  There are three types of nodes:  1\u3001 Client  or  submitting-client : a client that submits an actual transaction-invocation to the endorsers, and broadcasts transaction-proposals to the ordering service.  2\u3001 Peer : a node that commits transactions and maintains the state and a copy of the ledger (see Sec, 1.2). Besides, peers can have a special endorser role.  3\u3001 Ordering-service-node  or  orderer : a node running the communication service that implements a delivery guarantee, such as atomic or total order broadcast.  The types of nodes are explained next in more detail.  \u6709\u4e09\u79cd\u7c7b\u578b\u7684node\u8282\u70b9\uff1a  1\u3001 \u5ba2\u6237\u7aef \u6216\u8005 \u63d0\u4ea4\u5ba2\u6237\u7aef \uff1a\u5ba2\u6237\u7aef\u63d0\u4ea4\u5b9e\u9645\u4ea4\u6613\u8c03\u7528\u5230\u80cc\u4e66\u8005\uff0c\u5e7f\u64ad\u4ea4\u6613\u8bf7\u6c42\u5230\u6392\u5e8f\u670d\u52a1\u8282\u70b9\u3002  2\u3001 Peer\u8282\u70b9 \uff1a\u63d0\u4ea4\u4ea4\u6613\u3001\u7ef4\u6301\u72b6\u6001\u548c\u8d26\u672c\u7684\u62f7\u8d1d\uff08\u89c11.2\u8282\uff09\u3002\u6b64\u5916\uff0cpeer\u8282\u70b9\u53ef\u4ee5\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u80cc\u4e66\u89d2\u8272\u3002  3\u3001 \u6392\u5e8f\u670d\u52a1\u8282\u70b9 \u6216 \u6392\u5e8f\u8005 \uff1a\u8fd0\u884c\u901a\u4fe1\u670d\u52a1\u5b9e\u73b0\u4ea4\u4ed8\u4fdd\u8bc1\uff0c\u50cf\u539f\u5b50\u6216\u5168\u5e8f\u5e7f\u64ad\u3002  Node\u8282\u70b9\u7684\u7c7b\u578b\u63a5\u4e0b\u6765\u8fdb\u884c\u66f4\u8be6\u7ec6\u7684\u89e3\u91ca\u3002", 
            "title": "1.3. \u8282\u70b9(Nodes)"
        }, 
        {
            "location": "/arch-deep-dive_zh/#131-client", 
            "text": "The client represents the entity that acts on behalf of an end-user. It must connect to a peer for communicating with the blockchain. The client may connect to any peer of its choice. Clients create and thereby invoke transactions.  As detailed in Section 2, clients communicate with both peers and the ordering service.  \u5ba2\u6237\u7aef\u4ee3\u8868\u6700\u7ec8\u7528\u6237\u5b9e\u4f53\u3002\u5b83\u5fc5\u987b\u8fde\u63a5\u5230\u4e00\u4e2apeer\u8282\u70b9\u4ee5\u4fbf\u4e0e\u533a\u5757\u94fe\u4ea4\u4e92\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u9009\u62e9\u8fde\u63a5\u4efb\u4f55peer\u8282\u70b9\u3002\u5ba2\u6237\u7aef\u521b\u5efa\u5e76\u8c03\u7528\u4ea4\u6613\u3002  \u5982\u7b2c2\u8282\u8be6\u7ec6\u8bf4\u660e\uff0c\u5ba2\u6237\u7aef\u540c\u65f6\u4e0epeer\u8282\u70b9\u548c\u6392\u5e8f\u670d\u52a1\u901a\u4fe1\u3002", 
            "title": "1.3.1. \u5ba2\u6237\u7aef(Client)"
        }, 
        {
            "location": "/arch-deep-dive_zh/#132-peer", 
            "text": "A peer receives ordered state updates in the form of blocks from the ordering service and maintain the state and the ledger.  Peer\u8282\u70b9\u4ee5\u5757\u7684\u5f62\u5f0f\u4ece\u6392\u5e8f\u670d\u52a1\u63a5\u6536\u6709\u5e8f\u72b6\u6001\u66f4\u65b0\uff0c\u7ef4\u62a4\u72b6\u6001\u548c\u8d26\u672c\u3002  Peers can additionally take up a special role of an  endorsing peer , or an  endorser . The special function of an  endorsing peer  occurs with respect to a particular chaincode and consists in  endorsing  a transaction before it is committed. Every chaincode may specify an  endorsement policy  that may refer to a set of endorsing peers. The policy defines the necessary and sufficient conditions for a valid transaction endorsement (typically a set of endorsers\u2019 signatures), as described later in Sections 2 and 3. In the special case of deploy transactions that install new chaincode the (deployment) endorsement policy is specified as an endorsement policy of the system chaincode.  Peer\u8282\u70b9\u80fd\u9644\u52a0\u4e00\u4e2a\u7279\u6b8a\u7684 \u80cc\u4e66\u8282\u70b9\u89d2\u8272 \uff0c\u6216 \u80cc\u4e66\u8005 \u3002 \u80cc\u4e66\u8282\u70b9 \u7684\u7279\u6b8a\u529f\u80fd\u662f\u5173\u4e8e\u7279\u6b8a\u94fe\u7801\uff0c\u5b58\u5728\u4e8e\u63d0\u4ea4\u4e4b\u524d \u80cc\u4e66 \u4e00\u4e2a\u4ea4\u6613\u3002\u6bcf\u4e2a\u94fe\u7801\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u80cc\u4e66\u7b56\u7565 \uff0c\u53ef\u4ee5\u5f15\u7528\u4e00\u7ec4\u80cc\u4e66\u8282\u70b9\u3002\u7b56\u7565\u5b9a\u4e49\u4e00\u4e2a\u6709\u6548\u4ea4\u6613\u80cc\u4e66\u7684\u5fc5\u8981\u548c\u5145\u5206\u6761\u4ef6\uff08\u5178\u578b\u7684\u662f\u4e00\u7ec4\u80cc\u4e66\u8005\u7b7e\u540d\uff09\uff0c\u5728\u540e\u9762\u7684\u7b2c2\u8282\u548c\u7b2c3\u8282\u63cf\u8ff0\u3002\u5728\u90e8\u7f72\u4ea4\u6613\u7684\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u5b89\u88c5\u94fe\u7801\uff08\u90e8\u7f72\uff09\u80cc\u4e66\u7b56\u7565\u662f\u7531\u7cfb\u7edf\u94fe\u7801\u7684\u80cc\u4e66\u7b56\u7565\u6307\u5b9a\u3002", 
            "title": "1.3.2. Peer"
        }, 
        {
            "location": "/arch-deep-dive_zh/#133-orderer", 
            "text": "The  orderers  form the  ordering service , i.e., a communication fabric that provides delivery guarantees. The ordering service can be implemented in different ways: ranging from a centralized service (used e.g., in development and testing) to distributed protocols that target different network and node fault models.  \u6392\u5e8f\u8005 \u4ea7\u751f \u6392\u5e8f\u670d\u52a1 \uff0c\u5373\uff0c\u4e00\u4e2a\u63d0\u4f9b\u4ea4\u4ed8\u4fdd\u8bc1\u7684\u901a\u4fe1\u67b6\u6784\u3002\u6392\u5e8f\u670d\u52a1\u80fd\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5b9e\u73b0\uff1a\u4ece\u96c6\u4e2d\u670d\u52a1\u6392\u5e8f\uff08\u4f8b\u5982\uff0c\u5f00\u53d1\u548c\u6d4b\u8bd5\uff09\u7684\u5206\u5e03\u5f0f\u534f\u8bae\uff0c\u6307\u5411\u4e0d\u540c\u7684\u7f51\u7edc\u548c\u8282\u70b9\u6545\u969c\u6a21\u578b\u3002  Ordering service provides a shared  communication channel  to clients and peers, offering a broadcast service for messages containing transactions. Clients connect to the channel and may broadcast messages on the channel which are then delivered to all peers. The channel supports  atomic  delivery of all messages, that is, message communication with total-order delivery and (implementation specific) reliability. In other words, the channel outputs the same messages to all connected peers and outputs them to all peers in the same logical order. This atomic communication guarantee is also called  total-order broadcast ,  atomic broadcast , or  consensus  in the context of distributed systems. The communicated messages are the candidate transactions for inclusion in the blockchain state.  \u6392\u5e8f\u670d\u52a1\u4e3a\u5ba2\u6237\u7aef\u548cpeer\u8282\u70b9\u63d0\u4f9b\u5171\u4eab\u7684 \u901a\u4fe1\u4fe1\u9053 \uff0c\u4e3a\u5305\u542b\u4ea4\u6613\u7684\u6d88\u606f\u63d0\u4f9b\u5e7f\u64ad\u670d\u52a1\u3002\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u4fe1\u9053\uff0c\u53ef\u4ee5\u5728\u4fe1\u9053\u4e0a\u5e7f\u64ad\u6d88\u606f\uff0c\u4fe1\u9053\u968f\u540e\u4f20\u9012\u6d88\u606f\u7ed9\u6240\u6709peer\u8282\u70b9\u3002\u4fe1\u9053\u652f\u6301\u6240\u6709\u6d88\u606f\u7684 \u539f\u5b50 \u4f20\u9012\uff0c\u610f\u601d\u662f\uff0c\u5168\u90e8\u6392\u5e8f\u4ea4\u4ed8\u7684\u6d88\u606f\u901a\u4fe1\u548c\uff08\u5177\u4f53\u5b9e\u65bd\uff09\u53ef\u9760\u6027\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4fe1\u9053\u8f93\u51fa\u540c\u6837\u7684\u6d88\u606f\u7ed9\u6240\u6709\u8fde\u63a5\u7684peer\u8282\u70b9\u5e76\u4e14\u8f93\u51fa\u7684\u6d88\u606f\u5177\u6709\u540c\u6837\u7684\u903b\u8f91\u987a\u5e8f\u3002\u8fd9\u4e2a\u539f\u5b50\u901a\u4fe1\u4fdd\u8bc1\u4e5f\u79f0\u4e3a \u5168\u90e8\u6392\u5e8f\u5e7f\u64ad \uff0c \u539f\u5b50\u5e7f\u64ad \uff0c\u6216\u662f\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684 \u5171\u8bc6 \u3002\u901a\u4fe1\u6d88\u606f\u662f\u5305\u542b\u5728\u533a\u5757\u94fe\u72b6\u6001\u4e2d\u7684\u7533\u8bf7\u4ea4\u6613\u3002  Partitioning (ordering service channels).  Ordering service may support multiple  channels  similar to the  topics  of a publish/subscribe (pub/sub) messaging system. Clients can connects to a given channel and can then send messages and obtain the messages that arrive. Channels can be thought of as partitions - clients connecting to one channel are unaware of the existence of other channels, but clients may connect to multiple channels. Even though some ordering service implementations included with Hyperledger Fabric v1 will support multiple channels, for simplicity of presentation, in the rest of this document, we assume ordering service consists of a single channel/topic.  \u5206\u9694\uff08\u6392\u5e8f\u670d\u52a1\u4fe1\u9053\uff09\u3002 \u6392\u5e8f\u670d\u52a1\u53ef\u4ee5\u652f\u6301\u591a\u4e2a \u4fe1\u9053 \uff0c\u7c7b\u4f3c\u53d1\u5e03/\u8ba2\u9605 \u4e3b\u9898 \u6d88\u606f\u7cfb\u7edf\u3002\u5ba2\u6237\u7aef\u80fd\u591f\u8fde\u63a5\u5230\u4e00\u4e2a\u7ed9\u5b9a\u7684\u4fe1\u9053\uff0c\u7136\u540e\u80fd\u591f\u53d1\u9001\u6d88\u606f\u548c\u83b7\u5f97\u5230\u8fbe\u7684\u6d88\u606f\u3002\u4fe1\u9053\u80fd\u591f\u88ab\u8ba4\u4e3a\u662f\u5206\u533a-\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u4e00\u4e2a\u4fe1\u9053\u800c\u6ca1\u6709\u5bdf\u89c9\u5230\u5176\u5b83\u4fe1\u9053\u7684\u5b58\u5728\uff0c\u4f46\u5ba2\u6237\u7aef\u53ef\u4ee5\u8fde\u63a5\u5230\u591a\u4e2a\u4fe1\u9053\u3002\u5c3d\u7ba1\u4e00\u4e9b\u6392\u5e8f\u670d\u52a1\u5b9e\u73b0\u5305\u62ecHyperledger Fabric v1\u5c06\u652f\u6301\u591a\u4fe1\u9053\uff0c\u4e3a\u4e86\u9610\u8ff0\u7b80\u5355\uff0c\u5728\u672c\u6587\u6863\u7684\u5269\u4f59\u90e8\u5206\uff0c\u6211\u4eec\u5047\u5b9a\u6392\u5e8f\u670d\u52a1\u5305\u542b\u4e00\u4e2a\u5355\u72ec\u7684\u4fe1\u9053/\u4e3b\u9898\u3002  Ordering service API.  Peers connect to the channel provided by the ordering service, via the interface provided by the ordering service. The ordering service API consists of two basic operations (more generally  asynchronous events ):  \u6392\u5e8f\u670d\u52a1API\u3002 peer\u8282\u70b9\u901a\u8fc7\u6392\u5e8f\u670d\u52a1\u63d0\u4f9b\u7684\u63a5\u53e3\u8fde\u63a5\u5230\u6392\u5e8f\u670d\u52a1\u63d0\u4f9b\u7684\u4fe1\u9053\u3002\u6392\u5e8f\u670d\u52a1API\u5305\u542b\u4e24\u4e2a\u57fa\u672c\u64cd\u4f5c\uff08\u66f4\u591a\u662f \u5f02\u6b65\u4e8b\u4ef6 \uff09\uff1a  TODO  add the part of the API for fetching particular blocks under client/peer specified sequence numbers.   broadcast(blob): a client calls this to broadcast an arbitrary message blob for dissemination over the channel. This is also called request(blob) in the BFT context, when sending a request to a service.   \u5f85\u529e \uff1a\u589e\u52a0\u5728\u5ba2\u6237\u7aef/peer\u8282\u70b9\u6307\u5b9a\u5e8f\u5217\u53f7\u4e0b\u53d6\u5f97\u7279\u5b9a\u5757\u7684API\u3002    broadcast(blob): \u5ba2\u6237\u7aef\u8c03\u7528\u6b64\u51fd\u6570\u6765\u5e7f\u64ad\u4efb\u610f\u6d88\u606fblob\u5728\u5168\u4fe1\u9053\u6563\u64ad\u3002\u8fd9\u5728BFT\u73af\u5883\u4e0b\u4e5f\u79f0\u4e3arequest(blob)\uff0c\u5f53\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\u5230\u670d\u52a1\u5668\u65f6\u3002    deliver(seqno, prevhash, blob): the ordering service calls this on the peer to deliver the message blob with the specified non-negative integer sequence number (seqno) and hash of the most recently delivered blob (prevhash). In other words, it is an output event from the ordering service. deliver() is also sometimes called notify() in pub-sub systems or commit() in BFT systems.    deliver(seqno, prevhash, blob):\u6392\u5e8f\u670d\u52a1\u5728peer\u8282\u70b9\u4f20\u9001\u5e26\u6709\u975e\u8d1f\u6574\u578b\u5e8f\u5217\u53f7\uff08seqno\uff09\u548cblob\u7684\u6700\u8fd1\u54c8\u5e0c(prevhash)\u7684\u6d88\u606fblob\u65f6\u8c03\u7528\u8fd9\u4e2a\u3002\u6362\u8a00\u4e4b\uff0c\u5b83\u662f\u4ece\u6392\u5e8f\u670d\u52a1\u4ea7\u751f\u7684\u8f93\u51fa\u4e8b\u4ef6\u3002deliver()\u6709\u65f6\u5728\u53d1\u5e03/\u8ba2\u9605\u7cfb\u7edf\u4e5f\u79f0\u4e3anotify() \uff0c\u6216\u5728BFT\u7cfb\u7edf\u4e2d\u79f0\u4e3acommit()\u3002    Ledger and block formation.  The ledger (see also Sec. 1.2.2) contains all data output by the ordering service. In a nutshell, it is a sequence of deliver(seqno, prevhash, blob) events, which form a hash chain according to the computation of prevhash described before.  \u8d26\u672c\u548c\u5757\u6784\u6210\u3002  \u8d26\u672c\uff08\u89c11.2.2\uff09\u5305\u542b\u4e86\u6392\u5e8f\u670d\u52a1\u8f93\u51fa\u7684\u6240\u6709\u6570\u636e\u3002\u6982\u62ec\u5730\u8bf4\uff0c\u5b83\u662f\u4e00\u7cfb\u5217deliver(seqno, prevhash, blob)\u4e8b\u4ef6\uff0c\u6839\u636e\u4e4b\u524d\u63cf\u8ff0\u7684prevhash\u8ba1\u7b97\u5f62\u6210\u7684\u4e00\u4e2a\u54c8\u5e0c\u94fe\u3002  Most of the time, for efficiency reasons, instead of outputting individual transactions (blobs), the ordering service will group (batch) the blobs and output blocks within a single deliver event. In this case, the ordering service must impose and convey a deterministic ordering of the blobs within each block. The number of blobs in a block may be chosen dynamically by an ordering service implementation.  \u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u51fa\u4e8e\u6548\u7387\u7684\u539f\u56e0\uff0c\u4ee3\u66ff\u8f93\u51fa\u5355\u4e2a\u4ea4\u6613\uff08blobs\uff09\uff0c\u6392\u5e8f\u670d\u52a1\u4f1a\u6279\u91cf\u8f93\u51fablobs\uff0c\u800c\u4e14\u8f93\u51fa\u5757\u5728\u4e00\u4e2a\u5355\u4e2a\u4ea4\u4ed8\u4e8b\u4ef6\u4e2d\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6392\u5e8f\u670d\u52a1\u5fc5\u987b\u5728\u6bcf\u4e2a\u5757\u5185\u5b9e\u65bd\u548c\u4f20\u9012blobs\u7684\u786e\u5b9a\u987a\u5e8f\u3002\u5757\u5185blobs\u7684\u6570\u91cf\u53ef\u4ee5\u7531\u6392\u5e8f\u670d\u52a1\u5b9e\u73b0\u52a8\u6001\u9009\u62e9\u3002  In the following, for ease of presentation, we define ordering service properties (rest of this subsection) and explain the workflow of transaction endorsement (Section 2) assuming one blob per deliver event. These are easily extended to blocks, assuming that a deliver event for a block corresponds to a sequence of individual deliver events for each blob within a block, according to the above mentioned deterministic ordering of blobs within a blocs.  \u63a5\u4e0b\u6765\uff0c\u4e3a\u4e86\u4fbf\u4e8e\u8bf4\u660e\uff0c\u6211\u4eec\u5b9a\u4e49\u6392\u5e8f\u670d\u52a1\u7684\u5c5e\u6027\uff08\u672c\u8282\u7684\u5269\u4f59\u90e8\u5206\uff09\u548c\u89e3\u91ca\u4ea4\u6613\u80cc\u4e66\u7684\u5de5\u4f5c\u6d41\u7a0b\uff08\u7b2c2\u8282\uff09\uff0c\u5047\u5b9a\u6bcf\u4e2adeliver\u4e8b\u4ef6\u4e00\u4e2ablob\u3002\u8fd9\u4e9b\u5bb9\u6613\u6269\u5c55\u5230\u5757\uff0c\u5047\u5b9a\u4e00\u4e2a\u5757\u7684deliver\u4e8b\u4ef6\u5bf9\u5e94\u4e00\u7cfb\u5217\u5355\u4e2adeliver\u4e8b\u4ef6\uff0c\u5bf9\u4e8e\u5757\u5185\u7684\u6bcf\u4e2ablob\uff0c\u6839\u636e\u4e0a\u8ff0\u63cf\u8ff0\u786e\u5b9a\u5757\u5185blobs\u987a\u5e8f\u3002  Ordering service properties  The guarantees of the ordering service (or atomic-broadcast channel) stipulate what happens to a broadcasted message and what relations exist among delivered messages. These guarantees are as follows:  \u6392\u5e8f\u670d\u52a1\u7279\u6027  \u6392\u5e8f\u670d\u52a1\u7684\u4fdd\u8bc1\uff08\u6216\u539f\u5b50\u5e7f\u64ad\u4fe1\u9053\uff09\u89c4\u5b9a\u4e86\u5e7f\u64ad\u6d88\u606f\u7684\u53d1\u751f\u548c\u4ea4\u4ed8\u6d88\u606f\u4e4b\u95f4\u5b58\u5728\u4ec0\u4e48\u5173\u7cfb\u3002\u8fd9\u4e9b\u4fdd\u8bc1\u5982\u4e0b\uff1a  1\u3001 Safety (consistency guarantees) : As long as peers are connected for sufficiently long periods of time to the channel (they can disconnect or crash, but will restart and reconnect), they will see an  identical  series of delivered (seqno, prevhash, blob) messages. This means the outputs (deliver() events) occur in the  same order  on all peers and according to sequence number and carry  identical content  (blob and prevhash) for the same sequence number. Note this is only a logical order, and a deliver(seqno, prevhash, blob) on one peer is not required to occur in any real-time relation to deliver(seqno, prevhash, blob) that outputs the same message at another peer. Put differently, given a particular seqno, no two correct peers deliver different prevhash or blob values. Moreover, no value blob is delivered unless some client (peer) actually called broadcast(blob) and, preferably, every broadcasted blob is only delivered once.  1\u3001 \u5b89\u5168\u6027\uff08\u4e00\u81f4\u6027\u4fdd\u8bc1\uff09 \uff1a\u53ea\u8981peer\u8282\u70b9\u8fde\u63a5\u5230\u4fe1\u9053\u8db3\u591f\u957f\u7684\u65f6\u95f4\uff08\u5b83\u4eec\u80fd\u591f\u65ad\u5f00\u6216\u5954\u6e83\uff0c\u4f46\u4f1a\u91cd\u542f\u548c\u91cd\u65b0\u8fde\u63a5\uff09\uff0c\u5b83\u4eec\u4f1a\u770b\u5230\u4ea4\u4ed8\uff08seqno,prevhash,blob\uff09\u6d88\u606f\u7684 \u540c\u7b49 \u5e8f\u5217\u3002\u8fd9\u610f\u5473\u7740\u5411\u6240\u6709peer\u8282\u70b9\u8f93\u51fa\uff08deliver()events\uff09 \u76f8\u540c\u6392\u5e8f \uff0c\u4ee5\u53ca\u6839\u636e\u5e8f\u5217\u53f7\u548c\u4e3a\u76f8\u540c\u5e8f\u5217\u53f7\u643a\u5e26 \u540c\u7b49\u5185\u5bb9 \uff08blob\u548cprevhash\uff09\u3002\u6ce8\u610f\u8fd9\u4ec5\u662f\u4e00\u4e2a\u903b\u8f91\u987a\u5e8f\uff0c\u5728\u4e00\u4e2apeer\u8282\u70b9\u4e0a\u7684deliver(seqno,prevhash,blob)\u662f\u4e0d\u9700\u8981\u4e0e\u53e6\u5916\u4e00\u4e2apeer\u8282\u70b9\u8f93\u51fa\u7684deliver(seqno,prevhash,blob)\u53d1\u751f\u4efb\u4f55\u5b9e\u65f6\u5173\u7cfb\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u7279\u5b9a\u7684seqno\uff0c\u6ca1\u6709\u4e24\u4e2a\u6b63\u786e\u7684peer\u8282\u70b9\u4ea4\u4ed8\u4e0d\u540c\u7684prehash\u6216blob\u503c\u3002\u800c\u4e14\uff0c\u6ca1\u6709\u503cblob\u4ea4\u4ed8\u9664\u975e\u4e00\u4e9b\u5ba2\u6237\u7aef\uff08peer\u8282\u70b9\uff09\u5b9e\u9645\u662f\u5e7f\u64ad\uff08blob\uff09\uff0c\u4ee5\u53ca\u66f4\u597d\u7684\uff0c\u6bcf\u4e2a\u5e7f\u64adblob\u53ea\u4ea4\u4ed8\u4e00\u6b21\u3002  Furthermore, the deliver() event contains the cryptographic hash of the data in the previous deliver() event (prevhash). When the ordering service implements atomic broadcast guarantees, prevhash is the cryptographic hash of the parameters from the deliver() event with sequence number seqno-1. This establishes a hash chain across deliver() events, which is used to help verify the integrity of the ordering service output, as discussed in Sections 4 and 5 later. In the special case of the first deliver() event, prevhash has a default value.  \u6b64\u5916\uff0cdeliver()\u4e8b\u4ef6\u5305\u542b\u4e4b\u524ddeliver()\u4e8b\u4ef6\uff08prevhash\uff09\u7684\u6570\u636e\u52a0\u5bc6\u54c8\u5e0c\u3002\u5f53\u6392\u5e8f\u670d\u52a1\u5b9e\u73b0\u539f\u5b50\u5e7f\u64ad\u4fdd\u8bc1\uff0cprevhash\u662f\u4ece\u5e8f\u5217\u53f7\u4e3aseqno-1\u7684deliver()\u4e8b\u4ef6\u5f97\u5230\u7684\u53c2\u6570\u7684\u52a0\u5bc6\u54c8\u5e0c\uff0c\u8fd9\u5728\u7b2c4\u8282\u548c\u7b2c5\u8282\u8ba8\u8bba\u3002\u5bf9\u4e8e\u7b2c\u4e00\u4e2adeliver()\u4e8b\u4ef6\u7279\u4f8b\uff0cprevhash\u6709\u4e00\u4e2a\u7f3a\u7701\u503c\u3002  2\u3001 Liveness (delivery guarantee) : Liveness guarantees of the ordering service are specified by a ordering service implementation. The exact guarantees may depend on the network and node fault model.  In principle, if the submitting client does not fail, the ordering service should guarantee that every correct peer that connects to the ordering service eventually delivers every submitted transaction.  2\u3001 \u6d3b\u8dc3\u5ea6\uff08\u4ea4\u4ed8\u4fdd\u8bc1\uff09 \uff1a\u6392\u5e8f\u670d\u52a1\u7684\u6d3b\u8dc3\u5ea6\u4fdd\u8bc1\u7531\u6392\u5e8f\u670d\u52a1\u5b9e\u73b0\u786e\u5b9a\u3002\u51c6\u786e\u7684\u4fdd\u8bc1\u53ef\u4ee5\u4f9d\u8d56\u4e8e\u7f51\u7edc\u548c\u8282\u70b9\u6545\u969c\u6a21\u578b\u3002  \u539f\u5219\u4e0a\uff0c\u5982\u679c\u63d0\u4ea4\u5ba2\u6237\u7aef\u6ca1\u6709\u5931\u8d25\uff0c\u6392\u5e8f\u670d\u52a1\u5e94\u8be5\u4fdd\u8bc1\u6bcf\u4e2a\u8fde\u63a5\u5230\u6392\u5e8f\u670d\u52a1\u7684\u6b63\u786epeer\u8282\u70b9\u7ec8\u7a76\u4ea4\u4ed8\u6bcf\u4e2a\u63d0\u4ea4\u4ea4\u6613\u3002  To summarize, the ordering service ensures the following properties:  \u6982\u62ec\u5730\u8bf4\uff0c\u6392\u5e8f\u670d\u52a1\u786e\u4fdd\u4ee5\u4e0b\u7279\u6027\uff1a    Agreement.  For any two events at correct peers deliver(seqno, prevhash0, blob0) and deliver(seqno, prevhash1, blob1) with the same seqno, prevhash0==prevhash1 and blob0==blob1;    \u4e00\u81f4.  \u5bf9\u4e8e\u4efb\u4f55\u4e24\u4e2a\u5177\u6709\u76f8\u540cseqno\u7684\u6b63\u786epeer\u8282\u70b9\u7684\u4e8b\u4ef6deliver(seqno, prevhash0, blob0)\u548cdeliver(seqno, prevhash1, blob1) , \u5219prevhash0==prevhash1\uff0c\u4ee5\u53ca blob0==blob1;    Hashchain integrity.  For any two events at correct peers deliver(seqno-1, prevhash0, blob0) and deliver(seqno, prevhash, blob), prevhash = HASH(seqno-1||prevhash0||blob0).    \u54c8\u5e0c\u94fe\u5b8c\u6574\u6027\u3002 \u5bf9\u4e8e\u4efb\u4f55\u5728\u6b63\u786epeer\u8282\u70b9\u7684\u4e24\u4e2a\u4e8b\u4ef6deliver(seqno-1, prevhash0, blob0)\u548cdeliver(seqno, prevhash, blob), prevhash = HASH(seqno-1||prevhash0||blob0).    No skipping.  If an ordering service outputs deliver(seqno, prevhash, blob) at a correct peer p, such that seqno 0, then p already delivered an event deliver(seqno-1, prevhash0, blob0).    \u6ca1\u6709\u8df3\u8fc7.  \u5982\u679c\u6392\u5e8f\u670d\u52a1\u5728\u6b63\u786epeer\u8282\u70b9p\u8f93\u51fadeliver(seqno, prevhash, blob) , \u8fd9\u6837\u7684\u8bddseqno 0, \u7136\u540ep\u5df2\u7ecf\u4ea4\u4ed8\u4e8b\u4ef6deliver(seqno-1, prevhash0, blob0).    No creation.  Any event deliver(seqno, prevhash, blob) at a correct peer must be preceded by a broadcast(blob) event at some (possibly distinct) peer;    \u6ca1\u6709\u521b\u9020.  \u4efb\u4f55\u5728\u6b63\u786epeer\u8282\u70b9\u4e0a\u7684\u4e8b\u4ef6deliver(seqno, prevhash, blob)\u5fc5\u987b\u4e4b\u524d\u4e00\u5b9a\u6709\u4e00\u4e2abroadcast(blob)\u4e8b\u4ef6\u5728\u4e00\u4e9b(\u53ef\u80fd\u662f\u4e0d\u540c\u7684)peer\u8282\u70b9\u4e0a;    No duplication (optional, yet desirable).  For any two events broadcast(blob) and broadcast(blob ), when two events deliver(seqno0, prevhash0, blob) and deliver(seqno1, prevhash1, blob ) occur at correct peers and blob == blob , then seqno0==seqno1 and prevhash0==prevhash1.    \u6ca1\u6709\u91cd\u590d (\u53ef\u9009,\u4f46\u53ef\u53d6).  \u5bf9\u4e8e\u4efb\u4f55\u4e24\u4e2a\u4e8b\u4ef6broadcast(blob)\u548cbroadcast(blob ), \u5f53\u4e24\u4e2a\u4e8b\u4ef6deliver(seqno0, prevhash0, blob) \u548c deliver(seqno1, prevhash1, blob ) \u53d1\u751f\u5728\u6b63\u786e\u7684\u8282\u70b9 \u548c blob == blob , \u90a3\u4e48 seqno0==seqno1 \u548c prevhash0==prevhash1.    Liveness.  If a correct client invokes an event broadcast(blob) then every correct peer \u201ceventually\u201d issues an event deliver( ,  , blob), where * denotes an arbitrary value.    \u6d3b\u8dc3\u6027\u3002 \u5982\u679c\u6b63\u786e\u7684\u5ba2\u6237\u7aef\u8c03\u7528\u4e8b\u4ef6broadcast(blob)\u90a3\u4e48\u6bcf\u4e2a\u6b63\u786e\u7684peer\u8282\u70b9\u201c\u6700\u7ec8\u201d\u53d1\u51fa\u4e8b\u4ef6deliver( ,  , blob)\uff0c\u5176\u4e2d*\u8868\u793a\u4efb\u610f\u503c\u3002", 
            "title": "1.3.3. Orderer"
        }, 
        {
            "location": "/arch-deep-dive_zh/#2-basic-workflow-of-transaction-endorsement", 
            "text": "In the following we outline the high-level request flow for a transaction. Remark:   Notice that the following protocol does not assume that all transactions are deterministic, i.e., it allows for non-deterministic transactions.  \u63a5\u4e0b\u6765\u6211\u4eec\u6982\u8ff0\u4e00\u4e2a\u4ea4\u6613\u7684\u9ad8\u7ea7\u8bf7\u6c42\u6d41\u7a0b\u3002  \u5907\u6ce8\uff1a\u6ce8\u610f\u4e0b\u9762\u7684\u534f\u8bae \u4e0d\u5047\u5b9a\u6240\u6709\u7684\u4ea4\u6613\u662f\u786e\u5b9a\u7684\uff0c\u5373\uff0c\u5b83\u5141\u8bb8\u4e0d\u786e\u5b9a\u4ea4\u6613 \u3002", 
            "title": "2. \u4ea4\u6613\u80cc\u4e66\u7684\u57fa\u672c\u5de5\u4f5c\u6d41\u7a0b(Basic workflow of transaction endorsement)"
        }, 
        {
            "location": "/arch-deep-dive_zh/#21-peerthe-client-creates-a-transaction-and-sends-it-to-endorsing-peers-of-its-choice", 
            "text": "To invoke a transaction, the client sends a PROPOSE message to a set of endorsing peers of its choice (possibly not at the same time - see Sections 2.1.2. and 2.3.). The set of endorsing peers for a given chaincodeID is made available to client via peer, which in turn knows the set of endorsing peers from endorsement policy (see Section 3). For example, the transaction could be sent to all endorsers of a given chaincodeID. That said, some endorsers could be offline, others may object and choose not to endorse the transaction. The submitting client tries to satisfy the policy expression with the endorsers available.  \u8c03\u7528\u4ea4\u6613\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2aPROPOSE\u6d88\u606f\u5230\u5b83\u9009\u62e9\u7684\u4e00\u7ec4\u80cc\u4e66peer\u8282\u70b9\uff08\u53ef\u80fd\u4e0d\u662f\u540c\u4e00\u65f6\u95f4\uff0c\u89c1\u7b2c2.1.2\u8282\u548c\u7b2c2.3\u8282\uff09\u3002\u7ed9\u5b9achaincodeID\u7684  \u80cc\u4e66peer\u8282\u70b9\u7684\u8bbe\u7f6e\u7531\u5ba2\u6237\u7aef\u901a\u8fc7peer\u8282\u70b9\u5b9e\u73b0\uff0c\u4ece\u80cc\u4e66\u7b56\u7565\uff08\u89c1\u7b2c3\u8282\uff09\u77e5\u9053\u80cc\u4e66peer\u8282\u70b9\u7684\u8bbe\u7f6e\u3002\u4f8b\u5982\uff0c\u4ea4\u6613\u80fd\u88ab\u53d1\u9001\u7ed9\u6240\u6709\u7ed9\u5b9a  chaincodeID\u80cc\u4e66\u8005.\u90a3\u5c31\u662f\u8bf4\uff0c\u4e00\u4e9b\u80cc\u4e66\u8005\u80fd\u591f\u79bb\u7ebf\uff0c\u5176\u5b83\u4eba\u53ef\u80fd\u53cd\u5bf9\u548c\u9009\u62e9\u4e0d\u4e3a\u4ea4\u6613\u80cc\u4e66\u3002\u63d0\u4ea4\u5ba2\u6237\u7aef\u5c1d\u8bd5\u6ee1\u8db3\u80cc\u4e66\u8005\u53ef\u7528\u7684\u80cc\u4e66\u7b56\u7565\u8868\u8fbe\u3002  In the following, we first detail PROPOSE message format and then discuss possible patterns of interaction between submitting client and endorsers.  \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9996\u5148\u63cf\u8ff0PROPOSE\u6d88\u606f\u683c\u5f0f\uff0c\u7136\u540e\u8ba8\u8bba\u5728\u63d0\u4ea4\u5ba2\u6237\u7aef\u548c\u80cc\u4e66\u8005\u4e4b\u95f4\u53ef\u80fd\u7684\u4e92\u52a8\u6a21\u5f0f\u3002", 
            "title": "2.1. \u5ba2\u6237\u7aef\u521b\u5efa\u4ea4\u6613\u548c\u53d1\u9001\u7ed9\u5b83\u9009\u62e9\u7684\u80cc\u4e66peer\u8282\u70b9\uff08The client creates a transaction and sends it to endorsing peers of its choice\uff09"
        }, 
        {
            "location": "/arch-deep-dive_zh/#211-proposepropose-message-format", 
            "text": "The format of a PROPOSE message is  , where tx is a mandatory and anchor optional argument explained in the following.  \u4e00\u4e2aPROPOSE\u6d88\u606f\u7684\u683c\u5f0f\u662f \uff0c\u5176\u4e2dtx\u662f\u5f3a\u5236\u7684\uff0canchor\u53ef\u9009\u53c2\u6570\u5728\u4e0b\u9762\u5217\u51fa\u3002   tx= , where  clientID is an ID of the submitting client,  chaincodeID refers to the chaincode to which the transaction pertains,  txPayload is the payload containing the submitted transaction itself,  timestamp is a monotonically increasing (for every new transaction) integer maintained by the client,   clientSig is signature of a client on other fields of tx.    clientID \u662f\u63d0\u4ea4\u5ba2\u6237\u7aef\u7684\u8eab\u4efd\uff0c   chaincodeID \u5f15\u7528\u4ea4\u6613\u76f8\u5173\u7684\u94fe\u7801\uff0c  txPayload \u662f\u63d0\u4ea4\u4ea4\u6613\u81ea\u8eab\u7684\u8f7d\u4f53,  timestamp \u662f\u7531\u5ba2\u6237\u7aef\u7ef4\u62a4\u7684\u4e00\u4e2a\u5355\u72ec\u9012\u589e(\u4e3a\u6bcf\u4e00\u7b14\u4ea4\u6613)\u6574\u578b\u503c,  clientSig \u662ftx\u7684\u5176\u5b83\u57df\u5ba2\u6237\u7aef\u7b7e\u540d.   The details of txPayload will differ between invoke transactions and deploy transactions (i.e., invoke transactions referring to a deploy-specific system chaincode).   txPayload\u7684\u7ec6\u8282\u4f1a\u5728\u8c03\u7528\u4ea4\u6613\u548c\u90e8\u7f72\u4ea4\u6613\u4e4b\u95f4\u6709\u6240\u4e0d\u540c\uff08\u5373\uff0c\u8c03\u7528\u4ea4\u6613\u5f15\u7528\u90e8\u7f72\u6307\u5b9a\u7684\u7cfb\u7edf\u94fe\u7801\uff09\u3002  For an  invoke transaction , txPayload would consist of two fields   txPayload =  , where  operation denotes the chaincode operation (function) and arguments,  metadata denotes attributes related to the invocation.   \u5bf9\u4e8e \u8c03\u7528\u4ea4\u6613 \uff0ctxPayload\u4f1a\u5305\u542b\u4e24\u4e2a\u57df    txPayload =  , \u5176\u4e2d    operation \u8868\u793a\u94fe\u7801\u64cd\u4f5c\uff08\u51fd\u6570\uff09\u548c\u53c2\u6570,    metadata \u8868\u793a\u8c03\u7528\u76f8\u5173\u7684\u5c5e\u6027.    For a  deploy transaction , txPayload would consist of three fields\n- txPayload =  , where\n  - source denotes the source code of the chaincode,\n  - metadata denotes attributes related to the chaincode and application,\n  - policies contains policies related to the chaincode that are accessible to all peers, such as the endorsement policy. Note that endorsement policies are not supplied with txPayload in a deploy transaction, but txPayload of a deploy contains endorsement policy ID and its parameters (see Section 3).  \u5bf9\u4e8e \u90e8\u7f72\u4ea4\u6613 \uff0ctxPayload\u4f1a\u5305\u542b\u4e09\u4e2a\u57df  txPayload =  , \u5176\u4e2d  source \u8868\u793a\u94fe\u7801\u7684\u6e90\u7801  metadata \u8868\u793a\u94fe\u7801\u548c\u5e94\u7528\u7684\u76f8\u5173\u5c5e\u6027  policies \u5305\u542b\u6240\u6709peer\u8282\u70b9\u53ef\u8bbf\u95ee\u7684\u94fe\u7801\u7684\u76f8\u5173\u7b56\u7565\uff0c\u50cf\u80cc\u4e66\u7b56\u7565\u3002\u6ce8\u610f\u80cc\u4e66\u7b56\u7565\u5728\u90e8\u7f72\u4ea4\u6613\u4e2d\u4e0d\u652f\u6301txPayload\uff0c\u4f46\u90e8\u7f72\u7684txPayload\u5305\u542b\u80cc\u4e66\u7b56\u7565ID\u548c\u5b83\u7684\u53c2\u6570\uff08\u89c1\u7b2c3\u8282\uff09\u3002    anchor contains  read version dependencies , or more specifically, key-version pairs (i.e., anchor is a subset of KxN), that binds or \u201canchors\u201d the PROPOSE request to specified versions of keys in a KVS (see Section 1.2.). If the client specifies the anchor argument, an endorser endorses a transaction only upon read version numbers of corresponding keys in its local KVS match anchor (see Section 2.2. for more details).    anchor\u5305\u542b \u8bfb\u7248\u672c\u4f9d\u8d56 \uff0c\u6216\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u952e-\u7248\u672c\u5bf9\uff08\u5373\uff0canchor\u662fKxN\u7684\u4e00\u4e2a\u5b50\u96c6\uff09\uff0c\u5b83\u6346\u7ed1\u6216\u201c\u951a\u201dPROPOSE\u8bf7\u6c42\u5230\u6307\u5b9aKVS\u4e2dkey\u7684\u7248\u672c\uff08\u7b2c1.2\u8282\uff09\u3002\u5982\u679c\u5ba2\u6237\u7aef\u6307\u5b9aanchor\u53c2\u6570\uff0c\u80cc\u4e66\u8005\u80cc\u4e66\u4ea4\u6613\u7684\u60c5\u51b5\u662f\uff0c\u53ea\u57fa\u4e8e\u8bfb\u5b83\u672c\u5730KVS\u5339\u914danchor\u4e2d\u7684\u76f8\u5e94KEY\u7684\u7248\u672c\u53f7\uff08\u66f4\u8be6\u7ec6\u5185\u5bb9\u89c1\u7b2c2.2\u8282\uff09\u3002    Cryptographic hash of tx is used by all nodes as a unique transaction identifier tid (i.e., tid=HASH(tx)). The client stores tid in memory and waits for responses from endorsing peers.  tx\u52a0\u5bc6\u54c8\u5e0c\u88ab\u6240\u6709node\u8282\u70b9\u7528\u4f5c\u552f\u4e00\u7684\u4ea4\u6613\u6807\u8bc6tid\uff08\u5373\uff0ctid=HASH(tx)\uff09\u3002\u5ba2\u6237\u7aef\u4fdd\u5b58tid\u5728\u5185\u5b58\u4e2d\uff0c\u7b49\u5f85\u80cc\u4e66peer\u8282\u70b9\u7684\u54cd\u5e94\u3002", 
            "title": "2.1.1. PROPOSE\u6d88\u606f\u683c\u5f0f(PROPOSE message format)"
        }, 
        {
            "location": "/arch-deep-dive_zh/#212message-patterns", 
            "text": "The client decides on the sequence of interaction with endorsers. For example, a client would typically send   (i.e., without the anchor argument) to a single endorser, which would then produce the version dependencies (anchor) which the client can later on use as an argument of its PROPOSE message to other endorsers. As another example, the client could directly send   (without anchor) to all endorsers of its choice. Different patterns of communication are possible and client is free to decide on those (see also Section 2.3.).  \u5ba2\u6237\u7aef\u51b3\u5b9a\u4e0e\u80cc\u4e66\u8005\u4e92\u52a8\u7684\u987a\u5e8f\u3002\u4f8b\u5982\uff0c\u5ba2\u6237\u7aef\u901a\u5e38\u4f1a\u53d1\u9001 \uff08\u5373\uff0c\u6ca1\u6709anchor\u53c2\u6570\uff09\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u80cc\u4e66\u8005\uff0c\u80cc\u4e66\u8005\u968f\u540e\u4ea7\u751f\u7248\u672c\u4f9d\u8d56\uff08anchor\uff09,\u5ba2\u6237\u7aef\u53ef\u4ee5\u5728\u665a\u4e9b\u65f6\u5019\u4f7f\u7528\u8fd9\u4e2a\u7248\u672c\u4f9d\u8d56\uff08anchor\uff09\u4f5c\u4e3a\u5b83\u7684PROPOSE\u6d88\u606f\u53c2\u6570\uff0c\u53d1\u9001\u7ed9\u5176\u5b83\u80cc\u4e66\u8005\u3002\u53e6\u5916\u7684\u4f8b\u5b50\uff0c\u5ba2\u6237\u7aef\u80fd\u76f4\u63a5\u53d1\u9001 \uff08\u6ca1\u6709anchor\uff09\u5230\u5b83\u9009\u62e9\u7684\u6240\u6709\u80cc\u4e66\u8005\u3002\u4e0d\u540c\u7684\u901a\u4fe1\u6a21\u5f0f\u90fd\u6709\u53ef\u80fd\uff0c\u5ba2\u6237\u7aef\u5728\u8fd9\u65b9\u9762\u662f\u81ea\u7531\u7684\uff08\u4e5f\u89c1\u7b2c2.3\u8282\uff09\u3002", 
            "title": "2.1.2.\u6d88\u606f\u6a21\u5f0f(Message patterns)"
        }, 
        {
            "location": "/arch-deep-dive_zh/#22-peerthe-endorsing-peer-simulates-a-transaction-and-produces-an-endorsement-signature", 
            "text": "On reception of a   message from a client, the endorsing peer epID first verifies the client\u2019s signature clientSig and then simulates a transaction. If the client specifies anchor then endorsing peer simulates the transactions only upon read version numbers (i.e., readset as defined below) of corresponding keys in its local KVS match those version numbers specified by anchor.  \u5728\u4ece\u5ba2\u6237\u7aef\u63a5\u6536 \u6d88\u606f\u65f6\uff0c\u80cc\u4e66peer\u8282\u70b9epID\u9996\u5148\u6821\u9a8c\u5ba2\u6237\u7aef\u7b7e\u540dclientSig\uff0c\u7136\u540e\u6a21\u62df\u4e00\u4e2a\u4ea4\u6613\u3002\u5982\u679c\u5ba2\u6237\u7aef\u6307\u5b9a\u4e86anchor\uff0c\u90a3\u4e48\u80cc\u4e66peer\u8282\u70b9\u6a21\u62df\u4ea4\u6613\u53ea\u57fa\u4e8e\u5728\u5b83\u672c\u5730KVS\u5339\u914d\u7684\u7531anchor\u6307\u5b9a\u7684\u7248\u672c\u53f7\u5bf9\u5e94\u7684key\u8bfb\u7248\u672c\u53f7\uff08\u5373\uff0c\u4e0b\u9762\u5b9a\u4e49\u7684readset\uff09\u3002  Simulating a transaction involves endorsing peer tentatively executing a transaction (txPayload), by invoking the chaincode to which the transaction refers (chaincodeID) and the copy of the state that the endorsing peer locally holds.  \u6a21\u62df\u4e00\u4e2a\u4ea4\u6613\u6d89\u53ca\u80cc\u4e66\u8282\u70b9\u5c1d\u8bd5\u6267\u884c\u4e00\u4e2a\u4ea4\u6613(txPayload), \u901a\u8fc7\u8c03\u7528\u94fe\u7801\u5230\u4ea4\u6613\u5f15\u7528\uff08chaincodeID\uff09\u548c\u80cc\u4e66peer\u8282\u70b9\u672c\u5730\u6301\u6709\u7684\u72b6\u6001\u62f7\u8d1d\u3002  As a result of the execution, the endorsing peer computes read version dependencies (readset) and state updates (writeset), also called MVCC+postimage info in DB language.  \u4f5c\u4e3a\u6267\u884c\u7684\u7ed3\u679c\uff0c\u80cc\u4e66peer\u8282\u70b9\u8ba1\u7b97\u8bfb\u7248\u672c\u4f9d\u8d56\uff08readset\uff09\u548c\u72b6\u6001\u66f4\u65b0\uff08writeset\uff09\uff0c\u4e5f\u5728DB\u8bed\u8a00\u4e2d\u79f0\u4e3aMVCC+postimage info\u3002  Recall that the state consists of key/value (k/v) pairs. All k/v entries are versioned, that is, every entry contains ordered version information, which is incremented every time when the value stored under a key is updated. The peer that interprets the transaction records all k/v pairs accessed by the chaincode, either for reading or for writing, but the peer does not yet update its state. More specifically:  \u56de\u987e\u72b6\u6001\u5305\u542b\u952e/\u503c\u5bf9\u3002\u6240\u6709\u952e/\u503c\u5bf9\u5b9e\u4f53\u90fd\u662f\u7248\u672c\u5316\u7684\uff0c\u90a3\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e2a\u5b9e\u4f53\u5305\u542b\u6392\u5e8f\u7248\u672c\u4fe1\u606f\uff0c\u5b83\u662f\u5728\u6bcf\u6b21\u952e\u7684\u503c\u66f4\u65b0\u65f6\u589e\u52a0\u7684\u3002\u89e3\u91ca\u4ea4\u6613\u7684peer\u8282\u70b9\u8bb0\u5f55\u4e86\u6240\u6709\u7684\u88ab\u94fe\u7801\u8bbf\u95ee\u7684\u952e/\u503c\u5bf9\uff0c\u4e0d\u7ba1\u8bfb\u6216\u662f\u5199\uff0cpeer\u8282\u70b9\u4e0d\u4f1a\u66f4\u65b0\u5b83\u7684\u72b6\u6001\u3002\u66f4\u5177\u4f53\u5730\u8bf4\uff1a    Given state s before an endorsing peer executes a transaction, for every key k read by the transaction, pair (k,s(k).version) is added to readset.    \u5728\u80cc\u4e66\u8282\u70b9\u6267\u884c\u4e00\u4e2a\u4ea4\u6613\u524d\u7ed9\u5b9a\u72b6\u6001s\uff0c\u88ab\u4ea4\u6613\u8bfb\u53d6\u7684\u6bcf\u4e2a\u952ek\uff0c\u952e/\u503c\u5bf9(k,s(k).version)\u88ab\u6dfb\u52a0\u5230readset\u3002    Additionally, for every key k modified by the transaction to the new value v , pair (k,v ) is added to writeset. Alternatively, v  could be the delta of the new value to previous value (s(k).value).    \u6b64\u5916\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u88ab\u4ea4\u6613\u7f16\u8f91\u7684\u952ek\u5230\u503cv \uff0c\u952e/\u503c\u5bf9(k,v )\u88ab\u6dfb\u52a0\u5230writeset\u3002\u6216\u8005\uff0cv \u80fd\u6210\u4e3a\u65b0\u503c\u4e0e\u524d\u503c(s(k).value)\u7684\u589e\u91cf\u3002    If a client specifies anchor in the PROPOSE message then client specified anchor must equal readset produced by endorsing peer when simulating the transaction.  \u5982\u679c\u5ba2\u6237\u7aef\u5728PROPOSE\u6d88\u606f\u4e2d\u6307\u5b9a\u4e86anchor\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u6307\u5b9a\u7684anchor\u5728\u6a21\u62df\u4ea4\u6613\u65f6\u5fc5\u987b\u7b49\u4e8e\u80cc\u4e66peer\u8282\u70b9\u4ea7\u751f\u7684readset.  Then, the peer forwards internally tran-proposal (and possibly tx) to the part of its (peer\u2019s) logic that endorses a transaction, referred to as endorsing logic. By default, endorsing logic at a peer accepts the tran-proposal and simply signs the tran-proposal. However, endorsing logic may interpret arbitrary functionality, to, e.g., interact with legacy systems with tran-proposal and tx as inputs to reach the decision whether to endorse a transaction or not.\n\u7136\u540e\uff0cpeer\u8282\u70b9\u5185\u90e8\u63d0\u4ea4\u4ea4\u6613\u63d0\u6848\uff08\u53ef\u80fd\u662ftx\uff09\u5230\u5b83\u7684\u903b\u8f91\u90e8\u5206\u6765\u80cc\u4e66\u4ea4\u6613\uff0c\u79f0\u4e3a\u80cc\u4e66\u903b\u8f91\u3002\u7f3a\u7701\u65f6\uff0c\u4e00\u4e2apeer\u8282\u70b9\u7684\u80cc\u4e66\u903b\u8f91\u63a5\u53d7\u4ea4\u6613\u63d0\u6848\u5e76\u7b80\u5355\u7b7e\u7f72\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u80cc\u4e66\u903b\u8f91\u53ef\u4ee5\u6267\u884c\u4efb\u610f\u529f\u80fd\uff0c\u5230\uff0c\u4f8b\u5982\uff0c\u4e0e\u539f\u6709\u7cfb\u7edf\u4ea4\u4e92\u4ea4\u6613\u63d0\u6848\u548ctx\u4f5c\u4e3a\u8f93\u5165\u6765\u5f97\u77e5\u662f\u5426\u80cc\u4e66\u4ea4\u6613\u3002  If endorsing logic decides to endorse a transaction, it sends   message to the submitting client(tx.clientID), where:  \u5982\u679c\u80cc\u4e66\u903b\u8f91\u51b3\u5b9a\u80cc\u4e66\u4e00\u4e2a\u4ea4\u6613\uff0c\u5b83\u53d1\u9001  \u6d88\u606f\u5230\u63d0\u4ea4\u5ba2\u6237\u7aef\uff0c\u5176\u4e2d:    tran-proposal := (epID,tid,chaincodeID,txContentBlob,readset,writeset),\nwhere txContentBlob is chaincode/transaction specific information. The intention is to have txContentBlob used as some representation of tx (e.g., txContentBlob=tx.txPayload).    epSig is the endorsing peer\u2019s signature on tran-proposal    \u4ea4\u6613\u63d0\u6848 \uff1a=tran-proposal := (epID,tid,chaincodeID,txContentBlob,readset,writeset),\n\u5176\u4e2d txContentBlob \u662f\u94fe\u7801/\u4ea4\u6613\u4e13\u7528\u4fe1\u606f\u3002\u76ee\u7684\u662f\u8ba9txContentBlob \u7528\u4f5ctx\u7684\u4e00\u4e9b\u9648\u8ff0 (\u4f8b\u5982, txContentBlob=tx.txPayload).    epSig \u662f\u80cc\u4e66peer\u8282\u70b9\u7684\u4ea4\u6613\u63d0\u6848\u7b7e\u540d\u3002    Else, in case the endorsing logic refuses to endorse the transaction, an endorser  may  send a message (TRANSACTION-INVALID, tid, REJECTED) to the submitting client.  \u5426\u5219\uff0c\u5047\u4f7f\u80cc\u4e66\u903b\u8f91\u62d2\u7edd\u80cc\u4e66\u4ea4\u6613\uff0c\u80cc\u4e66\u8005 \u53ef\u4ee5 \u53d1\u9001\u6d88\u606f(TRANSACTION-INVALID, tid, REJECTED)\u5230\u63d0\u4ea4\u5ba2\u6237\u7aef\u3002  Notice that an endorser does not change its state in this step, the updates produced by transaction simulation in the context of endorsement do not affect the state!  \u6ce8\u610f\u80cc\u4e66\u8005\u5728\u8fd9\u4e00\u6b65\u4e0d\u80fd\u6539\u53d8\u5b83\u7684\u72b6\u6001\uff0c\u5728\u80cc\u4e66\u6ca1\u6709\u5f71\u54cd\u72b6\u6001\u7684\u60c5\u51b5\u4e0b\u4ea4\u6613\u6a21\u62df\u4ea7\u751f\u72b6\u6001\u66f4\u65b0\u3002", 
            "title": "2.2. \u80cc\u4e66peer\u8282\u70b9\u6a21\u62df\u4ea4\u6613\u548c\u4ea7\u751f\u80cc\u4e66\u7b7e\u540d(The endorsing peer simulates a transaction and produces an endorsement signature)"
        }, 
        {
            "location": "/arch-deep-dive_zh/#23-the-submitting-client-collects-an-endorsement-for-a-transaction-and-broadcasts-it-through-ordering-service", 
            "text": "The submitting client waits until it receives \u201cenough\u201d messages and signatures on (TRANSACTION-ENDORSED, tid,  ,  ) statements to conclude that the transaction proposal is endorsed. As discussed in Section 2.1.2., this may involve one or more round-trips of interaction with endorsers.  \u63d0\u4ea4\u5ba2\u6237\u7aef\u4e00\u76f4\u7b49\u5f85\u76f4\u5230\u5b83\u5728(TRANSACTION-ENDORSED, tid,  ,  )\u4e0a\u6536\u96c6\u5230\u201c\u8db3\u591f\u201d\u7684\u6d88\u606f\u548c\u7b7e\u540d\u6765\u63a8\u65ad\u51fa\u4ea4\u6613\u63d0\u6848\u5df2\u80cc\u4e66\u3002\u50cf\u57282.1.2\u8282\u8ba8\u8bba\u7684\u90a3\u6837\uff0c\u8fd9\u53ef\u80fd\u6d89\u53ca\u4e00\u4e2a\u6216\u591a\u4e2a\u4e0e\u80cc\u4e66\u8005\u7684\u5f80\u8fd4\u3002  The exact number of \u201cenough\u201d depend on the chaincode endorsement policy (see also Section 3). If the endorsement policy is satisfied, the transaction has been endorsed; note that it is not yet committed. The collection of signed TRANSACTION-ENDORSED messages from endorsing peers which establish that a transaction is endorsed is called an endorsement and denoted by endorsement.  \u201c\u8db3\u591f\u201d\u7684\u51c6\u786e\u6570\u5b57\u53d6\u51b3\u4e8e\u94fe\u7801\u80cc\u4e66\u7b56\u7565\uff08\u4e5f\u89c1\u7b2c3\u8282\uff09\u3002\u5982\u679c\u80cc\u4e66\u7b56\u7565\u662f\u5b89\u5168\u7684\uff0c\u4ea4\u6613\u5df2\u7ecf\u80cc\u4e66\uff1b\u6ce8\u610f\u5b83\u8fd8\u6ca1\u63d0\u4ea4\u3002\u7b7e\u7f72TRANSACTION-ENDORSED\u6d88\u606f\u7684\u6536\u96c6\u4ece\u80cc\u4e66peer\u8282\u70b9\u6765\uff0c\u80cc\u4e66peer\u8282\u70b9\u5efa\u7acb\u4e86\u4ea4\u6613\u662f\u80cc\u4e66\u7684\u79f0\u4e3a\u80cc\u4e66\u5e76\u4ee5\u80cc\u4e66\u4e3a\u540d\u79f0\u3002  If the submitting client does not manage to collect an endorsement for a transaction proposal, it abandons this transaction with an option to retry later.  \u5982\u679c\u63d0\u4ea4\u5ba2\u6237\u7aef\u6ca1\u6709\u8bbe\u6cd5\u4e3a\u4ea4\u6613\u63d0\u6848\u6536\u96c6\u80cc\u4e66\uff0c\u5219\u653e\u5f03\u8fd9\u4e2a\u4ea4\u6613\uff0c\u7a0d\u540e\u518d\u8bd5\u3002  For transaction with a valid endorsement, we now start using the ordering service. The submitting client invokes ordering service using the broadcast(blob), where blob=endorsement. If the client does not have capability of invoking ordering service directly, it may proxy its broadcast through some peer of its choice. Such a peer must be trusted by the client not to remove any message from the endorsement or otherwise the transaction may be deemed invalid. Notice that, however, a proxy peer may not fabricate a valid endorsement.  \u5bf9\u4e8e\u4e00\u4e2a\u5177\u6709\u6709\u6548\u80cc\u4e66\u7684\u4ea4\u6613\uff0c\u6211\u4eec\u73b0\u5728\u5f00\u59cb\u4f7f\u7528\u6392\u5e8f\u670d\u52a1\u3002\u63d0\u4ea4\u5ba2\u6237\u7aef\u4f7f\u7528broadcast(blob)\u8c03\u7528\u6392\u5e8f\u670d\u52a1\uff0c\u5176\u4e2dblob=endorsement.\u5982\u679c\u5ba2\u6237\u7aef\u6ca1\u6709\u80fd\u529b\u76f4\u63a5\u8c03\u7528\u6392\u5e8f\u670d\u52a1\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u5b83\u9009\u62e9\u7684peer\u8282\u70b9\u4ee3\u7406\u5e7f\u64ad\u3002\u8fd9\u6837\u7684peer\u8282\u70b9\u5fc5\u987b\u88ab\u5ba2\u6237\u7aef\u4fe1\u4efb\u4e0d\u4f1a\u4ece\u80cc\u4e66\u79fb\u9664\u4efb\u4f55\u6d88\u606f\u6216\u5176\u5b83\u53ef\u80fd\u88ab\u65e0\u6548\u7684\u4ea4\u6613\u3002\u6ce8\u610f\u4e00\u70b9\uff0c\u65e0\u8bba\u5982\u4f55\uff0c\u4ee3\u7406peer\u8282\u70b9\u4e0d\u53ef\u80fd\u5236\u9020\u6709\u6548\u80cc\u4e66\u3002", 
            "title": "2.3. \u63d0\u4ea4\u5ba2\u6237\u7aef\u6536\u96c6\u4ea4\u6613\u80cc\u4e66\u5e76\u901a\u8fc7\u6392\u5e8f\u670d\u52a1\u5e7f\u64ad\u5b83(The submitting client collects an endorsement for a transaction and broadcasts it through ordering service)"
        }, 
        {
            "location": "/arch-deep-dive_zh/#24-peerthe-ordering-service-delivers-a-transactions-to-the-peers", 
            "text": "When an event deliver(seqno, prevhash, blob) occurs and a peer has applied all state updates for blobs with sequence number lower than seqno, a peer does the following:  \u5f53\u4e00\u4e2a\u4e8b\u4ef6(seqno, prevhash, blob)\u53d1\u751f\u5e76\u4e14\u4e00\u4e2apeer\u8282\u70b9\u5df2\u4e3a\u6240\u6709\u5e8f\u5217\u53f7\u4f4e\u4e8eseqno\u7684blosbs\u66f4\u65b0\u72b6\u6001\uff0cpeer\u8282\u70b9\u6267\u884c\u5982\u4e0b\u6d41\u7a0b\uff1a    It checks that the blob.endorsement is valid according to the policy of the chaincode (blob.tran-proposal.chaincodeID) to which it refers.    \u5b83\u68c0\u67e5blob.endorsement\u662f\u6709\u6548\u7684\uff0c\u6839\u636e\u7684\u662f\u5b83\u5f15\u7528\u7684\u94fe\u7801(blob.tran-proposal.chaincodeID)\u3002    In a typical case, it also verifies that the dependencies (blob.endorsement.tran-proposal.readset) have not been violated meanwhile. In more complex use cases, tran-proposal fields in endorsement may differ and in this case endorsement policy (Section 3) specifies how the state evolves.    \u5728\u5178\u578b\u60c5\u51b5\u4e0b\uff0c\u5b83\u4e5f\u9a8c\u8bc1\u4e86\u4f9d\u8d56(blob.endorsement.tran-proposal.readset)\u5728\u671f\u95f4\u6ca1\u6709\u88ab\u8fdd\u53cd\u3002\u5728\u66f4\u590d\u6742\u7684\u7528\u4f8b\u4e2d\uff0c\u80cc\u4e66\u4e2d\u7684\u4ea4\u6613\u63d0\u6848\u57df\u53ef\u80fd\u4e0d\u540c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u80cc\u4e66\u7b56\u7565\uff08\u7b2c3\u8282\uff09\u6307\u5b9a\u72b6\u6001\u5982\u4f55\u5f62\u6210\u3002    Verification of dependencies can be implemented in different ways, according to a consistency property or \u201cisolation guarantee\u201d that is chosen for the state updates.  Serializability  is a default isolation guarantee, unless chaincode endorsement policy specifies a different one. Serializability can be provided by requiring the version associated with every key in the readset to be equal to that key\u2019s version in the state, and rejecting transactions that do not satisfy this requirement.  \u4f9d\u8d56\u7684\u9a8c\u8bc1\u80fd\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u6839\u636e\u4e00\u81f4\u6027\u5c5e\u6027\u6216\u4e3a\u72b6\u6001\u66f4\u65b0\u9009\u62e9\u7684\u201c\u5b64\u7acb\u4fdd\u8bc1\u201d\u3002 Serializability \u662f\u4e00\u4e2a\u7f3a\u7701\u7684\u5b64\u7acb\u4fdd\u8bc1\uff0c\u9664\u975e\u94fe\u7801\u80cc\u4e66\u7b56\u7565\u6307\u5b9a\u4e00\u4e2a\u4e0d\u540c\u7684\u3002Serializability\u80fd\u591f\u901a\u8fc7\u5728readset\u4e2d\u7684\u6bcf\u4e2akey\u5173\u8054\u7684\u7248\u672c\u88ab\u63d0\u4f9b\uff0c\u76f8\u5f53\u4e8ekey\u5728\u72b6\u6001\u4e2d\u7684\u7248\u672c\uff0c\u5e76\u62d2\u7edd\u4e0d\u6ee1\u8db3\u8fd9\u4e2a\u8981\u6c42\u7684\u4ea4\u6613\u3002    If all these checks pass, the transaction is deemed  valid  or  committed . In this case, the peer marks the transaction with 1 in the bitmask of the PeerLedger, applies blob.endorsement.tran-proposal.writeset to blockchain state (if tran-proposals are the same, otherwise endorsement policy logic defines the function that takes blob.endorsement).    \u5982\u679c\u6240\u6709\u8fd9\u4e9b\u68c0\u67e5\u901a\u8fc7\uff0c\u4ea4\u6613\u88ab\u89c6\u4e3a \u6709\u6548 \u6216 \u627f\u8bfa \u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cpeer\u8282\u70b9\u5728PeerLedger\u75281\u6807\u8bb0\u4ea4\u6613\uff0c\u9002\u7528\u4e8eblob.endorsement.tran-proposal.writeset\u533a\u5757\u94fe\u72b6\u6001\uff08\u5982\u679c\u4ea4\u6613\u63d0\u6848\u662f\u76f8\u540c\u7684\uff0c\u5176\u5b83\u80cc\u4e66\u7b56\u7565\u903b\u8f91\u5b9a\u4e49\u4e86\u51fd\u6570\u5904\u7406blob.endorsement\uff09\u3002    If the endorsement policy verification of blob.endorsement fails, the transaction is invalid and the peer marks the transaction with 0 in the bitmask of the PeerLedger. It is important to note that invalid transactions do not change the state.    \u5982\u679cblob.endorsement\u80cc\u4e66\u7b56\u7565\u9a8c\u8bc1\u5931\u8d25\uff0c\u4ea4\u6613\u65e0\u6548\uff0c\u5e76\u4e14peer\u8282\u70b9\u5728PeerLedger\u7684\u4f4d\u63a9\u7801\u75280\u6807\u8bb0\u4ea4\u6613\u3002\u91cd\u8981\u7684\u662f\u8981\u6ce8\u610f\u65e0\u6548\u4ea4\u6613\u4e0d\u4f1a\u6539\u53d8\u72b6\u6001\u3002    Note that this is sufficient to have all (correct) peers have the same state after processing a deliver event (block) with a given sequence number. Namely, by the guarantees of the ordering service, all correct peers will receive an identical sequence of deliver(seqno, prevhash, blob) events. As the evaluation of the endorsement policy and evaluation of version dependencies in readset are deterministic, all correct peers will also come to the same conclusion whether a transaction contained in a blob is valid. Hence, all peers commit and apply the same sequence of transactions and update their state in the same way.  \u6ce8\u610f\uff0c\u8fd9\u91cc\u6709\u8db3\u591f\u7684\u8ba9\u6240\u6709\uff08\u6b63\u786e\uff09peer\u8282\u70b9\u5728\u5904\u7406\u4e00\u4e2a\u7ed9\u5b9a\u5e8f\u5217\u53f7\u7684deliver\u4e8b\u4ef6\uff08\u5757\uff09\u4e4b\u540e\u5177\u6709\u540c\u6837\u7684\u72b6\u6001\u3002\u5373\uff0c\u901a\u8fc7\u6392\u5e8f\u670d\u52a1\u7684\u4fdd\u8bc1\uff0c\u6240\u6709\u6b63\u786e\u7684peer\u8282\u70b9\u4f1a\u6536\u5230\u76f8\u540c\u7684deliver(seqno, prevhash, blob)\u4e8b\u4ef6\u5e8f\u5217\u3002\u5f53\u80cc\u4e66\u7b56\u7565\u7684\u8bc4\u4f30\u548creadset\u4e2d\u7248\u672c\u4f9d\u8d56\u7684\u8bc4\u4f30\u662f\u786e\u5b9a\u7684\uff0c\u6240\u6709\u6b63\u786e\u7684peer\u8282\u70b9\u4e5f\u4f1a\u5f97\u51fa\u76f8\u540c\u7684\u7ed3\u8bba\uff0c\u5173\u4e8e\u5305\u542b\u5728blob\u4e2d\u7684\u4ea4\u6613\u662f\u5426\u6709\u6548\u3002\u56e0\u6b64\uff0c\u6240\u6709peer\u8282\u70b9\u63d0\u4ea4\u548c\u5e94\u7528\u540c\u6837\u4ea4\u6613\u5e8f\u5217\u5e76\u7528\u540c\u6837\u7684\u65b9\u5f0f\u66f4\u65b0\u5b83\u4eec\u7684\u72b6\u6001\u3002   :alt: Illustration of the transaction flow (common-case path).  Figure 1. Illustration of one possible transaction flow (common-case path).  \u56fe1 \u4e00\u79cd\u53ef\u80fd\u7684\u4ea4\u6613\u6d41\u7a0b\u8bf4\u660e\uff08\u4e00\u822c\u60c5\u51b5\u8def\u5f84\uff09", 
            "title": "2.4. \u6392\u5e8f\u670d\u52a1\u5411peer\u8282\u70b9\u63d0\u4ea4\u4ea4\u6613(The ordering service delivers a transactions to the peers)"
        }, 
        {
            "location": "/arch-deep-dive_zh/#3-eorsement-policies", 
            "text": "", 
            "title": "3. \u80cc\u4e66\u7b56\u7565(Eorsement policies)"
        }, 
        {
            "location": "/arch-deep-dive_zh/#31-endorsement-policy-specification", 
            "text": "An  endorsement policy , is a condition on what endorses a transaction. Blockchain peers have a pre-specified set of endorsement policies, which are referenced by a deploy transaction that installs specific chaincode. Endorsement policies can be parametrized, and these parameters can be specified by a deploy transaction.  \u80cc\u4e66\u7b56\u7565 \uff0c\u662f\u80cc\u4e66\u4e00\u4e2a\u4ea4\u6613\u7684\u6761\u4ef6\u3002\u533a\u5757\u94fepeer\u8282\u70b9\u6709\u4e00\u7ec4\u9884\u5148\u786e\u5b9a\u7684\u80cc\u4e66\u7b56\u7565\uff0c\u5b83\u88ab\u5b89\u88c5\u7279\u5b9a\u94fe\u7801\u7684\u90e8\u7f72\u4ea4\u6613\u5f15\u7528\u3002\u80cc\u4e66\u7b56\u7565\u80fd\u53c2\u6570\u5316\uff0c\u8fd9\u4e9b\u53c2\u6570\u80fd\u88ab\u90e8\u7f72\u4ea4\u6613\u6307\u5b9a\u3002  To guarantee blockchain and security properties, the set of endorsement policies  should be a set of proven policies  with limited set of functions in order to ensure bounded execution time (termination), determinism, performance and security guarantees.  \u4e3a\u4e86\u4fdd\u8bc1\u533a\u5757\u94fe\u548c\u5b89\u5168\u7279\u6027\uff0c\u80cc\u4e66\u7b56\u7565\u7ec4 \u5e94\u8be5\u662f\u4e00\u7ec4\u9a8c\u8bc1\u8fc7\u7684\u7b56\u7565 \uff0c\u5177\u6709\u6709\u9650\u529f\u80fd\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6709\u9650\u7684\u6267\u884c\u65f6\u95f4\uff08\u7ec8\u6b62\uff09\uff0c\u51b3\u5b9a\u3001\u6027\u80fd\u548c\u5b89\u5168\u4fdd\u8bc1\u3002  Dynamic addition of endorsement policies (e.g., by deploy transaction on chaincode deploy time) is very sensitive in terms of bounded policy evaluation time (termination), determinism, performance and security guarantees. Therefore, dynamic addition of endorsement policies is not allowed, but can be supported in future.  \u80cc\u4e66\u7b56\u7565\u7684\u52a8\u6001\u6dfb\u52a0\uff08\u5373\uff0c\u5728\u94fe\u7801\u90e8\u7f72\u65f6\u95f4\u7531\u90e8\u7f72\u4ea4\u6613\u6dfb\u52a0\uff09\u662f\u5bf9\u80cc\u4e66\u8bc4\u4f30\u65f6\u95f4\u9650\u5236\uff08\u7ec8\u6b62\uff09\u3001\u51b3\u5b9a\u3001\u6027\u80fd\u548c\u5b89\u5168\u4fdd\u8bc1\u975e\u5e38\u654f\u611f\u7684\u3002\u56e0\u6b64\uff0c\u52a8\u6001\u6dfb\u52a0\u80cc\u4e66\u7b56\u7565\u662f\u4e0d\u5141\u8bb8\u7684\uff0c\u4f46\u5c06\u6765\u80fd\u652f\u6301\u3002", 
            "title": "3.1. \u80cc\u4e66\u7b56\u7565\u89c4\u8303(Endorsement policy specification)"
        }, 
        {
            "location": "/arch-deep-dive_zh/#32-transaction-evaluation-against-endorsement-policy", 
            "text": "A transaction is declared valid only if it has been endorsed according to the policy. An invoke transaction for a chaincode will first have to obtain an endorsement that satisfies the chaincode\u2019s policy or it will not be committed. This takes place through the interaction between the submitting client and endorsing peers as explained in Section 2.  \u4ea4\u6613\u53ea\u6709\u7ecf\u8fc7\u6839\u636e\u80cc\u4e66\u7b56\u7565\u7684\u80cc\u4e66\u624d\u4f1a\u5ba3\u5e03\u6709\u6548\u3002\u5bf9\u4e8e\u94fe\u7801\u7684\u8c03\u7528\u4ea4\u6613\u9996\u5148\u9700\u8981\u7684\u5230\u4e00\u4e2a\u6ee1\u8db3\u94fe\u7801\u7b56\u7565\u7684\u80cc\u4e66\uff0c\u6216\u4e0d\u63d0\u4ea4\u3002\u8fd9\u901a\u8fc7\u5728\u63d0\u4ea4\u5ba2\u6237\u7aef\u548c\u80cc\u4e66peer\u8282\u70b9\u4e4b\u95f4\u7684\u4e92\u52a8\u53d1\u751f\uff0c\u5728\u7b2c2\u8282\u89e3\u91ca\u3002  Formally the endorsement policy is a predicate on the endorsement, and potentially further state that evaluates to TRUE or FALSE. For deploy transactions the endorsement is obtained according to a system-wide policy (for example, from the system chaincode).  \u6b63\u5f0f\u7684\u80cc\u4e66\u7b56\u7565\u662f\u4ee5\u80cc\u4e66\u4e3a\u57fa\u7840\uff0c\u4ee5\u53ca\u6f5c\u5728\u7684\u8fdb\u4e00\u6b65\u8bc4\u4f30\u4e3a\u771f\u5047\u72b6\u6001\u3002\u5bf9\u4e8e\u90e8\u7f72\u4ea4\u6613\uff0c\u83b7\u5f97\u80cc\u4e66\u7684\u4f9d\u636e\u662f\u7cfb\u7edf\u7cfb\u7edf\u8303\u56f4\u7b56\u7565\uff08\u4f8b\u5982\uff0c\u6765\u81ea\u7cfb\u7edf\u94fe\u7801\uff09\u3002  An endorsement policy predicate refers to certain variables. Potentially it may refer to:\n1\u3001keys or identities relating to the chaincode (found in the metadata of the chaincode), for example, a set of endorsers;\n2\u3001further metadata of the chaincode;\n3\u3001elements of the endorsement and endorsement.tran-proposal;\n4\u3001and potentially more.  \u80cc\u4e66\u7b56\u7565\u65ad\u8a00\u5f15\u7528\u4e00\u5b9a\u7684\u53d8\u91cf\u3002\u6f5c\u5728\u53ef\u80fd\u5f15\u7528\u7684\u662f\uff1a  1\u3001\u4e0e\u94fe\u7801\u6709\u5173\u7684\u94a5\u5319\u6216\u8eab\u4efd\uff08\u5728\u94fe\u7801\u5143\u6570\u636e\u4e2d\u80fd\u53d1\u73b0\uff09\uff0c\u4f8b\u5982\uff0c\u4e00\u7ec4\u80cc\u4e66\u8005\uff1b  2\u3001\u94fe\u7801\u8fdb\u4e00\u6b65\u7684\u5143\u6570\u636e\uff1b  3\u3001endorsement and endorsement.tran-proposal\u7684\u5143\u7d20\uff1b  4\u3001\u5176\u5b83\u66f4\u591a\u3002  The above list is ordered by increasing expressiveness and complexity, that is, it will be relatively simple to support policies that only refer to keys and identities of nodes.  \u4e0a\u9762\u7684\u5217\u8868\u6839\u636e\u8868\u73b0\u548c\u590d\u6742\u6027\u6392\u5e8f\uff0c\u610f\u601d\u662f\u8bf4\uff0c\u5b83\u5c06\u4f1a\u662f\u76f8\u5bf9\u7b80\u5355\u7684\u652f\u6301\u7b56\u7565\uff0c\u53ea\u5f15\u7528node\u8282\u70b9\u7684\u94a5\u5319\u548c\u8eab\u4efd\u3002  The evaluation of an endorsement policy predicate must be deterministic. An endorsement shall be evaluated locally by every peer such that a peer does not need to interact with other peers, yet all correct peers evaluate the endorsement policy in the same way.  \u80cc\u4e66\u7b56\u7565\u65ad\u8a00\u7684\u8bc4\u4f30\u5fc5\u987b\u88ab\u786e\u5b9a\u3002\u80cc\u4e66\u5e94\u5f53\u88ab\u6bcf\u4e2apeer\u8282\u70b9\u672c\u5730\u8bc4\u4f30\uff0c\u8fd9\u6837\u8fd9\u4e2apeer\u8282\u70b9\u5c31\u4e0d\u9700\u8981\u548c\u5176\u5b83peer\u8282\u70b9\u5728\u8fd9\u4ef6\u4e8b\u60c5\u4e0a\u4ea4\u4e92\uff0c\u4f46\u6240\u6709\u6b63\u786e\u7684peer\u8282\u70b9\u90fd\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u8bc4\u4f30\u80cc\u4e66\u7b56\u7565\u3002", 
            "title": "3.2. \u9488\u5bf9\u80cc\u4e66\u7b56\u7565\u7684\u4ea4\u6613\u8bc4\u4f30(Transaction evaluation against endorsement policy)"
        }, 
        {
            "location": "/arch-deep-dive_zh/#33-example-endorsement-policies", 
            "text": "The predicate may contain logical expressions and evaluates to TRUE or FALSE. Typically the condition will use digital signatures on the transaction invocation issued by endorsing peers for the chaincode.  \u65ad\u8a00\u53ef\u4ee5\u5305\u542b\u903b\u8f91\u8868\u8fbe\u5f0f\u548c\u8bc4\u4f30\u771f\u5047\u3002\u901a\u5e38\u60c5\u51b5\u4f1a\u5bf9\u80cc\u4e66\u8282\u70b9\u4e3a\u94fe\u7801\u53d1\u51fa\u7684\u4ea4\u6613\u8bf7\u6c42\u4f7f\u7528\u6570\u5b57\u7b7e\u540d\u3002  Suppose the chaincode specifies the endorser set E = {Alice, Bob, Charlie, Dave, Eve, Frank, George}. Some example policies:  \u5047\u5b9a\u94fe\u7801\u6307\u5b9a\u80cc\u4e66\u8005\u96c6E = {Alice, Bob, Charlie, Dave, Eve, Frank, George}.\u4e00\u4e9b\u4f8b\u5b50\u7b56\u7565\u5982\u4e0b\uff1a   A valid signature from on the same tran-proposal from all members of E.  A valid signature from any single member of E.   Valid signatures on the same tran-proposal from endorsing peers according to the condition (Alice OR Bob) AND (any two of: Charlie, Dave, Eve, Frank, George).    \u4e00\u4e2a\u6709\u6548\u7b7e\u540d\u6765\u81ea\u5168\u4f53E\u7684\u6210\u5458\u7684\u540c\u6837\u7684\u4ea4\u6613\u63d0\u6848\u3002   \u4e00\u4e2a\u6709\u6548\u7b7e\u540d\u6765\u81eaE\u7684\u4efb\u4e00\u5355\u4e2a\u6210\u5458\u3002   \u4ece\u80cc\u4e66peer\u8282\u70b9\u6765\u7684\u540c\u4e00\u4ea4\u6613\u63d0\u6848\u7684\u6709\u6548\u7b7e\u540d\u6761\u4ef6\u662f\uff1a(Alice OR Bob) AND (any two of: Charlie, Dave, Eve, Frank, George).    Valid signatures on the same tran-proposal by any 5 out of the 7 endorsers. (More generally, for chaincode with n   3f endorsers, valid signatures by any 2f+1 out of the n endorsers, or by any group of more than (n+f)/2 endorsers.)    \u540c\u4e00\u63d0\u6848\u7684\u6709\u6548\u7b7e\u540d\u4e3a7\u540d\u80cc\u4e66\u8005\u7684\u4efb\u610f5\u540d\u3002\uff08\u66f4\u5e38\u7528\u7684\uff0c\u94fe\u7801n 3f\u80cc\u4e66\u8005\uff0cn\u540d\u80cc\u4e66\u8005\u6709\u4efb\u610f2f+1\u6709\u6548\u7b7e\u540d\uff0c\u6216\u4efb\u610f\u5927\u4e8e(n+f)/2\u80cc\u4e66\u8005\u5c0f\u7ec4\u6709\u6548\u7b7e\u540d\uff09    Suppose there is an assignment of \u201cstake\u201d or \u201cweights\u201d to the endorsers, like {Alice=49, Bob=15, Charlie=15, Dave=10, Eve=7, Frank=3, George=1}, where the total stake is 100: The policy requires valid signatures from a set that has a majority of the stake (i.e., a group with combined stake strictly more than 50), such as {Alice, X} with any X different from George, or {everyone together except Alice}. And so on.    \u5047\u5b9a\u80cc\u4e66\u8005\u6709\u4e00\u4e2a\u201c\u80a1\u4efd\u201d\u6216\u201c\u6743\u91cd\u201d\u7684\u4efb\u52a1\uff0c\u50cf{Alice=49, Bob=15, Charlie=15, Dave=10, Eve=7, Frank=3, George=1}, \u5176\u4e2d\u5168\u90e8\u80a1\u4efd\u662f100\uff1a\u7b56\u7565\u9700\u8981\u4e00\u7ec4\u5360\u5927\u591a\u6570\u80a1\u4efd\u7684\u6709\u6548\u7b7e\u540d\uff08\u5373\uff0c\u4e00\u7ec4\u5408\u5e76\u80a1\u4efd\u5b8c\u5168\u8d85\u8fc750\uff09\uff0c\u50cf{Alice, X}\uff0cX\u53ea\u8981\u4e0d\u662fGeorge\u7684\u4efb\u4f55\u4eba\uff0c\u6216{\u9664\u53bbAlice\u4ee5\u5916\u7684\u6240\u6709\u4eba}\uff0c\u7b49\u7b49\u3002    The assignment of stake in the previous example condition could be static (fixed in the metadata of the chaincode) or dynamic (e.g., dependent on the state of the chaincode and be modified during the execution).    \u5047\u5b9a\u524d\u9762\u4f8b\u5b50\u4e2d\u7684\u80a1\u6743\u6761\u4ef6\u662f\u9759\u6001\u7684\uff08\u56fa\u5b9a\u5728\u94fe\u7801\u7684\u5143\u6570\u636e\u4e2d\uff09\u6216\u52a8\u6001\u7684\uff08\u4f8b\u5982\uff0c\u53d6\u51b3\u4e8e\u94fe\u7801\u7684\u72b6\u6001\u548c\u5728\u6267\u884c\u4e2d\u4fee\u6539\uff09\u3002    Valid signatures from (Alice OR Bob) on tran-proposal1 and valid signatures from (any two of: Charlie, Dave, Eve, Frank, George) on tran-proposal2, where tran-proposal1 and tran-proposal2 differ only in their endorsing peers and state updates.    \u4ea4\u6613\u63d0\u68481\u7684\u6709\u6548\u7b7e\u540d\u6765\u81ea(Alice OR Bob) \u548c\u4ea4\u6613\u63d0\u68482\u6709\u6548\u7b7e\u540d\u6765\u81ea\uff08Charlie, Dave, Eve, Frank, George\u4e2d\u7684\u4efb\u4f55\u4e24\u4e2a\uff09\uff0c\u5176\u4e2d\u4ea4\u6613\u63d0\u68481\u548c\u4ea4\u6613\u63d0\u68482\u7684\u4e0d\u540c\u53ea\u5728\u5b83\u4eec\u7684\u80cc\u4e66peer\u8282\u70b9\u548c\u72b6\u6001\u66f4\u65b0\u3002    How useful these policies are will depend on the application, on the desired resilience of the solution against failures or misbehavior of endorsers, and on various other properties.  \u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u7b56\u7565\u53d6\u51b3\u4e8e\u5e94\u7528\u3001\u5931\u8d25\u6216\u6076\u610f\u80cc\u4e66\u8005\u7684\u6062\u590d\u80fd\u529b\u548c\u5404\u79cd\u5176\u5b83\u7279\u6027\u3002", 
            "title": "3.3. \u80cc\u4e66\u7b56\u7565\u4f8b\u5b50(Example endorsement policies)"
        }, 
        {
            "location": "/arch-deep-dive_zh/#4-post-v1-validated-ledger-and-peerledger-checkpointing-pruning", 
            "text": "", 
            "title": "4 (post-v1). \u8bc1\u5b9e\u8d26\u672c\u548c\u8282\u70b9\u8d26\u672c\u68c0\u67e5\uff08\u4fee\u526a\uff09(Validated ledger and PeerLedger checkpointing (pruning))"
        }, 
        {
            "location": "/arch-deep-dive_zh/#41-validated-ledger-vledger", 
            "text": "To maintain the abstraction of a ledger that contains only valid and committed transactions (that appears in Bitcoin, for example), peers may, in addition to state and Ledger, maintain the  Validated Ledger (or VLedger) . This is a hash chain derived from the ledger by filtering out invalid transactions.  \u7ef4\u62a4\u4e00\u4e2a\u8d26\u672c\u7684\u62bd\u8c61\uff0c\u53ea\u5305\u542b\u6709\u6548\u548c\u63d0\u4ea4\u4ea4\u6613\uff08\u4f8b\u5982\u6bd4\u7279\u5e01\u7684\u65b9\u6848\uff09\uff0cpeer\u8282\u70b9\u53ef\u4ee5\uff0c\u9664\u72b6\u6001\u548c\u8d26\u672c\u5916\uff0c\u7ef4\u62a4 \u8bc1\u5b9e\u8d26\u672c\uff08\u6216VLedger\uff09 \u3002\u8fd9\u662f\u4e00\u4e2a\u54c8\u5e0c\u94fe\uff0c\u6765\u81ea\u8fc7\u6ee4\u6389\u65e0\u6548\u4ea4\u6613\u7684\u8d26\u672c\u3002  The construction of the VLedger blocks (called here vBlocks) proceeds as follows. As the PeerLedger blocks may contain invalid transactions (i.e., transactions with invalid endorsement or with invalid version dependencies), such transactions are filtered out by peers before a transaction from a block becomes added to a vBlock. Every peer does this by itself (e.g., by using the bitmask associated with PeerLedger). A vBlock is defined as a block without the invalid transactions, that have been filtered out. Such vBlocks are inherently dynamic in size and may be empty. An illustration of vBlock construction is given in the figure below.   \u8bc1\u5b9e\u8d26\u672c\u5757\u7684\u751f\u6210\u6309\u5982\u4e0b\u987a\u5e8f\u3002\u5f53\u8282\u70b9\u8d26\u672c\u5757\u53ef\u80fd\u5305\u542b\u65e0\u6548\u4ea4\u6613\uff08\u5373\uff0c\u4ea4\u6613\u7684\u80cc\u4e66\u65e0\u6548\u6216\u7248\u672c\u4f9d\u8d56\u65e0\u6548\uff09\uff0c\u8fd9\u6837\u7684\u4ea4\u6613\u88abpeer\u8282\u70b9\u5728\u4ea4\u6613\u4ece\u5757\u53d8\u4e3a\u8bc1\u5b9e\u5757\u4e4b\u524d\u8fc7\u6ee4\u6389\u3002\u6bcf\u4e2apeer\u8282\u70b9\u81ea\u8eab\u5b9e\u73b0\u8fd9\u70b9\uff08\u4f8b\u5982\uff0c\u4f7f\u7528\u8282\u70b9\u8d26\u672c\u5173\u8054\u7684\u4f4d\u63a9\u7801\uff09\u3002\u8bc1\u5b9e\u5757\u88ab\u5b9a\u4e49\u4e3a\u6ca1\u6709\u65e0\u6548\u4ea4\u6613\u7684\u5757\uff0c\u662f\u8fdb\u8fc7\u8fc7\u6ee4\u7684\u5757\u3002\u8fd9\u6837\u8bc1\u5b9e\u5757\u5728\u5927\u5c0f\u4e0a\u662f\u52a8\u6001\u7684\u4e5f\u53ef\u80fd\u662f\u7a7a\u7684\u3002\u8bc1\u5b9e\u5757\u751f\u6210\u7684\u8bf4\u660e\u5728\u4e0b\u56fe\u4e2d\u7ed9\u51fa\u3002   Figure 2. Illustration of validated ledger block (vBlock) formation from ledger (PeerLedger) blocks.  \u56fe2 \u4ece\u8282\u70b9\u8d26\u672c\u5757\u5f62\u6210\u8bc1\u5b9e\u8d26\u672c\u5757  vBlocks are chained together to a hash chain by every peer. More specifically, every block of a validated ledger contains:  \u8bc1\u5b9e\u5757\u88ab\u6bcf\u4e2apeer\u8282\u70b9\u94fe\u63a5\u5728\u4e00\u8d77\u5f62\u6210\u4e00\u4e2a\u54c8\u5e0c\u94fe\u3002\u66f4\u5177\u4f53\u5730\uff0c\u8bc1\u5b9e\u8d26\u672c\u7684\u6bcf\u4e2a\u5757\u5305\u542b\uff1a   The hash of the previous vBlock.  vBlock number.  An ordered list of all valid transactions committed by the peers since the last vBlock was computed (i.e., list of valid transactions in a corresponding block).   The hash of the corresponding block (in PeerLedger) from which the current vBlock is derived.    \u524d\u8bc1\u5b9e\u5757\u7684\u54c8\u5e0c\u3002   \u8bc1\u5b9e\u5757\u7f16\u53f7\u3002  \u4ece\u4e0a\u4e00\u4e2a\u8bc1\u5b9e\u5757\u88ab\u8ba1\u7b97\u51fa\u4ee5\u6765\u6240\u6709peer\u8282\u70b9\u63d0\u4ea4\u4ea4\u6613\u7684\u6392\u5e8f\u5217\u8868\uff08\u5373\uff0c\u5728\u76f8\u5e94\u5757\u4e2d\u7684\u6709\u6548\u4ea4\u6613\u5217\u8868\uff09\u3002  \u76f8\u5e94\u5757\u7684\u54c8\u5e0c\uff08\u5728\u8282\u70b9\u8d26\u672c\u4e2d\uff09\uff0c\u6765\u81ea\u5f97\u51fa\u7684\u5f53\u524d\u8bc1\u5b9e\u5757\u3002   All this information is concatenated and hashed by a peer, producing the hash of the vBlock in the validated ledger.  \u6240\u6709\u8fd9\u4e9b\u4fe1\u606f\u90fd\u88abpeer\u8282\u70b9\u7ea7\u8054\u548c\u54c8\u5e0c\uff0c\u4ea7\u751f\u8bc1\u5b9e\u8d26\u672c\u4e2d\u8bc1\u5b9e\u5757\u7684\u54c8\u5e0c\u3002", 
            "title": "4.1. \u9a8c\u8bc1\u8d26\u672c\uff08Validated ledger (VLedger)\uff09"
        }, 
        {
            "location": "/arch-deep-dive_zh/#42-peerledger-checkpointing", 
            "text": "The ledger contains invalid transactions, which may not necessarily be recorded forever. However, peers cannot simply discard PeerLedger blocks and thereby prune PeerLedger once they establish the corresponding vBlocks. Namely, in this case, if a new peer joins the network, other peers could not transfer the discarded blocks (pertaining to PeerLedger) to the joining peer, nor convince the joining peer of the validity of their vBlocks.  \u8d26\u672c\u5305\u542b\u7684\u65e0\u6548\u4ea4\u6613\uff0c\u6ca1\u6709\u5fc5\u8981\u6c38\u4e45\u8bb0\u5f55\u3002\u7136\u800c\uff0c\u4e00\u65e6\u5efa\u7acb\u76f8\u5e94\u7684\u8bc1\u5b9e\u5757\uff0cpeer\u8282\u70b9\u4e0d\u80fd\u7b80\u5355\u5730\u4e22\u5f03\u8282\u70b9\u8d26\u672c\u5757\u4ece\u800c\u4fee\u526a\u8282\u70b9\u8d26\u672c\u3002\u5373\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u65b0\u7684peer\u8282\u70b9\u52a0\u5165\u4e86\u7f51\u7edc\uff0c\u5176\u5b83peer\u8282\u70b9\u4e0d\u80fd\u8f6c\u79fb\u4e22\u5f03\u5757\uff08\u4e0e\u8282\u70b9\u8d26\u672c\u6709\u5173\u7684\uff09\u5230\u65b0\u52a0\u5165\u7684\u8282\u70b9\uff0c\u4e5f\u4e0d\u80fd\u4f7f\u65b0\u52a0\u5165\u7684peer\u8282\u70b9\u627f\u8ba4\u5b83\u4eec\u7684\u8bc1\u5b9e\u5757\u3002  To facilitate pruning of the PeerLedger, this document describes a checkpointing mechanism. This mechanism establishes the validity of the vBlocks across the peer network and allows checkpointed vBlocks to replace the discarded PeerLedger blocks. This, in turn, reduces storage space, as there is no need to store invalid transactions. It also reduces the work to reconstruct the state for new peers that join the network (as they do not need to establish validity of individual transactions when reconstructing the state by replaying PeerLedger, but may simply replay the state updates contained in the validated ledger).  \u4e3a\u4e86\u4fbf\u4e8e\u8282\u70b9\u8d26\u672c\u4fee\u526a\uff0c\u8fd9\u4e2a\u6587\u6863\u63cf\u8ff0\u4e00\u4e2a\u68c0\u67e5\u70b9\u673a\u5236\u3002\u8fd9\u4e2a\u673a\u5236\u5efa\u7acb\u4e86\u8bc1\u5b9e\u5757\u7684\u6709\u6548\u6027\uff0c\u8d2f\u7a7f\u8282\u70b9\u7f51\u7edc\uff0c\u5141\u8bb8\u68c0\u67e5\u70b9\u8bc1\u5b9e\u5757\u66ff\u6362\u4e22\u5f03\u7684\u8282\u70b9\u8d26\u672c\u5757\u3002\u8fd9\uff0c\u53cd\u8fc7\u6765\uff0c\u51cf\u5c11\u4e86\u5b58\u50a8\u7a7a\u95f4\uff0c\u56e0\u4e3a\u6ca1\u6709\u5fc5\u8981\u5b58\u50a8\u65e0\u6548\u4ea4\u6613\u3002\u5b83\u4e5f\u51cf\u5c11\u4e86\u65b0\u52a0\u5165\u7684peer\u8282\u70b9\u91cd\u6784\u72b6\u6001\u7684\u5de5\u4f5c\u91cf\uff08\u5f53\u901a\u8fc7\u91cd\u6f14\u8282\u70b9\u8d26\u672c\u91cd\u6784\u72b6\u6001\u65f6\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u9700\u8981\u5efa\u7acb\u6709\u6548\u7684\u5355\u4e2a\u4ea4\u6613\uff0c\u4f46\u53ef\u4ee5\u7b80\u5355\u91cd\u6f14\u5305\u542b\u5728\u8282\u70b9\u8d26\u672c\u4e2d\u7684\u72b6\u6001\u66f4\u65b0\u3002\uff09", 
            "title": "4.2. \u8282\u70b9\u8d26\u672c\u68c0\u67e5(PeerLedger Checkpointing)"
        }, 
        {
            "location": "/arch-deep-dive_zh/#421-checkpointing-protocol", 
            "text": "Checkpointing is performed periodically by the peers every CHK blocks, where CHK is a configurable parameter. To initiate a checkpoint, the peers broadcast (e.g., gossip) to other peers message  , where blockno is the current blocknumber and blocknohash is its respective hash, stateHash is the hash of the latest state (produced by e.g., a Merkle hash) upon validation of block blockno and peerSig is peer\u2019s signature on (CHECKPOINT,blocknohash,blockno,stateHash), referring to the validated ledger.  \u68c0\u67e5\u70b9\u662f\u7531peer\u8282\u70b9\u6bcf\u4e2aCHK\u5757\u5468\u671f\u6027\u5730\u5f62\u6210\uff0c\u8fd9\u91ccCHK\u662f\u4e00\u4e2a\u53ef\u914d\u7f6e\u53c2\u6570\u3002\u5f00\u8f9f\u4e00\u4e2a\u68c0\u67e5\u70b9\uff0cpeer\u8282\u70b9\u5e7f\u64ad\uff08\u4f8b\u5982\uff0c\u4f20\u64ad\uff09\u7ed9\u5176\u5b83peer\u8282\u70b9  , \u5176\u4e2d\uff0cblockno\u662f\u5f53\u524d\u5757\u7f16\u53f7\uff0cblocknohash\u662f\u5404\u81ea\u7684\u54c8\u5e0c\uff0cstateHash\u662f\u6700\u65b0\u72b6\u6001\u7684\u54c8\u5e0c\uff08\u4ea7\u751f\u4e8e\uff0c\u4f8b\u5982Merkle hash\uff09\uff0c\u57fa\u4e8e\u786e\u8ba4\u7684\u5757\u7f16\u53f7\uff0cpeerSig\u662fpeer\u8282\u70b9\u7684\u5bf9(CHECKPOINT,blocknohash,blockno,stateHash)\u7684\u7b7e\u540d\uff0c\u5f15\u7528\u4e86\u8bc1\u5b9e\u8d26\u672c\u3002  A peer collects CHECKPOINT messages until it obtains enough correctly signed messages with matching blockno, blocknohash and stateHash to establish a valid checkpoint (see Section 4.2.2.).  peer\u8282\u70b9\u6536\u96c6CHECKPOINT\u6d88\u606f\u76f4\u5230\u5b83\u5f97\u5230\u5339\u914dblockno, blocknohash \u548c stateHash \u7684\u8db3\u591f\u6b63\u786e\u7684\u7b7e\u540d\u6d88\u606f\u6765\u5efa\u7acb\u4e00\u4e2a\u6709\u6548\u7684\u68c0\u67e5\u70b9\u3002\uff08\u89c14.2.2\u8282\uff09  Upon establishing a valid checkpoint for block number blockno with blocknohash, a peer:\n- if blockno latestValidCheckpoint.blockno, then a peer assigns latestValidCheckpoint=(blocknohash,blockno),\n- stores the set of respective peer signatures that constitute a valid checkpoint into the set latestValidCheckpointProof,\n- stores the state corresponding to stateHash to latestValidCheckpointedState,\n- (optionally) prunes its PeerLedger up to block number blockno (inclusive).  \u5728\u4e3a\u5757\u7f16\u53f7blockno \u548c blocknohash\u5efa\u7acb\u4e86\u6709\u6548\u7684\u68c0\u67e5\u70b9\u7684\u57fa\u7840\u4e0a\uff0cpeer\u8282\u70b9\uff1a\n- \u5982\u679c blockno latestValidCheckpoint.blockno, \u90a3\u4e48peer\u8282\u70b9\u5206\u914d latestValidCheckpoint=(blocknohash,blockno),\n- \u5b58\u50a8\u5404peer\u8282\u70b9\u7684\u7b7e\u540d\u96c6\uff0c\u5b83\u6784\u6210\u4e86\u6709\u6548\u7684\u68c0\u67e5\u70b9\u5230\u96c6\u5408latestValidCheckpointProof,\n- \u5b58\u50a8\u72b6\u6001\u76f8\u5e94\u7684stateHash \u5230 latestValidCheckpointedState,\n- \uff08\u53ef\u9009\u7684\uff09\u4fee\u526a\u5b83\u7684\u8282\u70b9\u8d26\u672c\u5230\u5757\u7f16blockno (\u5305\u542b).", 
            "title": "4.2.1. \u68c0\u67e5\u70b9\u534f\u8bae(Checkpointing protocol)"
        }, 
        {
            "location": "/arch-deep-dive_zh/#422-valid-checkpoints", 
            "text": "Clearly, the checkpointing protocol raises the following questions: When can a peer prune its  PeerLedger ? How many  CHECKPOINT  messages are \u201csufficiently many\u201d?. This is defined by a checkpoint validity policy, with (at least) two possible approaches, which may also be combined:  \u663e\u7136\uff0c\u68c0\u67e5\u70b9\u534f\u8bae\u589e\u52a0\u4e86\u4e0b\u9762\u7684\u95ee\u9898\uff1apeer\u8282\u70b9\u4ec0\u4e48\u65f6\u5019\u80fd\u4fee\u526a\u5b83\u7684\u8282\u70b9\u8d26\u672c\uff1f\u591a\u5c11\u68c0\u67e5\u70b9\u6d88\u606f\u662f\u8db3\u591f\u591a\u7684\uff1f\u8fd9\u7531\u68c0\u67e5\u70b9\u6709\u6548\u7b56\u7565\u5b9a\u4e49\uff0c\u8981\u6709\uff08\u81f3\u5c11\uff09\u4e24\u79cd\u53ef\u80fd\u7684\u65b9\u6cd5\u4e14\u4e5f\u80fd\u5408\u5e76\uff1a    Local (peer-specific) checkpoint validity policy (LCVP). A local policy at a given peer p may specify a set of peers which peer p trusts and whose CHECKPOINT messages are sufficient to establish a valid checkpoint. For example, LCVP at peer Alice may define that Alice needs to receive CHECKPOINT message from Bob, or from both Charlie and Dave.    Local (peer-specific) checkpoint validity policy (LCVP).\u7ed9\u5b9apeer\u8282\u70b9p\u4e0a\u7684\u672c\u5730\u7b56\u7565\u53ef\u4ee5\u786e\u5b9a\u4e00\u7ec4peer\u8282\u70b9\uff0c\u8fd9\u4e00\u7ec4peer\u8282\u70b9\u662fp\u4fe1\u4efb\u7684\u4e14\u5b83\u7684CHECKPOINT\u6d88\u606f\u662f\u8db3\u591f\u5efa\u7acb\u4e00\u4e2a\u6709\u6548\u7684\u68c0\u67e5\u70b9\u3002\u4f8b\u5982\uff0c\u5728peer\u8282\u70b9Alice\u4e0a\u7684LCVP\u53ef\u4ee5\u5b9a\u4e49\u672c\u5730\uff08peer\u786e\u5b9a\uff09\u68c0\u67e5\u70b9\u6709\u6548\u6027\u7b56\u7565\uff08LCVP\uff09\u3002    Global checkpoint validity policy (GCVP). A checkpoint validity policy may be specified globally. This is similar to a local peer policy, except that it is stipulated at the system (blockchain) granularity, rather than peer granularity. For instance, GCVP may specify that:    Global checkpoint validity policy (GCVP).\u68c0\u67e5\u70b9\u6709\u6548\u7b56\u7565\u53ef\u4ee5\u786e\u5b9a\u4e3a\u5168\u5c40\u7684\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u672c\u5730\u8282\u70b9\u7b56\u7565\uff0c\u9664\u975e\u5728\u7cfb\u7edf\u94fe\u95f4\u9694\u4e0a\u89c4\u5b9a\uff0c\u597d\u4e8e\u8282\u70b9\u95f4\u9694\u3002\u4f8b\u5982\uff0cGCVP\u53ef\u4ee5\u6307\u5b9a\uff1a    each peer may trust a checkpoint if confirmed by 11 different peers.    in a specific deployment in which every orderer is collocated with a peer in the same machine (i.e., trust domain) and where up to f orderers may be (Byzantine) faulty, each peer may trust a checkpoint if confirmed by f+1 different peers collocated with orderers.    \u6bcf\u4e2apeer\u8282\u70b9\u53ef\u4ee5\u4fe1\u4efb\u4e00\u4e2a\u753111\u5404\u4e0d\u540cpeer\u8282\u70b9\u786e\u8ba4\u7684\u68c0\u67e5\u70b9\u3002   \u5728\u5177\u4f53\u90e8\u7f72\u4e2d\u6bcf\u4e2a\u6392\u5e8f\u8005\u4e0epeer\u8282\u70b9\u914d\u7f6e\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\uff08\u5373\uff0c\u4fe1\u4efb\u57df\uff09\uff0c\u591a\u8fbef\u4e2a\u6392\u5e8f\u8005\u53ef\u4ee5\u662f\uff08\u62dc\u5360\u5ead\uff09\u9519\u8bef\uff0c\u6bcf\u4e2apeer\u8282\u70b9\u53ef\u4ee5\u4fe1\u4efb\u4e00\u4e2a\u68c0\u67e5\u70b9\uff0c\u5982\u679c\u7ecf\u8fc7f+1\u4e2a\u6392\u5e8f\u8005\u914d\u7f6e\u7684\u4e0d\u540c\u7684\u8282\u70b9\u786e\u8ba4\u3002", 
            "title": "4.2.2. \u6709\u6548\u68c0\u67e5\u70b9(Valid checkpoints)"
        }, 
        {
            "location": "/txflow_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nYueling Liang\n\n\n\n\n\n\n\n\n\n\nThis document outlines the transactional mechanics that take place during a standard asset exchange. The scenario includes two clients, A and B, who are buying and selling radishes. They each have a peer on the network through which they send their transactions and interact with the ledger.\n\n\n\u672c\u6587\u6982\u8ff0\u4e86\u8d44\u4ea7\u4ea4\u6613\u8fc7\u7a0b\u4e2d\u7684\u4e8b\u52a1\u673a\u5236\u3002\u8be5\u573a\u666f\u5305\u542b\u5ba2\u6237A\u548cB\uff0c\u5728\u8fdb\u884c\u841d\u535c\u4e70\u5356\u3002\u4ed6\u4eec\u5404\u81ea\u6709\u4e00\u4e2a\u7f51\u7edc\u8282\u70b9\uff0c\u901a\u8fc7\u8282\u70b9\u4ed6\u4eec\u53d1\u9001\u4ea4\u6613\u5e76\u548c\u8d26\u672c\u8fdb\u884c\u4ea4\u4e92\u3002\n\n\n\n\n\u5047\u8bbe\n\n\n(Assumptions)\n\n\nThis flow assumes that a channhttp://el is set up and running. The application user has registered and enrolled with the organization\u2019s certificate authority (CA) and received back necessary cryptographic material, which is used to authenticate to the network.\n\n\n\u8be5\u6d41\u7a0b\u5047\u8bbe\u901a\u9053\u5df2\u5efa\u7acb\u5e76\u6b63\u5e38\u8fd0\u884c\u3002\u7528\u6237\u5df2\u6ce8\u518c\u5e76\u4f7f\u7528\u7ec4\u7ec7\u8ba4\u8bc1\u6388\u6743\uff08CA\uff09\u767b\u8bb0\uff0c\u540c\u65f6\u83b7\u5f97\u5fc5\u8981\u7684\u52a0\u5bc6\u6750\u6599\u6765\u8fdb\u884c\u7f51\u7edc\u9a8c\u8bc1\u3002\n\n\nThe chaincode (containing a set of key value pairs representing the initial state of the radish market) is installed on the peers and instantiated on the channel. The chaincode contains logic defining a set of transaction instructions and the agreed upon price for a radish. An endorsement policy has also been set for this chaincode, stating that both peerA and peerB must endorse any transaction.\n\n\n\u94fe\u7801\uff08\u5305\u542b\u4e00\u7ec4\u4ee3\u8868\u841d\u535c\u5e02\u573a\u521d\u59cb\u72b6\u6001\u7684\u952e\u503c\u5bf9\uff09\u88ab\u5b89\u88c5\u5728\u8282\u70b9\u4e0a\u5e76\u5728\u901a\u9053\u4e0a\u8fdb\u884c\u5b9e\u4f8b\u5316\u3002\u94fe\u7801\u5305\u542b\u5b9a\u4e49\u4ea4\u6613\u6307\u4ee4\u96c6\u5408\u7684\u903b\u8f91\u548c\u8fbe\u6210\u4e00\u81f4\u7684\u841d\u535c\u4ef7\u683c\u3002\u8bbe\u7f6e\u4e00\u9879\u9488\u5bf9\u94fe\u7801\u7684\u80cc\u4e66\u7b56\u7565\uff0c\u8868\u660e\u8282\u70b9A\u548cB\u90fd\u5fc5\u987b\u5bf9\u4efb\u4f55\u4ea4\u6613\u8fdb\u884c\u80cc\u4e66\u3002\n\n\n\n\n1. \u5ba2\u6237A\u53d1\u8d77\u4ea4\u6613\n\n\n(Client A initiates a transaction)\n\n\nWhat\u2019s happening? - Client A is sending a request to purchase radishes. The request targets peerA and peerB, who are respectively representative of Client A and Client B. The endorsement policy states that both peers must endorse any transaction, therefore the request goes to peerA and peerB.\n\n\n\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f- \u5ba2\u6237A\u53d1\u51fa\u841d\u535c\u8d2d\u4e70\u8bf7\u6c42\u3002\u8bf7\u6c42\u76ee\u6807\u8282\u70b9A\u548cB\uff0c\u5206\u522b\u4ee3\u8868\u5ba2\u6237A\u548cB\u3002\u80cc\u4e66\u7b56\u7565\u8868\u660e\u4e24\u4e2a\u8282\u70b9\u5fc5\u987b\u4e3a\u4efb\u4f55\u4ea4\u6613\u8fdb\u884c\u80cc\u4e66\uff0c\u56e0\u800c\u8bf7\u6c42\u88ab\u53d1\u9001\u5230\u8282\u70b9A\u548cB\u3002\n\n\nNext, the transaction proposal is constructed. An application leveraging a supported SDK (node, java, python) utilizes one of the available API\u2019s which generates a transaction proposal. The proposal is a request to invoke a chaincode function so that data can be read and/or written to the ledger (i.e. write new key value pairs for the assets). The SDK serves as a shim to package the transaction proposal into the properly architected format (protocol buffer over gRPC) and takes the user\u2019s cryptographic credentials to produce a unique signature for this transaction proposal.\n\n\n\u63a5\u4e0b\u6765\u6784\u5efa\u4ea4\u6613\u63d0\u6848\u3002\u4e00\u4e2a\u4ee5\u53ef\u7528SDK\uff08node, java, python\uff09\u4e3a\u652f\u6491\u7684\u5e94\u7528\u5229\u7528\u6709\u6548\u7684API\u6765\u751f\u6210\u4ea4\u6613\u63d0\u6848\u3002\u8fd9\u9879\u63d0\u6848\u4f5c\u4e3a\u8c03\u7528\u94fe\u7801\u529f\u80fd\u7684\u8bf7\u6c42\u6765\u5b8c\u6210\u6570\u636e\u5230\u8d26\u672c\u7684\u8bfb\u53d6\u548c/\u6216\u5199\u5165\uff08\u5373\u4e3a\u8d44\u4ea7\u5199\u5165\u65b0\u7684\u952e\u503c\u5bf9\uff09\u3002SDK\u6709\u4e24\u4e2a\u4f5c\u7528\uff1a\u628a\u4ea4\u6613\u63d0\u6848\u5305\u88c5\u6210\u5408\u9002\u67b6\u6784\u683c\u5f0f\u7684\u5e93\uff08\u57fa\u4e8egRPC\u7684\u534f\u8bae\u7f13\u51b2\uff09\uff1b\u4f7f\u7528\u7528\u6237\u7684\u52a0\u5bc6\u8bc1\u4e66\u6765\u521b\u5efa\u4ea4\u6613\u63d0\u6848\u7684\u552f\u4e00\u7b7e\u540d\u3002\n\n\n\n\n2. \u80cc\u4e66\u8282\u70b9\u9a8c\u8bc1\u7b7e\u540d\n\u6267\u884c\u4ea4\u6613\n\n\n(Endorsing peers verify signature \n execute the transaction)\n\n\nThe endorsing peers verify the signature (using MSP) and determine if the submitter is properly authorized to perform the proposed operation (using the channel\u2019s ACL). The endorsing peers take the transaction proposal arguments as inputs and execute them against the current state database to produce transaction results including a response value, read set, and write set. No updates are made to the ledger at this point. The set of these values, along with the endorsing peer\u2019s signature and a YES/NO endorsement statement is passed back as a \u201cproposal response\u201d to the SDK which parses the payload for the application to consume.\n\n\n\u80cc\u4e66\u8282\u70b9\u4f7f\u7528MSP\u9a8c\u8bc1\u7b7e\u540d\u5e76\u786e\u5b9a\u8bf7\u6c42\u8005\u662f\u5426\u88ab\u5408\u7406\u6388\u6743\u8fdb\u884c\u63d0\u6848\u7684\u64cd\u4f5c\uff08\u4f7f\u7528\u901a\u9053ACL\uff09\u3002\u80cc\u4e66\u8282\u70b9\u4ee5\u4ea4\u6613\u63d0\u6848\u51ed\u8bc1\u4e3a\u8f93\u5165\uff0c\u57fa\u4e8e\u5f53\u524d\u72b6\u6001\u7684\u6570\u636e\u5e93\u6267\u884c\u6765\u751f\u6210\u4ea4\u6613\u7ed3\u679c\uff0c\u8f93\u51fa\u5305\u62ec\u53cd\u9988\u503c\u3001\u8bfb\u53d6\u96c6\u5408\u548c\u5199\u5165\u96c6\u5408\u3002\u622a\u6b62\u73b0\u5728\u8d26\u672c\u8fd8\u672a\u8fdb\u884c\u66f4\u65b0\u3002\u8fd9\u4e9b\u503c\u7684\u96c6\u5408\uff0c\u80cc\u4e66\u8282\u70b9\u7684\u7b7e\u540d\u4ee5\u53ca\u662f/\u5426\u7684\u80cc\u4e66\u58f0\u660e\u4e00\u540c\u4f5c\u4e3a\u201c\u63d0\u6848\u53cd\u9988\u201d\u88ab\u4f20\u8f93\u56de\u5230SDK\uff0cSDK\u5bf9\u5e94\u7528\u6d88\u8017\u7684\u8f7d\u8377\u8fdb\u884c\u89e3\u6790\u3002\n\n\n\n\n3. \u5ba1\u67e5\u63d0\u6848\u53cd\u9988\n\n\n(Proposal responses are inspected)\n\n\nThe application verifies the endorsing peer signatures and compares the proposal responses (link to glossary term which will contain a representation of the payload) to determine if the proposal responses are the same and if the specified endorsement policy has been fulfilled (i.e. did peerA and peerB both endorse). The architecture is such that even if an application chooses not to inspect responses or otherwise forwards an unendorsed transaction, the policy will still be enforced by peers and upheld at the commit validation phase.\n\u5e94\u7528\u5bf9\u80cc\u4e66\u8282\u70b9\u7b7e\u540d\u8fdb\u884c\u9a8c\u8bc1\uff0c\u6bd4\u8f83\u63d0\u6848\u53cd\u9988\uff08\u94fe\u63a5\u5230\u5305\u542b\u8f7d\u8377\u4ee3\u7406\u7684\u672f\u8bed\u6761\u6b3e\uff09\u6765\u51b3\u5b9a\u662f\u5426\u4e00\u81f4\uff0c\u6307\u5b9a\u7684\u80cc\u4e66\u7b56\u7565\u662f\u5426\u88ab\u6267\u884c\uff08\u5373\u8282\u70b9A\u548cB\u90fd\u8fdb\u884c\u4e86\u80cc\u4e66\uff09\u3002\u8fd9\u79cd\u67b6\u6784\u53ef\u4ee5\u4fdd\u8bc1\u5373\u4f7f\u4e00\u4e2a\u5e94\u7528\u9009\u62e9\u4e0d\u8fdb\u884c\u53cd\u9988\u5ba1\u67e5\u6216\u8005\u8f6c\u53d1\u4e86\u6ca1\u6709\u80cc\u4e66\u7684\u4ea4\u6613\uff0c\u80cc\u4e66\u7b56\u7565\u4f9d\u7136\u4f1a\u88ab\u8282\u70b9\u6267\u884c\u5e76\u5728\u9a8c\u8bc1\u63d0\u4ea4\u9636\u6bb5\u7ef4\u6301\u3002\n\n\n\n\n4. \u5ba2\u6237\u7ec4\u5408\u4ea4\u6613\u80cc\u4e66\n\n\n(Client assembles endorsements into a transaction)\n\n\nThe application \u201cbroadcasts\u201d the transaction proposal and response within a \u201ctransaction message\u201d to the Ordering Service. The transaction will contain the read/write sets, the endorsing peers signatures and the Channel ID. The Ordering Service does not read the transaction details, it simply receives transactions from all channels in the network, orders them chronologically by channel, and creates blocks of transactions per channel.\n\n\n\u5e94\u7528\u5bf9\u4ea4\u6613\u63d0\u6848\u8fdb\u884c\u5e7f\u64ad\uff0c\u4ee5\u201c\u4ea4\u6613\u4fe1\u606f\u201d\u5bf9\u8ba2\u8d2d\u670d\u52a1\u5b9e\u73b0\u53cd\u9988\u3002\u4ea4\u6613\u5305\u542b\u8bfb/\u5199\u96c6\u5408\uff0c\u80cc\u4e66\u8282\u70b9\u7b7e\u540d\u548c\u901a\u9053ID\u3002\u8ba2\u8d2d\u670d\u52a1\u4e0d\u8bfb\u53d6\u4ea4\u6613\u7ec6\u8282\uff0c\u53ea\u662f\u4ece\u7f51\u7edc\u4e2d\u6240\u6709\u901a\u9053\u63a5\u6536\u4ea4\u6613\uff0c\u6839\u636e\u6bcf\u4e2a\u901a\u9053\u6309\u65f6\u95f4\u987a\u5e8f\u8c03\u7528\uff0c\u521b\u5efa\u6bcf\u4e2a\u901a\u9053\u7684\u4ea4\u6613\u533a\u5757\u3002\n\n\n\n\n5. \u4ea4\u6613\u9a8c\u8bc1\u548c\u63d0\u4ea4\n\n\n(Transaction is validated and committed)\n\n\nThe blocks of transactions are \u201cdelivered\u201d to all peers on the channel. The transactions within the block are validated to ensure endorsement policy is fulfilled and to ensure that there have been no changes to ledger state for read set variables since the read set was generated by the transaction execution. Transactions in the block are tagged as being valid or invalid.\n\n\n\u4ea4\u6613\u533a\u5757\u88ab\u53d1\u5e03\u5230\u901a\u9053\u4e2d\u7684\u6240\u6709\u8282\u70b9\u3002\u533a\u5757\u4e2d\u7684\u4ea4\u6613\u88ab\u9a8c\u8bc1\u6765\u786e\u4fdd\u80cc\u4e66\u7b56\u7565\u88ab\u6267\u884c\u5e76\u4e14\u8d26\u672c\u7684\u8bfb\u53d6\u96c6\u5408\u53d8\u91cf\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u56e0\u4e3a\u8bfb\u53d6\u96c6\u5408\u662f\u6267\u884c\u4ea4\u6613\u751f\u6210\u7684\u3002\u533a\u5757\u4e2d\u7684\u4ea4\u6613\u88ab\u6807\u8bb0\u4e3a\u6709\u6548\u6216\u65e0\u6548\u3002\n\n\n\n\n6. \u8d26\u672c\u66f4\u65b0\n\n\n(Ledger updated)\n\n\nEach peer appends the block to the channel\u2019s chain, and for each valid transaction the write sets are committed to current state database. An event is emitted, to notify the client application that the transaction (invocation) has been immutably appended to the chain, as well as notification of whether the transaction was validated or invalidated.\n\n\n\u6bcf\u4e2a\u8282\u70b9\u90fd\u628a\u533a\u5757\u8ffd\u52a0\u5230\u901a\u9053\u7684\u94fe\u4e2d\uff0c\u5bf9\u6bcf\u9879\u6709\u6548\u4ea4\u6613\uff0c\u5199\u5165\u96c6\u5408\u88ab\u63d0\u4ea4\u5230\u5f53\u524d\u72b6\u6001\u7684\u6570\u636e\u5e93\u3002\u53d1\u51fa\u4e8b\u52a1\u901a\u77e5\u5ba2\u6237\u7aef\u5e94\u7528\uff0c\u4ea4\u6613\uff08\u5ba3\u8a93\uff09\u88ab\u6c38\u4e45\u8ffd\u52a0\u5230\u94fe\u4e2d\u4ee5\u53ca\u4ea4\u6613\u662f\u6709\u6548\u6216\u8005\u65e0\u6548\u7684\u3002\n\n\nNote: See the Chaincode Swimlanes diagram to better understand the server side flow and the protobuffers.\n\u6ce8\u610f\uff1a\u53c2\u7167\u94fe\u7801\u6cf3\u9053\u56fe\u4ee5\u83b7\u5f97\u670d\u52a1\u7aef\u6d41\u7a0b\u548c\u534f\u8bae\u7f13\u51b2\u7684\u66f4\u597d\u7406\u89e3\u3002", 
            "title": "\u4ea4\u6613\u6d41\u7a0b"
        }, 
        {
            "location": "/txflow_zh/#_1", 
            "text": "(Assumptions)  This flow assumes that a channhttp://el is set up and running. The application user has registered and enrolled with the organization\u2019s certificate authority (CA) and received back necessary cryptographic material, which is used to authenticate to the network.  \u8be5\u6d41\u7a0b\u5047\u8bbe\u901a\u9053\u5df2\u5efa\u7acb\u5e76\u6b63\u5e38\u8fd0\u884c\u3002\u7528\u6237\u5df2\u6ce8\u518c\u5e76\u4f7f\u7528\u7ec4\u7ec7\u8ba4\u8bc1\u6388\u6743\uff08CA\uff09\u767b\u8bb0\uff0c\u540c\u65f6\u83b7\u5f97\u5fc5\u8981\u7684\u52a0\u5bc6\u6750\u6599\u6765\u8fdb\u884c\u7f51\u7edc\u9a8c\u8bc1\u3002  The chaincode (containing a set of key value pairs representing the initial state of the radish market) is installed on the peers and instantiated on the channel. The chaincode contains logic defining a set of transaction instructions and the agreed upon price for a radish. An endorsement policy has also been set for this chaincode, stating that both peerA and peerB must endorse any transaction.  \u94fe\u7801\uff08\u5305\u542b\u4e00\u7ec4\u4ee3\u8868\u841d\u535c\u5e02\u573a\u521d\u59cb\u72b6\u6001\u7684\u952e\u503c\u5bf9\uff09\u88ab\u5b89\u88c5\u5728\u8282\u70b9\u4e0a\u5e76\u5728\u901a\u9053\u4e0a\u8fdb\u884c\u5b9e\u4f8b\u5316\u3002\u94fe\u7801\u5305\u542b\u5b9a\u4e49\u4ea4\u6613\u6307\u4ee4\u96c6\u5408\u7684\u903b\u8f91\u548c\u8fbe\u6210\u4e00\u81f4\u7684\u841d\u535c\u4ef7\u683c\u3002\u8bbe\u7f6e\u4e00\u9879\u9488\u5bf9\u94fe\u7801\u7684\u80cc\u4e66\u7b56\u7565\uff0c\u8868\u660e\u8282\u70b9A\u548cB\u90fd\u5fc5\u987b\u5bf9\u4efb\u4f55\u4ea4\u6613\u8fdb\u884c\u80cc\u4e66\u3002", 
            "title": "\u5047\u8bbe"
        }, 
        {
            "location": "/txflow_zh/#1-a", 
            "text": "(Client A initiates a transaction)  What\u2019s happening? - Client A is sending a request to purchase radishes. The request targets peerA and peerB, who are respectively representative of Client A and Client B. The endorsement policy states that both peers must endorse any transaction, therefore the request goes to peerA and peerB.  \u53d1\u751f\u4e86\u4ec0\u4e48\uff1f- \u5ba2\u6237A\u53d1\u51fa\u841d\u535c\u8d2d\u4e70\u8bf7\u6c42\u3002\u8bf7\u6c42\u76ee\u6807\u8282\u70b9A\u548cB\uff0c\u5206\u522b\u4ee3\u8868\u5ba2\u6237A\u548cB\u3002\u80cc\u4e66\u7b56\u7565\u8868\u660e\u4e24\u4e2a\u8282\u70b9\u5fc5\u987b\u4e3a\u4efb\u4f55\u4ea4\u6613\u8fdb\u884c\u80cc\u4e66\uff0c\u56e0\u800c\u8bf7\u6c42\u88ab\u53d1\u9001\u5230\u8282\u70b9A\u548cB\u3002  Next, the transaction proposal is constructed. An application leveraging a supported SDK (node, java, python) utilizes one of the available API\u2019s which generates a transaction proposal. The proposal is a request to invoke a chaincode function so that data can be read and/or written to the ledger (i.e. write new key value pairs for the assets). The SDK serves as a shim to package the transaction proposal into the properly architected format (protocol buffer over gRPC) and takes the user\u2019s cryptographic credentials to produce a unique signature for this transaction proposal.  \u63a5\u4e0b\u6765\u6784\u5efa\u4ea4\u6613\u63d0\u6848\u3002\u4e00\u4e2a\u4ee5\u53ef\u7528SDK\uff08node, java, python\uff09\u4e3a\u652f\u6491\u7684\u5e94\u7528\u5229\u7528\u6709\u6548\u7684API\u6765\u751f\u6210\u4ea4\u6613\u63d0\u6848\u3002\u8fd9\u9879\u63d0\u6848\u4f5c\u4e3a\u8c03\u7528\u94fe\u7801\u529f\u80fd\u7684\u8bf7\u6c42\u6765\u5b8c\u6210\u6570\u636e\u5230\u8d26\u672c\u7684\u8bfb\u53d6\u548c/\u6216\u5199\u5165\uff08\u5373\u4e3a\u8d44\u4ea7\u5199\u5165\u65b0\u7684\u952e\u503c\u5bf9\uff09\u3002SDK\u6709\u4e24\u4e2a\u4f5c\u7528\uff1a\u628a\u4ea4\u6613\u63d0\u6848\u5305\u88c5\u6210\u5408\u9002\u67b6\u6784\u683c\u5f0f\u7684\u5e93\uff08\u57fa\u4e8egRPC\u7684\u534f\u8bae\u7f13\u51b2\uff09\uff1b\u4f7f\u7528\u7528\u6237\u7684\u52a0\u5bc6\u8bc1\u4e66\u6765\u521b\u5efa\u4ea4\u6613\u63d0\u6848\u7684\u552f\u4e00\u7b7e\u540d\u3002", 
            "title": "1. \u5ba2\u6237A\u53d1\u8d77\u4ea4\u6613"
        }, 
        {
            "location": "/txflow_zh/#2", 
            "text": "(Endorsing peers verify signature   execute the transaction)  The endorsing peers verify the signature (using MSP) and determine if the submitter is properly authorized to perform the proposed operation (using the channel\u2019s ACL). The endorsing peers take the transaction proposal arguments as inputs and execute them against the current state database to produce transaction results including a response value, read set, and write set. No updates are made to the ledger at this point. The set of these values, along with the endorsing peer\u2019s signature and a YES/NO endorsement statement is passed back as a \u201cproposal response\u201d to the SDK which parses the payload for the application to consume.  \u80cc\u4e66\u8282\u70b9\u4f7f\u7528MSP\u9a8c\u8bc1\u7b7e\u540d\u5e76\u786e\u5b9a\u8bf7\u6c42\u8005\u662f\u5426\u88ab\u5408\u7406\u6388\u6743\u8fdb\u884c\u63d0\u6848\u7684\u64cd\u4f5c\uff08\u4f7f\u7528\u901a\u9053ACL\uff09\u3002\u80cc\u4e66\u8282\u70b9\u4ee5\u4ea4\u6613\u63d0\u6848\u51ed\u8bc1\u4e3a\u8f93\u5165\uff0c\u57fa\u4e8e\u5f53\u524d\u72b6\u6001\u7684\u6570\u636e\u5e93\u6267\u884c\u6765\u751f\u6210\u4ea4\u6613\u7ed3\u679c\uff0c\u8f93\u51fa\u5305\u62ec\u53cd\u9988\u503c\u3001\u8bfb\u53d6\u96c6\u5408\u548c\u5199\u5165\u96c6\u5408\u3002\u622a\u6b62\u73b0\u5728\u8d26\u672c\u8fd8\u672a\u8fdb\u884c\u66f4\u65b0\u3002\u8fd9\u4e9b\u503c\u7684\u96c6\u5408\uff0c\u80cc\u4e66\u8282\u70b9\u7684\u7b7e\u540d\u4ee5\u53ca\u662f/\u5426\u7684\u80cc\u4e66\u58f0\u660e\u4e00\u540c\u4f5c\u4e3a\u201c\u63d0\u6848\u53cd\u9988\u201d\u88ab\u4f20\u8f93\u56de\u5230SDK\uff0cSDK\u5bf9\u5e94\u7528\u6d88\u8017\u7684\u8f7d\u8377\u8fdb\u884c\u89e3\u6790\u3002", 
            "title": "2. \u80cc\u4e66\u8282\u70b9\u9a8c\u8bc1\u7b7e\u540d&amp;\u6267\u884c\u4ea4\u6613"
        }, 
        {
            "location": "/txflow_zh/#3", 
            "text": "(Proposal responses are inspected)  The application verifies the endorsing peer signatures and compares the proposal responses (link to glossary term which will contain a representation of the payload) to determine if the proposal responses are the same and if the specified endorsement policy has been fulfilled (i.e. did peerA and peerB both endorse). The architecture is such that even if an application chooses not to inspect responses or otherwise forwards an unendorsed transaction, the policy will still be enforced by peers and upheld at the commit validation phase.\n\u5e94\u7528\u5bf9\u80cc\u4e66\u8282\u70b9\u7b7e\u540d\u8fdb\u884c\u9a8c\u8bc1\uff0c\u6bd4\u8f83\u63d0\u6848\u53cd\u9988\uff08\u94fe\u63a5\u5230\u5305\u542b\u8f7d\u8377\u4ee3\u7406\u7684\u672f\u8bed\u6761\u6b3e\uff09\u6765\u51b3\u5b9a\u662f\u5426\u4e00\u81f4\uff0c\u6307\u5b9a\u7684\u80cc\u4e66\u7b56\u7565\u662f\u5426\u88ab\u6267\u884c\uff08\u5373\u8282\u70b9A\u548cB\u90fd\u8fdb\u884c\u4e86\u80cc\u4e66\uff09\u3002\u8fd9\u79cd\u67b6\u6784\u53ef\u4ee5\u4fdd\u8bc1\u5373\u4f7f\u4e00\u4e2a\u5e94\u7528\u9009\u62e9\u4e0d\u8fdb\u884c\u53cd\u9988\u5ba1\u67e5\u6216\u8005\u8f6c\u53d1\u4e86\u6ca1\u6709\u80cc\u4e66\u7684\u4ea4\u6613\uff0c\u80cc\u4e66\u7b56\u7565\u4f9d\u7136\u4f1a\u88ab\u8282\u70b9\u6267\u884c\u5e76\u5728\u9a8c\u8bc1\u63d0\u4ea4\u9636\u6bb5\u7ef4\u6301\u3002", 
            "title": "3. \u5ba1\u67e5\u63d0\u6848\u53cd\u9988"
        }, 
        {
            "location": "/txflow_zh/#4", 
            "text": "(Client assembles endorsements into a transaction)  The application \u201cbroadcasts\u201d the transaction proposal and response within a \u201ctransaction message\u201d to the Ordering Service. The transaction will contain the read/write sets, the endorsing peers signatures and the Channel ID. The Ordering Service does not read the transaction details, it simply receives transactions from all channels in the network, orders them chronologically by channel, and creates blocks of transactions per channel.  \u5e94\u7528\u5bf9\u4ea4\u6613\u63d0\u6848\u8fdb\u884c\u5e7f\u64ad\uff0c\u4ee5\u201c\u4ea4\u6613\u4fe1\u606f\u201d\u5bf9\u8ba2\u8d2d\u670d\u52a1\u5b9e\u73b0\u53cd\u9988\u3002\u4ea4\u6613\u5305\u542b\u8bfb/\u5199\u96c6\u5408\uff0c\u80cc\u4e66\u8282\u70b9\u7b7e\u540d\u548c\u901a\u9053ID\u3002\u8ba2\u8d2d\u670d\u52a1\u4e0d\u8bfb\u53d6\u4ea4\u6613\u7ec6\u8282\uff0c\u53ea\u662f\u4ece\u7f51\u7edc\u4e2d\u6240\u6709\u901a\u9053\u63a5\u6536\u4ea4\u6613\uff0c\u6839\u636e\u6bcf\u4e2a\u901a\u9053\u6309\u65f6\u95f4\u987a\u5e8f\u8c03\u7528\uff0c\u521b\u5efa\u6bcf\u4e2a\u901a\u9053\u7684\u4ea4\u6613\u533a\u5757\u3002", 
            "title": "4. \u5ba2\u6237\u7ec4\u5408\u4ea4\u6613\u80cc\u4e66"
        }, 
        {
            "location": "/txflow_zh/#5", 
            "text": "(Transaction is validated and committed)  The blocks of transactions are \u201cdelivered\u201d to all peers on the channel. The transactions within the block are validated to ensure endorsement policy is fulfilled and to ensure that there have been no changes to ledger state for read set variables since the read set was generated by the transaction execution. Transactions in the block are tagged as being valid or invalid.  \u4ea4\u6613\u533a\u5757\u88ab\u53d1\u5e03\u5230\u901a\u9053\u4e2d\u7684\u6240\u6709\u8282\u70b9\u3002\u533a\u5757\u4e2d\u7684\u4ea4\u6613\u88ab\u9a8c\u8bc1\u6765\u786e\u4fdd\u80cc\u4e66\u7b56\u7565\u88ab\u6267\u884c\u5e76\u4e14\u8d26\u672c\u7684\u8bfb\u53d6\u96c6\u5408\u53d8\u91cf\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u56e0\u4e3a\u8bfb\u53d6\u96c6\u5408\u662f\u6267\u884c\u4ea4\u6613\u751f\u6210\u7684\u3002\u533a\u5757\u4e2d\u7684\u4ea4\u6613\u88ab\u6807\u8bb0\u4e3a\u6709\u6548\u6216\u65e0\u6548\u3002", 
            "title": "5. \u4ea4\u6613\u9a8c\u8bc1\u548c\u63d0\u4ea4"
        }, 
        {
            "location": "/txflow_zh/#6", 
            "text": "(Ledger updated)  Each peer appends the block to the channel\u2019s chain, and for each valid transaction the write sets are committed to current state database. An event is emitted, to notify the client application that the transaction (invocation) has been immutably appended to the chain, as well as notification of whether the transaction was validated or invalidated.  \u6bcf\u4e2a\u8282\u70b9\u90fd\u628a\u533a\u5757\u8ffd\u52a0\u5230\u901a\u9053\u7684\u94fe\u4e2d\uff0c\u5bf9\u6bcf\u9879\u6709\u6548\u4ea4\u6613\uff0c\u5199\u5165\u96c6\u5408\u88ab\u63d0\u4ea4\u5230\u5f53\u524d\u72b6\u6001\u7684\u6570\u636e\u5e93\u3002\u53d1\u51fa\u4e8b\u52a1\u901a\u77e5\u5ba2\u6237\u7aef\u5e94\u7528\uff0c\u4ea4\u6613\uff08\u5ba3\u8a93\uff09\u88ab\u6c38\u4e45\u8ffd\u52a0\u5230\u94fe\u4e2d\u4ee5\u53ca\u4ea4\u6613\u662f\u6709\u6548\u6216\u8005\u65e0\u6548\u7684\u3002  Note: See the Chaincode Swimlanes diagram to better understand the server side flow and the protobuffers.\n\u6ce8\u610f\uff1a\u53c2\u7167\u94fe\u7801\u6cf3\u9053\u56fe\u4ee5\u83b7\u5f97\u670d\u52a1\u7aef\u6d41\u7a0b\u548c\u534f\u8bae\u7f13\u51b2\u7684\u66f4\u597d\u7406\u89e3\u3002", 
            "title": "6. \u8d26\u672c\u66f4\u65b0"
        }, 
        {
            "location": "/ca-setup_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nYaocheng Ye\n\n\nRuijun Ou\u3001Zhangjiong Xuan\n\n\n\n\n\n\n\n\nFabric CA is a Certificate Authority for Hyperledger Fabric.\n\n\nIt provides features such as:\n\n\n\n\nregistration of identities, or connects to LDAP as the user registry;\n\n\nissuance of Enrollment Certificates (ECerts);\n\n\nissuance of Transaction Certificates (TCerts), providing both anonymity and unlinkability when transacting on a Hyperledger Fabric blockchain;\n\n\ncertificate renewal and revocation.\n\n\n\n\nFabric CA\u4e3a\bHyperledger Fabric\u884c\u4f7f\u8bc1\u4e66\u673a\u6784\u7684\u529f\u80fd\u3002\n\n\nFabric CA\u63d0\u4f9b\u4ee5\u4e0b\u529f\u80fd\uff1a\n\n\n\n\n\u8eab\u4efd\u6ce8\u518c\uff0c\u6216\u8005\u5c06\u8fde\u63a5\u5230LDAP\u4f5c\u4e3a\u7528\u6237\u6ce8\u518c\uff1b\n\n\n\u9881\u53d1\u767b\u5f55\u8bc1\u4e66(ECerts)\uff1b\n\n\n\u9881\u53d1\u4ea4\u6613\u8bc1\u4e66(TCerts)\uff0c\u4fdd\u8bc1\u94fe\u4e0a\u4ea4\u6613\u7684\u533f\u540d\u6027\u4e0e\u4e0d\u53ef\u8fde\u63a5\u6027\uff1b\n\n\n\u8bc1\u4e66\u7eed\u671f\u4e0e\u64a4\u9500\n\n\n\n\nFabric CA consists of both a server and a client component as described later in this document.\n\n\nFor developers interested in contributing to Fabric CA, see the Fabric CA repository for more information.\n\n\nFabric CA \u5305\u542b\u4e00\u4e2a\u670d\u52a1\u7aef\u7ec4\u4ef6\u548c\u4e00\u4e2a\u5ba2\u6237\u7aef\u7ec4\u4ef6\uff0c\u7a0d\u540e\u4f1a\u8fdb\u884c\u4ecb\u7ecd\u3002\n\n\n\u5bf9\u8d21\u732eFabric CA\u611f\u5174\u8da3\u7684\u5f00\u53d1\u8005\uff0c\u53ef\u4ee5\u53c2\u8003 \nFabric CA repository\n\n\n\u6982\u8ff0\n\n\nThe diagram below illustrates how the Fabric CA server fits into the overall Hyperledger Fabric architecture.\n\n\n\u4e0b\u56fe\u8bf4\u660e\u4e86 Fabric CA \u670d\u52a1\u7aef\u5982\u4f55\u5728 Hyperledger Fabric \u67b6\u6784\u4e2d\u53d1\u6325\u4f5c\u7528\n\n\n\n\nThere are two ways of interacting with a Fabric CA server: via the Fabric CA client or through one of the Fabric SDKs. All communication to the Fabric CA server is via REST APIs. See fabric-ca/swagger/swagger-fabric-ca.json for the swagger documentation for these REST APIs.\n\n\n\u6709\u4e24\u79cd\u65b9\u5f0f\u4e0e Fabric CA \u670d\u52a1\u7aef\u4ea4\u4e92\uff1a\u901a\u8fc7 Fabric CA \u5ba2\u6237\u7aef\uff0c\u6216\u8005 Fabric SDK\uff0c\u6240\u6709\u4e0e Fabric CA \u7684\u4ea4\u4e92\u90fd\u662f\u901a\u8fc7 REST APIs \u6765\u5b9e\u73b0\u7684\u3002REST APIs \u7684swagger\u8bf4\u660e\u6587\u6863\u89c1 \nfabric-ca/swagger/swagger-fabric-ca.json\n \n\n\nThe Fabric CA client or SDK may connect to a server in a cluster of Fabric CA servers. This is illustrated in the top right section of the diagram. The client routes to an HA Proxy endpoint which load balances traffic to one of the fabric-ca-server cluster members. All Fabric CA servers in a cluster share the same database for keeping track of users and certificates. If LDAP is configured, the user information is kept in LDAP rather than the database.\n\n\nFabric CA \u5ba2\u6237\u7aef\u6216\u8005 SDK \u53ef\u80fd\u4f1a\u8fde\u63a5\u5230 Fabric CA \u96c6\u7fa4\u4e2d\u67d0\u4e00\u4e2a Fabric CA \u670d\u52a1\u7aef\uff0c\u8fd9\u4e00\u90e8\u5206\u53ef\u4ee5\u901a\u8fc7\u4e0a\u56fe\u53f3\u4e0a\u90e8\u5206\u83b7\u5f97\u66f4\u597d\u7684\u7406\u89e3\u3002\u5ba2\u6237\u7aef\u8fde\u63a5\u7684\u662f\u4e00\u4e2a HA \u4ee3\u7406\u8282\u70b9\uff0c\u8fd9\u4e2a HA \u4ee3\u7406\u8282\u70b9\u4e3a Fabric CA \u96c6\u7fa4\u4f5c\u8d1f\u8f7d\u5747\u8861\u3002\u6240\u6709\u7684 Fabric CA \u670d\u52a1\u7aef\u5171\u4eab\u540c\u4e00\u4e2a\u6570\u636e\u5e93\u3002\u6570\u636e\u5e93\u7528\u6765\u4fdd\u5b58\u7528\u6237\u548c\u8bc1\u4e66\u4fe1\u606f\u3002\u5982\u679c\u914d\u7f6e\u4e86 LDAP\uff0c\u90a3\u4e48\u7528\u6237\u4fe1\u606f\u5c06\u4f1a\u4fdd\u5b58\u5728 LDAP \u4e2d\uff0c\u800c\u4e0d\u662f\u6570\u636e\u5e93\u4e2d\u3002\n\n\n\u5165\u95e8\n\n\n\u524d\u7f6e\u6761\u4ef6\n\n\n\n\nGo 1.7+ \u6216\u66f4\u9ad8\u7248\u672c\n\n\nGOPATH \u73af\u5883\u53d8\u91cf\u6b63\u786e\u8bbe\u7f6e\n\n\nlibtool \u548c libtdhl-dev \u8fd9\u4e24\u4e2a\u5305\u5b89\u88c5\u597d\n\n\n\n\n\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5 libtool\n\n\n# sudo apt install libtool libltdl-dev\n\n\n\n\u4e86\u89e3\u66f4\u591a\u6709\u5173 libtool \u7684\u4fe1\u606f\uff0c\u53c2\u8003 \nhttps://www.gnu.org/software/libtool/\n\n\n\u4e86\u89e3\u66f4\u591a\u6709\u5173 libtdhr-dev \u7684\u4fe1\u606f\uff0c\u53c2\u8003 \nhttps://www.gnu.org/software/libtool/manual/html_node/Using-libltdl.html\n\n\n\u5b89\u88c5\n\n\n\u4ee5\u4e0b\u547d\u4ee4\u4f1a\u540c\u65f6\u5b89\u88c5 fabric-ca-server \u548c fabric-ca-client\n\n\n# go get -u github.com/hyperledger/fabric-ca/cmd/...\n\n\n\n\u539f\u751f\u542f\u52a8\u670d\u52a1\u5668\n\n\n\u9ed8\u8ba4\u914d\u7f6e\u542f\u52a8 fabric-ca-server\n\n\n# fabric-ca-server start -b admin:adminpw\n\n\n\nThe -b option provides the enrollment ID and secret for a bootstrap administrator. A default configuration file named fabric-ca-server-config.yaml is created in the local directory which can be customized.\n\n\n-b\n \u9009\u9879\u7528\u6765\u63d0\u4f9b\u542f\u52a8\u7ba1\u7406\u5458\u7684\u767b\u5f55 ID \u548c\u5bc6\u7801\u3002\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6 \nfabric-ca-server-config.yaml\n \u4f1a\u81ea\u52a8\u5728\u672c\u5730\u76ee\u5f55\u521b\u5efa\uff0c\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u81ea\u5b9a\u4e49\u3002\n\n\n\u901a\u8fc7 Docker \u542f\u52a8\u670d\u52a1\u5668\n\n\n\u4f7f\u7528 docker-compose \u6765\u542f\u52a8\n\n\n# cd $GOPATH/src/github.com/hyperledger/fabric-ca\n# make docker\n# cd docker/server\n# docker-compose up -d\n\n\n\nhyperledger/fabric-ca docker \u955c\u50cf\u5305\u542b fabric-ca-server \u548c the fabric-ca-client\n\n\n\u4f53\u9a8c Fabric CA \u547d\u4ee4\u884c\n\n\n\u8fd9\u4e00\u90e8\u5206\u63d0\u4f9b fabric-ca-server \u548c fabric-ca-client \u547d\u4ee4\u884c\u7684\u4f7f\u7528\u8bf4\u660e\u3002\u53e6\u5916\u7684\u4f7f\u7528\u4fe1\u606f\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u4e2d\u63d0\u4f9b\u3002\n\n\nfabric-ca-server\n\n\nHyperledger Fabric Certificate Authority Server\n\nUsage:\n    fabric-ca-server [command]\n\nAvailable Commands:\n    init        Initialize the Fabric CA server\n    start       Start the Fabric CA server\n\nFlags:\n        --address string                         Listening address of Fabric CA server (default \"0.0.0.0\")\n    -b, --boot string                            The user:pass for bootstrap admin which is required to build default config file\n        --ca.certfile string                     PEM-encoded CA certificate file (default \"ca-cert.pem\")\n        --ca.chainfile string                    PEM-encoded CA chain file (default \"ca-chain.pem\")\n        --ca.keyfile string                      PEM-encoded CA key file (default \"ca-key.pem\")\n    -n, --ca.name string                         Certificate Authority name\n    -c, --config string                          Configuration file (default \"fabric-ca-server-config.yaml\")\n        --csr.cn string                          The common name field of the certificate signing request to a parent Fabric CA server\n        --csr.hosts stringSlice                  A list of space-separated host names in a certificate signing request to a parent Fabric CA server\n        --csr.serialnumber string                The serial number in a certificate signing request to a parent Fabric CA server\n        --db.datasource string                   Data source which is database specific (default \"fabric-ca-server.db\")\n        --db.tls.certfiles stringSlice           PEM-encoded list of trusted certificate files\n        --db.tls.client.certfile string          PEM-encoded certificate file when mutual authenticate is enabled\n        --db.tls.client.keyfile string           PEM-encoded key file when mutual authentication is enabled\n        --db.type string                         Type of database; one of: sqlite3, postgres, mysql (default \"sqlite3\")\n    -d, --debug                                  Enable debug level logging\n        --ldap.enabled                           Enable the LDAP client for authentication and attributes\n        --ldap.groupfilter string                The LDAP group filter for a single affiliation group (default \"(memberUid=%s)\")\n        --ldap.url string                        LDAP client URL of form ldap://adminDN:adminPassword@host[:port]/base\n        --ldap.userfilter string                 The LDAP user filter to use when searching for users (default \"(uid=%s)\")\n    -p, --port int                               Listening port of Fabric CA server (default 7054)\n        --registry.maxenrollments int            Maximum number of enrollments; valid if LDAP not enabled\n        --tls.certfile string                    PEM-encoded TLS certificate file for server's listening port (default \"ca-cert.pem\")\n        --tls.clientauth.certfiles stringSlice   PEM-encoded list of trusted certificate files\n        --tls.clientauth.type string             Policy the server will follow for TLS Client Authentication. (default \"noclientcert\")\n        --tls.enabled                            Enable TLS on the listening port\n        --tls.keyfile string                     PEM-encoded TLS key for server's listening port (default \"ca-key.pem\")\n    -u, --url string                             URL of the parent Fabric CA server\n\n\nUse \"fabric-ca-server [command] --help\" for more information about a command.\n\n\n\nfabric-ca-client\n\n\n# fabric-ca-client\nHyperledger Fabric Certificate Authority Client\n\nUsage:\n    fabric-ca-client [command]\n\nAvailable Commands:\n    enroll      Enroll an identity\n    getcacert   Get CA certificate chain\n    reenroll    Reenroll an identity\n    register    Register an identity\n    revoke      Revoke an identity\n\nFlags:\n    -c, --config string                Configuration file (default \"$HOME/.fabric-ca-client/fabric-ca-client-config.yaml\")\n        --csr.cn string                The common name field of the certificate signing request\n        --csr.hosts stringSlice        A list of space-separated host names in a certificate signing request\n        --csr.serialnumber string      The serial number in a certificate signing request\n    -d, --debug                        Enable debug level logging\n        --enrollment.hosts string      Comma-separated host list\n        --enrollment.label string      Label to use in HSM operations\n        --enrollment.profile string    Name of the signing profile to use in issuing the certificate\n        --id.affiliation string        The identity's affiliation\n        --id.attr string               Attributes associated with this identity (e.g. hf.Revoker=true)\n        --id.maxenrollments int        The maximum number of times the secret can be reused to enroll\n        --id.name string               Unique name of the identity\n        --id.secret string             The enrollment secret for the identity being registered\n        --id.type string               Type of identity being registered (e.g. 'peer, app, user')\n    -M, --mspdir string                Membership Service Provider directory (default \"msp\")\n    -m, --myhost string                Hostname to include in the certificate signing request during enrollment (default \"$HOSTNAME\")\n        --tls.certfiles stringSlice    PEM-encoded list of trusted certificate files\n        --tls.client.certfile string   PEM-encoded certificate file when mutual authenticate is enabled\n        --tls.client.keyfile string    PEM-encoded key file when mutual authentication is enabled\n    -u, --url string                   URL of the Fabric CA server (default \"http://localhost:7054\")\n\nUse \"fabric-ca-client [command] --help\" for more information about a command.\n\n\n\nNote that command line options that are string slices (lists) can be specified either by specifying the option with space-separated list elements or by specifying the option multiple times, each with a string value that make up the list. For example, to specify host1 and host2 for csr.hosts option, you can either pass \u2013csr.hosts \u201chost1 host2\u201d or \u2013csr.hosts host1 \u2013csr.hosts host2\n\n\n\u6ce8\u610f\u5728\u547d\u4ee4\u884c\u4e2d\u9700\u8981\u7ed9\u67d0\u4e2a\u9009\u9879\u8f93\u5165\u5217\u8868\u65f6\uff0c\u53ef\u4ee5\b\u7528\u7a7a\u683c\u5206\u5272\uff0c\u6216\u8005\u591a\u6b21\u4f7f\u7528\u8be5\u9009\u9879\u3002\u4f8b\u5982\uff0c\u6307\u5b9a\nhost1\n\u548c\nhost2\n\u7ed9csr.hosts\u9009\u9879\uff0c\u4f60\u53ef\u4ee5\u7528\u2013csr.hosts \u201chost1 host2\u201d\u6216\u8005\u2013csr.hosts host1 \u2013csr.hosts host2\n\n\n\u6587\u4ef6\u683c\u5f0f\n\n\nFabric CA \u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f\n\n\nA configuration file can be provided to the server using the -c or \nconfig option. If the \nconfig option is used and the specified file doesn\u2019t exist, a default configuration file (like the one shown below) will be created in the specified location. However, if no config option was used, it will be created in the server\u2019s home directory (see Fabric CA Server section more info).\n\n\n\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u901a\u8fc7 \n-c\n \u6216\u8005 \n--config\n \u9009\u9879\u6765\u6307\u5b9a\u3002\u5982\u679c \n--config\n \u9009\u9879\u4f7f\u7528\u4e86\uff0c\u800c\u6307\u5b9a\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u9ed8\u8ba4\u7684\u914d\u7f6e\u6587\u4ef6\uff08\u5982\u4e0b\uff09\u4f1a\u5728\u6307\u5b9a\u7684\u4f4d\u7f6e\u88ab\u521b\u5efa\u3002\u7136\u800c\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\uff0c\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u4f1a\u5728 fabric-ca-server \u7684 home \u76ee\u5f55\u4e0b\u521b\u5efa\u3002\uff08\u53c2\u8003 \nFabric CA \u670d\u52a1\u7aef\n \u4e86\u89e3\u66f4\u591a\uff09\n\n\n# Server's listening port (default: 7054)\nport: 7054\n\n# Enables debug logging (default: false)\ndebug: false\n\n#############################################################################\n#  TLS section for the server's listening port\n#############################################################################\ntls:\n    # Enable TLS (default: false)\n    enabled: false\n    certfile: ca-cert.pem\n    keyfile: ca-key.pem\n\n#############################################################################\n#  The CA section contains the key and certificate files used when\n#  issuing enrollment certificates (ECerts) and transaction\n#  certificates (TCerts).\n#############################################################################\nca:\n    # Certificate file (default: ca-cert.pem)\n    certfile: ca-cert.pem\n    # Key file (default: ca-key.pem)\n    keyfile: ca-key.pem\n\n#############################################################################\n#  The registry section controls how the Fabric CA server does two things:\n#  1) authenticates enrollment requests which contain identity name and\n#     password (also known as enrollment ID and secret).\n#  2) once authenticated, retrieves the identity's attribute names and\n#     values which the Fabric CA server optionally puts into TCerts\n#     which it issues for transacting on the Hyperledger Fabric blockchain.\n#     These attributes are useful for making access control decisions in\n#     chaincode.\n#  There are two main configuration options:\n#  1) The Fabric CA server is the registry\n#  2) An LDAP server is the registry, in which case the Fabric CA server\n#     calls the LDAP server to perform these tasks.\n#############################################################################\nregistry:\n    # Maximum number of times a password/secret can be reused for enrollment\n    # (default: 0, which means there is no limit)\n    maxEnrollments: 0\n\n    # Contains identity information which is used when LDAP is disabled\n    identities:\n        - name: \nADMIN\n\n        pass: \nADMINPW\n\n        type: client\n        affiliation: \"\"\n        attrs:\n            hf.Registrar.Roles: \"client,user,peer,validator,auditor,ca\"\n            hf.Registrar.DelegateRoles: \"client,user,validator,auditor\"\n            hf.Revoker: true\n            hf.IntermediateCA: true\n\n#############################################################################\n#  Database section\n#  Supported types are: \"sqlite3\", \"postgres\", and \"mysql\".\n#  The datasource value depends on the type.\n#  If the type is \"sqlite3\", the datasource value is a file name to use\n#  as the database store.  Since \"sqlite3\" is an embedded database, it\n#  may not be used if you want to run the Fabric CA server in a cluster.\n#  To run the Fabric CA server in a cluster, you must choose \"postgres\"\n#  or \"mysql\".\n#############################################################################\ndb:\n    type: sqlite3\n    datasource: fabric-ca-server.db\n    tls:\n        enabled: false\n        certfiles:\n            - db-server-cert.pem\n        client:\n            certfile: db-client-cert.pem\n            keyfile: db-client-key.pem\n\n#############################################################################\n#  LDAP section\n#  If LDAP is enabled, the Fabric CA server calls LDAP to:\n#  1) authenticate enrollment ID and secret (i.e. identity name and password)\n#     for enrollment requests\n#  2) To retrieve identity attributes\n#############################################################################\nldap:\n    # Enables or disables the LDAP client (default: false)\n    enabled: false\n    # The URL of the LDAP server\n    url: ldap://\nadminDN\n:\nadminPassword\n@\nhost\n:\nport\n/\nbase\n\n    tls:\n        certfiles:\n            - ldap-server-cert.pem\n        client:\n            certfile: ldap-client-cert.pem\n            keyfile: ldap-client-key.pem\n\n#############################################################################\n#  Affiliation section\n#############################################################################\naffiliations:\n    org1:\n        - department1\n        - department2\n    org2:\n        - department1\n\n#############################################################################\n#  Signing section\n#############################################################################\nsigning:\n    profiles:\n        ca:\n            usage:\n            - cert sign\n            expiry: 8000h\n            caconstraint:\n            isca: true\n    default:\n        usage:\n            - cert sign\n        expiry: 8000h\n\n###########################################################################\n#  Certificate Signing Request section for generating the CA certificate\n###########################################################################\ncsr:\n    cn: fabric-ca-server\n    names:\n        - C: US\n            ST: North Carolina\n            L:\n            O: Hyperledger\n            OU: Fabric\n    hosts:\n        - \nMYHOST\n\n    ca:\n        pathlen:\n        pathlenzero:\n        expiry:\n\n#############################################################################\n#  Crypto section configures the crypto primitives used for all\n#############################################################################\ncrypto:\n    software:\n        hash_family: SHA2\n        security_level: 256\n        ephemeral: false\n        key_store_dir: keys\n\n\n\nFabric CA \u5ba2\u6237\u7aef\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f\n\n\nA configuration file can be provided to the client using the -c or \nconfig option. If the config option is used and the specified file doesn\u2019t exist, a default configuration file (like the one shown below) will be created in the specified location. However, if no config option was used, it will be created in the client\u2019s home directory (see Fabric CA Client section more info).\n\n\n\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u901a\u8fc7 \n-c\n \u6216\u8005 \n--config\n \u9009\u9879\u6765\u6307\u5b9a\u3002\u5982\u679c \n--config\n \u9009\u9879\u4f7f\u7528\u4e86\uff0c\u800c\u6307\u5b9a\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u9ed8\u8ba4\u7684\u914d\u7f6e\u6587\u4ef6\uff08\u5982\u4e0b\uff09\u4f1a\u5728\u6307\u5b9a\u7684\u4f4d\u7f6e\u88ab\u521b\u5efa\u3002\u7136\u800c\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\uff0c\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u4f1a\u5728 fabric-ca-client \u7684 home \u76ee\u5f55\u4e0b\u521b\u5efa\u3002\uff08\u53c2\u8003 \nFabric CA \u5ba2\u6237\u7aef\n \u4e86\u89e3\u66f4\u591a\uff09\n\n\n#############################################################################\n# Client Configuration\n#############################################################################\n\n# URL of the fabric-ca-server (default: http://localhost:7054)\nURL: http://localhost:7054\n\n# Membership Service Provider (MSP) directory\n# When the client is used to enroll a peer or an orderer, this field must be\n# set to the MSP directory of the peer/orderer\nMSPDir:\n\n#############################################################################\n#    TLS section for secure socket connection\n#############################################################################\ntls:\n    # Enable TLS (default: false)\n    enabled: false\n    certfiles:   # Comma Separated (e.g. root.pem, root2.pem)\n    client:\n        certfile:\n        keyfile:\n\n#############################################################################\n#  Certificate Signing Request section for generating the CSR for\n#  an enrollment certificate (ECert)\n#############################################################################\ncsr:\n    cn: \nENROLLMENT_ID\n\n    names:\n        - C: US\n        ST: North Carolina\n        L:\n        O: Hyperledger\n        OU: Fabric\n    hosts:\n    - \nMYHOST\n\n    ca:\n        pathlen:\n        pathlenzero:\n        expiry:\n\n#############################################################################\n#  Registration section used to register a new user with fabric-ca server\n#############################################################################\nid:\n    name:\n    type:\n    affiliation:\n    attrs:\n        - name:\n        value:\n\n#############################################################################\n#  Enrollment section used to enroll a user with fabric-ca server\n#############################################################################\nenrollment:\n    hosts:\n    profile:\n    label:\n\n\n\n\u914d\u7f6e\u4f18\u5148\u7ea7\u8bf4\u660e\n\n\nThe Fabric CA provides 3 ways to configure settings on the Fabric CA server and client. The precedence order is:\n\n\n\n\nCLI flags\n\n\nEnvironment variables\n\n\nConfiguration file\n\n\n\n\nIn the remainder of this document, we refer to making changes to configuration files. However, configuration file changes can be overridden through environment variables or CLI flags.\n\n\nFor example, if we have the following in the client configuration file:\n\n\nFabric CA \u63d0\u4f9b3\u79cd\u65b9\u5f0f\u6765\u914d\u7f6e fabric-ca-server \u548c fabric-ca-client \u3002\u4f18\u5148\u7ea7\u5982\u4e0b\uff1a\n\n\n\n\n\u547d\u4ee4\u884c\u53c2\u6570\n\n\n\u73af\u5883\u53d8\u91cf\n\n\n\u914d\u7f6e\u6587\u4ef6\n\n\n\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8bd5\u7740\u5bf9\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u4fee\u6539\u3002\u914d\u7f6e\u6587\u4ef6\u7684\u4fee\u6539\u53ef\u4ee5\u88ab\u73af\u5883\u53d8\u91cf\u6216\u8005\u547d\u4ee4\u884c\u53c2\u6570\u8986\u76d6\u3002\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4ee5\u4e0b\u5ba2\u6237\u7aef\u7684\u914d\u7f6e\u6587\u4ef6\uff1a\n\n\ntls:\n    # Enable TLS (default: false)\n    enabled: false\n\n    # TLS for the client's listenting port (default: false)\n    certfiles:   # Comma Separated (e.g. root.pem, root2.pem)\n    client:\n        certfile: cert.pem\n        keyfile:\n\n\n\nThe following environment variable may be used to override the cert.pem setting in the configuration file:\n\n\nexport FABRIC_CA_CLIENT_TLS_CLIENT_CERTFILE=cert2.pem\n\n\nIf we wanted to override both the environment variable and configuration file, we can use a command line flag.\n\n\nfabric-ca-client enroll --tls.client.certfile cert3.pem\n\n\nThe same approach applies to fabric-ca-server, except instead of using FABIRC_CA_CLIENT as the prefix to environment variables, FABRIC_CA_SERVER is used.\n\n\n\u53ef\u4ee5\u7528\u4ee5\u4e0b\u73af\u5883\u53d8\u91cf\u6765\u8986\u76d6\u914d\u7f6e\u6587\u4ef6\u4e2d \ncert.pem\n \u7684\u914d\u7f6e\n\n\nexport FABRIC_CA_CLIENT_TLS_CLIENT_CERTFILE=cert2.pem\n\n\n\u5982\u679c\u6211\u4eec\u60f3\u540c\u65f6\u8986\u76d6\u73af\u5883\u53d8\u91cf\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\n\n\nfabric-ca-client enroll --tls.client.certfile cert3.pem\n\n\n\u4ee5\u4e0a\u65b9\u6cd5\u5bf9fabric-ca-server\u540c\u6837\u9002\u7528\uff0c\u533a\u522b\u662f\u5728\u73af\u5883\u53d8\u91cf\u7684\u524d\u7f00\uff0c\u628a\nFABIRC_CA_CLIENT\n\u66ff\u6362\u4e3a\nFABRIC_CA_SERVER\n\u3002\n\n\n\u5173\u4e8e\u8def\u5f84\u7684\u4e00\u4e9b\u8bf4\u660e\n\n\nAll the properties in the Fabric CA server and client configuration file, that specify file names support both relative and absolute paths. Relative paths are relative to the config directory, where the configuration file is located. For example, if the config directory is ~/config and the tls section is as shown below, the Fabric CA server or client will look for the root.pem file in the ~/config directory, cert.pem file in the ~/config/certs directory and the key.pem file in the /abs/path directory\n\n\nfabric-ca-server \u548c fabirc-ca-client \u7684\u914d\u7f6e\u6587\u4ef6\u91cc\u7684\u6240\u6709\u5c5e\u6027\u90fd\u652f\u6301\u76f8\u5bf9\u8def\u5f84\u548c\u7edd\u5bf9\u8def\u5f84\u3002\u76f8\u5bf9\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e\u914d\u7f6e\u76ee\u5f55\uff0c\u5373\u914d\u7f6e\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\u3002\u6bd4\u5982\uff0c\u5982\u679c\u914d\u7f6e\u76ee\u5f55\u662f \n~/config\n \uff0c\u800c tls \u90e8\u5206\u7684\u914d\u7f6e\u5982\u4e0b\u6240\u793a\uff0c\u90a3\u4e48Fabric CA \u670d\u52a1\u7aef\u6216\u8005\u5ba2\u6237\u7aef\u4f1a\u5728 \n~/config\n \u76ee\u5f55\u4e0b\u67e5\u627e \nroot.pem\n \uff0c\u5728 \n~/config\uff0fcerts\n \u4e0b\u67e5\u627e \ncert.pem\n \uff0c\u5728 \n/abs/path\n \u76ee\u5f55\u4e0b\u67e5\u627e \nkey.pem\n\n\ntls:\n    enabled: true\n    certfiles:   root.pem\n    client:\n        certfile: certs/cert.pem\n        keyfile: /abs/path/key.pem\n\n\n\nFabric CA \u670d\u52a1\u7aef\n\n\nThis section describes the Fabric CA server.\n\n\nYou may initialize the Fabric CA server before starting it. This provides an opportunity for you to generate a default configuration file but to review and customize its settings before starting it.\n\n\nThe Fabric CA server\u2019s home directory is determined as follows:\n- if the FABRIC_CA_SERVER_HOME environment variable is set, use its value;\n- otherwise, if FABRIC_CA_HOME environment variable is set, use its value;\n- otherwise, if the CA_CFG_PATH environment variable is set, use its value;\n- otherwise, use current working directory.\n\n\nFor the remainder of this server section, we assume that you have set the FABRIC_CA_HOME environment variable to $HOME/fabric-ca/server.\n\n\nThe instructions below assume that the server configuration file exists in the server\u2019s home directory.\n\n\n\u8fd9\u4e00\u90e8\u5206\u8bf4\u660eFabric CA\u670d\u52a1\u7aef\u3002\n\n\n\u5728\u542f\u52a8Fabric CA\u670d\u52a1\u7aef\u4e4b\u524d\uff0c\u4f60\u53ef\u4ee5\u5148\u521d\u59cb\u5316Fabric CA\u670d\u52a1\u7aef\u3002\u901a\u8fc7\u521d\u59cb\u5316\uff0c\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4efd\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\uff0c\u65b9\u4fbf\u7528\u6237\u5728\u542f\u52a8\u524d\u81ea\u884c\u4fee\u6539\u4e00\u4e9b\u914d\u7f6e\u9879\u3002\n\n\nFabric CA\u670d\u52a1\u7aef\u7684\u6839\u76ee\u5f55\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u51b3\u5b9a\uff1a\n- \u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf \nFABRIC_CA_SERVER_HOME\n \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c\n- \u5426\u5219\uff0c\u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf \nFABRIC_CA_HOME\n \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c\n- \u5426\u5219\uff0c\u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf \nCA_CFG_PATH\n \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c\n- \u5426\u5219\uff0c\u4f7f\u7528\u5f53\u524d\u7684\u5de5\u4f5c\u76ee\u5f55\u4f5c\u4e3a\u6839\u76ee\u5f55\n\n\n\u672c\u7ae0\u63a5\u4e0b\u6765\u7684\u90e8\u5206\uff0c\u6211\u4eec\u5047\u8bbe\u4f60\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u73af\u5883\u53d8\u91cf \nFABRIC_CA_HOME\n \uff0c\u5e76\u4e14\u503c\u8bbe\u7f6e\u4e3a \n$HOME/fabric-ca/server\n\u3002\n\n\n\u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u90fd\u9ed8\u8ba4\u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\u5b58\u5728\u4e8e\u670d\u52a1\u7aef\u6839\u76ee\u5f55\u4e0b\u3002\n\n\n\u521d\u59cb\u5316\u670d\u52a1\u7aef\n\n\n\u7528\u4ee5\u4e0b\u547d\u4ee4\u521d\u59cb\u5316Fabric CA\u670d\u52a1\u7aef\n\n\n# fabric-ca-server init -b admin:adminpw\n\n\n\nThe \n-b\n (bootstrap identity) option is required for initialization. At least one bootstrap identity is required to start the Fabric CA server. The server configuration file contains a Certificate Signing Request (CSR) section that can be configured. The following is a sample CSR.\n\n\n\u521d\u59cb\u5316\u65f6\u5fc5\u987b\u63d0\u4f9b \n-b\n (bootstrap identity: \u5f15\u5bfc\u8eab\u4efd) \u9009\u9879\u3002\u542f\u52a8\u670d\u52a1\u7aef\u65f6\uff0c\u81f3\u5c11\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u5f15\u5bfc\u8eab\u4efd\u3002\u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\u5305\u542b\u4e00\u4e2a\u53ef\u4ee5\u914d\u7f6e\u7684\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42 (Certificate Signing Request, CSR) \u90e8\u5206\u3002\u4e0b\u9762\u662f\u4e00\u4e2aCSR\u7684\u4f8b\u5b50\u3002\n\n\nIf you are going to connect to the Fabric CA server remotely over TLS, replace \u201clocalhost\u201d in the CSR section below with the hostname where you will be running your Fabric CA server.\n\n\n\u5982\u679c\u4f60\u60f3\u901a\u8fc7TLS\u8fdc\u7a0b\u8fde\u63a5Fabric CA\u670d\u52a1\u7aef\uff0c\u628a\u4e0b\u9762\u7684CSR\u914d\u7f6e\u5185\u5bb9\u4e2d\u7684\nlocalhost\n\u66ff\u6362\u6210\u4f60\u5c06\u4f1a\u8fd0\u884cFabric CA\u670d\u52a1\u7aef\u7684\u57df\u540d\u3002\n\n\ncn: localhost\nkey:\n    algo: ecdsa\n    size: 256\nnames:\n- C: US\n    ST: \"North Carolina\"\n    L:\n    O: Hyperledger\n    OU: Fabric\n\n\n\nAll of the fields above pertain to the X.509 signing key and certificate which is generated by the \nfabric-ca-server\n init. This corresponds to the \nca.certfile\n and \nca.keyfile\n files in the server\u2019s configuration file. The fields are as follows:\n\n\n\n\ncn is the Common Name\n\n\nkey specifies the algorithm and key size as described below\n\n\nO is the organization name\n\n\nOU is the organizational unit\n\n\nL is the location or city\n\n\nST is the state\n\n\nC is the country\n\n\n\n\n\u4e0a\u9762\u6240\u6709\u7684\u5b57\u6bb5\u90fd\b\u7b26\u5408X.509\u7b7e\u540d\u4e0e\u8bc1\u4e66\u89c4\u8303\uff0c\u53ef\u4ee5\u7531\nfabric-ca-server\n init\u547d\u4ee4\u6765\u751f\u6210\u3002\u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\u4e2d\u63d0\u5230\u7684\nca.certfile\n\u548c\nca.keyfile\n\u8fd9\u4e24\u4e2a\u6587\u4ef6\u4e5f\u7b26\u5408X.509\u89c4\u8303\u3002\u5b57\u6bb5\u5982\u4e0b\uff1a\n\n\n\n\ncn \u901a\u7528\u540d\n\n\nkey \u6307\u660e\u7b97\u6cd5\u548c\u5bc6\u94a5\u957f\u5ea6\n\n\nO \u7ec4\u7ec7\n\n\nOU \u7ec4\u7ec7\u5355\u4f4d\n\n\nL \u5730\u5740\u6216\u57ce\u5e02\n\n\nST \u5dde\uff08\u7701\uff09\n\n\nC \u56fd\u5bb6\n\n\n\n\nIf custom values for the CSR are required, you may customize the configuration file, delete the files specified by the ca.certfile and ca-keyfile configuration items, and then run the fabric-ca-server init -b admin:adminpw command again.\n\n\n\u5982\u679c\b\u9700\u8981\u4fee\u6539CSR\u91cc\u9762\u7684\u503c\uff0c\u4f60\u53ef\u4ee5\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\uff0c\u7136\u540e\u628a\u914d\u7f6e\u4e2d\u7531\nca.certfile\n\u548c\nca\b.keyfile\n\u8fd9\u4e24\u9879\u6307\u660e\u7684\u6587\u4ef6\u5220\u9664\u3002\u7136\u540e\u518d\u8fd0\u884c\u4e00\u6b21 \nfabric-ca-server init -b admin:adminpw\n \u547d\u4ee4\u3002\n\n\nThe \nfabric-ca-server init\n command generates a self-signed CA certificate unless the \n-u \\\nparent-fabric-ca-server-URL\\\n option is specified. If the \n-u\n is specified, the server\u2019s CA certificate is signed by the parent Fabric CA server. The \nfabric-ca-server init\n command also generates a default configuration file named fabric-ca-server-config.yaml in the server\u2019s home directory.\n\n\nfabirc-ca-server init\n \u547d\u4ee4\u751f\u6210\u4e00\u4e2a\u81ea\u7b7e\u540d\u7684CA\u8bc1\u4e66\uff0c\u9664\u975e\u4f7f\u7528\u4e86 \n-u \nparent-fabric-ca-server-URL\n \u9009\u9879\u3002\u5982\u679c\u4f7f\u7528\u4e86 \n-u\n \u9009\u9879\uff0c\u672c\u670d\u52a1\u7aefCA\u8bc1\u4e66\u4f1a\u7531\u7236Fabric CA\u670d\u52a1\u7aef\u7b7e\u540d\u3002\nfabirc-ca-server init\n \u547d\u4ee4\u540c\u65f6\u4e5f\u4f1a\u5728\u670d\u52a1\u7aef\u7684\u6839\u76ee\u5f55\u751f\u6210\u4e00\u4e2a\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\nfabric-ca-server-config.yaml\n\u3002\n\n\n\u7b97\u6cd5\u548c\u5bc6\u94a5\u957f\u5ea6\n\n\nThe CSR can be customized to generate X.509 certificates and keys that support both RSA and Elliptic Curve (ECDSA). The following setting is an example of the implementation of Elliptic Curve Digital Signature Algorithm (ECDSA) with curve prime256v1 and signature algorithm ecdsa-with-SHA256:\n\n\n\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49CSR\u6765\u751f\u6210\u652f\u6301ECDSA\u548cRSA\u7684X.509\u8bc1\u4e66\u548c\u5bc6\u94a5\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u692d\u5706\u66f2\u7ebf\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5\uff08\bECDSA\uff09\u7684\u8bbe\u7f6e\uff0c\u91c7\u7528\u7684\u66f2\u7ebf\u662f\nprime256v1\n\uff0c\u7b7e\u540d\u7b97\u6cd5\u662f\necdsa-with-SHA256\n\u3002\n\n\nkey:\n    algo: ecdsa\n    size: 256\n\n\n\n\u5bf9\u7b97\u6cd5\u548c\u5bc6\u94a5\u957f\u5ea6\u7684\u9009\u62e9\u53d6\u51b3\u4e8e\u4f60\u5bf9\u5b89\u5168\u7684\u8003\u91cf\u3002\n\n\nECDSA\u63d0\u4f9b\u4ee5\u4e0b\u9009\u9879\uff1a\n\n\n\n\n\n\n\n\nsize\n\n\nASN1 OID\n\n\nSignature Algorithm\n\n\n\n\n\n\n\n\n\n\n256\n\n\nprime256v1\n\n\necdsa-with-SHA256\n\n\n\n\n\n\n384\n\n\nsecp384r1\n\n\necdsa-with-SHA384\n\n\n\n\n\n\n521\n\n\nsecp384r1\n\n\necdsa-with-SHA521\n\n\n\n\n\n\n\n\nRSA\u63d0\u4f9b\u4ee5\u4e0b\u9009\u9879\uff1a\n\n\n\n\n\n\n\n\nsize\n\n\nModulus (bits)\n\n\nSignature Algorithm\n\n\n\n\n\n\n\n\n\n\n2048\n\n\n2048\n\n\nsha256WithRSAEncryption\n\n\n\n\n\n\n4096\n\n\n2096\n\n\nsha512WithRSAEncryption\n\n\n\n\n\n\n\n\n\u542f\u52a8\u670d\u52a1\u7aef\n\n\n\u542f\u52a8Fabric CA\u670d\u52a1\u5668\uff1a\n\n\n# fabric-ca-server start -b \nadmin\n:\nadminpw\n\n\n\n\nIf the server has not been previously initialized, it will initialize itself as it starts for the first time. During this initialization, the server will generate the ca-cert.pem and ca-key.pem files if they don\u2019t yet exist and will also create a default configuration file if it does not exist. See the \nInitialize the Fabric CA server\n section.\n\n\n\u5982\u679c\u670d\u52a1\u5668\u4e4b\u524d\u6ca1\u6709\u521d\u59cb\u5316\u8fc7\uff0c\u5b83\u4f1a\u5728\u7b2c\u4e00\u6b21\u542f\u52a8\u7684\u65f6\u5019\u8fdb\u884c\u521d\u59cb\u5316\u3002\u5728\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\b\u4e2d\uff0c\u5b83\u4f1a\u5982\u679cca-cert.pem\u548cca-key.pem\u8fd9\u4e24\u4e2a\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5b83\u4f1a\u751f\u6210\u8fd9\u4e24\u4e2a\u6587\u4ef6\uff1b\u5982\u679c\u914d\u7f6e\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5b83\u4f1a\u751f\u6210\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u3002\u53c2\u8003\n\u521d\u59cb\u5316\u670d\u52a1\u7aef\n\u3002\n\n\nUnless the Fabric CA server is configured to use LDAP, it must be configured with at least one pre-registered bootstrap identity to enable you to register and enroll other identities. The \n-b\n option specifies the name and password for a bootstrap identity.\n\n\n\u9664\u975eFabric CA\u670d\u52a1\u7aef\u914d\u7f6e\u4e86\u4f7f\u7528LDAP\uff0c\u5426\u5219\u5b83\u5fc5\u987b\u914d\u7f6e\u81f3\u5c11\u4e00\u4e2a\u9884\u6ce8\u518c\u5f15\u5bfc\u8eab\u4efd\u6765\u5141\u8bb8\u4f60\u767b\u5f55\u5176\u4ed6\u8eab\u4efd\u3002\n-b\n\u9009\u9879\u6307\u660e\u5f15\u5bfc\u8eab\u4efd\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002\b\n\n\nA different configuration file may be specified with the -c option as shown below.\n\n\n\b\u53ef\u4ee5\u901a\u8fc7\n-c\n\u9009\u9879\u6765\u6307\u660e\u5176\u4ed6\u7684\u914d\u7f6e\u6587\u4ef6\u3002\n\n\n# fabric-ca-server start -c \npath-to-config-file\n -b \nadmin\n:\nadminpw\n\n\n\n\nTo cause the Fabric CA server to listen on https rather than http, set tls.enabled to true.\n\n\n\u4e3a\u4e86\u4f7ffabric ca server\u76d1\u542c\nhttps\n\u800c\u4e0d\u662f\nhttp\n\uff0c\u914d\u7f6e\ntls.enabled\n\u4e3a\ntrue\n\u3002\n\n\nTo limit the number of times that the same secret (or password) can be used for enrollment, set the \nregistry.maxEnrollments\n in the configuration file to the appropriate value. If you set the value to 1, the Fabric CA server allows passwords to only be used once for a particular enrollment ID. If you set the value to 0, the Fabric CA server places no limit on the number of times that a secret can be reused for enrollment. The default value is 0.\n\n\n\b\u4e3a\u4e86\u9650\u5236\u767b\u5f55\u65f6\u76f8\u540c\u5bc6\u7801\u7684\u6b21\u6570\uff0c\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bbe\u7f6e\nregistry.maxEnrollments\n\u4e3a\u6070\u5f53\u7684\u503c\u3002\u5982\u679c\u4f60\u8bbe\u7f6e\u8fd9\u4e2a\u503c\u4e3a1\uff0cFabric CA\u670d\u52a1\u7aef\u53ea\u5141\u8bb8\u4e00\u4e2a\u5bc6\u7801\u88ab\u4e00\u4e2a\u767b\u5f55ID\u4f7f\u7528\uff08\u5373\u4e0d\u4f1a\u51fa\u73b0\u591a\u4e2aID\u6709\u76f8\u540c\u7684\u5bc6\u7801\uff09\u3002\u5982\u679c\u4f60\u8bbe\u7f6e\u8fd9\u4e2a\u503c\u4e3a0\uff0cFabric CA\u670d\u52a1\u7aef\u4e0d\u4f1a\u9650\u5236\u5bc6\u7801\u7684\u91cd\u590d\u4f7f\u7528\u6b21\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a0\u3002\n\n\nThe Fabric CA server should now be listening on port 7054.\n\n\nFabric CA\u670d\u52a1\u7aef\u73b0\u5728\u5e94\u8be5\u6b63\u5728\u76d1\u542c7054\u7aef\u53e3\u3002\n\n\nYou may skip to the Fabric CA Client section if you do not want to configure the Fabric CA server to run in a cluster or to use LDAP.\n\n\n\u5982\u679c\u4f60\u4e0d\u60f3\u914d\u7f6eFabric CA\u670d\u52a1\u7aef\u96c6\u7fa4\uff0c\u4e5f\u4e0d\u60f3\u4f7f\u7528LDAP\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u8df3\u5230\nFabric CA \u5ba2\u6237\u7aef\n\u8fd9\u4e00\u7ae0\u8282\u3002\n\n\n\u914d\u7f6e\u6570\u636e\u5e93\n\n\nThis section describes how to configure the Fabric CA server to connect to Postgres or MySQL databases. The default database is SQLite and the default database file is \nfabric-ca-server.db\n in the Fabric CA server\u2019s home directory.\n\n\n\u8fd9\u4e00\u90e8\u5206\u8bb2\u89e3\u5982\u4f55\u914d\u7f6eFabric CA\u670d\u52a1\u7aef\u8fde\u63a5\u5230Postgres\u6216\u8005MySQL\u3002\u9ed8\u8ba4\u7684\u6570\u636e\u5e93\u662fSQLite\uff0c\u9ed8\u8ba4\u7684\u6570\u636e\u5e93\u6587\u4ef6\u662f\nfabric-ca-server.db\n\uff0c\u5b58\u653e\u5728Fabric CA\u670d\u52a1\u7aef\u7684\u6839\u76ee\u5f55\u3002\n\n\nIf you don\u2019t care about running the Fabric CA server in a cluster, you may skip this section; otherwise, you must configure either Postgres or MySQL as described below.\n\n\n\u5982\u679c\u4f60\u4e0d\u60f3\u8fd0\u884cFabric CA\u670d\u52a1\u7aef\u96c6\u7fa4\uff0c\u4f60\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u7ae0\uff1b\u4e0d\u7136\u7684\u8bdd\u4f60\u53ef\u4ee5\u7167\u4e0b\u9762\u7684\u6307\u5f15\u914d\u7f6ePostgres\u6216\u8005MySQL\u3002\n\n\nPostgres\n\n\nThe following sample may be added to the server\u2019s configuration file in order to connect to a Postgres database. Be sure to customize the various values appropriately.\n\n\n\u4e0b\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u6dfb\u52a0\u5230\u670d\u52a1\u7aef\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u6765\u4f7f\u670d\u52a1\u7aef\u8fde\u63a5\u5230\u4e00\u4e2aPostgres\u6570\u636e\u5e93\u3002\u522b\u5fd8\u4e86\u6b63\u786e\u5730\u81ea\u5b9a\u4e49\u5404\u79cd\u53c2\u6570\u3002\n\n\ndb:\n    type: postgres\n    datasource: host=localhost port=5432 user=Username password=Password dbname=fabric-ca-server sslmode=verify-full\n\n\n\nSpecifying sslmode configures the type of SSL authentication. Valid values for sslmode are:\n\n\n\u6307\u5b9asslmode\u6765\u914d\u7f6e\bSSL\u8ba4\u8bc1\u7684\u7c7b\u578b\u3002sslmode\u6709\u6548\u7684\u503c\u4e3a\uff1a\n\n\nIf you would like to use TLS, then the db.tls section in the Fabric CA server configuration file must be specified. If SSL client authentication is enabled on the Postgres server, then the client certificate and key file must also be specified in the db.tls.client section. The following is an example of the db.tls section:\n\n\n\u5982\u679c\u4f60\u60f3\u4f7f\u7528TLS\uff0c\u90a3\u4e48\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u660e\ndb.tls\n\u8fd9\u4e00\u90e8\u5206\u3002\u5982\u679cPostgres\u670d\u52a1\u5668\u5f00\u542f\u4e86SSL\u5ba2\u6237\u7aef\u8ba4\u8bc1\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u7684\u8bc1\u4e66\u548c\u5bc6\u94a5\u6587\u4ef6\u5fc5\u987b\u5728\ndb.tls.client\n\u8fd9\u4e00\u90e8\u5206\u6307\u660e\u3002\u4e0b\u9762\u662f\ndb.tls\n\u90e8\u5206\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a\n\n\ndb:\n    ...\n    tls:\n        enabled: true\n        certfiles:\n            - db-server-cert.pem\n        client:\n                certfile: db-client-cert.pem\n                keyfile: db-client-key.pem\n\n\n\ncertfiles\n - A list of PEM-encoded trusted root certificate files.\n\n\ncertfile\n and \nkeyfile\n - PEM-encoded certificate and key files that are used by the Fabric CA server to communicate securely with the Postgres server\n\n\ncertfiles\n - \u53ef\u4fe1\u4efb\u7684\u6839\u8bc1\u4e66\u6587\u4ef6\u5217\u8868\uff0c\u91c7\u7528PEM\u7f16\u7801\n\n\ncertfile\n and \nkeyfile\n - \u7528\u4e8e\u4e0ePostgres\u670d\u52a1\u5668\u5b89\u5168\u901a\u4fe1\u7684\u8bc1\u4e66\u548c\u5bc6\u94a5\u6587\u4ef6\uff0c\u91c7\u7528PEM\u7f16\u7801\n\n\nMySQL\n\n\nThe following sample may be added to the Fabric CA server configuration file in order to connect to a MySQL database. Be sure to customize the various values appropriately.\n\n\n\u4e0b\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u6dfb\u52a0\u5230\bFabric CA\u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\uff0c\u7528\u6765\u8fde\u63a5\u5230MySQL\u6570\u636e\u5e93\u3002\u522b\u5fd8\u4e86\u6b63\u786e\u5730\u81ea\u5b9a\u4e49\u5404\u79cd\u53c2\u6570\u3002\n\n\ndb:\n    type: mysql\n    datasource: root:rootpw@tcp(localhost:3306)/fabric-ca?parseTime=true\ntls=custom\n\n\n\nIf connecting over TLS to the MySQL server, the db.tls.client section is also required as described in the Postgres section above.\n\n\n\u5982\u679c\u8981\u4f7f\u7528TLS\uff0c\u9700\u8981\u914d\u7f6e\ndb.tls.client\n\u90e8\u5206\uff0c\u53c2\u8003Postgres\u90e8\u5206\u3002\n\n\n\u914d\u7f6eLDAP\n\n\nThe Fabric CA server can be configured to read from an LDAP server.\n\n\nIn particular, the Fabric CA server may connect to an LDAP server to do the following:\n\n\n\n\nauthenticate an identity prior to enrollment\n\n\nretrieve an identity\u2019s attribute values which are used for authorization.\n\n\n\n\nModify the LDAP section of the Fabric CA server\u2019s configuration file to configure the server to connect to an LDAP server.\n\n\nFabric CA\u670d\u52a1\u7aef\u53ef\u4ee5\u914d\u7f6e\u4e3a\u8fde\u63a5\u5230\u4e00\u4e2aLDAP\u670d\u52a1\u5668\u3002\n\n\n\u7279\u522b\u5730\uff0c\bFabric CA\u670d\u52a1\u7aef\u53ef\u4ee5\u8fde\u63a5\u5230\u4e00\u4e2aLDAP\u670d\u52a1\u5668\u6765\u505a\u4e0b\u9762\u7684\u4e8b\u60c5\uff1a\n\n\n\n\n\u767b\u5f55\u524d\u9a8c\u8bc1\u4e00\u4e2a\u8eab\u4efd\n\n\n\u6388\u6743\u65f6\u83b7\u53d6\u4e00\u4e2a\u8eab\u4efd\u7684\b\u5c5e\u6027\u503c\n\n\n\n\n\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u4fee\u6539LDAP\u7684\u914d\u7f6e\u6765\u8fde\u63a5\u5230\u4e00\u4e2aLDAP\u670d\u52a1\u5668\u3002\n\n\nldap:\n    # Enables or disables the LDAP client (default: false)\n    enabled: false\n    # The URL of the LDAP server\n    url: \nscheme\n://\nadminDN\n:\nadminPassword\n@\nhost\n:\nport\n/\nbase\n\n    userfilter: filter\n\n\n\nwhere:\n- scheme is one of ldap or ldaps;\n- adminDN is the distinquished name of the admin user;\n- pass is the password of the admin user;\n- host is the hostname or IP address of the LDAP server;\n- port is the optional port number, where default 389 for ldap and 636 for ldaps;\n- base is the optional root of the LDAP tree to use for searches;\n- filter is a filter to use when searching to convert a login user name to a distinquished name. For example, a value of (uid=%s) searches for LDAP entries with the value of a uid attribute whose value is the login user name. Similarly, (email=%s) may be used to login with an email address.\n\n\n\u5176\u4e2d\uff1a\n- scheme \bldap\u6216\u8005ldaps;\n- adminDN \u7ba1\u7406\u5458\u7684\u533a\u522b\u540d;\n- pass \u7ba1\u7406\u5458\u7684\u5bc6\u7801;\n- host LDAP\u670d\u52a1\u5668\u7684\u57df\u540d\u6216\u8005IP;\n- port \u53ef\u9009\u7684\u7aef\u53e3\u53f7\uff0cldap\u9ed8\u8ba4\u4e3a389\uff0cldaps\u9ed8\u8ba4\u4e3a636;\n- base \u53ef\u9009\u7684LDAP\u6811\u7684\u6839\uff0c\u7528\u4e8e\u641c\u7d22\u65f6;\n- filter \u641c\u7d22\u65f6\u7684\u8fc7\u6ee4\u5668\uff0c\u628a\u767b\u9646\u7528\u6237\u540d\u8f6c\u6362\u4e3a\u4e00\u4e2a\u533a\u522b\u540d\u3002\u6bd4\u5982\uff0c\uff08uid=%s\uff09\u4f1a\u641c\u7d22uid\u503c\u7b49\u4e8e\u7528\u6237\u767b\u5f55\u540d\u7684LDAP\u5b9e\u4f53\u3002\u7c7b\u4f3c\u5730\uff0c\uff08email=%s\uff09\u53ef\u4ee5\u7528\u4e8e\u90ae\u7bb1\u5730\u5740\u4f5c\u4e3a\b\u7528\u6237\u540d\u7684\u767b\u9646\u3002\n\n\nThe following is a sample configuration section for the default settings for the OpenLDAP server whose docker image is at \nhttps://github.com/osixia/docker-openldap\n.\n\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\b\u914d\u7f6e\u4f8b\u5b50\uff0c\u7528\u4e8eOpenLDAP\u7684\u9ed8\u8ba4\u8bbe\u7f6e\uff0cOpenLDAP\u7684docker\u955c\u50cf\u5728\nhttps://github.com/osixia/docker-openldap\n\u3002\n\n\nldap:\n    enabled: true\n    url: ldap://cn=admin,dc=example,dc=org:admin@localhost:10389/dc=example,dc=org\n    userfilter: (uid=%s)\n\n\n\nSee \nFABRIC_CA/scripts/run-ldap-tests\n for a script which starts an OpenLDAP docker image, configures it, runs the LDAP tests in \nFABRIC_CA/cli/server/ldap/ldap_test.go\n, and stops the OpenLDAP server.\n\n\n\u5728\nFABRIC_CA/scripts/run-ldap-tests\n\u6709\u4e00\u4e2a\u811a\u672c\uff0c\u8fd9\u4e2a\u811a\u672c\u80fd\u542f\u52a8OpenLDAP\u7684docker\u955c\u50cf\uff0c\u914d\u7f6e\u5b83\uff0c\u7136\u540e\u8fd0\u884c\nFABRIC_CA/cli/server/ldap/ldap_test.go\n\u91cc\u9762\u7684LDAP\b\u6d4b\u8bd5\uff0c\u6700\u540e\u505c\u6b62OpenLDAP\u670d\u52a1\u5668\u3002\n\n\nWhen LDAP is configured, enrollment works as follows:\n\n\n\n\nThe Fabric CA client or client SDK sends an enrollment request with a basic authorization header.\n\n\nThe Fabric CA server receives the enrollment request, decodes the identity name and password in the authorization header, looks up the DN (Distinquished Name) associated with the identity name using the \u201cuserfilter\u201d from the configuration file, and then attempts an LDAP bind with the identity\u2019s password. If the LDAP bind is successful, the enrollment processing is authorized and can proceed.\n\n\n\n\n\u5f53LDAP\u914d\u7f6e\u597d\u540e\uff0c\u767b\u5f55\u7684\u6d41\u7a0b\u5982\u4e0b\uff1a\n\n\n\n\nFabric CA\u5ba2\u6237\u7aef\u6216\u8005\u5ba2\u6237\u7aefSDK\u53d1\u9001\u4e00\u4e2a\u767b\u5f55\u8bf7\u6c42\uff0c\b\u5e26\u4e0abasic\u65b9\u5f0f\u7684\u6388\u6743\u5934\u3002\n\n\nFabric CA\u670d\u52a1\u7aef\u6536\u5230\u767b\u5f55\u8bf7\u6c42\uff0c\u89e3\u7801\b\u6388\u6743\u5934\u91cc\u7684\u8eab\u4efd\u540d\u548c\u5bc6\u7801\uff0c\u67e5\u627e\u4e0e\b\u8eab\u4efd\u540d\u76f8\u5173\u8054\u7684\u533a\u522b\u540d\uff0c\b\uff08\u5173\u8054\u65b9\u5f0f\u4e3a\u914d\u7f6e\u6587\u4ef6\u91cc\u7684\nuserfilter\n\u5b9a\u4e49\u7684\uff09\uff0c\u7136\u540e\u7528\u8eab\u4efd\u5bc6\u7801\u5c1d\u8bd5\u4e00\u4e2aLDAP\u7ed1\u5b9a\u3002\u5982\u679cLDAP\u7ed1\u5b9a\u6210\u529f\uff0c\b\u90a3\u4e48\u767b\u5f55\u8fc7\u7a0b\u88ab\u6279\u51c6\u4e86\uff0c\u80fd\u591f\u7ee7\u7eed\u3002\n\n\n\n\nWhen LDAP is configured, attribute retrieval works as follows:\n\n\n\n\nA client SDK sends a request for a batch of tcerts with one or more attributes to the Fabric CA server.\n\n\nThe Fabric CA server receives the tcert request and does as follows:\n\n\nextracts the enrollment ID from the token in the authorization header (after validating the token);\n\n\ndoes an LDAP search/query to the LDAP server, requesting all of the attribute names received in the tcert request;\n\n\nthe attribute values are placed in the tcert as normal.\n\n\n\n\n\u5f53LDAP\u914d\u7f6e\u597d\u4e86\uff0c\u5c5e\u6027\u8fd4\u56de\u7684\u6d41\u7a0b\u5982\u4e0b\uff1a\n\n\n\n\n\u5ba2\u6237\u7aefSDK\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u5c5e\u6027\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\u5230\u670d\u52a1\u7aef\b\uff0c\u8bf7\u6c42\u4e00\u6279tcerts\u3002\n\n\n\u670d\u52a1\u7aef\u6536\u5230tcert\u8bf7\u6c42\uff0c\u505a\u5982\u4e0b\u7684\u4e8b:\n\n\n\u5728\u6388\u6743\u5934\u53d6\u51fa\u767b\u5f55ID\uff08\u5728\u9a8c\u8bc1token\u540e\uff09;\n\n\n\u505a\u4e00\u6b21LDAP\u67e5\u8be2\uff0c\u5411\bLDAP\u670d\u52a1\u5668\u8bf7\u6c42tcert\u8bf7\u6c42\u4e2d\u7684\u6240\u6709\u7684\u5c5e\u6027\u540d;\n\n\n\u5c5e\u6027\u503c\u653e\u7f6e\u5728tcert\u4e2d\u3002\n\n\n\n\n\u6784\u5efa\u4e00\u4e2a\u96c6\u7fa4\n\n\nYou may use any IP sprayer to load balance to a cluster of Fabric CA servers. This section provides an example of how to set up Haproxy to route to a Fabric CA server cluster. Be sure to change hostname and port to reflect the settings of your Fabric CA servers.\n\n\n\u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u610fIP\u4ee3\u7406\u6765\u4e3aFabric CA\u670d\u52a1\u7aef\u96c6\u7fa4\u505a\u8d1f\u8f7d\u5747\u8861\u3002\u8fd9\u4e00\u8282\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f8b\u5b50\u6765\b\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Haproxy\u6765\u4e3a\b\u96c6\u7fa4\b\u8def\u7531\u3002\u522b\u5fd8\u4e86\u4fee\u6539\u57df\u540d\u548c\u7aef\u53e3\u3002\n\n\nhaproxy.conf\n\n\nglobal\n    maxconn 4096\n    daemon\n\ndefaults\n    mode http\n    maxconn 2000\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nlisten http-in\n    bind *:7054\n    balance roundrobin\n    server server1 hostname1:port\n    server server2 hostname2:port\n    server server3 hostname3:port\n\n\n\n\u6ce8\u610f\uff1a\u5982\u679c\u4f7f\u7528TLS\uff0c\u9700\u8981\u4f7f\u7528\nmode tcp\n\n\nFarbic CA \u5ba2\u6237\u7aef\n\n\nThis section describes how to use the fabric-ca-client command.\n\n\nThe Fabric CA client\u2019s home directory is determined as follows:\n\n\n\n\nif the \nFABRIC_CA_CLIENT_HOME\n environment variable is set, use its value;\n\n\notherwise, if the \nFABRIC_CA_HOME\n environment variable is set, use its value;\n\n\notherwise, if the \nCA_CFG_PATH\n environment variable is set, use its value;\n\n\notherwise, use \n$HOME/.fabric-ca-client\n.\n\n\n\n\nThe instructions below assume that the client configuration file exists in the client\u2019s home directory.\n\n\n\u8fd9\u4e00\u90e8\u5206\u8bb2\u89e3\u5982\u4f55\u4f7f\u7528fabric-ca-client\u7684\u547d\u4ee4\u3002\n\n\nFabric CA\u5ba2\u6237\u7aef\u7684\u6839\u76ee\u5f55\u5b9a\u4e49\u89c4\u5219\u5982\u4e0b\uff1a\n\n\n\n\n\u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf \nFABRIC_CA_CLIENT_HOME\n \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c\n\n\n\u5426\u5219\uff0c\u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf \nFABRIC_CA_HOME\n \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c\n\n\n\u5426\u5219\uff0c\u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf \nCA_CFG_PATH\n \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c\n\n\n\u5426\u5219\uff0c\u4f7f\u7528\n$HOME/.fabric-ca-client\n\n\n\n\n\u4e0b\u9762\u7684\u6307\u5f15\u5047\u8bbe\u5ba2\u6237\u7aef\u7684\u914d\u7f6e\u6587\u4ef6\u5b58\u5728\u4e8e\u5ba2\u6237\u7aef\u6839\u76ee\u5f55\u3002\n\n\n\u767b\u9646\u542f\u52a8\u7528\u6237\n\n\nFirst, if needed, customize the CSR (Certificate Signing Request) section in the client configuration file. Note that \ncsr.cn\n field must be set to the ID of the bootstrap identity. Default CSR values are shown below:\n\n\n\u9996\u5148\uff0c\u5982\u679c\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u81ea\u5b9a\u4e49CSR\uff08\b\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\uff09\uff0c\u6ce8\u610f\ncsr.cn\n\u5fc5\u987b\u8bbe\u7f6e\u4e3a\u5f15\u5bfc\u8eab\u4efd\u7684ID\u3002\u9ed8\u8ba4CSR\u5982\u4e0b\uff1a\n\n\ncsr:\n    cn: \nenrollment ID\n\n    key:\n        algo: ecdsa\n        size: 256\n    names:\n        - C: US\n        ST: North Carolina\n        L:\n        O: Hyperledger Fabric\n        OU: Fabric CA\n    hosts:\n    - \nhostname of the fabric-ca-client\n\n    ca:\n        pathlen:\n        pathlenzero:\n        expiry:\n\n\n\nSee CSR fields for description of the fields.\n\n\nThen run \nfabric-ca-client enroll\n command to enroll the identity. For example, following command enrolls an identity whose ID is admin and password is adminpw by calling Fabric CA server that is running locally at 7054 port.\n\n\n\u67e5\u770b\u5b57\u6bb5\u7684\u63cf\u8ff0\uff0c\nCSR fields\n\n\n\u7136\u540e\u8fd0\u884c\nfabric-ca-client enroll\n\u547d\u4ee4\u6765\u767b\u5f55\u4e00\u4e2a\u8eab\u4efd\u3002\u6bd4\u5982\uff0c\u4e0b\u9762\u7684\u547d\u4ee4\u5411\u4e00\u4e2a\u672c\u5730\u8fd0\u884c\u57287054\u7aef\u53e3\u7684Fabric CA\u670d\u52a1\u7aef\uff0c\u767b\u5f55\u4e86\u4e00\u4e2aID\u4e3aadmin\uff0cpassword\u4e3aadminpw\u7684\u8eab\u4efd\u3002\n\n\n# export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client enroll -u http://admin:adminpw@localhost:7054\n\n\n\nThe enroll command stores an enrollment certificate (ECert), corresponding private key and CA certificate chain PEM files in the subdirectories of the Fabric CA client\u2019s \nmsp\n directory. You will see messages indicating where the PEM files are stored.\n\n\n\u767b\u5f55\u547d\u4ee4\u4f1a\u5b58\u50a8\u4e00\u4e2a\u767b\u5f55\u8bc1\u4e66\uff08ECert\uff09\uff0c\u76f8\u5bf9\u5e94\u7684\u79c1\u94a5\uff0c\u8fd8\u6709CA\u8bc1\u4e66\u94fePEM\u6587\u4ef6\u3002\b\u8fd9\u4e9b\u5b58\u50a8\u5728Fabric CA\u5ba2\u6237\u7aef\u7684msp\u76ee\u5f55\u7684\u5b50\u76ee\u5f55\u4e0b\uff0c\u4f60\u4f1a\u770b\u5230\u4fe1\u606f\u63d0\u793aPEM\u5b58\u50a8\u5728\u54ea\u91cc\u3002\n\n\n\u6ce8\u518c\u4e00\u4e2a\u65b0\u7684\u8eab\u4efd\n\n\nThe identity performing the register request must be currently enrolled, and must also have the proper authority to register the type of the identity that is being registered.\n\n\n\u53ea\u6709\u5df2\u7ecf\u767b\u5f55\u4e86\u7684\u8eab\u4efd\u624d\u80fd\u53d1\u8d77\u6ce8\u518c\u7684\u8bf7\u6c42\uff0c\u800c\u4e14\u5fc5\u987b\u6709\u76f8\u5e94\u7684\u6743\u9650\u6765\u6ce8\u518c\u60f3\u8981\u6ce8\u518c\u7684\u8eab\u4efd\u7c7b\u578b\u3002\n\n\nIn particular, two authorization checks are made by the Fabric CA server during registration as follows:\n\n\n\n\nThe invoker\u2019s identity must have the \u201chf.Registrar.Roles\u201d attribute with a comma-separated list of values where one of the value equals the type of identity being registered; for example, if the invoker\u2019s identity has the \u201chf.Registrar.Roles\u201d attribute with a value of \u201cpeer,app,user\u201d, the invoker can register identities of type peer, app, and user, but not orderer.\n\n\nThe affiliation of the invoker\u2019s identity must be equal to or a prefix of the affiliation of the identity being registered. For example, an invoker with an affiliation of \u201ca.b\u201d may register an identity with an affiliation of \u201ca.b.c\u201d but may not register an identity with an affiliation of \u201ca.c\u201d.\n\n\n\n\nThe following command uses the admin identity\u2019s credentials to register a new identity with an enrollment id of \u201cadmin2\u201d, a type of \u201cuser\u201d, an affiliation of \u201corg1.department1\u201d, and an attribute named \u201chf.Revoker\u201d with a value of \u201ctrue\u201d.\n\n\n\u7279\u522b\u5730\uff0c\u6ce8\u518c\u65f6Fabric CA\u670d\u52a1\u7aef\u505a\u4e24\u9879\u6743\u9650\u68c0\u67e5\uff1a\n\n\n\n\n\u6ce8\u518c\u53d1\u8d77\u8005\u7684\u201c\bhf.Registrar.Roles\u201d\u5c5e\u6027\u4e2d\u5fc5\u987b\u6709\u8bf7\u6c42\u6ce8\u518c\u7684\u7c7b\u578b\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u53d1\u8d77\u8005\u7684\b\u201chf.Registrar.Roles\u201d\u5c5e\u6027\u7684\u503c\u4e3a\u201cpeer,app,user\u201d\uff0c\u90a3\u4e48\u4ed6\u80fd\u6ce8\u518c\u7684\u7c7b\u578b\u4e3apeer\uff0capp\u548cuser\uff0c\u4e0d\u80fd\u6ce8\u518corderer\u3002\n\n\n\u53d1\u8d77\u8005\u7684affiliation\u5fc5\u987b\u4e0e\u4ed6\u8bf7\u6c42\u6ce8\u518c\u7684\u8eab\u4efd\u7684affiliation\u76f8\u540c\uff0c\u6216\u8005\u662f\u6240\u8bf7\u6c42\u6ce8affiliation\u7684\u524d\u7f00\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e00\u4e2aaffiliation\u4e3a\u201ca.b\u201d\u7684\u53d1\u8d77\u8005\uff0c\u53ef\u4ee5\u6ce8\u518c\u4e00\u4e2aaffiliation\u4e3a\u201ca.b.c\u201d\u7684\u8eab\u4efd\uff0c\u4f46\u662f\u4e0d\u80fd\u6ce8\u518c\u4e00\u4e2aaffiliation\u4e3a\u201ca.c\u201d\u7684\u8eab\u4efd\u3002\n\n\n\n\n\u4e0b\u9762\u7684\u547d\u4ee4\u4f7f\u7528admin\u8eab\u4efd\u7684\u51ed\u8bc1\u6765\u6ce8\u518c\u4e00\u4e2a\u65b0\u7684\u8eab\u4efd\uff0c\u767b\u5f55ID\u662f\u201cadmin2\u201d\uff0c\u7c7b\u578b\u4e3a\u201cuser\u201d\uff0caffiliation\u4e3a\u201corg1.department1\u201d\uff0c\u8fd8\u6709\u201chf.Revoker\u201d\u5c5e\u6027\u4e3a\u201ctrue\u201d\u3002\n\n\n# export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client register --id.name admin2 --id.type user --id.affiliation org1.department1 --id.attr hf.Revoker=true\n\n\n\nThe password, also known as the enrollment secret, is printed. This password is required to enroll the identity. This allows an administrator to register an identity and give the enrollment ID and the secret to someone else to enroll the identity.\n\n\n\u5bc6\u7801\u4f1a\u88ab\b\u6253\u5370\u51fa\u6765\uff0c\u767b\u5f55\u8fd9\u4e2a\u65b0\u6ce8\u518c\u7684\u8eab\u4efd\u7684\u65f6\u5019\uff0c\u9700\u8981\u7528\u5230\u8fd9\u4e2a\u5bc6\u7801\u3002\u8fd9\u5141\u8bb8\u4e00\u4e2a\u7ba1\u7406\u5458\u6ce8\u518c\u8eab\u4efd\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u8eab\u4efd\u7684ID\b\u548c\u5bc6\u7801\u7ed9\u522b\u4eba\u6765\u767b\u9646\u3002\n\n\nYou may set default values for any of the fields used in the register command by editing the client\u2019s configuration file. For example, suppose the configuration file contains the following:\n\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7\u7f16\u8f91\u914d\u7f6e\u6587\u4ef6\u6765\u8bbe\u7f6e\u6ce8\u518c\u65f6\u4e00\u4e9b\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u914d\u7f6e\u6587\u4ef6\u5305\u542b\u4e0b\u9762\u7684\u5185\u5bb9\uff1a\n\n\nid:\n    name:\n    type: user\n    affiliation: org1.department1\n    attributes:\n        - name: hf.Revoker\n        value: true\n        - name: anotherAttrName\n        value: anotherAttrValue\n\n\n\nThe following command would then register a new identity with an enrollment id of \u201cadmin3\u201d which it takes from the command line, and the remainder is taken from the configuration file including the identity type: \u201cuser\u201d, affiliation: \u201corg1.department1\u201d, and two attributes: \u201chf.Revoker\u201d and \u201canotherAttrName\u201d.\n\n\n\u4e0b\u9762\u7684\u547d\u4ee4\u4f1a\u6ce8\u518c\u4e00\u4e2a\u65b0\u7684\u8eab\u4efd\b\uff0cid\u4e3aadmin3\uff0c\u5176\u4ed6\u7684\u5185\u5bb9\u4f1a\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u51fa\u6765\u3002\u5305\u62ec\uff1a\u7c7b\u578b\u201cuser\u201d\uff0caffiliation \u201corg1.department1\u201d\uff0c\u8fd8\u6709\u4e24\u4e2a\u5c5e\u6027\uff0c\u201chf.Revoker\u201d\u548c\u201canotherAttrName\u201d\u3002\n\n\n# export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client register --id.name admin3\n\n\n\nTo register an identity with multiple attributes requires specifying all attribute names and values in the configuration file as shown above.\n\n\n\u6ce8\u518c\u6709\u591a\u4e2a\u5c5e\u6027\u7684\u8eab\u4efd\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u660e\u6240\u6709\u5c5e\u6027\b\u540d\u548c\u5c5e\u6027\u503c\uff0c\u5982\u4e0a\u6240\u793a\u3002\n\n\nNext, let\u2019s register a peer identity which will be used to enroll the peer in the following section. The following command registers the peer1 identity. Note that we choose to specify our own password (or secret) rather than letting the server generate one for us.\n\n\n\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u6ce8\u518c\u4e00\u4e2a\u8282\u70b9\u8eab\u4efd\uff0c\u4f1a\u5728\u4e0b\u9762\b\u5185\u5bb9\u767b\u9646\u8282\u70b9\u7684\u65f6\u5019\u7528\u5230\u3002\u4e0b\u9762\u7684\u547d\u4ee4\u6ce8\u518c\u4e86\u4e00\u4e2apeer1\u8eab\u4efd\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u6307\u660e\u81ea\u5df1\u7684\u5bc6\u7801\uff0c\u800c\u4e0d\u662f\u7531\u670d\u52a1\u5668\u751f\u6210\u3002\n\n\n# export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client register --id.name peer1 --id.type peer --id.affiliation org1.department1 --id.secret peer1pw\n\n\n\n\u767b\u5f55\u4e00\u4e2a\u8282\u70b9\n\n\nNow that you have successfully registered a peer identity, you may now enroll the peer given the enrollment ID and secret (i.e. the password from the previous section). This is similar to enrolling the bootstrap identity except that we also demonstrate how to use the \u201c-M\u201d option to populate the Hyperledger Fabric MSP (Membership Service Provider) directory structure.\n\n\n\u73b0\u5728\u4f60\u6210\u529f\u5730\u6ce8\u518c\u4e86\u4e00\u4e2a\u8282\u70b9\u8eab\u4efd\uff0c\u4f60\u53ef\u4ee5\u7528ID\u548c\b\u5bc6\u7801\u767b\u9646\u3002\b\u8fd9\u90e8\u5206\u4e0e\u767b\u9646\u4e00\u4e2a\u5f15\u5bfc\u8eab\u4efd\u7c7b\u4f3c\u3002\u6211\u4eec\u8fd8\u4f1a\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\u201c-M\u201d\u9009\u9879\u6765\b\u66f4\u6362MSP\u7684\u76ee\u5f55\u3002\n\n\nThe following command enrolls peer1. Be sure to replace the value of the \u201c-M\u201d option with the path to your peer\u2019s MSP directory which is the \u2018mspConfigPath\u2019 setting in the peer\u2019s core.yaml file. You may also set the FABRIC_CA_CLIENT_HOME to the home directory of your peer.\n\n\n\u4e0b\u9762\u7684\u547d\u4ee4\u767b\u9646peer1\u3002\u8bb0\u5f97\b\u5728\u201c-M\u201d\u9009\u9879\u4e0b\u66f4\u6539\b\u4f60\u81ea\u5df1\b\u7684MSP\u76ee\u5f55\uff0c\bMSP\b\u76ee\u5f55\u662f\u7531\u8282\u70b9\u7684core.yaml\u91cc\u7684\u201cmspConfigPath\u201d\u6307\u5b9a\u7684\u3002\u4f60\u4e5f\u53ef\u4ee5\u8bbe\u7f6eFABRIC_CA_CLIENT_HOME\u73af\u5883\u53d8\u91cf\u4e3apeer\u7684\u6839\u76ee\u5f55\u3002\n\n\n# export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/peer1\n# fabric-ca-client enroll -u http://peer1:peer1pw@localhost:7054 -M $FABRIC_CA_CLIENT_HOME/msp\n\n\n\nEnrolling an orderer is the same, except the path to the MSP directory is the \u2018LocalMSPDir\u2019 setting in your orderer\u2019s orderer.yaml file.\n\n\n\b\u767b\u9646\u4e00\u4e2aorderer\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u9664\u4e86MSP\u76ee\u5f55\u662f\u8bbe\u7f6e\u5728\u4f60\u7684orderer\u7684orderer.yaml\u6587\u4ef6\u91cc\u7684\u201cLocalMSPDir\u201d\u3002\n\n\n\u4ece\u53e6\u4e00\u4e2aFabric CA\u670d\u52a1\u5668\u83b7\u5f97CA\u8bc1\u4e66\u94fe\n\n\nIn general, the cacerts directory of the MSP directory must contain the certificate authority chains of other certificate authorities, representing all of the roots of trust for the peer.\n\n\n\u901a\u5e38\uff0cMSP\u76ee\u5f55\u7684ca\u8bc1\u4e66\u76ee\u5f55\u5fc5\u987b\u5305\u542b\u8bc1\u4e66\u94fe\uff0c\u4ee3\u8868\u8fd9\u4e2a\u8282\u70b9\u6240\u6709\u4fe1\u4efb\u7684\u4fe1\u4efb\u4e2d\u5fc3\u3002\n\n\nThe fabric-ca-client getcacerts command is used to retrieve these certificate chains from other Fabric CA server instances.\n\n\nfabric-ca-client getcacerts\n\u547d\u4ee4\b\u7528\u4e8e\u4ece\u5176\u4ed6Fabric CA\u670d\u52a1\u5668\u5b9e\u4f8b\u83b7\u53d6\u8fd9\u4e9b\u8bc1\u4e66\u94fe\u3002\n\n\nFor example, the following will start a second Fabric CA server on localhost listening on port 7055 with a name of \u201cCA2\u201d. This represents a completely separate root of trust and would be managed by a different member on the blockchain.\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e0b\u9762\u7684\u547d\u4ee4\u4f1a\u5728\u672c\u5730\u542f\u52a8\u7b2c\u4e8c\u4e2aFabric CA\u670d\u52a1\u5668\uff0c\u76d1\u542c7055\u7aef\u53e3\uff0c\u547d\u540d\u4e3a\u201cCA2\u201c\u3002\u8fd9\u4ee3\u8868\u4e24\u4e2a\u7531\u4e0d\u540c\u6210\u5458\u7ba1\u7406\u7684\u5206\u5f00\u7684\u4fe1\u4efb\b\u4e2d\u5fc3\u3002\n\n\n# export FABRIC_CA_SERVER_HOME=$HOME/ca2\n# fabric-ca-server start -b admin:ca2pw -p 7055 -n CA2\n\n\n\nThe following command will install CA2\u2019s certificate chain into peer1\u2019s MSP directory.\n\n\n\u4e0b\u9762\u7684\u547d\u4ee4\u4f1a\u628aCA2\u7684\u8bc1\u4e66\u94fe\u5b89\u88c5\u8fdbpeer1\u7684MSP\u76ee\u5f55\u3002\n\n\n# export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/peer1\n# fabric-ca-client getcacert -u http://localhost:7055 -M $FABRIC_CA_CLIENT_HOME/msp\n\n\n\n\u91cd\u65b0\u767b\u9646\u4e00\u4e2a\u8eab\u4efd\n\n\nSuppose your enrollment certificate is about to expire or has been compromised. You can issue the reenroll command to renew your enrollment certificate as follows.\n\n\n\u5047\u8bbe\u4f60\u7684\u767b\u9646\b\u8bc1\u4e66\u5feb\u8fc7\u671f\u4e86\uff0c\u4f60\u53ef\u4ee5\u91cd\u65b0\u767b\u9646\u6765\b\u66ff\u6362\u4f60\u7684\u767b\u9646\u8bc1\u4e66\uff08\bECert\uff09\u3002\n\n\n# export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/peer1\n# fabric-ca-client reenroll\n\n\n\n\u64a4\u9500\u4e00\u4e2a\u8bc1\u4e66\u6216\u8eab\u4efd\n\n\nAn identity or a certificate can be revoked. Revoking an identity will revoke all the certificates owned by the identity and will also prevent the identity from getting any new certificates. Revoking a certificate will invalidate a single certificate.\n\n\n\b\b\u8eab\u4efd\u548c\u8bc1\u4e66\u90fd\u80fd\u88ab\u64a4\u9500\u3002\u64a4\u9500\u4e00\u4e2a\b\u8eab\u4efd\u4f1a\u64a4\u9500\u8be5\b\b\u8eab\u4efd\u62e5\u6709\u7684\u6240\u6709\u8bc1\u4e66\uff0c\u8be5\u8eab\u4efd\u4e5f\u4e0d\u80fd\u518d\u83b7\u5f97\u65b0\u7684\u8bc1\u4e66\u3002\u64a4\u9500\u4e00\u4e2a\u8bc1\u4e66\u4f1a\u4f7f\u8be5\u8bc1\u4e66\u5931\u6548\u3002\n\n\nIn order to revoke a certificate or an identity, the calling identity must have the hf.Revoker attribute. The revoking identity can only revoke a certificate or an identity that has an affiliation that is equal to or prefixed by the revoking identity\u2019s affiliation.\n\n\n\u4e3a\u4e86\u64a4\u9500\u4e00\u4e2a\u8bc1\u4e66\u6216\u8eab\u4efd\uff0c\u53d1\u8d77\u8005\u5fc5\u987b\u6709hf.Revoker\u5c5e\u6027\u3002\u53d1\u8d77\u8005\u53ea\u80fd\u64a4\u9500\u4e0e\u81ea\u5df1\u7684affiliation\u76f8\u540c\u7684\u8bc1\u4e66\u6216\u8eab\u4efd\uff0c\u6216\u8005\u53d1\u8d77\u8005\u7684affiliation\u662f\u88ab\b\u64a4\u9500\u8005\u7684affiliation\u7684\u524d\u7f00\u3002\n\n\nFor example, a revoker with affiliation orgs.org1 can revoke an identity affiliated with orgs.org1 or orgs.org1.department1 but can\u2019t revoke an identity affiliated with orgs.org2.\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e00\u4e2a\u201corgs.org1\u201d\u7684\u53d1\u8d77\u8005\u53ea\u80fd\u64a4\u9500orgs.org1\u6216\u8005orgs.org1.department1\u7684\u8eab\u4efd\uff0c\u800c\b\u4e0d\u80fd\u64a4\u9500orgs.org2\u7684\u8eab\u4efd\u3002\n\n\nThe following command disables an identity and revokes all of the certificates associated with the identity. All future requests received by the Fabric CA server from this identity will be rejected.\n\n\n\u4e0b\u9762\u7684\u547d\u4ee4\u64a4\u9500\u4e00\u4e2a\u8eab\u4efd\u3002\u5c06\u6765\u6240\u6709\u53d1\u81ea\u8be5\u8eab\u4efd\u7684\u8bf7\u6c42\u90fd\u4f1a\u88abFabric CA\b\u670d\u52a1\u5668\u62d2\u6536\u3002\n\n\nfabric-ca-client revoke -e \nenrollment_id\n -r \nreason\n\n\n\n\nThe following are the supported reasons that can be specified using -r flag:\n\n\n\u4e0b\u9762\u662f\n-r\n\u9009\u9879\u652f\u6301\u7684\u7406\u7531\uff1a\n\n\n\n\nunspecified\n\n\nkeycompromise\n\n\ncacompromise\n\n\naffiliationchange\n\n\nsuperseded\n\n\ncessationofoperation\n\n\ncertificatehold\n\n\nremovefromcrl\n\n\nprivilegewithdrawn\n\n\naacompromise\n\n\n\n\nFor example, the bootstrap admin who is associated with root of the affiliation tree can revoke peer1\u2018s identity as follows:\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6709\u7740\b\u6839\baffiliation\u7684admin\u53ef\u4ee5\u56de\u6536peer1\u8eab\u4efd\uff1a\n\n\n# export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client revoke -e peer1\n\n\n\nAn enrollment certificate that belongs to an identity can be revoked by specifying its AKI (Authority Key Identifier) and serial number as follows:\n\n\n\u4e00\u4e2a\u8eab\u4efd\u53ef\u4ee5\u64a4\u9500\u81ea\u5df1\u7684\u767b\u9646\u8bc1\u4e66\uff08ECert\uff09\uff0c\u9700\u8981\u6307\u5b9aECert\u7684AKI\u548c\u5e8f\u5217\u53f7\uff1a\n\n\nfabric-ca-client revoke -a xxx -s yyy -r \nreason\n\n\n\n\nFor example, you can get the AKI and the serial number of a certificate using the openssl command and pass them to the revoke command to revoke the said certificate as follows:\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7openssl\u547d\u4ee4\u6765\u83b7\u53d6\u4e00\u4e2a\u8bc1\u4e66\u7684AKI\u548c\u5e8f\u5217\u53f7\uff1a\n\n\nserial=$(openssl x509 -in userecert.pem -serial -noout | cut -d \"=\" -f 2)\naki=$(openssl x509 -in userecert.pem -text | awk '/keyid/ {gsub(/ *keyid:|:/,\"\",$1);print tolower($0)}')\nfabric-ca-client revoke -s $serial -a $aki -r affiliationchange\n\n\n\n\u542f\u7528TLS\n\n\nThis section describes in more detail how to configure TLS for a Fabric CA client.\n\n\n\u8fd9\u4e00\u90e8\u5206\u4ecb\u7ecd\u5982\u4f55\u4e3aFabric CA\u5ba2\u6237\u7aef\u914d\u7f6eTLS\u3002\n\n\nThe following sections may be configured in the \nfabric-ca-client-config.yaml\n.\n\n\n\u4e0b\u9762\u7684\u53ef\u4ee5\u914d\u7f6e\u5728\nfabric-ca-client-config.yaml\n\u4e2d\u3002\n\n\ntls:\n    # Enable TLS (default: false)\n    enabled: true\n    certfiles:\n        - root.pem\n    client:\n        certfile: tls_client-cert.pem\n        keyfile: tls_client-key.pem\n\n\n\nThe certfiles option is the set of root certificates trusted by the client. This will typically just be the root Fabric CA server\u2019s certificate found in the server\u2019s home directory in the ca-cert.pem file.\n\n\ncertfiles\n\u662f\u8be5\u5ba2\u6237\u7aef\u4fe1\u4efb\u7684\u6839\u8bc1\u4e66\u96c6\u5408\u3002\u4e00\u822c\u8fd9\u90fd\u4f1a\u662f\bFabric CA\u670d\u52a1\u7aef\u6839\u76ee\u5f55\b\u4e0b\u7684ca-cert.pem\u3002\n\n\nThe client option is required only if mutual TLS is configured on the server.\n\n\n\u53ea\u6709\u5728\u670d\u52a1\u5668\u914d\u7f6e\u4e86\u53cc\u5411TLS\u7684\u60c5\u51b5\u4e0b\uff0c\nclient\n\u9009\u9879\u624d\u9700\u8981\u3002\n\n\n\u9644\u5f55\n\n\nPostgres SSL \u914d\u7f6e\n\n\n\u914d\u7f6ePostgre\u670d\u52a1\u5668\u7684\u57fa\u672c\u6b65\u9aa4\uff1a\n\n\n\n\nIn postgresql.conf, uncomment SSL and set to \u201con\u201d (SSL=on)\n\n\nPlace certificate and key files in the Postgres data directory.\n\n\n\n\nInstructions for generating self-signed certificates for: https://www.postgresql.org/docs/9.5/static/ssl-tcp.html\n\n\nNote: Self-signed certificates are for testing purposes and should not be used in a production environment\n\n\n\n\n\u5728postgresql.conf\u4e2d\u6253\u5f00SSL\uff08SSL=on\uff09\n\n\n\u628a\u8bc1\u4e66\u548c\b\u5bc6\u94a5\u6587\u4ef6\u653e\u5728Postgres\u6570\u636e\u76ee\u5f55\u4e0b\u3002\n\n\n\n\n\u5982\u4f55\u751f\u6210\u81ea\u7b7e\u540d\u7684\u8bc1\u4e66\uff1ahttps://www.postgresql.org/docs/9.5/static/ssl-tcp.html\n\n\n\u6ce8\u610f\uff1a\u81ea\u7b7e\u540d\u7684\u8bc1\u4e66\u7528\u4e8e\u6d4b\u8bd5\u76ee\u7684\uff0c\u8bf7\u52ff\u7528\u4e8e\b\u751f\u4ea7\u73af\u5883\u3002\n\n\nPostgres \u670d\u52a1\u5668 - \u9700\u8981\u5ba2\u6237\u7aef\u8bc1\u4e66\n\n\n\n\nPlace certificates of the certificate authorities (CAs) you trust in the file root.crt in the Postgres data directory\n\n\nIn postgresql.conf, set \u201cssl_ca_file\u201d to point to the root cert of the client (CA cert)\n\n\nSet the clientcert parameter to 1 on the appropriate hostssl line(s) in pg_hba.conf.\n\n\n\n\nFor more details on configuring SSL on the Postgres server, please refer to the following Postgres documentation: https://www.postgresql.org/docs/9.4/static/libpq-ssl.html\n\n\n\n\n\u628a\u4f60\u4fe1\u4efb\u7684CA\u8bc1\u4e66\u653e\u5728Postgres\u6570\u636e\u76ee\u5f55\u91cc\u7684root.crt\u91cc\n\n\n\u5728\bpostgresql.conf\u91cc\uff0c\u8bbe\u7f6e\u201cssl_ca_file\u201d\u6307\u5411\u5ba2\u6237\u7aef\u7684\u6839\u8bc1\u4e66\n\n\n\u5728pg_hba.conf\u91cc\uff0c\u5728\b\u6b63\u786e\u7684hostssl\u884c\u628aclientcert\b\u53c2\u6570\u8bbe\u4e3a1\n\n\n\n\n\u66f4\u591a\u4fe1\u606f\uff1ahttps://www.postgresql.org/docs/9.4/static/libpq-ssl.html\n\n\nMySQL SSL \u914d\u7f6e\n\n\nOn MySQL 5.7.X, certain modes affect whether the server permits \u20180000-00-00\u2019 as a valid date. It might be necessary to relax the modes that MySQL server uses. We want to allow the server to be able to accept zero date values.", 
            "title": "CA"
        }, 
        {
            "location": "/ca-setup_zh/#_1", 
            "text": "The diagram below illustrates how the Fabric CA server fits into the overall Hyperledger Fabric architecture.  \u4e0b\u56fe\u8bf4\u660e\u4e86 Fabric CA \u670d\u52a1\u7aef\u5982\u4f55\u5728 Hyperledger Fabric \u67b6\u6784\u4e2d\u53d1\u6325\u4f5c\u7528   There are two ways of interacting with a Fabric CA server: via the Fabric CA client or through one of the Fabric SDKs. All communication to the Fabric CA server is via REST APIs. See fabric-ca/swagger/swagger-fabric-ca.json for the swagger documentation for these REST APIs.  \u6709\u4e24\u79cd\u65b9\u5f0f\u4e0e Fabric CA \u670d\u52a1\u7aef\u4ea4\u4e92\uff1a\u901a\u8fc7 Fabric CA \u5ba2\u6237\u7aef\uff0c\u6216\u8005 Fabric SDK\uff0c\u6240\u6709\u4e0e Fabric CA \u7684\u4ea4\u4e92\u90fd\u662f\u901a\u8fc7 REST APIs \u6765\u5b9e\u73b0\u7684\u3002REST APIs \u7684swagger\u8bf4\u660e\u6587\u6863\u89c1  fabric-ca/swagger/swagger-fabric-ca.json    The Fabric CA client or SDK may connect to a server in a cluster of Fabric CA servers. This is illustrated in the top right section of the diagram. The client routes to an HA Proxy endpoint which load balances traffic to one of the fabric-ca-server cluster members. All Fabric CA servers in a cluster share the same database for keeping track of users and certificates. If LDAP is configured, the user information is kept in LDAP rather than the database.  Fabric CA \u5ba2\u6237\u7aef\u6216\u8005 SDK \u53ef\u80fd\u4f1a\u8fde\u63a5\u5230 Fabric CA \u96c6\u7fa4\u4e2d\u67d0\u4e00\u4e2a Fabric CA \u670d\u52a1\u7aef\uff0c\u8fd9\u4e00\u90e8\u5206\u53ef\u4ee5\u901a\u8fc7\u4e0a\u56fe\u53f3\u4e0a\u90e8\u5206\u83b7\u5f97\u66f4\u597d\u7684\u7406\u89e3\u3002\u5ba2\u6237\u7aef\u8fde\u63a5\u7684\u662f\u4e00\u4e2a HA \u4ee3\u7406\u8282\u70b9\uff0c\u8fd9\u4e2a HA \u4ee3\u7406\u8282\u70b9\u4e3a Fabric CA \u96c6\u7fa4\u4f5c\u8d1f\u8f7d\u5747\u8861\u3002\u6240\u6709\u7684 Fabric CA \u670d\u52a1\u7aef\u5171\u4eab\u540c\u4e00\u4e2a\u6570\u636e\u5e93\u3002\u6570\u636e\u5e93\u7528\u6765\u4fdd\u5b58\u7528\u6237\u548c\u8bc1\u4e66\u4fe1\u606f\u3002\u5982\u679c\u914d\u7f6e\u4e86 LDAP\uff0c\u90a3\u4e48\u7528\u6237\u4fe1\u606f\u5c06\u4f1a\u4fdd\u5b58\u5728 LDAP \u4e2d\uff0c\u800c\u4e0d\u662f\u6570\u636e\u5e93\u4e2d\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/ca-setup_zh/#_2", 
            "text": "", 
            "title": "\u5165\u95e8"
        }, 
        {
            "location": "/ca-setup_zh/#_3", 
            "text": "Go 1.7+ \u6216\u66f4\u9ad8\u7248\u672c  GOPATH \u73af\u5883\u53d8\u91cf\u6b63\u786e\u8bbe\u7f6e  libtool \u548c libtdhl-dev \u8fd9\u4e24\u4e2a\u5305\u5b89\u88c5\u597d   \u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5 libtool  # sudo apt install libtool libltdl-dev  \u4e86\u89e3\u66f4\u591a\u6709\u5173 libtool \u7684\u4fe1\u606f\uff0c\u53c2\u8003  https://www.gnu.org/software/libtool/  \u4e86\u89e3\u66f4\u591a\u6709\u5173 libtdhr-dev \u7684\u4fe1\u606f\uff0c\u53c2\u8003  https://www.gnu.org/software/libtool/manual/html_node/Using-libltdl.html", 
            "title": "\u524d\u7f6e\u6761\u4ef6"
        }, 
        {
            "location": "/ca-setup_zh/#_4", 
            "text": "\u4ee5\u4e0b\u547d\u4ee4\u4f1a\u540c\u65f6\u5b89\u88c5 fabric-ca-server \u548c fabric-ca-client  # go get -u github.com/hyperledger/fabric-ca/cmd/...", 
            "title": "\u5b89\u88c5"
        }, 
        {
            "location": "/ca-setup_zh/#_5", 
            "text": "\u9ed8\u8ba4\u914d\u7f6e\u542f\u52a8 fabric-ca-server  # fabric-ca-server start -b admin:adminpw  The -b option provides the enrollment ID and secret for a bootstrap administrator. A default configuration file named fabric-ca-server-config.yaml is created in the local directory which can be customized.  -b  \u9009\u9879\u7528\u6765\u63d0\u4f9b\u542f\u52a8\u7ba1\u7406\u5458\u7684\u767b\u5f55 ID \u548c\u5bc6\u7801\u3002\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6  fabric-ca-server-config.yaml  \u4f1a\u81ea\u52a8\u5728\u672c\u5730\u76ee\u5f55\u521b\u5efa\uff0c\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u81ea\u5b9a\u4e49\u3002", 
            "title": "\u539f\u751f\u542f\u52a8\u670d\u52a1\u5668"
        }, 
        {
            "location": "/ca-setup_zh/#docker", 
            "text": "\u4f7f\u7528 docker-compose \u6765\u542f\u52a8  # cd $GOPATH/src/github.com/hyperledger/fabric-ca\n# make docker\n# cd docker/server\n# docker-compose up -d  hyperledger/fabric-ca docker \u955c\u50cf\u5305\u542b fabric-ca-server \u548c the fabric-ca-client", 
            "title": "\u901a\u8fc7 Docker \u542f\u52a8\u670d\u52a1\u5668"
        }, 
        {
            "location": "/ca-setup_zh/#fabric-ca", 
            "text": "\u8fd9\u4e00\u90e8\u5206\u63d0\u4f9b fabric-ca-server \u548c fabric-ca-client \u547d\u4ee4\u884c\u7684\u4f7f\u7528\u8bf4\u660e\u3002\u53e6\u5916\u7684\u4f7f\u7528\u4fe1\u606f\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u4e2d\u63d0\u4f9b\u3002  fabric-ca-server  Hyperledger Fabric Certificate Authority Server\n\nUsage:\n    fabric-ca-server [command]\n\nAvailable Commands:\n    init        Initialize the Fabric CA server\n    start       Start the Fabric CA server\n\nFlags:\n        --address string                         Listening address of Fabric CA server (default \"0.0.0.0\")\n    -b, --boot string                            The user:pass for bootstrap admin which is required to build default config file\n        --ca.certfile string                     PEM-encoded CA certificate file (default \"ca-cert.pem\")\n        --ca.chainfile string                    PEM-encoded CA chain file (default \"ca-chain.pem\")\n        --ca.keyfile string                      PEM-encoded CA key file (default \"ca-key.pem\")\n    -n, --ca.name string                         Certificate Authority name\n    -c, --config string                          Configuration file (default \"fabric-ca-server-config.yaml\")\n        --csr.cn string                          The common name field of the certificate signing request to a parent Fabric CA server\n        --csr.hosts stringSlice                  A list of space-separated host names in a certificate signing request to a parent Fabric CA server\n        --csr.serialnumber string                The serial number in a certificate signing request to a parent Fabric CA server\n        --db.datasource string                   Data source which is database specific (default \"fabric-ca-server.db\")\n        --db.tls.certfiles stringSlice           PEM-encoded list of trusted certificate files\n        --db.tls.client.certfile string          PEM-encoded certificate file when mutual authenticate is enabled\n        --db.tls.client.keyfile string           PEM-encoded key file when mutual authentication is enabled\n        --db.type string                         Type of database; one of: sqlite3, postgres, mysql (default \"sqlite3\")\n    -d, --debug                                  Enable debug level logging\n        --ldap.enabled                           Enable the LDAP client for authentication and attributes\n        --ldap.groupfilter string                The LDAP group filter for a single affiliation group (default \"(memberUid=%s)\")\n        --ldap.url string                        LDAP client URL of form ldap://adminDN:adminPassword@host[:port]/base\n        --ldap.userfilter string                 The LDAP user filter to use when searching for users (default \"(uid=%s)\")\n    -p, --port int                               Listening port of Fabric CA server (default 7054)\n        --registry.maxenrollments int            Maximum number of enrollments; valid if LDAP not enabled\n        --tls.certfile string                    PEM-encoded TLS certificate file for server's listening port (default \"ca-cert.pem\")\n        --tls.clientauth.certfiles stringSlice   PEM-encoded list of trusted certificate files\n        --tls.clientauth.type string             Policy the server will follow for TLS Client Authentication. (default \"noclientcert\")\n        --tls.enabled                            Enable TLS on the listening port\n        --tls.keyfile string                     PEM-encoded TLS key for server's listening port (default \"ca-key.pem\")\n    -u, --url string                             URL of the parent Fabric CA server\n\n\nUse \"fabric-ca-server [command] --help\" for more information about a command.  fabric-ca-client  # fabric-ca-client\nHyperledger Fabric Certificate Authority Client\n\nUsage:\n    fabric-ca-client [command]\n\nAvailable Commands:\n    enroll      Enroll an identity\n    getcacert   Get CA certificate chain\n    reenroll    Reenroll an identity\n    register    Register an identity\n    revoke      Revoke an identity\n\nFlags:\n    -c, --config string                Configuration file (default \"$HOME/.fabric-ca-client/fabric-ca-client-config.yaml\")\n        --csr.cn string                The common name field of the certificate signing request\n        --csr.hosts stringSlice        A list of space-separated host names in a certificate signing request\n        --csr.serialnumber string      The serial number in a certificate signing request\n    -d, --debug                        Enable debug level logging\n        --enrollment.hosts string      Comma-separated host list\n        --enrollment.label string      Label to use in HSM operations\n        --enrollment.profile string    Name of the signing profile to use in issuing the certificate\n        --id.affiliation string        The identity's affiliation\n        --id.attr string               Attributes associated with this identity (e.g. hf.Revoker=true)\n        --id.maxenrollments int        The maximum number of times the secret can be reused to enroll\n        --id.name string               Unique name of the identity\n        --id.secret string             The enrollment secret for the identity being registered\n        --id.type string               Type of identity being registered (e.g. 'peer, app, user')\n    -M, --mspdir string                Membership Service Provider directory (default \"msp\")\n    -m, --myhost string                Hostname to include in the certificate signing request during enrollment (default \"$HOSTNAME\")\n        --tls.certfiles stringSlice    PEM-encoded list of trusted certificate files\n        --tls.client.certfile string   PEM-encoded certificate file when mutual authenticate is enabled\n        --tls.client.keyfile string    PEM-encoded key file when mutual authentication is enabled\n    -u, --url string                   URL of the Fabric CA server (default \"http://localhost:7054\")\n\nUse \"fabric-ca-client [command] --help\" for more information about a command.  Note that command line options that are string slices (lists) can be specified either by specifying the option with space-separated list elements or by specifying the option multiple times, each with a string value that make up the list. For example, to specify host1 and host2 for csr.hosts option, you can either pass \u2013csr.hosts \u201chost1 host2\u201d or \u2013csr.hosts host1 \u2013csr.hosts host2  \u6ce8\u610f\u5728\u547d\u4ee4\u884c\u4e2d\u9700\u8981\u7ed9\u67d0\u4e2a\u9009\u9879\u8f93\u5165\u5217\u8868\u65f6\uff0c\u53ef\u4ee5\b\u7528\u7a7a\u683c\u5206\u5272\uff0c\u6216\u8005\u591a\u6b21\u4f7f\u7528\u8be5\u9009\u9879\u3002\u4f8b\u5982\uff0c\u6307\u5b9a host1 \u548c host2 \u7ed9csr.hosts\u9009\u9879\uff0c\u4f60\u53ef\u4ee5\u7528\u2013csr.hosts \u201chost1 host2\u201d\u6216\u8005\u2013csr.hosts host1 \u2013csr.hosts host2", 
            "title": "\u4f53\u9a8c Fabric CA \u547d\u4ee4\u884c"
        }, 
        {
            "location": "/ca-setup_zh/#_6", 
            "text": "", 
            "title": "\u6587\u4ef6\u683c\u5f0f"
        }, 
        {
            "location": "/ca-setup_zh/#fabric-ca_1", 
            "text": "A configuration file can be provided to the server using the -c or  config option. If the  config option is used and the specified file doesn\u2019t exist, a default configuration file (like the one shown below) will be created in the specified location. However, if no config option was used, it will be created in the server\u2019s home directory (see Fabric CA Server section more info).  \u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u901a\u8fc7  -c  \u6216\u8005  --config  \u9009\u9879\u6765\u6307\u5b9a\u3002\u5982\u679c  --config  \u9009\u9879\u4f7f\u7528\u4e86\uff0c\u800c\u6307\u5b9a\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u9ed8\u8ba4\u7684\u914d\u7f6e\u6587\u4ef6\uff08\u5982\u4e0b\uff09\u4f1a\u5728\u6307\u5b9a\u7684\u4f4d\u7f6e\u88ab\u521b\u5efa\u3002\u7136\u800c\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\uff0c\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u4f1a\u5728 fabric-ca-server \u7684 home \u76ee\u5f55\u4e0b\u521b\u5efa\u3002\uff08\u53c2\u8003  Fabric CA \u670d\u52a1\u7aef  \u4e86\u89e3\u66f4\u591a\uff09  # Server's listening port (default: 7054)\nport: 7054\n\n# Enables debug logging (default: false)\ndebug: false\n\n#############################################################################\n#  TLS section for the server's listening port\n#############################################################################\ntls:\n    # Enable TLS (default: false)\n    enabled: false\n    certfile: ca-cert.pem\n    keyfile: ca-key.pem\n\n#############################################################################\n#  The CA section contains the key and certificate files used when\n#  issuing enrollment certificates (ECerts) and transaction\n#  certificates (TCerts).\n#############################################################################\nca:\n    # Certificate file (default: ca-cert.pem)\n    certfile: ca-cert.pem\n    # Key file (default: ca-key.pem)\n    keyfile: ca-key.pem\n\n#############################################################################\n#  The registry section controls how the Fabric CA server does two things:\n#  1) authenticates enrollment requests which contain identity name and\n#     password (also known as enrollment ID and secret).\n#  2) once authenticated, retrieves the identity's attribute names and\n#     values which the Fabric CA server optionally puts into TCerts\n#     which it issues for transacting on the Hyperledger Fabric blockchain.\n#     These attributes are useful for making access control decisions in\n#     chaincode.\n#  There are two main configuration options:\n#  1) The Fabric CA server is the registry\n#  2) An LDAP server is the registry, in which case the Fabric CA server\n#     calls the LDAP server to perform these tasks.\n#############################################################################\nregistry:\n    # Maximum number of times a password/secret can be reused for enrollment\n    # (default: 0, which means there is no limit)\n    maxEnrollments: 0\n\n    # Contains identity information which is used when LDAP is disabled\n    identities:\n        - name:  ADMIN \n        pass:  ADMINPW \n        type: client\n        affiliation: \"\"\n        attrs:\n            hf.Registrar.Roles: \"client,user,peer,validator,auditor,ca\"\n            hf.Registrar.DelegateRoles: \"client,user,validator,auditor\"\n            hf.Revoker: true\n            hf.IntermediateCA: true\n\n#############################################################################\n#  Database section\n#  Supported types are: \"sqlite3\", \"postgres\", and \"mysql\".\n#  The datasource value depends on the type.\n#  If the type is \"sqlite3\", the datasource value is a file name to use\n#  as the database store.  Since \"sqlite3\" is an embedded database, it\n#  may not be used if you want to run the Fabric CA server in a cluster.\n#  To run the Fabric CA server in a cluster, you must choose \"postgres\"\n#  or \"mysql\".\n#############################################################################\ndb:\n    type: sqlite3\n    datasource: fabric-ca-server.db\n    tls:\n        enabled: false\n        certfiles:\n            - db-server-cert.pem\n        client:\n            certfile: db-client-cert.pem\n            keyfile: db-client-key.pem\n\n#############################################################################\n#  LDAP section\n#  If LDAP is enabled, the Fabric CA server calls LDAP to:\n#  1) authenticate enrollment ID and secret (i.e. identity name and password)\n#     for enrollment requests\n#  2) To retrieve identity attributes\n#############################################################################\nldap:\n    # Enables or disables the LDAP client (default: false)\n    enabled: false\n    # The URL of the LDAP server\n    url: ldap:// adminDN : adminPassword @ host : port / base \n    tls:\n        certfiles:\n            - ldap-server-cert.pem\n        client:\n            certfile: ldap-client-cert.pem\n            keyfile: ldap-client-key.pem\n\n#############################################################################\n#  Affiliation section\n#############################################################################\naffiliations:\n    org1:\n        - department1\n        - department2\n    org2:\n        - department1\n\n#############################################################################\n#  Signing section\n#############################################################################\nsigning:\n    profiles:\n        ca:\n            usage:\n            - cert sign\n            expiry: 8000h\n            caconstraint:\n            isca: true\n    default:\n        usage:\n            - cert sign\n        expiry: 8000h\n\n###########################################################################\n#  Certificate Signing Request section for generating the CA certificate\n###########################################################################\ncsr:\n    cn: fabric-ca-server\n    names:\n        - C: US\n            ST: North Carolina\n            L:\n            O: Hyperledger\n            OU: Fabric\n    hosts:\n        -  MYHOST \n    ca:\n        pathlen:\n        pathlenzero:\n        expiry:\n\n#############################################################################\n#  Crypto section configures the crypto primitives used for all\n#############################################################################\ncrypto:\n    software:\n        hash_family: SHA2\n        security_level: 256\n        ephemeral: false\n        key_store_dir: keys", 
            "title": "Fabric CA \u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f"
        }, 
        {
            "location": "/ca-setup_zh/#fabric-ca_2", 
            "text": "A configuration file can be provided to the client using the -c or  config option. If the config option is used and the specified file doesn\u2019t exist, a default configuration file (like the one shown below) will be created in the specified location. However, if no config option was used, it will be created in the client\u2019s home directory (see Fabric CA Client section more info).  \u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u901a\u8fc7  -c  \u6216\u8005  --config  \u9009\u9879\u6765\u6307\u5b9a\u3002\u5982\u679c  --config  \u9009\u9879\u4f7f\u7528\u4e86\uff0c\u800c\u6307\u5b9a\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u9ed8\u8ba4\u7684\u914d\u7f6e\u6587\u4ef6\uff08\u5982\u4e0b\uff09\u4f1a\u5728\u6307\u5b9a\u7684\u4f4d\u7f6e\u88ab\u521b\u5efa\u3002\u7136\u800c\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\uff0c\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u4f1a\u5728 fabric-ca-client \u7684 home \u76ee\u5f55\u4e0b\u521b\u5efa\u3002\uff08\u53c2\u8003  Fabric CA \u5ba2\u6237\u7aef  \u4e86\u89e3\u66f4\u591a\uff09  #############################################################################\n# Client Configuration\n#############################################################################\n\n# URL of the fabric-ca-server (default: http://localhost:7054)\nURL: http://localhost:7054\n\n# Membership Service Provider (MSP) directory\n# When the client is used to enroll a peer or an orderer, this field must be\n# set to the MSP directory of the peer/orderer\nMSPDir:\n\n#############################################################################\n#    TLS section for secure socket connection\n#############################################################################\ntls:\n    # Enable TLS (default: false)\n    enabled: false\n    certfiles:   # Comma Separated (e.g. root.pem, root2.pem)\n    client:\n        certfile:\n        keyfile:\n\n#############################################################################\n#  Certificate Signing Request section for generating the CSR for\n#  an enrollment certificate (ECert)\n#############################################################################\ncsr:\n    cn:  ENROLLMENT_ID \n    names:\n        - C: US\n        ST: North Carolina\n        L:\n        O: Hyperledger\n        OU: Fabric\n    hosts:\n    -  MYHOST \n    ca:\n        pathlen:\n        pathlenzero:\n        expiry:\n\n#############################################################################\n#  Registration section used to register a new user with fabric-ca server\n#############################################################################\nid:\n    name:\n    type:\n    affiliation:\n    attrs:\n        - name:\n        value:\n\n#############################################################################\n#  Enrollment section used to enroll a user with fabric-ca server\n#############################################################################\nenrollment:\n    hosts:\n    profile:\n    label:", 
            "title": "Fabric CA \u5ba2\u6237\u7aef\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f"
        }, 
        {
            "location": "/ca-setup_zh/#_7", 
            "text": "The Fabric CA provides 3 ways to configure settings on the Fabric CA server and client. The precedence order is:   CLI flags  Environment variables  Configuration file   In the remainder of this document, we refer to making changes to configuration files. However, configuration file changes can be overridden through environment variables or CLI flags.  For example, if we have the following in the client configuration file:  Fabric CA \u63d0\u4f9b3\u79cd\u65b9\u5f0f\u6765\u914d\u7f6e fabric-ca-server \u548c fabric-ca-client \u3002\u4f18\u5148\u7ea7\u5982\u4e0b\uff1a   \u547d\u4ee4\u884c\u53c2\u6570  \u73af\u5883\u53d8\u91cf  \u914d\u7f6e\u6587\u4ef6   \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8bd5\u7740\u5bf9\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u4fee\u6539\u3002\u914d\u7f6e\u6587\u4ef6\u7684\u4fee\u6539\u53ef\u4ee5\u88ab\u73af\u5883\u53d8\u91cf\u6216\u8005\u547d\u4ee4\u884c\u53c2\u6570\u8986\u76d6\u3002  \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4ee5\u4e0b\u5ba2\u6237\u7aef\u7684\u914d\u7f6e\u6587\u4ef6\uff1a  tls:\n    # Enable TLS (default: false)\n    enabled: false\n\n    # TLS for the client's listenting port (default: false)\n    certfiles:   # Comma Separated (e.g. root.pem, root2.pem)\n    client:\n        certfile: cert.pem\n        keyfile:  The following environment variable may be used to override the cert.pem setting in the configuration file:  export FABRIC_CA_CLIENT_TLS_CLIENT_CERTFILE=cert2.pem  If we wanted to override both the environment variable and configuration file, we can use a command line flag.  fabric-ca-client enroll --tls.client.certfile cert3.pem  The same approach applies to fabric-ca-server, except instead of using FABIRC_CA_CLIENT as the prefix to environment variables, FABRIC_CA_SERVER is used.  \u53ef\u4ee5\u7528\u4ee5\u4e0b\u73af\u5883\u53d8\u91cf\u6765\u8986\u76d6\u914d\u7f6e\u6587\u4ef6\u4e2d  cert.pem  \u7684\u914d\u7f6e  export FABRIC_CA_CLIENT_TLS_CLIENT_CERTFILE=cert2.pem  \u5982\u679c\u6211\u4eec\u60f3\u540c\u65f6\u8986\u76d6\u73af\u5883\u53d8\u91cf\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570  fabric-ca-client enroll --tls.client.certfile cert3.pem  \u4ee5\u4e0a\u65b9\u6cd5\u5bf9fabric-ca-server\u540c\u6837\u9002\u7528\uff0c\u533a\u522b\u662f\u5728\u73af\u5883\u53d8\u91cf\u7684\u524d\u7f00\uff0c\u628a FABIRC_CA_CLIENT \u66ff\u6362\u4e3a FABRIC_CA_SERVER \u3002", 
            "title": "\u914d\u7f6e\u4f18\u5148\u7ea7\u8bf4\u660e"
        }, 
        {
            "location": "/ca-setup_zh/#_8", 
            "text": "All the properties in the Fabric CA server and client configuration file, that specify file names support both relative and absolute paths. Relative paths are relative to the config directory, where the configuration file is located. For example, if the config directory is ~/config and the tls section is as shown below, the Fabric CA server or client will look for the root.pem file in the ~/config directory, cert.pem file in the ~/config/certs directory and the key.pem file in the /abs/path directory  fabric-ca-server \u548c fabirc-ca-client \u7684\u914d\u7f6e\u6587\u4ef6\u91cc\u7684\u6240\u6709\u5c5e\u6027\u90fd\u652f\u6301\u76f8\u5bf9\u8def\u5f84\u548c\u7edd\u5bf9\u8def\u5f84\u3002\u76f8\u5bf9\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e\u914d\u7f6e\u76ee\u5f55\uff0c\u5373\u914d\u7f6e\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\u3002\u6bd4\u5982\uff0c\u5982\u679c\u914d\u7f6e\u76ee\u5f55\u662f  ~/config  \uff0c\u800c tls \u90e8\u5206\u7684\u914d\u7f6e\u5982\u4e0b\u6240\u793a\uff0c\u90a3\u4e48Fabric CA \u670d\u52a1\u7aef\u6216\u8005\u5ba2\u6237\u7aef\u4f1a\u5728  ~/config  \u76ee\u5f55\u4e0b\u67e5\u627e  root.pem  \uff0c\u5728  ~/config\uff0fcerts  \u4e0b\u67e5\u627e  cert.pem  \uff0c\u5728  /abs/path  \u76ee\u5f55\u4e0b\u67e5\u627e  key.pem  tls:\n    enabled: true\n    certfiles:   root.pem\n    client:\n        certfile: certs/cert.pem\n        keyfile: /abs/path/key.pem", 
            "title": "\u5173\u4e8e\u8def\u5f84\u7684\u4e00\u4e9b\u8bf4\u660e"
        }, 
        {
            "location": "/ca-setup_zh/#fabric-ca_3", 
            "text": "This section describes the Fabric CA server.  You may initialize the Fabric CA server before starting it. This provides an opportunity for you to generate a default configuration file but to review and customize its settings before starting it.  The Fabric CA server\u2019s home directory is determined as follows:\n- if the FABRIC_CA_SERVER_HOME environment variable is set, use its value;\n- otherwise, if FABRIC_CA_HOME environment variable is set, use its value;\n- otherwise, if the CA_CFG_PATH environment variable is set, use its value;\n- otherwise, use current working directory.  For the remainder of this server section, we assume that you have set the FABRIC_CA_HOME environment variable to $HOME/fabric-ca/server.  The instructions below assume that the server configuration file exists in the server\u2019s home directory.  \u8fd9\u4e00\u90e8\u5206\u8bf4\u660eFabric CA\u670d\u52a1\u7aef\u3002  \u5728\u542f\u52a8Fabric CA\u670d\u52a1\u7aef\u4e4b\u524d\uff0c\u4f60\u53ef\u4ee5\u5148\u521d\u59cb\u5316Fabric CA\u670d\u52a1\u7aef\u3002\u901a\u8fc7\u521d\u59cb\u5316\uff0c\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4efd\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\uff0c\u65b9\u4fbf\u7528\u6237\u5728\u542f\u52a8\u524d\u81ea\u884c\u4fee\u6539\u4e00\u4e9b\u914d\u7f6e\u9879\u3002  Fabric CA\u670d\u52a1\u7aef\u7684\u6839\u76ee\u5f55\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u51b3\u5b9a\uff1a\n- \u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf  FABRIC_CA_SERVER_HOME  \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c\n- \u5426\u5219\uff0c\u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf  FABRIC_CA_HOME  \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c\n- \u5426\u5219\uff0c\u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf  CA_CFG_PATH  \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c\n- \u5426\u5219\uff0c\u4f7f\u7528\u5f53\u524d\u7684\u5de5\u4f5c\u76ee\u5f55\u4f5c\u4e3a\u6839\u76ee\u5f55  \u672c\u7ae0\u63a5\u4e0b\u6765\u7684\u90e8\u5206\uff0c\u6211\u4eec\u5047\u8bbe\u4f60\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u73af\u5883\u53d8\u91cf  FABRIC_CA_HOME  \uff0c\u5e76\u4e14\u503c\u8bbe\u7f6e\u4e3a  $HOME/fabric-ca/server \u3002  \u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u90fd\u9ed8\u8ba4\u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\u5b58\u5728\u4e8e\u670d\u52a1\u7aef\u6839\u76ee\u5f55\u4e0b\u3002", 
            "title": "Fabric CA \u670d\u52a1\u7aef"
        }, 
        {
            "location": "/ca-setup_zh/#_9", 
            "text": "\u7528\u4ee5\u4e0b\u547d\u4ee4\u521d\u59cb\u5316Fabric CA\u670d\u52a1\u7aef  # fabric-ca-server init -b admin:adminpw  The  -b  (bootstrap identity) option is required for initialization. At least one bootstrap identity is required to start the Fabric CA server. The server configuration file contains a Certificate Signing Request (CSR) section that can be configured. The following is a sample CSR.  \u521d\u59cb\u5316\u65f6\u5fc5\u987b\u63d0\u4f9b  -b  (bootstrap identity: \u5f15\u5bfc\u8eab\u4efd) \u9009\u9879\u3002\u542f\u52a8\u670d\u52a1\u7aef\u65f6\uff0c\u81f3\u5c11\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u5f15\u5bfc\u8eab\u4efd\u3002\u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\u5305\u542b\u4e00\u4e2a\u53ef\u4ee5\u914d\u7f6e\u7684\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42 (Certificate Signing Request, CSR) \u90e8\u5206\u3002\u4e0b\u9762\u662f\u4e00\u4e2aCSR\u7684\u4f8b\u5b50\u3002  If you are going to connect to the Fabric CA server remotely over TLS, replace \u201clocalhost\u201d in the CSR section below with the hostname where you will be running your Fabric CA server.  \u5982\u679c\u4f60\u60f3\u901a\u8fc7TLS\u8fdc\u7a0b\u8fde\u63a5Fabric CA\u670d\u52a1\u7aef\uff0c\u628a\u4e0b\u9762\u7684CSR\u914d\u7f6e\u5185\u5bb9\u4e2d\u7684 localhost \u66ff\u6362\u6210\u4f60\u5c06\u4f1a\u8fd0\u884cFabric CA\u670d\u52a1\u7aef\u7684\u57df\u540d\u3002  cn: localhost\nkey:\n    algo: ecdsa\n    size: 256\nnames:\n- C: US\n    ST: \"North Carolina\"\n    L:\n    O: Hyperledger\n    OU: Fabric  All of the fields above pertain to the X.509 signing key and certificate which is generated by the  fabric-ca-server  init. This corresponds to the  ca.certfile  and  ca.keyfile  files in the server\u2019s configuration file. The fields are as follows:   cn is the Common Name  key specifies the algorithm and key size as described below  O is the organization name  OU is the organizational unit  L is the location or city  ST is the state  C is the country   \u4e0a\u9762\u6240\u6709\u7684\u5b57\u6bb5\u90fd\b\u7b26\u5408X.509\u7b7e\u540d\u4e0e\u8bc1\u4e66\u89c4\u8303\uff0c\u53ef\u4ee5\u7531 fabric-ca-server  init\u547d\u4ee4\u6765\u751f\u6210\u3002\u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\u4e2d\u63d0\u5230\u7684 ca.certfile \u548c ca.keyfile \u8fd9\u4e24\u4e2a\u6587\u4ef6\u4e5f\u7b26\u5408X.509\u89c4\u8303\u3002\u5b57\u6bb5\u5982\u4e0b\uff1a   cn \u901a\u7528\u540d  key \u6307\u660e\u7b97\u6cd5\u548c\u5bc6\u94a5\u957f\u5ea6  O \u7ec4\u7ec7  OU \u7ec4\u7ec7\u5355\u4f4d  L \u5730\u5740\u6216\u57ce\u5e02  ST \u5dde\uff08\u7701\uff09  C \u56fd\u5bb6   If custom values for the CSR are required, you may customize the configuration file, delete the files specified by the ca.certfile and ca-keyfile configuration items, and then run the fabric-ca-server init -b admin:adminpw command again.  \u5982\u679c\b\u9700\u8981\u4fee\u6539CSR\u91cc\u9762\u7684\u503c\uff0c\u4f60\u53ef\u4ee5\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\uff0c\u7136\u540e\u628a\u914d\u7f6e\u4e2d\u7531 ca.certfile \u548c ca\b.keyfile \u8fd9\u4e24\u9879\u6307\u660e\u7684\u6587\u4ef6\u5220\u9664\u3002\u7136\u540e\u518d\u8fd0\u884c\u4e00\u6b21  fabric-ca-server init -b admin:adminpw  \u547d\u4ee4\u3002  The  fabric-ca-server init  command generates a self-signed CA certificate unless the  -u \\ parent-fabric-ca-server-URL\\  option is specified. If the  -u  is specified, the server\u2019s CA certificate is signed by the parent Fabric CA server. The  fabric-ca-server init  command also generates a default configuration file named fabric-ca-server-config.yaml in the server\u2019s home directory.  fabirc-ca-server init  \u547d\u4ee4\u751f\u6210\u4e00\u4e2a\u81ea\u7b7e\u540d\u7684CA\u8bc1\u4e66\uff0c\u9664\u975e\u4f7f\u7528\u4e86  -u  parent-fabric-ca-server-URL  \u9009\u9879\u3002\u5982\u679c\u4f7f\u7528\u4e86  -u  \u9009\u9879\uff0c\u672c\u670d\u52a1\u7aefCA\u8bc1\u4e66\u4f1a\u7531\u7236Fabric CA\u670d\u52a1\u7aef\u7b7e\u540d\u3002 fabirc-ca-server init  \u547d\u4ee4\u540c\u65f6\u4e5f\u4f1a\u5728\u670d\u52a1\u7aef\u7684\u6839\u76ee\u5f55\u751f\u6210\u4e00\u4e2a\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6 fabric-ca-server-config.yaml \u3002  \u7b97\u6cd5\u548c\u5bc6\u94a5\u957f\u5ea6  The CSR can be customized to generate X.509 certificates and keys that support both RSA and Elliptic Curve (ECDSA). The following setting is an example of the implementation of Elliptic Curve Digital Signature Algorithm (ECDSA) with curve prime256v1 and signature algorithm ecdsa-with-SHA256:  \u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49CSR\u6765\u751f\u6210\u652f\u6301ECDSA\u548cRSA\u7684X.509\u8bc1\u4e66\u548c\u5bc6\u94a5\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u692d\u5706\u66f2\u7ebf\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5\uff08\bECDSA\uff09\u7684\u8bbe\u7f6e\uff0c\u91c7\u7528\u7684\u66f2\u7ebf\u662f prime256v1 \uff0c\u7b7e\u540d\u7b97\u6cd5\u662f ecdsa-with-SHA256 \u3002  key:\n    algo: ecdsa\n    size: 256  \u5bf9\u7b97\u6cd5\u548c\u5bc6\u94a5\u957f\u5ea6\u7684\u9009\u62e9\u53d6\u51b3\u4e8e\u4f60\u5bf9\u5b89\u5168\u7684\u8003\u91cf\u3002  ECDSA\u63d0\u4f9b\u4ee5\u4e0b\u9009\u9879\uff1a     size  ASN1 OID  Signature Algorithm      256  prime256v1  ecdsa-with-SHA256    384  secp384r1  ecdsa-with-SHA384    521  secp384r1  ecdsa-with-SHA521     RSA\u63d0\u4f9b\u4ee5\u4e0b\u9009\u9879\uff1a     size  Modulus (bits)  Signature Algorithm      2048  2048  sha256WithRSAEncryption    4096  2096  sha512WithRSAEncryption", 
            "title": "\u521d\u59cb\u5316\u670d\u52a1\u7aef"
        }, 
        {
            "location": "/ca-setup_zh/#_10", 
            "text": "\u542f\u52a8Fabric CA\u670d\u52a1\u5668\uff1a  # fabric-ca-server start -b  admin : adminpw   If the server has not been previously initialized, it will initialize itself as it starts for the first time. During this initialization, the server will generate the ca-cert.pem and ca-key.pem files if they don\u2019t yet exist and will also create a default configuration file if it does not exist. See the  Initialize the Fabric CA server  section.  \u5982\u679c\u670d\u52a1\u5668\u4e4b\u524d\u6ca1\u6709\u521d\u59cb\u5316\u8fc7\uff0c\u5b83\u4f1a\u5728\u7b2c\u4e00\u6b21\u542f\u52a8\u7684\u65f6\u5019\u8fdb\u884c\u521d\u59cb\u5316\u3002\u5728\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\b\u4e2d\uff0c\u5b83\u4f1a\u5982\u679cca-cert.pem\u548cca-key.pem\u8fd9\u4e24\u4e2a\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5b83\u4f1a\u751f\u6210\u8fd9\u4e24\u4e2a\u6587\u4ef6\uff1b\u5982\u679c\u914d\u7f6e\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5b83\u4f1a\u751f\u6210\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u3002\u53c2\u8003 \u521d\u59cb\u5316\u670d\u52a1\u7aef \u3002  Unless the Fabric CA server is configured to use LDAP, it must be configured with at least one pre-registered bootstrap identity to enable you to register and enroll other identities. The  -b  option specifies the name and password for a bootstrap identity.  \u9664\u975eFabric CA\u670d\u52a1\u7aef\u914d\u7f6e\u4e86\u4f7f\u7528LDAP\uff0c\u5426\u5219\u5b83\u5fc5\u987b\u914d\u7f6e\u81f3\u5c11\u4e00\u4e2a\u9884\u6ce8\u518c\u5f15\u5bfc\u8eab\u4efd\u6765\u5141\u8bb8\u4f60\u767b\u5f55\u5176\u4ed6\u8eab\u4efd\u3002 -b \u9009\u9879\u6307\u660e\u5f15\u5bfc\u8eab\u4efd\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002\b  A different configuration file may be specified with the -c option as shown below.  \b\u53ef\u4ee5\u901a\u8fc7 -c \u9009\u9879\u6765\u6307\u660e\u5176\u4ed6\u7684\u914d\u7f6e\u6587\u4ef6\u3002  # fabric-ca-server start -c  path-to-config-file  -b  admin : adminpw   To cause the Fabric CA server to listen on https rather than http, set tls.enabled to true.  \u4e3a\u4e86\u4f7ffabric ca server\u76d1\u542c https \u800c\u4e0d\u662f http \uff0c\u914d\u7f6e tls.enabled \u4e3a true \u3002  To limit the number of times that the same secret (or password) can be used for enrollment, set the  registry.maxEnrollments  in the configuration file to the appropriate value. If you set the value to 1, the Fabric CA server allows passwords to only be used once for a particular enrollment ID. If you set the value to 0, the Fabric CA server places no limit on the number of times that a secret can be reused for enrollment. The default value is 0.  \b\u4e3a\u4e86\u9650\u5236\u767b\u5f55\u65f6\u76f8\u540c\u5bc6\u7801\u7684\u6b21\u6570\uff0c\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bbe\u7f6e registry.maxEnrollments \u4e3a\u6070\u5f53\u7684\u503c\u3002\u5982\u679c\u4f60\u8bbe\u7f6e\u8fd9\u4e2a\u503c\u4e3a1\uff0cFabric CA\u670d\u52a1\u7aef\u53ea\u5141\u8bb8\u4e00\u4e2a\u5bc6\u7801\u88ab\u4e00\u4e2a\u767b\u5f55ID\u4f7f\u7528\uff08\u5373\u4e0d\u4f1a\u51fa\u73b0\u591a\u4e2aID\u6709\u76f8\u540c\u7684\u5bc6\u7801\uff09\u3002\u5982\u679c\u4f60\u8bbe\u7f6e\u8fd9\u4e2a\u503c\u4e3a0\uff0cFabric CA\u670d\u52a1\u7aef\u4e0d\u4f1a\u9650\u5236\u5bc6\u7801\u7684\u91cd\u590d\u4f7f\u7528\u6b21\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a0\u3002  The Fabric CA server should now be listening on port 7054.  Fabric CA\u670d\u52a1\u7aef\u73b0\u5728\u5e94\u8be5\u6b63\u5728\u76d1\u542c7054\u7aef\u53e3\u3002  You may skip to the Fabric CA Client section if you do not want to configure the Fabric CA server to run in a cluster or to use LDAP.  \u5982\u679c\u4f60\u4e0d\u60f3\u914d\u7f6eFabric CA\u670d\u52a1\u7aef\u96c6\u7fa4\uff0c\u4e5f\u4e0d\u60f3\u4f7f\u7528LDAP\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u8df3\u5230 Fabric CA \u5ba2\u6237\u7aef \u8fd9\u4e00\u7ae0\u8282\u3002", 
            "title": "\u542f\u52a8\u670d\u52a1\u7aef"
        }, 
        {
            "location": "/ca-setup_zh/#_11", 
            "text": "This section describes how to configure the Fabric CA server to connect to Postgres or MySQL databases. The default database is SQLite and the default database file is  fabric-ca-server.db  in the Fabric CA server\u2019s home directory.  \u8fd9\u4e00\u90e8\u5206\u8bb2\u89e3\u5982\u4f55\u914d\u7f6eFabric CA\u670d\u52a1\u7aef\u8fde\u63a5\u5230Postgres\u6216\u8005MySQL\u3002\u9ed8\u8ba4\u7684\u6570\u636e\u5e93\u662fSQLite\uff0c\u9ed8\u8ba4\u7684\u6570\u636e\u5e93\u6587\u4ef6\u662f fabric-ca-server.db \uff0c\u5b58\u653e\u5728Fabric CA\u670d\u52a1\u7aef\u7684\u6839\u76ee\u5f55\u3002  If you don\u2019t care about running the Fabric CA server in a cluster, you may skip this section; otherwise, you must configure either Postgres or MySQL as described below.  \u5982\u679c\u4f60\u4e0d\u60f3\u8fd0\u884cFabric CA\u670d\u52a1\u7aef\u96c6\u7fa4\uff0c\u4f60\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u7ae0\uff1b\u4e0d\u7136\u7684\u8bdd\u4f60\u53ef\u4ee5\u7167\u4e0b\u9762\u7684\u6307\u5f15\u914d\u7f6ePostgres\u6216\u8005MySQL\u3002", 
            "title": "\u914d\u7f6e\u6570\u636e\u5e93"
        }, 
        {
            "location": "/ca-setup_zh/#postgres", 
            "text": "The following sample may be added to the server\u2019s configuration file in order to connect to a Postgres database. Be sure to customize the various values appropriately.  \u4e0b\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u6dfb\u52a0\u5230\u670d\u52a1\u7aef\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u6765\u4f7f\u670d\u52a1\u7aef\u8fde\u63a5\u5230\u4e00\u4e2aPostgres\u6570\u636e\u5e93\u3002\u522b\u5fd8\u4e86\u6b63\u786e\u5730\u81ea\u5b9a\u4e49\u5404\u79cd\u53c2\u6570\u3002  db:\n    type: postgres\n    datasource: host=localhost port=5432 user=Username password=Password dbname=fabric-ca-server sslmode=verify-full  Specifying sslmode configures the type of SSL authentication. Valid values for sslmode are:  \u6307\u5b9asslmode\u6765\u914d\u7f6e\bSSL\u8ba4\u8bc1\u7684\u7c7b\u578b\u3002sslmode\u6709\u6548\u7684\u503c\u4e3a\uff1a  If you would like to use TLS, then the db.tls section in the Fabric CA server configuration file must be specified. If SSL client authentication is enabled on the Postgres server, then the client certificate and key file must also be specified in the db.tls.client section. The following is an example of the db.tls section:  \u5982\u679c\u4f60\u60f3\u4f7f\u7528TLS\uff0c\u90a3\u4e48\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u660e db.tls \u8fd9\u4e00\u90e8\u5206\u3002\u5982\u679cPostgres\u670d\u52a1\u5668\u5f00\u542f\u4e86SSL\u5ba2\u6237\u7aef\u8ba4\u8bc1\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u7684\u8bc1\u4e66\u548c\u5bc6\u94a5\u6587\u4ef6\u5fc5\u987b\u5728 db.tls.client \u8fd9\u4e00\u90e8\u5206\u6307\u660e\u3002\u4e0b\u9762\u662f db.tls \u90e8\u5206\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a  db:\n    ...\n    tls:\n        enabled: true\n        certfiles:\n            - db-server-cert.pem\n        client:\n                certfile: db-client-cert.pem\n                keyfile: db-client-key.pem  certfiles  - A list of PEM-encoded trusted root certificate files.  certfile  and  keyfile  - PEM-encoded certificate and key files that are used by the Fabric CA server to communicate securely with the Postgres server  certfiles  - \u53ef\u4fe1\u4efb\u7684\u6839\u8bc1\u4e66\u6587\u4ef6\u5217\u8868\uff0c\u91c7\u7528PEM\u7f16\u7801  certfile  and  keyfile  - \u7528\u4e8e\u4e0ePostgres\u670d\u52a1\u5668\u5b89\u5168\u901a\u4fe1\u7684\u8bc1\u4e66\u548c\u5bc6\u94a5\u6587\u4ef6\uff0c\u91c7\u7528PEM\u7f16\u7801", 
            "title": "Postgres"
        }, 
        {
            "location": "/ca-setup_zh/#mysql", 
            "text": "The following sample may be added to the Fabric CA server configuration file in order to connect to a MySQL database. Be sure to customize the various values appropriately.  \u4e0b\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u6dfb\u52a0\u5230\bFabric CA\u670d\u52a1\u7aef\u914d\u7f6e\u6587\u4ef6\uff0c\u7528\u6765\u8fde\u63a5\u5230MySQL\u6570\u636e\u5e93\u3002\u522b\u5fd8\u4e86\u6b63\u786e\u5730\u81ea\u5b9a\u4e49\u5404\u79cd\u53c2\u6570\u3002  db:\n    type: mysql\n    datasource: root:rootpw@tcp(localhost:3306)/fabric-ca?parseTime=true tls=custom  If connecting over TLS to the MySQL server, the db.tls.client section is also required as described in the Postgres section above.  \u5982\u679c\u8981\u4f7f\u7528TLS\uff0c\u9700\u8981\u914d\u7f6e db.tls.client \u90e8\u5206\uff0c\u53c2\u8003Postgres\u90e8\u5206\u3002", 
            "title": "MySQL"
        }, 
        {
            "location": "/ca-setup_zh/#ldap", 
            "text": "The Fabric CA server can be configured to read from an LDAP server.  In particular, the Fabric CA server may connect to an LDAP server to do the following:   authenticate an identity prior to enrollment  retrieve an identity\u2019s attribute values which are used for authorization.   Modify the LDAP section of the Fabric CA server\u2019s configuration file to configure the server to connect to an LDAP server.  Fabric CA\u670d\u52a1\u7aef\u53ef\u4ee5\u914d\u7f6e\u4e3a\u8fde\u63a5\u5230\u4e00\u4e2aLDAP\u670d\u52a1\u5668\u3002  \u7279\u522b\u5730\uff0c\bFabric CA\u670d\u52a1\u7aef\u53ef\u4ee5\u8fde\u63a5\u5230\u4e00\u4e2aLDAP\u670d\u52a1\u5668\u6765\u505a\u4e0b\u9762\u7684\u4e8b\u60c5\uff1a   \u767b\u5f55\u524d\u9a8c\u8bc1\u4e00\u4e2a\u8eab\u4efd  \u6388\u6743\u65f6\u83b7\u53d6\u4e00\u4e2a\u8eab\u4efd\u7684\b\u5c5e\u6027\u503c   \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u4fee\u6539LDAP\u7684\u914d\u7f6e\u6765\u8fde\u63a5\u5230\u4e00\u4e2aLDAP\u670d\u52a1\u5668\u3002  ldap:\n    # Enables or disables the LDAP client (default: false)\n    enabled: false\n    # The URL of the LDAP server\n    url:  scheme :// adminDN : adminPassword @ host : port / base \n    userfilter: filter  where:\n- scheme is one of ldap or ldaps;\n- adminDN is the distinquished name of the admin user;\n- pass is the password of the admin user;\n- host is the hostname or IP address of the LDAP server;\n- port is the optional port number, where default 389 for ldap and 636 for ldaps;\n- base is the optional root of the LDAP tree to use for searches;\n- filter is a filter to use when searching to convert a login user name to a distinquished name. For example, a value of (uid=%s) searches for LDAP entries with the value of a uid attribute whose value is the login user name. Similarly, (email=%s) may be used to login with an email address.  \u5176\u4e2d\uff1a\n- scheme \bldap\u6216\u8005ldaps;\n- adminDN \u7ba1\u7406\u5458\u7684\u533a\u522b\u540d;\n- pass \u7ba1\u7406\u5458\u7684\u5bc6\u7801;\n- host LDAP\u670d\u52a1\u5668\u7684\u57df\u540d\u6216\u8005IP;\n- port \u53ef\u9009\u7684\u7aef\u53e3\u53f7\uff0cldap\u9ed8\u8ba4\u4e3a389\uff0cldaps\u9ed8\u8ba4\u4e3a636;\n- base \u53ef\u9009\u7684LDAP\u6811\u7684\u6839\uff0c\u7528\u4e8e\u641c\u7d22\u65f6;\n- filter \u641c\u7d22\u65f6\u7684\u8fc7\u6ee4\u5668\uff0c\u628a\u767b\u9646\u7528\u6237\u540d\u8f6c\u6362\u4e3a\u4e00\u4e2a\u533a\u522b\u540d\u3002\u6bd4\u5982\uff0c\uff08uid=%s\uff09\u4f1a\u641c\u7d22uid\u503c\u7b49\u4e8e\u7528\u6237\u767b\u5f55\u540d\u7684LDAP\u5b9e\u4f53\u3002\u7c7b\u4f3c\u5730\uff0c\uff08email=%s\uff09\u53ef\u4ee5\u7528\u4e8e\u90ae\u7bb1\u5730\u5740\u4f5c\u4e3a\b\u7528\u6237\u540d\u7684\u767b\u9646\u3002  The following is a sample configuration section for the default settings for the OpenLDAP server whose docker image is at  https://github.com/osixia/docker-openldap .  \u4e0b\u9762\u662f\u4e00\u4e2a\b\u914d\u7f6e\u4f8b\u5b50\uff0c\u7528\u4e8eOpenLDAP\u7684\u9ed8\u8ba4\u8bbe\u7f6e\uff0cOpenLDAP\u7684docker\u955c\u50cf\u5728 https://github.com/osixia/docker-openldap \u3002  ldap:\n    enabled: true\n    url: ldap://cn=admin,dc=example,dc=org:admin@localhost:10389/dc=example,dc=org\n    userfilter: (uid=%s)  See  FABRIC_CA/scripts/run-ldap-tests  for a script which starts an OpenLDAP docker image, configures it, runs the LDAP tests in  FABRIC_CA/cli/server/ldap/ldap_test.go , and stops the OpenLDAP server.  \u5728 FABRIC_CA/scripts/run-ldap-tests \u6709\u4e00\u4e2a\u811a\u672c\uff0c\u8fd9\u4e2a\u811a\u672c\u80fd\u542f\u52a8OpenLDAP\u7684docker\u955c\u50cf\uff0c\u914d\u7f6e\u5b83\uff0c\u7136\u540e\u8fd0\u884c FABRIC_CA/cli/server/ldap/ldap_test.go \u91cc\u9762\u7684LDAP\b\u6d4b\u8bd5\uff0c\u6700\u540e\u505c\u6b62OpenLDAP\u670d\u52a1\u5668\u3002  When LDAP is configured, enrollment works as follows:   The Fabric CA client or client SDK sends an enrollment request with a basic authorization header.  The Fabric CA server receives the enrollment request, decodes the identity name and password in the authorization header, looks up the DN (Distinquished Name) associated with the identity name using the \u201cuserfilter\u201d from the configuration file, and then attempts an LDAP bind with the identity\u2019s password. If the LDAP bind is successful, the enrollment processing is authorized and can proceed.   \u5f53LDAP\u914d\u7f6e\u597d\u540e\uff0c\u767b\u5f55\u7684\u6d41\u7a0b\u5982\u4e0b\uff1a   Fabric CA\u5ba2\u6237\u7aef\u6216\u8005\u5ba2\u6237\u7aefSDK\u53d1\u9001\u4e00\u4e2a\u767b\u5f55\u8bf7\u6c42\uff0c\b\u5e26\u4e0abasic\u65b9\u5f0f\u7684\u6388\u6743\u5934\u3002  Fabric CA\u670d\u52a1\u7aef\u6536\u5230\u767b\u5f55\u8bf7\u6c42\uff0c\u89e3\u7801\b\u6388\u6743\u5934\u91cc\u7684\u8eab\u4efd\u540d\u548c\u5bc6\u7801\uff0c\u67e5\u627e\u4e0e\b\u8eab\u4efd\u540d\u76f8\u5173\u8054\u7684\u533a\u522b\u540d\uff0c\b\uff08\u5173\u8054\u65b9\u5f0f\u4e3a\u914d\u7f6e\u6587\u4ef6\u91cc\u7684 userfilter \u5b9a\u4e49\u7684\uff09\uff0c\u7136\u540e\u7528\u8eab\u4efd\u5bc6\u7801\u5c1d\u8bd5\u4e00\u4e2aLDAP\u7ed1\u5b9a\u3002\u5982\u679cLDAP\u7ed1\u5b9a\u6210\u529f\uff0c\b\u90a3\u4e48\u767b\u5f55\u8fc7\u7a0b\u88ab\u6279\u51c6\u4e86\uff0c\u80fd\u591f\u7ee7\u7eed\u3002   When LDAP is configured, attribute retrieval works as follows:   A client SDK sends a request for a batch of tcerts with one or more attributes to the Fabric CA server.  The Fabric CA server receives the tcert request and does as follows:  extracts the enrollment ID from the token in the authorization header (after validating the token);  does an LDAP search/query to the LDAP server, requesting all of the attribute names received in the tcert request;  the attribute values are placed in the tcert as normal.   \u5f53LDAP\u914d\u7f6e\u597d\u4e86\uff0c\u5c5e\u6027\u8fd4\u56de\u7684\u6d41\u7a0b\u5982\u4e0b\uff1a   \u5ba2\u6237\u7aefSDK\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u5c5e\u6027\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\u5230\u670d\u52a1\u7aef\b\uff0c\u8bf7\u6c42\u4e00\u6279tcerts\u3002  \u670d\u52a1\u7aef\u6536\u5230tcert\u8bf7\u6c42\uff0c\u505a\u5982\u4e0b\u7684\u4e8b:  \u5728\u6388\u6743\u5934\u53d6\u51fa\u767b\u5f55ID\uff08\u5728\u9a8c\u8bc1token\u540e\uff09;  \u505a\u4e00\u6b21LDAP\u67e5\u8be2\uff0c\u5411\bLDAP\u670d\u52a1\u5668\u8bf7\u6c42tcert\u8bf7\u6c42\u4e2d\u7684\u6240\u6709\u7684\u5c5e\u6027\u540d;  \u5c5e\u6027\u503c\u653e\u7f6e\u5728tcert\u4e2d\u3002", 
            "title": "\u914d\u7f6eLDAP"
        }, 
        {
            "location": "/ca-setup_zh/#_12", 
            "text": "You may use any IP sprayer to load balance to a cluster of Fabric CA servers. This section provides an example of how to set up Haproxy to route to a Fabric CA server cluster. Be sure to change hostname and port to reflect the settings of your Fabric CA servers.  \u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u610fIP\u4ee3\u7406\u6765\u4e3aFabric CA\u670d\u52a1\u7aef\u96c6\u7fa4\u505a\u8d1f\u8f7d\u5747\u8861\u3002\u8fd9\u4e00\u8282\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f8b\u5b50\u6765\b\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Haproxy\u6765\u4e3a\b\u96c6\u7fa4\b\u8def\u7531\u3002\u522b\u5fd8\u4e86\u4fee\u6539\u57df\u540d\u548c\u7aef\u53e3\u3002  haproxy.conf  global\n    maxconn 4096\n    daemon\n\ndefaults\n    mode http\n    maxconn 2000\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nlisten http-in\n    bind *:7054\n    balance roundrobin\n    server server1 hostname1:port\n    server server2 hostname2:port\n    server server3 hostname3:port  \u6ce8\u610f\uff1a\u5982\u679c\u4f7f\u7528TLS\uff0c\u9700\u8981\u4f7f\u7528 mode tcp", 
            "title": "\u6784\u5efa\u4e00\u4e2a\u96c6\u7fa4"
        }, 
        {
            "location": "/ca-setup_zh/#farbic-ca", 
            "text": "This section describes how to use the fabric-ca-client command.  The Fabric CA client\u2019s home directory is determined as follows:   if the  FABRIC_CA_CLIENT_HOME  environment variable is set, use its value;  otherwise, if the  FABRIC_CA_HOME  environment variable is set, use its value;  otherwise, if the  CA_CFG_PATH  environment variable is set, use its value;  otherwise, use  $HOME/.fabric-ca-client .   The instructions below assume that the client configuration file exists in the client\u2019s home directory.  \u8fd9\u4e00\u90e8\u5206\u8bb2\u89e3\u5982\u4f55\u4f7f\u7528fabric-ca-client\u7684\u547d\u4ee4\u3002  Fabric CA\u5ba2\u6237\u7aef\u7684\u6839\u76ee\u5f55\u5b9a\u4e49\u89c4\u5219\u5982\u4e0b\uff1a   \u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf  FABRIC_CA_CLIENT_HOME  \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c  \u5426\u5219\uff0c\u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf  FABRIC_CA_HOME  \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c  \u5426\u5219\uff0c\u5982\u679c\u5b58\u5728\u73af\u5883\u53d8\u91cf  CA_CFG_PATH  \uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u503c  \u5426\u5219\uff0c\u4f7f\u7528 $HOME/.fabric-ca-client   \u4e0b\u9762\u7684\u6307\u5f15\u5047\u8bbe\u5ba2\u6237\u7aef\u7684\u914d\u7f6e\u6587\u4ef6\u5b58\u5728\u4e8e\u5ba2\u6237\u7aef\u6839\u76ee\u5f55\u3002", 
            "title": "Farbic CA \u5ba2\u6237\u7aef"
        }, 
        {
            "location": "/ca-setup_zh/#_13", 
            "text": "First, if needed, customize the CSR (Certificate Signing Request) section in the client configuration file. Note that  csr.cn  field must be set to the ID of the bootstrap identity. Default CSR values are shown below:  \u9996\u5148\uff0c\u5982\u679c\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u81ea\u5b9a\u4e49CSR\uff08\b\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\uff09\uff0c\u6ce8\u610f csr.cn \u5fc5\u987b\u8bbe\u7f6e\u4e3a\u5f15\u5bfc\u8eab\u4efd\u7684ID\u3002\u9ed8\u8ba4CSR\u5982\u4e0b\uff1a  csr:\n    cn:  enrollment ID \n    key:\n        algo: ecdsa\n        size: 256\n    names:\n        - C: US\n        ST: North Carolina\n        L:\n        O: Hyperledger Fabric\n        OU: Fabric CA\n    hosts:\n    -  hostname of the fabric-ca-client \n    ca:\n        pathlen:\n        pathlenzero:\n        expiry:  See CSR fields for description of the fields.  Then run  fabric-ca-client enroll  command to enroll the identity. For example, following command enrolls an identity whose ID is admin and password is adminpw by calling Fabric CA server that is running locally at 7054 port.  \u67e5\u770b\u5b57\u6bb5\u7684\u63cf\u8ff0\uff0c CSR fields  \u7136\u540e\u8fd0\u884c fabric-ca-client enroll \u547d\u4ee4\u6765\u767b\u5f55\u4e00\u4e2a\u8eab\u4efd\u3002\u6bd4\u5982\uff0c\u4e0b\u9762\u7684\u547d\u4ee4\u5411\u4e00\u4e2a\u672c\u5730\u8fd0\u884c\u57287054\u7aef\u53e3\u7684Fabric CA\u670d\u52a1\u7aef\uff0c\u767b\u5f55\u4e86\u4e00\u4e2aID\u4e3aadmin\uff0cpassword\u4e3aadminpw\u7684\u8eab\u4efd\u3002  # export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client enroll -u http://admin:adminpw@localhost:7054  The enroll command stores an enrollment certificate (ECert), corresponding private key and CA certificate chain PEM files in the subdirectories of the Fabric CA client\u2019s  msp  directory. You will see messages indicating where the PEM files are stored.  \u767b\u5f55\u547d\u4ee4\u4f1a\u5b58\u50a8\u4e00\u4e2a\u767b\u5f55\u8bc1\u4e66\uff08ECert\uff09\uff0c\u76f8\u5bf9\u5e94\u7684\u79c1\u94a5\uff0c\u8fd8\u6709CA\u8bc1\u4e66\u94fePEM\u6587\u4ef6\u3002\b\u8fd9\u4e9b\u5b58\u50a8\u5728Fabric CA\u5ba2\u6237\u7aef\u7684msp\u76ee\u5f55\u7684\u5b50\u76ee\u5f55\u4e0b\uff0c\u4f60\u4f1a\u770b\u5230\u4fe1\u606f\u63d0\u793aPEM\u5b58\u50a8\u5728\u54ea\u91cc\u3002", 
            "title": "\u767b\u9646\u542f\u52a8\u7528\u6237"
        }, 
        {
            "location": "/ca-setup_zh/#_14", 
            "text": "The identity performing the register request must be currently enrolled, and must also have the proper authority to register the type of the identity that is being registered.  \u53ea\u6709\u5df2\u7ecf\u767b\u5f55\u4e86\u7684\u8eab\u4efd\u624d\u80fd\u53d1\u8d77\u6ce8\u518c\u7684\u8bf7\u6c42\uff0c\u800c\u4e14\u5fc5\u987b\u6709\u76f8\u5e94\u7684\u6743\u9650\u6765\u6ce8\u518c\u60f3\u8981\u6ce8\u518c\u7684\u8eab\u4efd\u7c7b\u578b\u3002  In particular, two authorization checks are made by the Fabric CA server during registration as follows:   The invoker\u2019s identity must have the \u201chf.Registrar.Roles\u201d attribute with a comma-separated list of values where one of the value equals the type of identity being registered; for example, if the invoker\u2019s identity has the \u201chf.Registrar.Roles\u201d attribute with a value of \u201cpeer,app,user\u201d, the invoker can register identities of type peer, app, and user, but not orderer.  The affiliation of the invoker\u2019s identity must be equal to or a prefix of the affiliation of the identity being registered. For example, an invoker with an affiliation of \u201ca.b\u201d may register an identity with an affiliation of \u201ca.b.c\u201d but may not register an identity with an affiliation of \u201ca.c\u201d.   The following command uses the admin identity\u2019s credentials to register a new identity with an enrollment id of \u201cadmin2\u201d, a type of \u201cuser\u201d, an affiliation of \u201corg1.department1\u201d, and an attribute named \u201chf.Revoker\u201d with a value of \u201ctrue\u201d.  \u7279\u522b\u5730\uff0c\u6ce8\u518c\u65f6Fabric CA\u670d\u52a1\u7aef\u505a\u4e24\u9879\u6743\u9650\u68c0\u67e5\uff1a   \u6ce8\u518c\u53d1\u8d77\u8005\u7684\u201c\bhf.Registrar.Roles\u201d\u5c5e\u6027\u4e2d\u5fc5\u987b\u6709\u8bf7\u6c42\u6ce8\u518c\u7684\u7c7b\u578b\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u53d1\u8d77\u8005\u7684\b\u201chf.Registrar.Roles\u201d\u5c5e\u6027\u7684\u503c\u4e3a\u201cpeer,app,user\u201d\uff0c\u90a3\u4e48\u4ed6\u80fd\u6ce8\u518c\u7684\u7c7b\u578b\u4e3apeer\uff0capp\u548cuser\uff0c\u4e0d\u80fd\u6ce8\u518corderer\u3002  \u53d1\u8d77\u8005\u7684affiliation\u5fc5\u987b\u4e0e\u4ed6\u8bf7\u6c42\u6ce8\u518c\u7684\u8eab\u4efd\u7684affiliation\u76f8\u540c\uff0c\u6216\u8005\u662f\u6240\u8bf7\u6c42\u6ce8affiliation\u7684\u524d\u7f00\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e00\u4e2aaffiliation\u4e3a\u201ca.b\u201d\u7684\u53d1\u8d77\u8005\uff0c\u53ef\u4ee5\u6ce8\u518c\u4e00\u4e2aaffiliation\u4e3a\u201ca.b.c\u201d\u7684\u8eab\u4efd\uff0c\u4f46\u662f\u4e0d\u80fd\u6ce8\u518c\u4e00\u4e2aaffiliation\u4e3a\u201ca.c\u201d\u7684\u8eab\u4efd\u3002   \u4e0b\u9762\u7684\u547d\u4ee4\u4f7f\u7528admin\u8eab\u4efd\u7684\u51ed\u8bc1\u6765\u6ce8\u518c\u4e00\u4e2a\u65b0\u7684\u8eab\u4efd\uff0c\u767b\u5f55ID\u662f\u201cadmin2\u201d\uff0c\u7c7b\u578b\u4e3a\u201cuser\u201d\uff0caffiliation\u4e3a\u201corg1.department1\u201d\uff0c\u8fd8\u6709\u201chf.Revoker\u201d\u5c5e\u6027\u4e3a\u201ctrue\u201d\u3002  # export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client register --id.name admin2 --id.type user --id.affiliation org1.department1 --id.attr hf.Revoker=true  The password, also known as the enrollment secret, is printed. This password is required to enroll the identity. This allows an administrator to register an identity and give the enrollment ID and the secret to someone else to enroll the identity.  \u5bc6\u7801\u4f1a\u88ab\b\u6253\u5370\u51fa\u6765\uff0c\u767b\u5f55\u8fd9\u4e2a\u65b0\u6ce8\u518c\u7684\u8eab\u4efd\u7684\u65f6\u5019\uff0c\u9700\u8981\u7528\u5230\u8fd9\u4e2a\u5bc6\u7801\u3002\u8fd9\u5141\u8bb8\u4e00\u4e2a\u7ba1\u7406\u5458\u6ce8\u518c\u8eab\u4efd\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u8eab\u4efd\u7684ID\b\u548c\u5bc6\u7801\u7ed9\u522b\u4eba\u6765\u767b\u9646\u3002  You may set default values for any of the fields used in the register command by editing the client\u2019s configuration file. For example, suppose the configuration file contains the following:  \u4f60\u53ef\u4ee5\u901a\u8fc7\u7f16\u8f91\u914d\u7f6e\u6587\u4ef6\u6765\u8bbe\u7f6e\u6ce8\u518c\u65f6\u4e00\u4e9b\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u914d\u7f6e\u6587\u4ef6\u5305\u542b\u4e0b\u9762\u7684\u5185\u5bb9\uff1a  id:\n    name:\n    type: user\n    affiliation: org1.department1\n    attributes:\n        - name: hf.Revoker\n        value: true\n        - name: anotherAttrName\n        value: anotherAttrValue  The following command would then register a new identity with an enrollment id of \u201cadmin3\u201d which it takes from the command line, and the remainder is taken from the configuration file including the identity type: \u201cuser\u201d, affiliation: \u201corg1.department1\u201d, and two attributes: \u201chf.Revoker\u201d and \u201canotherAttrName\u201d.  \u4e0b\u9762\u7684\u547d\u4ee4\u4f1a\u6ce8\u518c\u4e00\u4e2a\u65b0\u7684\u8eab\u4efd\b\uff0cid\u4e3aadmin3\uff0c\u5176\u4ed6\u7684\u5185\u5bb9\u4f1a\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u51fa\u6765\u3002\u5305\u62ec\uff1a\u7c7b\u578b\u201cuser\u201d\uff0caffiliation \u201corg1.department1\u201d\uff0c\u8fd8\u6709\u4e24\u4e2a\u5c5e\u6027\uff0c\u201chf.Revoker\u201d\u548c\u201canotherAttrName\u201d\u3002  # export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client register --id.name admin3  To register an identity with multiple attributes requires specifying all attribute names and values in the configuration file as shown above.  \u6ce8\u518c\u6709\u591a\u4e2a\u5c5e\u6027\u7684\u8eab\u4efd\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u660e\u6240\u6709\u5c5e\u6027\b\u540d\u548c\u5c5e\u6027\u503c\uff0c\u5982\u4e0a\u6240\u793a\u3002  Next, let\u2019s register a peer identity which will be used to enroll the peer in the following section. The following command registers the peer1 identity. Note that we choose to specify our own password (or secret) rather than letting the server generate one for us.  \u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u6ce8\u518c\u4e00\u4e2a\u8282\u70b9\u8eab\u4efd\uff0c\u4f1a\u5728\u4e0b\u9762\b\u5185\u5bb9\u767b\u9646\u8282\u70b9\u7684\u65f6\u5019\u7528\u5230\u3002\u4e0b\u9762\u7684\u547d\u4ee4\u6ce8\u518c\u4e86\u4e00\u4e2apeer1\u8eab\u4efd\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u6307\u660e\u81ea\u5df1\u7684\u5bc6\u7801\uff0c\u800c\u4e0d\u662f\u7531\u670d\u52a1\u5668\u751f\u6210\u3002  # export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client register --id.name peer1 --id.type peer --id.affiliation org1.department1 --id.secret peer1pw", 
            "title": "\u6ce8\u518c\u4e00\u4e2a\u65b0\u7684\u8eab\u4efd"
        }, 
        {
            "location": "/ca-setup_zh/#_15", 
            "text": "Now that you have successfully registered a peer identity, you may now enroll the peer given the enrollment ID and secret (i.e. the password from the previous section). This is similar to enrolling the bootstrap identity except that we also demonstrate how to use the \u201c-M\u201d option to populate the Hyperledger Fabric MSP (Membership Service Provider) directory structure.  \u73b0\u5728\u4f60\u6210\u529f\u5730\u6ce8\u518c\u4e86\u4e00\u4e2a\u8282\u70b9\u8eab\u4efd\uff0c\u4f60\u53ef\u4ee5\u7528ID\u548c\b\u5bc6\u7801\u767b\u9646\u3002\b\u8fd9\u90e8\u5206\u4e0e\u767b\u9646\u4e00\u4e2a\u5f15\u5bfc\u8eab\u4efd\u7c7b\u4f3c\u3002\u6211\u4eec\u8fd8\u4f1a\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\u201c-M\u201d\u9009\u9879\u6765\b\u66f4\u6362MSP\u7684\u76ee\u5f55\u3002  The following command enrolls peer1. Be sure to replace the value of the \u201c-M\u201d option with the path to your peer\u2019s MSP directory which is the \u2018mspConfigPath\u2019 setting in the peer\u2019s core.yaml file. You may also set the FABRIC_CA_CLIENT_HOME to the home directory of your peer.  \u4e0b\u9762\u7684\u547d\u4ee4\u767b\u9646peer1\u3002\u8bb0\u5f97\b\u5728\u201c-M\u201d\u9009\u9879\u4e0b\u66f4\u6539\b\u4f60\u81ea\u5df1\b\u7684MSP\u76ee\u5f55\uff0c\bMSP\b\u76ee\u5f55\u662f\u7531\u8282\u70b9\u7684core.yaml\u91cc\u7684\u201cmspConfigPath\u201d\u6307\u5b9a\u7684\u3002\u4f60\u4e5f\u53ef\u4ee5\u8bbe\u7f6eFABRIC_CA_CLIENT_HOME\u73af\u5883\u53d8\u91cf\u4e3apeer\u7684\u6839\u76ee\u5f55\u3002  # export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/peer1\n# fabric-ca-client enroll -u http://peer1:peer1pw@localhost:7054 -M $FABRIC_CA_CLIENT_HOME/msp  Enrolling an orderer is the same, except the path to the MSP directory is the \u2018LocalMSPDir\u2019 setting in your orderer\u2019s orderer.yaml file.  \b\u767b\u9646\u4e00\u4e2aorderer\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u9664\u4e86MSP\u76ee\u5f55\u662f\u8bbe\u7f6e\u5728\u4f60\u7684orderer\u7684orderer.yaml\u6587\u4ef6\u91cc\u7684\u201cLocalMSPDir\u201d\u3002", 
            "title": "\u767b\u5f55\u4e00\u4e2a\u8282\u70b9"
        }, 
        {
            "location": "/ca-setup_zh/#fabric-caca", 
            "text": "In general, the cacerts directory of the MSP directory must contain the certificate authority chains of other certificate authorities, representing all of the roots of trust for the peer.  \u901a\u5e38\uff0cMSP\u76ee\u5f55\u7684ca\u8bc1\u4e66\u76ee\u5f55\u5fc5\u987b\u5305\u542b\u8bc1\u4e66\u94fe\uff0c\u4ee3\u8868\u8fd9\u4e2a\u8282\u70b9\u6240\u6709\u4fe1\u4efb\u7684\u4fe1\u4efb\u4e2d\u5fc3\u3002  The fabric-ca-client getcacerts command is used to retrieve these certificate chains from other Fabric CA server instances.  fabric-ca-client getcacerts \u547d\u4ee4\b\u7528\u4e8e\u4ece\u5176\u4ed6Fabric CA\u670d\u52a1\u5668\u5b9e\u4f8b\u83b7\u53d6\u8fd9\u4e9b\u8bc1\u4e66\u94fe\u3002  For example, the following will start a second Fabric CA server on localhost listening on port 7055 with a name of \u201cCA2\u201d. This represents a completely separate root of trust and would be managed by a different member on the blockchain.  \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e0b\u9762\u7684\u547d\u4ee4\u4f1a\u5728\u672c\u5730\u542f\u52a8\u7b2c\u4e8c\u4e2aFabric CA\u670d\u52a1\u5668\uff0c\u76d1\u542c7055\u7aef\u53e3\uff0c\u547d\u540d\u4e3a\u201cCA2\u201c\u3002\u8fd9\u4ee3\u8868\u4e24\u4e2a\u7531\u4e0d\u540c\u6210\u5458\u7ba1\u7406\u7684\u5206\u5f00\u7684\u4fe1\u4efb\b\u4e2d\u5fc3\u3002  # export FABRIC_CA_SERVER_HOME=$HOME/ca2\n# fabric-ca-server start -b admin:ca2pw -p 7055 -n CA2  The following command will install CA2\u2019s certificate chain into peer1\u2019s MSP directory.  \u4e0b\u9762\u7684\u547d\u4ee4\u4f1a\u628aCA2\u7684\u8bc1\u4e66\u94fe\u5b89\u88c5\u8fdbpeer1\u7684MSP\u76ee\u5f55\u3002  # export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/peer1\n# fabric-ca-client getcacert -u http://localhost:7055 -M $FABRIC_CA_CLIENT_HOME/msp", 
            "title": "\u4ece\u53e6\u4e00\u4e2aFabric CA\u670d\u52a1\u5668\u83b7\u5f97CA\u8bc1\u4e66\u94fe"
        }, 
        {
            "location": "/ca-setup_zh/#_16", 
            "text": "Suppose your enrollment certificate is about to expire or has been compromised. You can issue the reenroll command to renew your enrollment certificate as follows.  \u5047\u8bbe\u4f60\u7684\u767b\u9646\b\u8bc1\u4e66\u5feb\u8fc7\u671f\u4e86\uff0c\u4f60\u53ef\u4ee5\u91cd\u65b0\u767b\u9646\u6765\b\u66ff\u6362\u4f60\u7684\u767b\u9646\u8bc1\u4e66\uff08\bECert\uff09\u3002  # export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/peer1\n# fabric-ca-client reenroll", 
            "title": "\u91cd\u65b0\u767b\u9646\u4e00\u4e2a\u8eab\u4efd"
        }, 
        {
            "location": "/ca-setup_zh/#_17", 
            "text": "An identity or a certificate can be revoked. Revoking an identity will revoke all the certificates owned by the identity and will also prevent the identity from getting any new certificates. Revoking a certificate will invalidate a single certificate.  \b\b\u8eab\u4efd\u548c\u8bc1\u4e66\u90fd\u80fd\u88ab\u64a4\u9500\u3002\u64a4\u9500\u4e00\u4e2a\b\u8eab\u4efd\u4f1a\u64a4\u9500\u8be5\b\b\u8eab\u4efd\u62e5\u6709\u7684\u6240\u6709\u8bc1\u4e66\uff0c\u8be5\u8eab\u4efd\u4e5f\u4e0d\u80fd\u518d\u83b7\u5f97\u65b0\u7684\u8bc1\u4e66\u3002\u64a4\u9500\u4e00\u4e2a\u8bc1\u4e66\u4f1a\u4f7f\u8be5\u8bc1\u4e66\u5931\u6548\u3002  In order to revoke a certificate or an identity, the calling identity must have the hf.Revoker attribute. The revoking identity can only revoke a certificate or an identity that has an affiliation that is equal to or prefixed by the revoking identity\u2019s affiliation.  \u4e3a\u4e86\u64a4\u9500\u4e00\u4e2a\u8bc1\u4e66\u6216\u8eab\u4efd\uff0c\u53d1\u8d77\u8005\u5fc5\u987b\u6709hf.Revoker\u5c5e\u6027\u3002\u53d1\u8d77\u8005\u53ea\u80fd\u64a4\u9500\u4e0e\u81ea\u5df1\u7684affiliation\u76f8\u540c\u7684\u8bc1\u4e66\u6216\u8eab\u4efd\uff0c\u6216\u8005\u53d1\u8d77\u8005\u7684affiliation\u662f\u88ab\b\u64a4\u9500\u8005\u7684affiliation\u7684\u524d\u7f00\u3002  For example, a revoker with affiliation orgs.org1 can revoke an identity affiliated with orgs.org1 or orgs.org1.department1 but can\u2019t revoke an identity affiliated with orgs.org2.  \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e00\u4e2a\u201corgs.org1\u201d\u7684\u53d1\u8d77\u8005\u53ea\u80fd\u64a4\u9500orgs.org1\u6216\u8005orgs.org1.department1\u7684\u8eab\u4efd\uff0c\u800c\b\u4e0d\u80fd\u64a4\u9500orgs.org2\u7684\u8eab\u4efd\u3002  The following command disables an identity and revokes all of the certificates associated with the identity. All future requests received by the Fabric CA server from this identity will be rejected.  \u4e0b\u9762\u7684\u547d\u4ee4\u64a4\u9500\u4e00\u4e2a\u8eab\u4efd\u3002\u5c06\u6765\u6240\u6709\u53d1\u81ea\u8be5\u8eab\u4efd\u7684\u8bf7\u6c42\u90fd\u4f1a\u88abFabric CA\b\u670d\u52a1\u5668\u62d2\u6536\u3002  fabric-ca-client revoke -e  enrollment_id  -r  reason   The following are the supported reasons that can be specified using -r flag:  \u4e0b\u9762\u662f -r \u9009\u9879\u652f\u6301\u7684\u7406\u7531\uff1a   unspecified  keycompromise  cacompromise  affiliationchange  superseded  cessationofoperation  certificatehold  removefromcrl  privilegewithdrawn  aacompromise   For example, the bootstrap admin who is associated with root of the affiliation tree can revoke peer1\u2018s identity as follows:  \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6709\u7740\b\u6839\baffiliation\u7684admin\u53ef\u4ee5\u56de\u6536peer1\u8eab\u4efd\uff1a  # export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin\n# fabric-ca-client revoke -e peer1  An enrollment certificate that belongs to an identity can be revoked by specifying its AKI (Authority Key Identifier) and serial number as follows:  \u4e00\u4e2a\u8eab\u4efd\u53ef\u4ee5\u64a4\u9500\u81ea\u5df1\u7684\u767b\u9646\u8bc1\u4e66\uff08ECert\uff09\uff0c\u9700\u8981\u6307\u5b9aECert\u7684AKI\u548c\u5e8f\u5217\u53f7\uff1a  fabric-ca-client revoke -a xxx -s yyy -r  reason   For example, you can get the AKI and the serial number of a certificate using the openssl command and pass them to the revoke command to revoke the said certificate as follows:  \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7openssl\u547d\u4ee4\u6765\u83b7\u53d6\u4e00\u4e2a\u8bc1\u4e66\u7684AKI\u548c\u5e8f\u5217\u53f7\uff1a  serial=$(openssl x509 -in userecert.pem -serial -noout | cut -d \"=\" -f 2)\naki=$(openssl x509 -in userecert.pem -text | awk '/keyid/ {gsub(/ *keyid:|:/,\"\",$1);print tolower($0)}')\nfabric-ca-client revoke -s $serial -a $aki -r affiliationchange", 
            "title": "\u64a4\u9500\u4e00\u4e2a\u8bc1\u4e66\u6216\u8eab\u4efd"
        }, 
        {
            "location": "/ca-setup_zh/#tls", 
            "text": "This section describes in more detail how to configure TLS for a Fabric CA client.  \u8fd9\u4e00\u90e8\u5206\u4ecb\u7ecd\u5982\u4f55\u4e3aFabric CA\u5ba2\u6237\u7aef\u914d\u7f6eTLS\u3002  The following sections may be configured in the  fabric-ca-client-config.yaml .  \u4e0b\u9762\u7684\u53ef\u4ee5\u914d\u7f6e\u5728 fabric-ca-client-config.yaml \u4e2d\u3002  tls:\n    # Enable TLS (default: false)\n    enabled: true\n    certfiles:\n        - root.pem\n    client:\n        certfile: tls_client-cert.pem\n        keyfile: tls_client-key.pem  The certfiles option is the set of root certificates trusted by the client. This will typically just be the root Fabric CA server\u2019s certificate found in the server\u2019s home directory in the ca-cert.pem file.  certfiles \u662f\u8be5\u5ba2\u6237\u7aef\u4fe1\u4efb\u7684\u6839\u8bc1\u4e66\u96c6\u5408\u3002\u4e00\u822c\u8fd9\u90fd\u4f1a\u662f\bFabric CA\u670d\u52a1\u7aef\u6839\u76ee\u5f55\b\u4e0b\u7684ca-cert.pem\u3002  The client option is required only if mutual TLS is configured on the server.  \u53ea\u6709\u5728\u670d\u52a1\u5668\u914d\u7f6e\u4e86\u53cc\u5411TLS\u7684\u60c5\u51b5\u4e0b\uff0c client \u9009\u9879\u624d\u9700\u8981\u3002", 
            "title": "\u542f\u7528TLS"
        }, 
        {
            "location": "/ca-setup_zh/#_18", 
            "text": "", 
            "title": "\u9644\u5f55"
        }, 
        {
            "location": "/ca-setup_zh/#postgres-ssl", 
            "text": "", 
            "title": "Postgres SSL \u914d\u7f6e"
        }, 
        {
            "location": "/ca-setup_zh/#postgre", 
            "text": "In postgresql.conf, uncomment SSL and set to \u201con\u201d (SSL=on)  Place certificate and key files in the Postgres data directory.   Instructions for generating self-signed certificates for: https://www.postgresql.org/docs/9.5/static/ssl-tcp.html  Note: Self-signed certificates are for testing purposes and should not be used in a production environment   \u5728postgresql.conf\u4e2d\u6253\u5f00SSL\uff08SSL=on\uff09  \u628a\u8bc1\u4e66\u548c\b\u5bc6\u94a5\u6587\u4ef6\u653e\u5728Postgres\u6570\u636e\u76ee\u5f55\u4e0b\u3002   \u5982\u4f55\u751f\u6210\u81ea\u7b7e\u540d\u7684\u8bc1\u4e66\uff1ahttps://www.postgresql.org/docs/9.5/static/ssl-tcp.html  \u6ce8\u610f\uff1a\u81ea\u7b7e\u540d\u7684\u8bc1\u4e66\u7528\u4e8e\u6d4b\u8bd5\u76ee\u7684\uff0c\u8bf7\u52ff\u7528\u4e8e\b\u751f\u4ea7\u73af\u5883\u3002", 
            "title": "\u914d\u7f6ePostgre\u670d\u52a1\u5668\u7684\u57fa\u672c\u6b65\u9aa4\uff1a"
        }, 
        {
            "location": "/ca-setup_zh/#postgres-", 
            "text": "Place certificates of the certificate authorities (CAs) you trust in the file root.crt in the Postgres data directory  In postgresql.conf, set \u201cssl_ca_file\u201d to point to the root cert of the client (CA cert)  Set the clientcert parameter to 1 on the appropriate hostssl line(s) in pg_hba.conf.   For more details on configuring SSL on the Postgres server, please refer to the following Postgres documentation: https://www.postgresql.org/docs/9.4/static/libpq-ssl.html   \u628a\u4f60\u4fe1\u4efb\u7684CA\u8bc1\u4e66\u653e\u5728Postgres\u6570\u636e\u76ee\u5f55\u91cc\u7684root.crt\u91cc  \u5728\bpostgresql.conf\u91cc\uff0c\u8bbe\u7f6e\u201cssl_ca_file\u201d\u6307\u5411\u5ba2\u6237\u7aef\u7684\u6839\u8bc1\u4e66  \u5728pg_hba.conf\u91cc\uff0c\u5728\b\u6b63\u786e\u7684hostssl\u884c\u628aclientcert\b\u53c2\u6570\u8bbe\u4e3a1   \u66f4\u591a\u4fe1\u606f\uff1ahttps://www.postgresql.org/docs/9.4/static/libpq-ssl.html", 
            "title": "Postgres \u670d\u52a1\u5668 - \u9700\u8981\u5ba2\u6237\u7aef\u8bc1\u4e66"
        }, 
        {
            "location": "/ca-setup_zh/#mysql-ssl", 
            "text": "On MySQL 5.7.X, certain modes affect whether the server permits \u20180000-00-00\u2019 as a valid date. It might be necessary to relax the modes that MySQL server uses. We want to allow the server to be able to accept zero date values.", 
            "title": "MySQL SSL \u914d\u7f6e"
        }, 
        {
            "location": "/sdk_node_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\n\n\n\n\n\n\n\n\n\n\n\u8fd9\u91cc\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u5c31\u9760\u4f60\u4e86\uff01\uff01\uff01", 
            "title": "SDK--node"
        }, 
        {
            "location": "/sdk_node_zh/#_1", 
            "text": "", 
            "title": "\u8fd9\u91cc\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u5c31\u9760\u4f60\u4e86\uff01\uff01\uff01"
        }, 
        {
            "location": "/sdk_java_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nXuanyong Wu\n\n\n\n\n\n\n\n\n\n\nWelcome to Java SDK for Hyperledger project. The SDK helps facilitate Java applications to manage the lifecycle of Hyperledger channels  and user chaincode. The SDK also provides a means to execute user chaincode, query blocks and transactions on the channel, and monitor events on the channel.\n\n\n\u6b22\u8fce\u4f7f\u7528Hyperledger\u9879\u76ee\u7684Java SDK\u3002 \u8be5SDK\u5e2e\u52a9\u4fc3\u8fdbJava\u5e94\u7528\u7a0b\u5e8f\u5bf9Hyperledger\u901a\u9053\u548c\u7528\u6237\u94fe\u7801\u7684\u751f\u547d\u5468\u671f\u7684\u7ba1\u7406\u3002\u8be5SDK\u540c\u65f6\u63d0\u4f9b\u6267\u884c\u7528\u6237\u94fe\u7801\u3001\u5728\u901a\u9053\u4e0a\u67e5\u8be2\u533a\u5757\u548c\u4ea4\u6613\u4ee5\u53ca\u76d1\u542c\u901a\u9053\u4e0a\u7684\u4e8b\u4ef6\u7684\u4e00\u4e9b\u65b9\u6cd5\u3002\n\n\nThe SDK acts on behave of a particular User which is defined by the embedding application through the implementation of the SDK\ns \nUser\n interface.\n\n\n\u8be5SDK\u80fd\u591f\u5b9e\u73b0\u4e00\u4e9b\u7279\u5b9a\u7528\u6237\u7684\u884c\u4e3a\uff0c\u8fd9\u662f\u7531\u5d4c\u5165\u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u5b9e\u73b0SDK\u7684\nUser\n\u63a5\u53e3\u6765\u5b8c\u6210\u7684\u3002\n\n\nNote, the SDK does \nnot\n provide a means of persistence for the application defined channels and user artifacts on the client. This is left for the embedding application to best manage.\n\n\n\u8bf7\u6ce8\u610f\uff0c\u8be5SDK\n\u4e0d\u63d0\u4f9b\n\u5ba2\u6237\u7aef\u4e0a\u5e94\u7528\u5b9a\u4e49\u7684\u901a\u9053\u548c\u7528\u6237\u7ed3\u679c\u7684\u6301\u4e45\u6027\u65b9\u6cd5\u3002\u8fd9\u4e2a\u662f\u9884\u7559\u7ed9\u5d4c\u5165\u7a0b\u5e8f\u80fd\u591f\u8fdb\u884c\u66f4\u6709\u6548\u7684\u7ba1\u7406\u3002\n\n\nThe SDK also provides a client for Hyperledger\ns certificate authority.  The SDK is however not dependent on this\nparticular implementation of a certificate authority. Other Certificate authority\ns maybe used by implementing the\nSDK\ns \nEnrollment\n interface.\n\n\n\u8be5SDK\u540c\u65f6\u63d0\u4f9b\u4e00\u4e2a\u8fde\u63a5Hyperledger\u8bc1\u4e66\u673a\u6784\u7684\u5ba2\u6237\u7aef\u3002\u4f46\u8be5SDK\u5e76\u4e0d\u4f9d\u8d56\u4e8e\u8fd9\u79cd\u8fde\u63a5\u8bc1\u4e66\u673a\u6784\u7684\u65b9\u6cd5\uff0c\u7528\u6237\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0SDK\u7684\nEnrollment\n\u63a5\u53e3\u6765\u4f7f\u7528\u5176\u4ed6\u7684\u8bc1\u4e66\u673a\u6784\u3002\n\n\nThis provides a summary of steps required to get you started with building and using the Java SDK. Please note that this is not the API documentation or a tutorial for the SDK, this will only help you familiarize to get started with the SDK if you are new in this domain.\n\n\n\u4ee5\u4e0b\u6b65\u9aa4\u8ba9\u4f60\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1\u548c\u4f7f\u7528Java SDK\u3002\n\u8bf7\u6ce8\u610f\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6587\u6863\u4e0d\u662fAPI\u6587\u6863\u6216\u8005SDK\u6307\u5357\uff0c\u6240\u4ee5\u4ec5\u4ec5\u5e2e\u52a9\u65b0\u624b\u719f\u6089\u5982\u4f55\u5f00\u59cb\u4f7f\u7528SDK\u3002\n\n\n\u5df2\u77e5\u7684\u9650\u5236(Known limitations and restrictions)\n\n\n\n\nTCerts are not supported(\u4e0d\u652f\u6301TCerts): JIRA FAB-1401\n\n\nHSM not supported(\u4e0d\u652f\u6301HSM): JIRA FAB-3137\n\n\nSingle Crypto strength 256(\u5355\u5c42\u52a0\u5bc6\u957f\u5ea6\u4e3a256\u4f4d): JIRA FAB-2564\n\n\nNetwork configuration updates not supported(\u4e0d\u652f\u6301\u7f51\u7edc\u914d\u7f6e\u66f4\u65b0): JIRA FAB-3103\n\n\n\n\n*************************************************\n\n\nv1.0.0\n\n\nThere is a git tagged v1.0.0 [e976abdc658f212d0c3a80ace4499a5cff4279c6] release of the SDK where there is no need to build the Hyperledger Fabric and Hyperledger Fabric CA described below. The provided docker-compose.yaml for the integration tests should pull v1.0.0  tagged images from Docker hub.\n\n\n\u5df2\u7ecf\u6709\u4e00\u4e2a\u6807\u8bb0\u4e3aV1.0.0[e976abdc658f212d0c3a80ace4499a5cff4279c6]\u7684SDK\u53d1\u884c\u7248\uff0c\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u81ea\u5df1\u6253\u5305Hyperledge Fabric\u548cHyperledger Fabric CA\u3002\u63d0\u4f9b\u96c6\u6210\u6d4b\u8bd5\u7684docker-compose.yaml\u4f1a\u81ea\u52a8\u4eceDocker Hub\u4e0b\u8f7dV1.0.0\u7684\u955c\u50cf\u3002\n\n\nThe v1.0.0 version of the Hyperledger Fabric Java SDK is published to Maven so you can directly use in your application\ns pom.xml.\n\n\nV1.0.0\u7684Hyperledger Fabric Java SDK\u5df2\u7ecf\u53d1\u5e03\u5230\u4e86Maven\u4ed3\u5e93\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684pom.xml\u6587\u4ef6\u4e2d\u76f4\u63a5\u4f7f\u7528\u3002\n\n\nMaven Repository Hyperledger Fabric Java SDK\n\n\nMake sure you\nre using docker images at the level of the Fabric that matches the level of the SDK you\nre using in your application.\n\n\n\u8bf7\u786e\u8ba4\u4f60\u4f7f\u7528\u7684docker\u955c\u50cf\u7684\u7248\u672c\u548c\u4f60\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684SDK\u7248\u672c\u4e00\u81f4\u3002\n\n\n*************************************************\n\n\n\u9a8c\u8bc1Fabric\u548cFabric-ca\u5305(Valid builds of Fabric and Fabric-ca)\n\n\nHyperledger Fabric v1.0.1 is currently under active development and the very latest Hyperledger Fabric builds may not work with this sdk.\nYou should use the following commit levels of the Hyperledger projects:\n\n\nHyperledger Fabric V1.0.1 \u6b63\u5728\u5f00\u53d1\u4e2d\uff0c\u6700\u65b0\u7684Fabric\u6253\u5305\u53ef\u80fd\u4e0d\u9002\u7528\u8be5SDK\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528\u4e0b\u9762\u63d0\u4ea4\u7248\u672c\u7684Hyledger\u9879\u76ee\u3002\n\n\n\n\n\n\n\n\nProject\n\n\nCommit level\n\n\nDate\n\n\n\n\n\n\n\n\n\n\n\n\nfabric\n\n\nf56a82e36e040e1c1a986edfceac014ba1516571\n\n\nJul 11 12:48:33 2017 -0700\n\n\n\n\n\n\n\n\nfabric-ca\n\n\n74f8f4d4c29e45a79a8849efb057dbd8de3ae8d0\n\n\nJul 11 16:43:39 2017 +0200\n\n\n\n\n\n\n\n\n\n\nYou can clone these projects by going to the \nHyperledger repository\n.\n\n\n\u4f60\u53ef\u4ee5\u5230\nHyperledger\u4ed3\u5e93\n\u514b\u9686\u8fd9\u4e9b\u9879\u76ee\u3002\n\n\nAs SDK development continues, this file will be updated with compatible Hyperledger Fabric and Fabric-ca commit levels.\n\n\n\u968f\u7740SDK\u7684\u5f00\u53d1\u8fdb\u884c\u4e2d\uff0c\u8fd9\u4e9b\u6587\u4ef6\u5c06\u4f1a\u968f\u7740Fabric\u548cFabric-ca\u7684\u63d0\u4ea4\u7248\u672c\u53d8\u5316\u800c\u66f4\u65b0\u3002\n\n\nOnce you have cloned \nfabric\n and \nfabric-ca\n, use the \ngit reset --hard commitlevel\n to set your repositories to the correct commit.\n\n\n\u4f60\u514b\u9686\nfabric\n\u548c\nfabric-ca\n\u65f6\uff0c\u4f7f\u7528\ngit reset --hard commitlevel\n\u6765\u8bbe\u7f6e\u4f60\u4ed3\u5e93\u7684\u4f7f\u7528\u6b63\u786e\u7684\u63d0\u4ea4\u7248\u672c\u3002\n\n\n\u4f7f\u7528Fabric Vagrant\u73af\u5883(Working with the Fabric Vagrant environment)\n\n\nVagrant is NOT required if your OS has Docker support and all the requirements needed to build directly in your\nenvironment.  For non Vagrant envrionment, the steps would be the same as below minus those parts involving Vagrant.\n Do the following if you want to run the Fabric components ( peer, orderer, fabric-ca ) in Vagrant:\n\n\n\u5982\u679c\u4f60\u7684\u73af\u5883\u652f\u6301Docker\uff0cVagrant\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u4f60\u53ea\u9700\u8981\u4f60\u7684\u73af\u5883\u4e2d\u76f4\u63a5\u6253\u5305\u3002\u5728\u975eVagrant\u73af\u5883\uff0c\u7275\u6d89\u5230Vagrant\u7684\u6b65\u9aa4\u4f1a\u5c11\u8bb8\u6709\u4e9b\u4e0d\u540c\u3002\n\u6309\u7167\u4e0b\u9762\u7684\u6b65\u9aa4\u5728Vagrant\u4e2d\u8fd0\u884cFabric\u7ec4\u4ef6( peer, orderer, fabric-ca )\uff1a\n\n\n  git clone  https://github.com/hyperledger/fabric.git\n  git clone  https://github.com/hyperledger/fabric-ca.git\n  cd  fabric-ca\n  git reset --hard fabric-ca_commitlevel from above\n  cd ../fabric\n  git reset --hard fabric_commitlevel from above\n  cd devenv\n  change the Vagrant file as suggested below:\n  vagrant up\n  vagrant ssh\n  make docker\n  cd ../fabric-ca\n  make docker\n  cd ../fabric/sdkintegration\n  docker-compose down;  rm -rf /var/hyperledger/*; docker-compose up --force-recreate\n\n\n\n\n\n\nOpen the file \nVagrantfile\n and verify that the following \nconfig.vm.network\n statements are set. If not, then add them:\n\n\n\u6253\u5f00\nVagrantfile\n\u6587\u4ef6\u6765\u9a8c\u8bc1\u4e0b\u9762\u7684\nconfig.vm.network\n\u53c2\u6570\u662f\u5426\u8bbe\u7f6e\u4e86\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u6dfb\u52a0\u4ee5\u4e0b\u884c\u3002\n\n\n\n\n  config.vm.network :forwarded_port, guest: 7050, host: 7050 # fabric orderer service\n  config.vm.network :forwarded_port, guest: 7051, host: 7051 # fabric peer vp0 service\n  config.vm.network :forwarded_port, guest: 7053, host: 7053 # fabric peer event service\n  config.vm.network :forwarded_port, guest: 7054, host: 7054 # fabric-ca service\n  config.vm.network :forwarded_port, guest: 5984, host: 15984 # CouchDB service\n  ### Below are probably missing.....\n  config.vm.network :forwarded_port, guest: 7056, host: 7056\n  config.vm.network :forwarded_port, guest: 7058, host: 7058\n  config.vm.network :forwarded_port, guest: 8051, host: 8051\n  config.vm.network :forwarded_port, guest: 8053, host: 8053\n  config.vm.network :forwarded_port, guest: 8054, host: 8054\n  config.vm.network :forwarded_port, guest: 8056, host: 8056\n  config.vm.network :forwarded_port, guest: 8058, host: 8058\n\n\n\n\n\nAdd to your Vagrant file a folder for referencing the sdkintegration folder between the lines below:\n\n\n\u5728Vagrant\u6587\u4ef6\u4e2d\uff0c\u589e\u52a0SDK\u96c6\u6210\u76ee\u5f55\u7684\u5f15\u7528\uff1a\n\n\nconfig.vm.synced_folder \n..\n, \n/opt/gopath/src/github.com/hyperledger/fabric\n\n\nconfig.vm.synced_folder \"/home/\nuser\n/fabric-sdk-java/src/test/fixture/sdkintegration\", \"/opt/gopath/src/github.com/hyperledger/fabric/sdkintegration\n\n\nconfig.vm.synced_folder ENV.fetch(\nLOCALDEVDIR\n, \n..\n), \n#{LOCALDEV}\n\n\nSDK \u4f9d\u8d56(SDK dependencies)\n\n\nSDK depends on few third party libraries that must be included in your classpath when using the JAR file. To get a list of dependencies, refer to pom.xml file or run\n\u5f53\u4f60\u4f7f\u7528JAR\u6587\u4ef6\u65f6\uff0cSDK\u4f9d\u8d56\u7684\u7b2c\u4e09\u65b9\u5e93\u5e94\u8be5\u5305\u542b\u5728classpath\u4e2d\u3002\u4e3a\u4e86\u53ef\u4ee5\u5f97\u5230\u4f9d\u8d56\u6e05\u5355\uff0c\u53ef\u4ee5\u53c2\u7167pom.xml\u6587\u4ef6\u6216\u8005\u8fd0\u884c\n\n\nmvn dependency:tree\n or \nmvn dependency:list\n.\n\nmvn dependency:tree\n \u6216 \nmvn dependency:list\n.\n\n\nAlternatively, \n mvn dependency:analyze-report \n will produce a report in HTML format in target directory listing all the dependencies in a more readable format.\n\u9664\u6b64\u4e4b\u5916\uff0c\n mvn dependency:analyze-report \n \u4f1a\u5728\u76ee\u6807\u76ee\u5f55\u4e2d\u751f\u6210\u4e00\u4e2aHTML\u683c\u5f0f\u7684\u62a5\u544a\u66f4\u6e05\u6670\u5730\u5217\u51fa\u6240\u6709\u7684\u4f9d\u8d56\u5305\u3002\n\n\n\u4f7f\u7528SDK(Using the SDK)\n\n\nThe SDK\ns test cases uses chaincode in the SDK\ns source tree: \n/src/test/fixture\n\nSDK\u7684\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u4f7f\u7528\u94fe\u7801\u6e90\u7801\u6811\uff1a \n/src/test/fixture\n\n\nThe SDK\ns JAR is in \ntarget/fabric-sdk-java-1.0.0-SNAPSHOT.jar\n and you will need the additional dependencies listed above.\nWhen the SDK is published to \nMaven\n you will be able to simply include it in your application\ns \npom.xml\n.\n\n\nSDK\u7684JAR\u5305\u5728\ntarget/fabric-sdk-java-1.0.0-SNAPSHOT.jar\n\uff0c\u4f60\u53ef\u80fd\u4f1a\u9700\u8981\u589e\u52a0\u4e0a\u9762\u63d0\u5230\u7684\u9644\u52a0\u7684\u4f9d\u8d56\u5305\u3002\n\u5f53SDK\u53d1\u5e03\u5230Maven\u540e\uff0c\u4f60\u53ea\u9700\u8981\u7b80\u5355\u7684\u5728\u4f60\u7684\u5e94\u7528\u7684\npom.xml\n\u5305\u542b\u5b83\u3002\n\n\nAdd below code in your \npom.xml\n to download fabric-sdk-java-1.0\n\u5728\u4f60\u7684\npom.xml\n\u6587\u4ef6\u589e\u52a0\u4e0b\u9762\u7684\u4ee3\u7801\u6765\u4e0b\u8f7dfabric-sdk-java-1.0\n\n\n\n     \ndependencies\n\n     \ndependency\n\n            \ngroupId\norg.hyperledger.fabric-sdk-java\n/groupId\n\n            \nartifactId\nfabric-sdk-java\n/artifactId\n\n            \nversion\n1.0.0\n/version\n\n         \n/dependency\n\n     \n/dependencies\n\n\n\n\n\n\u7f16\u8bd1(Compiling)\n\n\nTo build this project, the following dependencies must be met\n\n\n\n\nJDK 1.8 or above\n\n\nApache Maven\n\n\n\n\n\u4e3a\u4e86\u80fd\u591f\u7f16\u8bd1\u8be5\u5de5\u7a0b\uff0c\u4f60\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u8981\u6c42\n\n\n\n\nJDK 1.8 \u6216\u66f4\u9ad8\n\n\nApache Maven\n\n\n\n\nOnce your JAVA_HOME points to your installation of JDK 1.8 (or above) and JAVA_HOME/bin and Apache maven are in your PATH, issue the following command to build the jar file:\n\u5f53\u4f60\u7684JAVA_HOME\u6307\u5411\u4e86JDK 1.8\u5b89\u88c5\u76ee\u5f55\uff0c\u5728PATH\u4e2d\u8bbe\u7f6e\u4e86JAVA_HOME/bin\u548c Apache Maven\uff0c\u4f60\u53ef\u4ee5\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u6765\u6253\u5305jar\u6587\u4ef6\uff1a\n\n\n\n  mvn install\n\n\nor\n\n\n  mvn install -DskipTests\n\n \u5982\u679c\u4f60\u4e0d\u60f3\u6267\u884c\u5355\u5143\u6d4b\u8bd5\u3002\n\n\n\u6267\u884c\u5355\u5143\u6d4b\u8bd5(Running the unit tests)\n\n\nTo run the unit tests, please use \nmvn test\n or \nmvn install\n which will run the unit tests and build the jar file.You must be running a local peer and orderer to be able to run the unit tests.\n\n\n\u901a\u8fc7\nmvn test\n \u6765\u6267\u884c\u5355\u5143\u6d4b\u8bd5\u6216 \nmvn install\n \u6267\u884c\u5355\u5143\u6d4b\u8bd5\u5e76\u751f\u6210jar\u6587\u4ef6\u3002\u4f60\u5fc5\u987b\u5728\u672c\u5730\u8fd0\u884c\u4e86peer\u548corderer\u8282\u70b9\u624d\u80fd\u6267\u884c\u5355\u5143\u6d4b\u8bd5\u3002\n\n\n\u6267\u884c\u96c6\u6210\u6d4b\u8bd5(Running the integration tests)\n\n\nYou must be running local instances of Fabric-ca, Fabric peers, and Fabric orderers to be able to run the integration tests. See above for running these services in Vagrant.\nUse this \nmaven\n command to run the integration tests:\n\n\n\u4f60\u5fc5\u987b\u5728\u672c\u5730\u8fd0\u884c\u4e86Fabric-ca, Fabric peers, and Fabric orderers\u8282\u70b9\u624d\u80fd\u591f\u6267\u884c\u96c6\u6210\u6d4b\u8bd5\u3002\u53c2\u7167\u4e0a\u6587\u4e2d\u5982\u4f55\u5728Vagrant\u4e2d\u8fd0\u884c\u8fd9\u4e9b\u670d\u52a1\u3002\n\u4f7f\u7528\u4e0b\u9762\u7684\nmaven\n\u6307\u4ee4\u6765\u6267\u884c\u96c6\u6210\u6d4b\u8bd5\uff1a\n\n\n\n\nmvn failsafe:integration-test -DskipITs=false\n\n\n\n\n\u7aef\u5230\u7aef\u6d4b\u8bd5\u573a\u666f(End to end test scenario)\n\n\nThe \nsrc/test/java/org/hyperledger/fabric/sdkintegration/End2endIT.java\n integration test is an example of installing, instantiating, invoking and querying a chaincode.\nIt constructs the Hyperledger channel, deploys the \nGO\n chaincode, invokes the chaincode to do a transfer amount operation and queries the resulting blockchain world state.\n\n\nThis test is a reworked version of the Fabric \ne2e_cli example\n to demonstrate the features of the SDK.\nTo better understand blockchain and Fabric concepts, we recommend you install and run the \ne2e_cli\n example.\n\n\n_src/test/java/org/hyperledger/fabric/sdkintegration/End2endIT.java_\u4e2d\u7684\u96c6\u6210\u6d4b\u8bd5\uff0c\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5b89\u88c5\u3001\u5b9e\u4f8b\u5316\u3001\u8c03\u7528\u548c\u67e5\u8be2\u94fe\u7801\u7684\u4f8b\u5b50\u3002\u5b83\u6784\u5efa\u4e86Hyperledger\u901a\u9053\uff0c\u53d1\u5e03\nGO\n\u7248\u672c\u94fe\u7801\uff0c\u8c03\u7528\u94fe\u7801\uff0c\u6267\u884c\u8f6c\u8d26\u52a8\u4f5c\uff0c\u5e76\u5728\u533a\u5757\u94fe\u4e0a\u67e5\u8be2\u7ed3\u679c\u3002\n\n\n\u7aef\u5230\u7aef\u6d4b\u8bd5\u73af\u5883(End to end test environment)\n\n\nThe test defines one Fabric orderer and two organizations (peerOrg1, peerOrg2), each of which has 2 peers, one fabric-ca service.\n\n\n\u8be5\u6d4b\u8bd5\u5305\u542b\u4e00\u4e2aorderer\u8282\u70b9\uff0c\u4e24\u4e2a\u7ec4\u7ec7(peerOrg1, peerOrg2)\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u5404\u81ea\u5305\u542b\u4e24\u4e2a\u8282\u70b9\uff0c\u4ee5\u53ca\u4e00\u4e2afabric-ca\u670d\u52a1\u3002\n\n\n\u8bc1\u4e66\u53ca\u5176\u4ed6\u52a0\u5bc6\u5de5\u4ef6(Certificates and other cryptography artifacts)\n\n\nFabric requires that each organization has private keys and certificates for use in signing and verifying messages going to and from clients, peers and orderers.\nEach organization groups these artifacts in an \nMSP\n (Membership Service Provider) with a corresponding unique \nMSPID\n .\n\n\nFurthermore, each organization is assumed to generate these artifacts independently. The \nfabric-ca\n project is an example of such a certificate generation service.\nFabric also provides the \ncryptogen\n tool to automatically generate all cryptographic artifacts needed for the end to end test.\nIn the directory src/test/fixture/sdkintegration/e2e-2Orgs/channel\n\n\nThe command used to generate end2end \ncrypto-config\n artifacts:\n\n\nbuild/bin/cryptogen generate --config crypto-config.yaml --output=crypto-config\n\n\nFor ease of assigning ports and mapping of artifacts to physical files, all peers, orderers, and fabric-ca are run as Docker containers controlled via a docker-compose configuration file.\n\n\nThe files used by the end to end are:\n * \nsrc/test/fixture/sdkintegration/e2e-2Orgs/channel\n  (everything needed to bootstrap the orderer and create the channels)\n * \nsrc/test/fixture/sdkintegration/e2e-2Orgs/crypto-config\n (as-is. Used by \nconfigtxgen\n and \ndocker-compose\n to map the MSP directories)\n * \nsrc/test/fixture/sdkintegration/docker-compose.yaml\n\n\nThe end to end test case artifacts are stored under the directory \nsrc/test/fixture/sdkintegration/e2e-2Org/channel\n .\n\n\nFabric\u9700\u8981\u6bcf\u4e2a\u7ec4\u7ec7\u90fd\u6709\u81ea\u5df1\u7684\u79c1\u94a5\u548c\u8bc1\u4e66\uff0c\u7528\u6765\u7b7e\u540d\u548c\u9a8c\u8bc1\u5ba2\u6237\u7aef\u3001\u8282\u70b9\u548corderer\u4e4b\u95f4\u7684\u6d88\u606f\u3002\n\u6bcf\u4e2a\u7ec4\u7ec7\u7684\u8fd9\u4e9b\u5de5\u4ef6\u5728\nMSP\n (Membership Service Provider)\u4e2d\u90fd\u6709\u7edf\u4e00\u7684\u552f\u4e00 \nMSPID\n\u3002\n\n\n\u800c\u4e14\uff0c\u6211\u4eec\u5047\u8bbe\u5404\u4e2a\u7ec4\u7ec7\u90fd\u662f\u72ec\u7acb\u7684\u751f\u6210\u8fd9\u4e9b\u5de5\u4ef6\u3002\nfabric-ca\n\u5de5\u7a0b\u662f\u4e00\u4e2a\u8bc1\u4e66\u751f\u6210\u670d\u52a1\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\nFabric\u540c\u65f6\u63d0\u4f9b\ncryptogen\n\u5de5\u5177\u6765\u81ea\u52a8\u751f\u6210\u7aef\u5bf9\u7aef\u6d4b\u8bd5\u6240\u9700\u7684\u52a0\u5bc6\u7528\u7684\u5de5\u4ef6\u3002\n\u5728src/test/fixture/sdkintegration/e2e-2Orgs/channel\u76ee\u5f55\n\n\n\u4f7f\u7528 \ncrypto-config\n \u547d\u4ee4\u6765\u751f\u6210 end2end \u5de5\u4ef6\uff1a\n\n   \nbuild/bin/cryptogen generate --config crypto-config.yaml --output=crypto-config\n\n\n\u4e3a\u4e86\u65b9\u4fbf\u5206\u914d\u7aef\u53e3\u548c\u6620\u5c04\u8fd9\u4e9b\u5de5\u4ef6\u5230\u7269\u7406\u6587\u4ef6\uff0c\u6240\u6709\u7684peer\uff0c order \u548cfabric-ca\u90fd\u8fd0\u884c\u5728Docker\u5bb9\u5668\u4e2d\uff0c\u901a\u8fc7docker-compose\u914d\u7f6e\u6587\u4ef6\u6765\u63a7\u5236\u3002\n\n\n\u4f7f\u7528\u5230\u4e86\u4e0b\u9762\u8fd9\u4e9b\u6587\u4ef6\uff1a\n * \nsrc/test/fixture/sdkintegration/e2e-2Orgs/channel\n  (everything needed to bootstrap the orderer and create the channels)\n * \nsrc/test/fixture/sdkintegration/e2e-2Orgs/crypto-config\n (as-is. Used by \nconfigtxgen\n and \ndocker-compose\n to map the MSP directories)\n * \nsrc/test/fixture/sdkintegration/docker-compose.yaml\n\n\n\u7aef\u5bf9\u7aef\u6d4b\u8bd5\u7528\u4f8b\u5de5\u4ef6\u5b58\u50a8\u5728_src/test/fixture/sdkintegration/e2e-2Org/channel_\u76ee\u5f55\u4e2d\u3002\n\n\n\u901a\u8fc7TLS\u8fde\u63a5\u5230Orderer\u548cPeer(TLS connection to Orderer and Peers)\n\n\nIBM Java needs the following properties defined to use TLS 1.2 to get an HTTPS connections to Fabric CA.\n\n\n-Dcom.ibm.jsse2.overrideDefaultTLS=true   -Dhttps.protocols=TLSv1.2\n\n\n\n\nWe need certificate and key for each of the Orderer and Peers for TLS connection. You can generate your certificate and key files with openssl command as follows:\n\n\n\n\nSet up your own Certificate Authority (CA) for issuing certificates\n\n\nFor each of orderers and peers:\n\n\ngenerate a private key: \nopenssl genrsa 512 \n key.pem\n.\n\n\ngenerate a certificate request (csr): \nopenssl req -new -days 365 -key key.pem -out csr.pem\n, which will request your input for some information, where CN has to be the container\ns alias name (e.g. peer0, peer1, etc), all others can be left blank.\n\n\nsign the csr with the CA private key to generate a certificate: \nopenssl ca -days 365 -in csr.pem -keyfile {CA\ns privatekey} -notext -out cert.pem\n\n\nput the resulting cert.pem and key.pem together with the CA\ns certificate (as the name cacert.pem) in the directory where the docker container can access.\n\n\n\n\nThe option -notext in the last openssl command in the above is important. Without the option, the resulting cert.pemmay does not work for some Java implementation (e.g. IBM JDK).\nThe certificates and keys for the end-to-end test case are stored in the directory \nsrc/test/fixture/sdkintegration/e2e-2Org/tls/\n.\n\n\nCurrently, the pom.xml is set to use netty-tcnative-boringssl for TLS connection to Orderer and Peers, however, you can change the pom.xml (uncomment a few lines) to use an alternative TLS connection via ALPN.\n\n\nIBM Java\u9700\u8981\u4ee5\u4e0b\u5b9a\u4e49\u4e00\u4e0b\u53c2\u6570\u624d\u80fd\u4f7f\u7528TLS 1.2\u6765\u548cFabric CA\u5efa\u7acbHTTPS\u8fde\u63a5\u3002\n\n\n-Dcom.ibm.jsse2.overrideDefaultTLS=true   -Dhttps.protocols=TLSv1.2\n\n\n\n\n\u6bcf\u4e2aOrderer\u548cPeer\u5efa\u7acbTLS\u8fde\u63a5\u90fd\u9700\u8981\u8bc1\u4e66\u548c\u79c1\u94a5\u3002\u4f60\u53ef\u4ee5\u6309\u4ee5\u4e0b\u6b65\u9aa4\u901a\u8fc7openssl\u547d\u4ee4\u6765\u751f\u6210\u8bc1\u4e66\u548c\u79c1\u94a5\u6587\u4ef6\uff1a\n * \u8bbe\u7f6e\u4f60\u81ea\u5df1\u7684\u8bc1\u4e66\u8ba4\u8bc1\u673a\u6784\uff08CA\uff09\u6765\u53d1\u884c\u8bc1\u4e66\n * \u5bf9\u6bcf\u4e00\u4e2aOrderer\u548cPeer\n    * \u751f\u6210\u79c1\u94a5 \nopenssl genrsa 512 \n key.pem\n\u3002\n    * \u751f\u6210\u8bc1\u4e66\u8bf7\u6c42\uff08csr\uff09\nopenssl req -new -days 365 -key key.pem -out csr.pem\n\uff0c\u8fd9\u91cc\u53ef\u80fd\u9700\u8981\u4f60\u586b\u5199\u4e00\u4e9b\u4fe1\u606f\uff0cCN\u5e94\u8be5\u662f\u5bb9\u5668\u7684\u522b\u540d\uff08\u6bd4\u5982peer0\uff0c peer1\u7b49\uff09\uff0c\u5176\u4f59\u7684\u90fd\u53ef\u4ee5\u7559\u7a7a\n    * \u901a\u8fc7CS\u7684\u79c1\u94a5\u6765\u7ed9\u8bc1\u4e66\u8bf7\u6c42\uff08CSR\uff09\u7b7e\u540d\u5e76\u751f\u6210\u8bc1\u4e66\uff1a\nopenssl ca -days 365 -in csr.pem -keyfile {CA\ns privatekey} -notext -out cert.pem\n\n    * \u5c06\u751f\u6210\u7684cert.pem \u548c key.pem \u540cCA\u7684\u8bc1\u4e66(\u540d\u5b57cacert.pem)\u4e00\u8d77\u653e\u5230docker\u5bb9\u5668\u53ef\u4ee5\u8bbf\u95ee\u5230\u7684\u76ee\u5f55\u4e2d\u3002\n\n\n\u4e0a\u9762\u6700\u540e\u4e00\u6761openssl\u547d\u4ee4\u4e2d\u7684 -notext \u9009\u9879\u975e\u5e38\u91cd\u8981\u3002\u6ca1\u6709\u8fd9\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u751f\u6210\u7684cert.pemmay\u6ca1\u529e\u6cd5\u5728\u67d0\u4e9bjava\u73af\u5883\u4e2d\u7528\uff08\u6bd4\u5982java JDK\uff09\u3002\n\u8fd9\u4e9b\u8bc1\u4e66\u548c\u94a5\u5319\u6587\u4ef6\u653e\u5728_src/test/fixture/sdkintegration/e2e-2Org/tls/_\u76ee\u5f55\u4e2d\u3002\n\n\n\u76ee\u524d\uff0cpom.xml\u8bbe\u7f6e\u4f7f\u7528netty-tcnative-boringssl\u5728Orderer\u548cPeer\u4e4b\u95f4\u5efa\u7acbTLS\u8fde\u63a5\uff0c\u4f60\u53ef\u4ee5\u66f4\u8be5pom.xml(\u6ce8\u91ca\u5176\u4e2d\u4e00\u4e9b\u884c)\u6765\u901a\u8fc7ALPN\u6765\u4f7f\u7528\u5176\u4ed6\u7684TLS\u8fde\u63a5\u3002\n\n\n\u94fe\u7801\u80cc\u4e66\u7b56\u7565(Chaincode endorsement policies)\n\n\nPolicies are described in the \nFabric Endorsement Policies document\n.\nYou create a policy using a Fabric tool ( an example is shown in \nJIRA issue FAB-2376\n)\nand give it to the SDK either as a file or a byte array. The SDK, in turn, will use the policy when it creates chaincode instantiation requests.\n\n\nTo input a policy to the SDK, use the \nChaincodeEndorsementPolicy\n class.\n\n\nFor testing purposes, there are 2 policy files in the \nsrc/test/resources\n directory\n  * \npolicyBitsAdmin\n ( which has policy \nAND(DEFAULT.admin)\n meaning \n1 signature from the DEFAULT MSP admin\n is required\n )\n  * \npolicyBitsMember\n ( which has policy \nAND(DEFAULT.member)\n meaning \n1 signature from a member of the DEFAULT MSP is required\n )\n\n\nand one file in the \nsrc/test/fixture/sdkintegration/e2e-2Orgs/channel\n directory specifically for use in the end to end test scenario\n  * \nmembers_from_org1_or_2.policy\n ( which has policy \nOR(peerOrg1.member, peerOrg2.member)\n meaning  \n1 signature from a member of either organizations peerOrg1, PeerOrg2 is required\n)\n\n\nAlternatively, you can also use ChaincodeEndorsementPolicy class by giving it a YAML file that has the policy defined in it.\n See examples of this in the End2endIT testcases that use \nsrc/test/fixture/sdkintegration/chaincodeendorsementpolicy.yaml\n\n The file chaincodeendorsementpolicy.yaml has comments that help understand how to create these policies. The first section\n lists all the signature identities you can use in the policy. Currently, only ROLE types are supported.\n The policy section is comprised of \nn-of\n and \nsigned-by\n elements.  Then n-of (\n1-of\n \n2-of\n) require that many (\nn\n) in that\n section to be true. The \nsigned-by\n references an identity in the identities section.\n\n\n\u80cc\u4e66\u7b56\u7565\u5728\nFabric Endorsement Policies document\n\u4e0a\u505a\u4e86\u8be6\u7ec6\u7684\u9610\u91ca\u3002\n\u4f60\u53ef\u4ee5\u901a\u8fc7Fabric\u5de5\u5177\u6765\u521b\u5efa\u4e00\u4e2a\u7b56\u7565(\u5728 \nJIRA issue FAB-2376\n \u6709\u4e2a\u4f8b\u5b50)\u4ee5\u6587\u4ef6\u6216byte\u6570\u7ec4\u65b9\u5f0f\u4f20\u7ed9SDK\u3002\u540c\u65f6SDK\u4f1a\u4f7f\u7528\u8be5\u7b56\u7565\u6765\u521b\u5efa\u94fe\u7801\u521d\u59cb\u5316\u8bf7\u6c42\u3002\n\n\n\u4f7f\u7528\nChaincodeEndorsementPolicy\n\u7c7b\u5c06\u7b56\u7565\u4f20\u7ed9SDK\u3002\n\u4e3a\u4e86\u6d4b\u8bd5\u76ee\u7684\uff0c\u5728_src/test/resources_\u4e0b\u6709\u4e24\u4e2a\u7b56\u7565\u6587\u4ef6\u3002\n  * \npolicyBitsAdmin\n ( \u5305\u542b \nAND(DEFAULT.admin)\n \u7b56\u7565\uff0c \n\u9700\u8981\u4e00\u4e2aDEFAULT MSP \u7ba1\u7406\u5458\u7684\u7b7e\u540d\n )\n  * \npolicyBitsMember\n ( \u5305\u542b \nAND(DEFAULT.member)\n \u7b56\u7565\uff0c \n\u9700\u8981\u4e00\u4e2aDEFAULT MSP \u6210\u5458\u7684\u7b7e\u540d\n )\n\n\n\u5728_src/test/fixture/sdkintegration/e2e-2Orgs/channel_\u4e0b\u6cb9\u4e00\u4e2a\u6587\u4ef6\uff0c\u6307\u5b9a\u4e86\u7aef\u5bf9\u7aef\u7684\u6d4b\u8bd5\u573a\u666f\n  * \nmembers_from_org1_or_2.policy\n ( \u5305\u542b \nOR(peerOrg1.member, peerOrg2.member)\n \u7b56\u7565  \n\u9700\u8981\u4efb\u4e00\u7ec4\u7ec7(peerOrg1, PeerOrg2)\u4e0b\u6210\u5458\u7684\u7b7e\u540d\n)\n\n\n\u53e6\u5916\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7528ChaincodeEndorsementPolicy\u7c7b\uff0c\u901a\u8fc7\u7ed9\u4ed6\u6307\u5b9a\u4e00\u4e2a\u5305\u542b\u7b56\u7565\u5b9a\u4e49\u7684YAML\u6587\u4ef6\u6765\u5b9e\u73b0\u3002\n\u53c2\u7167_src/test/fixture/sdkintegration/chaincodeendorsementpolicy.yaml_\u76ee\u5f55\u4e0bEnd2endIT\u6d4b\u8bd5\u7528\u4f8b\u3002 \n\u6587\u4ef6chaincodeendorsementpolicy.yaml\u4e2d\uff0c\u6709\u4e00\u4e9b\u5e2e\u52a9\u7406\u89e3\u5982\u4f55\u521b\u5efa\u7b56\u7565\u7684\u6ce8\u91ca\u3002\u7b2c\u4e00\u90e8\u5206\u5217\u51fa\u4e86\u6240\u6709\u53ef\u4ee5\u5728\u7b56\u7565\u4e2d\u4f7f\u7528\u7684\u7b7e\u540d\u3002\u5f53\u524d\u53ea\u652f\u6301ROLE\u7c7b\u578b\u3002\npolicy\u533a\u5757\u5305\u542b\nn-of\n \u548c \nsigned-by\n \u5143\u7d20\u3002n-of (\n1-of\n \n2-of\n) \u5143\u7d20\u9700\u8981\u5728\u8fd9\u4e2a\u533a\u5757\u4e2d\u5c06\u201cmany\u201d (\nn\n) \u8bbe\u7f6e\u4e3a true. \nsigned-by\n\u5143\u7d20\u5f15\u7528\u4e86\u5728identities\u533a\u5757\u7684\u8eab\u4efd\u4fe1\u606f\u3002\n\n\n\u901a\u9053\u521b\u5efa\u5de5\u4ef6(Channel creation artifacts)\n\n\nChannel configuration files and orderer bootstrap files ( see directory \nsrc/test/fixture/sdkintegration/e2e-2Orgs/channel\n ) are needed when creating a new channel.\nThis is created with the Hyperledger Fabric \nconfigtxgen\n tool.\n\n\nFor End2endIT.java the commands are\n\n\n\n\nbuild/bin/configtxgen -outputCreateChannelTx foo.tx -profile TwoOrgsChannel -channelID foo\n\n\nbuild/bin/configtxgen -outputCreateChannelTx bar.tx -profile TwoOrgsChannel -channelID bar\n\n\nbuild/bin/configtxgen -outputBlock orderer.block -profile TwoOrgsOrdererGenesis\n\n\n\n\nwith the configtxgen config file \nsrc/test/fixture/sdkintegration/e2e-2Orgs/channel/configtx.yaml\n\n\nIf \nbuild/bin/configtxgen\n tool is not present  run \nmake configtxgen\n\n\nBefore running the end to end test case:\n *  you may need to modify \nconfigtx.yaml\n to change all hostname and port definitions to match\nyour server(s) hostname(s) and port(s).\n *  you \nWILL\n have to modify \nconfigtx.yaml\n to have the \nMSPDir\n point to the correct path to the \ncrypto-config\n directories.\n   * \nconfigtx.yaml\n currently assumes that you are running in a Vagrant environment where the fabric, fabric-ca and fabric-sdk-java projects exist under the \n/opt/gopath/src/github.com/hyperledger\n directory.\n\n\n\u521b\u5efa\u901a\u9053\u7684\u65f6\u5019\uff0c\u9700\u8981\u6709\u901a\u9053\u7684\u914d\u7f6e\u6587\u4ef6\u4ee5\u53caorderer\u5f15\u5bfc\u6587\u4ef6\uff08\u5728_src/test/fixture/sdkintegration/e2e-2Orgs/channel_\u76ee\u5f55\u4e0b\uff09\u3002\n\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u662f\u901a\u8fc7\nconfigtxgen\n\u6765\u521b\u5efa\u7684\u3002\n\n\n\u5bf9\u4e8eEnd2endIT.java\u7c7b\u6765\u8bf4\uff0c\u547d\u4ee4\u662f\uff1a\n * build/bin/configtxgen -outputCreateChannelTx foo.tx -profile TwoOrgsChannel -channelID foo\n * build/bin/configtxgen -outputCreateChannelTx bar.tx -profile TwoOrgsChannel -channelID bar\n * build/bin/configtxgen -outputBlock orderer.block -profile TwoOrgsOrdererGenesis\n\n\n\u914d\u7f6e\u6587\u4ef6\u662f  \nsrc/test/fixture/sdkintegration/e2e-2Orgs/channel/configtx.yaml\n\u3002\n\n\n\u5982\u679c\nbuild/bin/configtxgen\n\u5de5\u5177\u4e0d\u5b58\u5728\uff0c\u5219\u9700\u8981\u6267\u884c\nmake configtxgen\n\u6765\u751f\u6210\u3002\n\n\n\u5728\u4f60\u8fd0\u884c\u7aef\u5bf9\u7aef\u6d4b\u8bd5\u7528\u4f8b\u524d\uff1a\n\n \u4f60\u9700\u8981\u4fee\u6539\nconfigtx.yaml\n\u6587\u4ef6\uff0c\u5c06\u4e3b\u673a\u540d\u548c\u7aef\u53e3\u5b9a\u4e49\u4fee\u6539\u6210\u4f60\u670d\u52a1\u5668\u771f\u5b9e\u7684\u4e3b\u673a\u540d\u548c\u7aef\u53e3\u3002\n\n \u4f60\u5c06\u4f1a\u9700\u8981\u4fee\u6539\nconfigtx.yaml\n\u6587\u4ef6\uff0c\u5c06_MSPDir_\u6307\u5411\u5230\u6b63\u786e\u7684_crypto-config_\u76ee\u5f55\u3002\n  * \nconfigtx.yaml\n\u6587\u4ef6\u5f53\u524d\u5047\u8bbe\u4f60\u8fd0\u884c\u5728Vagrant\u73af\u5883\uff0c\u800c\u4e14fabric\u3001fabric-ca \u548cfabric-sdk-java \u5728_/opt/gopath/src/github.com/hyperledger_\u76ee\u5f55\u4e0b\u3002\n\n\nGO\u8bed\u8a00\u94fe\u7801(GO Lang chaincode)\n\n\nGo lang chaincode dependencies must be contained in vendor folder.\n For an explanation of this see \nVender folder explanation\n\n\nGo\u8bed\u8a00\u94fe\u7801\u7684\u4f9d\u8d56\u6587\u4ef6\u5fc5\u987b\u5305\u542b\u5728vendor\u76ee\u5f55\u4e0b\u3002\n\u8be6\u7ec6\u89e3\u91ca\u53c2\u7167\nVender folder explanation\n\n\n\u7b80\u5355\u7684\u95ee\u9898\u89e3\u51b3(Basic Troubleshooting)\n\n\nidentity or token do not match\n\n\nKeep in mind that you can perform the enrollment process with the membership services server only once, as the enrollmentSecret is a one-time-use password. If you have performed a FSUser registration/enrollment with the membership services and subsequently deleted the crypto tokens stored on the client side, the next time you try to enroll, errors similar to the ones below will be seen.\n\n\nError: identity or token do not match\n\n\nError: FSUser is already registered\n\n\nTo address this, remove any stored crypto material from the CA server by following the instructions \nhere\n which typically involves deleting the /var/hyperledger/production directory and restarting the membership services. You will also need to remove any of the crypto tokens stored on the client side by deleting the KeyValStore . That KeyValStore is configurable and is set to ${FSUser.home}/test.properties within the unit tests.\n\n\nWhen running the unit tests, you will always need to clean the membership services database and delete the KeyValStore file, otherwise, the unit tests will fail.\n\n\n\u8bb0\u4f4f\u4f60\u53ea\u80fd\u8fd0\u884c\u6210\u5458\u670d\u52a1\u7684\u767b\u8bb0\u8fdb\u7a0b\uff08enrollment process\uff09\u4e00\u6b21\uff0c\u56e0\u4e3aenrollmentSecret\u662f\u4e00\u6b21\u6027\u5bc6\u7801\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u6267\u884c\u8fc7\u4e00\u6b21FSUser registration/enrollment\uff0c\u7136\u540e\u5220\u9664\u4e86\u52a0\u5bc6\u5b58\u50a8\u5728\u5ba2\u6237\u7aef\u7684token\u540e\uff0c\u4e0b\u4e00\u6b21enroll\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e0b\u9762\u7c7b\u4f3c\u7684\u95ee\u9898\uff1a\n\nError: identity or token do not match\n\n\nError: FSUser is already registered\n\n\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u8bf7\u53c2\u7167\nhere\n \u5220\u9664\u6240\u6709\u5b58\u50a8\u5728CA\u670d\u52a1\u5668\u4e0a\u7684\u7684\u52a0\u5bc6\u6587\u4ef6\uff0c\u6587\u4ef6\u76ee\u5f55\u5728/var/hyperledger/production\uff0c\u7136\u540e\u91cd\u542f\u6210\u5458\u670d\u52a1\u3002\u540c\u65f6\u4f60\u8fd8\u9700\u8981\u901a\u8fc7\u5220\u9664KeyValStore\u6765\u6e05\u695a\u5ba2\u6237\u7aef\u6240\u6709\u7684\u52a0\u5bc6token\u3002KeyValStore\u662f\u53ef\u914d\u7f6e\u7684\uff0c\u53c2\u7167${FSUser.home}/test.properties\u6587\u4ef6\u3002\n\n\n\u5f53\u8fd0\u884c\u6d4b\u8bd5\u7528\u4f8b\u65f6\uff0c\u4f60\u9700\u8981\u6e05\u7406\u6210\u5458\u670d\u52a1\u5668\u6570\u636e\u5e93\u5e76\u5220\u9664KeyValStore\u6587\u4ef6\uff0c\u5426\u5219\u5355\u5143\u6d4b\u8bd5\u4f1a\u5931\u8d25\u3002\n\n\njava.security.InvalidKeyException: Illegal key size\n\n\nIf you get this error, this means your JDK does not capable of handling unlimited strength crypto algorithms. To fix this issue, You will need to download the JCE libraries for your version of JDK. Please follow the instructions \nhere\n to download and install the JCE for your version of the JDK.\n\n\n\u5982\u679c\u4f60\u78b0\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u4f60\u7684JDK\u4e0d\u652f\u6301\u65e0\u9650\u957f\u5ea6\u52a0\u5bc6\u903b\u8f91\u3002\u8981\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u9700\u8981\u4e0b\u8f7d\u6b63\u5bf9\u4f60JDK\u7248\u672c\u7684JCE\u5e93\uff0c\u8bf7\u53c2\u7167\n\u8fd9\u91cc\n\u6765\u4e0b\u8f7d\u548c\u5b89\u88c5JCE\u5e93\u3002\n\n\n\u548c\u5f00\u53d1\u8005\u4ea4\u6d41(Communicating with developers and fellow users)\n\n\nSign into \nHyperledger project\ns Rocket chat\n\n For this you will also need a \nLinux Foundation ID\n\n\nJoin the \nfabric-sdk-java\n channel.\n\n\n\u767b\u5f55\nHyperledger project\ns Rocket chat\n\u3002\u4f60\u9700\u8981\u4e00\u4e2a\nLinux Foundation ID\n\u3002 \u7136\u540e\u52a0\u5165\nfabric-sdk-java\n\u9891\u9053\u3002\n\n\n\u62a5\u544a\u95ee\u9898(Reporting Issues)\n\n\nIf your issue is with building Fabric development environment please discuss this on rocket.chat\ns #fabric-dev-env channel.\n\u5982\u679c\u4f60\u6709\u7f16\u8bd1Fabric\u5f00\u53d1\u73af\u5883\u7684\u95ee\u9898\uff0c\u8bf7\u5728rocket.chat\u7684 #fabric-dev-env channel\u8ba8\u8bba\u3002\n\n\nTo report an issue please use: \nHyperledger\ns JIRA\n.\nTo login you will need a Linux Foundation ID (LFID) which you get at \nThe Linux Foundation\n\nif you don\nt already have one.\n\n\n\u62a5\u544a\u95ee\u9898\u8bf7\u4f7f\u7528JIRA\uff1a\nHyperledger\ns JIRA\n\u3002\n\u4f60\u9700\u8981\u4f7f\u7528Linux\u57fa\u91d1\u4f1aID(LFID)\u6765\u767b\u5f55\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u53ef\u4ee5\u5728\nThe Linux Foundation\n\u6ce8\u518c\u4e00\u4e2a\u3002\n\n\nJIRA Fields should be:\n\n\n  \nType\n\n  \nBug \nor\n New Feature\n\n\nComponent\n\n  \nfabric-sdk-java\n\n  \nFix Versions\n\n    \nv1.0.1\n\n\n\n\nPleases provide as much information that you can with the issue you\nre experiencing: stack traces logs.\n\n\nPlease provide the output of \njava -XshowSettings:properties -version\n\n\nLogging for the SDK can be enabled with setting environment variables:\n\n\nORG_HYPERLEDGER_FABRIC_SDK_LOGLEVEL=TRACE\n\n\nORG_HYPERLEDGER_FABRIC_CA_SDK_LOGLEVEL=TRACE\n\n\nFabric debug is by default enabled in the SDK docker-compose.yaml file with\n\n\nOn Orderer:\n\n\nORDERER_GENERAL_LOGLEVEL=debug\n\n\nOn peers:\nCORE_LOGGING_LEVEL=DEBUG\n\n\nFabric CA\nby starting command have the -d parameter.\n\n\nUpload full logs to the JIRA not just where the issue occurred if possible\n\n\n\u8bf7\u63d0\u4f9b\u5c3d\u91cf\u591a\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u5806\u6808\u8ddf\u8e2a\u8bb0\u5f55\u3002\n\u8bf7\u63d0\u4f9b \njava -XshowSettings:properties -version\n \u547d\u4ee4\u7684\u8f93\u51fa\u7ed3\u679c\n\u53ef\u80fd\u7684\u8bdd\uff0c\u8bf7\u4e0a\u4f20\u5f53\u95ee\u9898\u53d1\u751f\u65f6\u5b8c\u6574\u7684\u65e5\u5fd7\u3002\n\n\nThis work is licensed under a \nCreative Commons Attribution 4.0 International License\n.", 
            "title": "SDK--java"
        }, 
        {
            "location": "/sdk_java_zh/#known-limitations-and-restrictions", 
            "text": "TCerts are not supported(\u4e0d\u652f\u6301TCerts): JIRA FAB-1401  HSM not supported(\u4e0d\u652f\u6301HSM): JIRA FAB-3137  Single Crypto strength 256(\u5355\u5c42\u52a0\u5bc6\u957f\u5ea6\u4e3a256\u4f4d): JIRA FAB-2564  Network configuration updates not supported(\u4e0d\u652f\u6301\u7f51\u7edc\u914d\u7f6e\u66f4\u65b0): JIRA FAB-3103   *************************************************", 
            "title": "\u5df2\u77e5\u7684\u9650\u5236(Known limitations and restrictions)"
        }, 
        {
            "location": "/sdk_java_zh/#v100", 
            "text": "There is a git tagged v1.0.0 [e976abdc658f212d0c3a80ace4499a5cff4279c6] release of the SDK where there is no need to build the Hyperledger Fabric and Hyperledger Fabric CA described below. The provided docker-compose.yaml for the integration tests should pull v1.0.0  tagged images from Docker hub.  \u5df2\u7ecf\u6709\u4e00\u4e2a\u6807\u8bb0\u4e3aV1.0.0[e976abdc658f212d0c3a80ace4499a5cff4279c6]\u7684SDK\u53d1\u884c\u7248\uff0c\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u81ea\u5df1\u6253\u5305Hyperledge Fabric\u548cHyperledger Fabric CA\u3002\u63d0\u4f9b\u96c6\u6210\u6d4b\u8bd5\u7684docker-compose.yaml\u4f1a\u81ea\u52a8\u4eceDocker Hub\u4e0b\u8f7dV1.0.0\u7684\u955c\u50cf\u3002  The v1.0.0 version of the Hyperledger Fabric Java SDK is published to Maven so you can directly use in your application s pom.xml.  V1.0.0\u7684Hyperledger Fabric Java SDK\u5df2\u7ecf\u53d1\u5e03\u5230\u4e86Maven\u4ed3\u5e93\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684pom.xml\u6587\u4ef6\u4e2d\u76f4\u63a5\u4f7f\u7528\u3002  Maven Repository Hyperledger Fabric Java SDK  Make sure you re using docker images at the level of the Fabric that matches the level of the SDK you re using in your application.  \u8bf7\u786e\u8ba4\u4f60\u4f7f\u7528\u7684docker\u955c\u50cf\u7684\u7248\u672c\u548c\u4f60\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684SDK\u7248\u672c\u4e00\u81f4\u3002  *************************************************", 
            "title": "v1.0.0"
        }, 
        {
            "location": "/sdk_java_zh/#fabricfabric-cavalid-builds-of-fabric-and-fabric-ca", 
            "text": "Hyperledger Fabric v1.0.1 is currently under active development and the very latest Hyperledger Fabric builds may not work with this sdk.\nYou should use the following commit levels of the Hyperledger projects:  Hyperledger Fabric V1.0.1 \u6b63\u5728\u5f00\u53d1\u4e2d\uff0c\u6700\u65b0\u7684Fabric\u6253\u5305\u53ef\u80fd\u4e0d\u9002\u7528\u8be5SDK\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528\u4e0b\u9762\u63d0\u4ea4\u7248\u672c\u7684Hyledger\u9879\u76ee\u3002     Project  Commit level  Date       fabric  f56a82e36e040e1c1a986edfceac014ba1516571  Jul 11 12:48:33 2017 -0700     fabric-ca  74f8f4d4c29e45a79a8849efb057dbd8de3ae8d0  Jul 11 16:43:39 2017 +0200      You can clone these projects by going to the  Hyperledger repository .  \u4f60\u53ef\u4ee5\u5230 Hyperledger\u4ed3\u5e93 \u514b\u9686\u8fd9\u4e9b\u9879\u76ee\u3002  As SDK development continues, this file will be updated with compatible Hyperledger Fabric and Fabric-ca commit levels.  \u968f\u7740SDK\u7684\u5f00\u53d1\u8fdb\u884c\u4e2d\uff0c\u8fd9\u4e9b\u6587\u4ef6\u5c06\u4f1a\u968f\u7740Fabric\u548cFabric-ca\u7684\u63d0\u4ea4\u7248\u672c\u53d8\u5316\u800c\u66f4\u65b0\u3002  Once you have cloned  fabric  and  fabric-ca , use the  git reset --hard commitlevel  to set your repositories to the correct commit.  \u4f60\u514b\u9686 fabric \u548c fabric-ca \u65f6\uff0c\u4f7f\u7528 git reset --hard commitlevel \u6765\u8bbe\u7f6e\u4f60\u4ed3\u5e93\u7684\u4f7f\u7528\u6b63\u786e\u7684\u63d0\u4ea4\u7248\u672c\u3002", 
            "title": "\u9a8c\u8bc1Fabric\u548cFabric-ca\u5305(Valid builds of Fabric and Fabric-ca)"
        }, 
        {
            "location": "/sdk_java_zh/#fabric-vagrantworking-with-the-fabric-vagrant-environment", 
            "text": "Vagrant is NOT required if your OS has Docker support and all the requirements needed to build directly in your\nenvironment.  For non Vagrant envrionment, the steps would be the same as below minus those parts involving Vagrant.\n Do the following if you want to run the Fabric components ( peer, orderer, fabric-ca ) in Vagrant:  \u5982\u679c\u4f60\u7684\u73af\u5883\u652f\u6301Docker\uff0cVagrant\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u4f60\u53ea\u9700\u8981\u4f60\u7684\u73af\u5883\u4e2d\u76f4\u63a5\u6253\u5305\u3002\u5728\u975eVagrant\u73af\u5883\uff0c\u7275\u6d89\u5230Vagrant\u7684\u6b65\u9aa4\u4f1a\u5c11\u8bb8\u6709\u4e9b\u4e0d\u540c\u3002\n\u6309\u7167\u4e0b\u9762\u7684\u6b65\u9aa4\u5728Vagrant\u4e2d\u8fd0\u884cFabric\u7ec4\u4ef6( peer, orderer, fabric-ca )\uff1a    git clone  https://github.com/hyperledger/fabric.git\n  git clone  https://github.com/hyperledger/fabric-ca.git\n  cd  fabric-ca\n  git reset --hard fabric-ca_commitlevel from above\n  cd ../fabric\n  git reset --hard fabric_commitlevel from above\n  cd devenv\n  change the Vagrant file as suggested below:\n  vagrant up\n  vagrant ssh\n  make docker\n  cd ../fabric-ca\n  make docker\n  cd ../fabric/sdkintegration\n  docker-compose down;  rm -rf /var/hyperledger/*; docker-compose up --force-recreate   Open the file  Vagrantfile  and verify that the following  config.vm.network  statements are set. If not, then add them:  \u6253\u5f00 Vagrantfile \u6587\u4ef6\u6765\u9a8c\u8bc1\u4e0b\u9762\u7684 config.vm.network \u53c2\u6570\u662f\u5426\u8bbe\u7f6e\u4e86\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u6dfb\u52a0\u4ee5\u4e0b\u884c\u3002     config.vm.network :forwarded_port, guest: 7050, host: 7050 # fabric orderer service\n  config.vm.network :forwarded_port, guest: 7051, host: 7051 # fabric peer vp0 service\n  config.vm.network :forwarded_port, guest: 7053, host: 7053 # fabric peer event service\n  config.vm.network :forwarded_port, guest: 7054, host: 7054 # fabric-ca service\n  config.vm.network :forwarded_port, guest: 5984, host: 15984 # CouchDB service\n  ### Below are probably missing.....\n  config.vm.network :forwarded_port, guest: 7056, host: 7056\n  config.vm.network :forwarded_port, guest: 7058, host: 7058\n  config.vm.network :forwarded_port, guest: 8051, host: 8051\n  config.vm.network :forwarded_port, guest: 8053, host: 8053\n  config.vm.network :forwarded_port, guest: 8054, host: 8054\n  config.vm.network :forwarded_port, guest: 8056, host: 8056\n  config.vm.network :forwarded_port, guest: 8058, host: 8058  Add to your Vagrant file a folder for referencing the sdkintegration folder between the lines below:  \u5728Vagrant\u6587\u4ef6\u4e2d\uff0c\u589e\u52a0SDK\u96c6\u6210\u76ee\u5f55\u7684\u5f15\u7528\uff1a  config.vm.synced_folder  .. ,  /opt/gopath/src/github.com/hyperledger/fabric  config.vm.synced_folder \"/home/ user /fabric-sdk-java/src/test/fixture/sdkintegration\", \"/opt/gopath/src/github.com/hyperledger/fabric/sdkintegration  config.vm.synced_folder ENV.fetch( LOCALDEVDIR ,  .. ),  #{LOCALDEV}", 
            "title": "\u4f7f\u7528Fabric Vagrant\u73af\u5883(Working with the Fabric Vagrant environment)"
        }, 
        {
            "location": "/sdk_java_zh/#sdk-sdk-dependencies", 
            "text": "SDK depends on few third party libraries that must be included in your classpath when using the JAR file. To get a list of dependencies, refer to pom.xml file or run\n\u5f53\u4f60\u4f7f\u7528JAR\u6587\u4ef6\u65f6\uff0cSDK\u4f9d\u8d56\u7684\u7b2c\u4e09\u65b9\u5e93\u5e94\u8be5\u5305\u542b\u5728classpath\u4e2d\u3002\u4e3a\u4e86\u53ef\u4ee5\u5f97\u5230\u4f9d\u8d56\u6e05\u5355\uff0c\u53ef\u4ee5\u53c2\u7167pom.xml\u6587\u4ef6\u6216\u8005\u8fd0\u884c  mvn dependency:tree  or  mvn dependency:list . mvn dependency:tree  \u6216  mvn dependency:list .  Alternatively,   mvn dependency:analyze-report   will produce a report in HTML format in target directory listing all the dependencies in a more readable format.\n\u9664\u6b64\u4e4b\u5916\uff0c  mvn dependency:analyze-report   \u4f1a\u5728\u76ee\u6807\u76ee\u5f55\u4e2d\u751f\u6210\u4e00\u4e2aHTML\u683c\u5f0f\u7684\u62a5\u544a\u66f4\u6e05\u6670\u5730\u5217\u51fa\u6240\u6709\u7684\u4f9d\u8d56\u5305\u3002", 
            "title": "SDK \u4f9d\u8d56(SDK dependencies)"
        }, 
        {
            "location": "/sdk_java_zh/#sdkusing-the-sdk", 
            "text": "The SDK s test cases uses chaincode in the SDK s source tree:  /src/test/fixture \nSDK\u7684\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u4f7f\u7528\u94fe\u7801\u6e90\u7801\u6811\uff1a  /src/test/fixture  The SDK s JAR is in  target/fabric-sdk-java-1.0.0-SNAPSHOT.jar  and you will need the additional dependencies listed above.\nWhen the SDK is published to  Maven  you will be able to simply include it in your application s  pom.xml .  SDK\u7684JAR\u5305\u5728 target/fabric-sdk-java-1.0.0-SNAPSHOT.jar \uff0c\u4f60\u53ef\u80fd\u4f1a\u9700\u8981\u589e\u52a0\u4e0a\u9762\u63d0\u5230\u7684\u9644\u52a0\u7684\u4f9d\u8d56\u5305\u3002\n\u5f53SDK\u53d1\u5e03\u5230Maven\u540e\uff0c\u4f60\u53ea\u9700\u8981\u7b80\u5355\u7684\u5728\u4f60\u7684\u5e94\u7528\u7684 pom.xml \u5305\u542b\u5b83\u3002  Add below code in your  pom.xml  to download fabric-sdk-java-1.0\n\u5728\u4f60\u7684 pom.xml \u6587\u4ef6\u589e\u52a0\u4e0b\u9762\u7684\u4ee3\u7801\u6765\u4e0b\u8f7dfabric-sdk-java-1.0  \n      dependencies \n      dependency \n             groupId org.hyperledger.fabric-sdk-java /groupId \n             artifactId fabric-sdk-java /artifactId \n             version 1.0.0 /version \n          /dependency \n      /dependencies", 
            "title": "\u4f7f\u7528SDK(Using the SDK)"
        }, 
        {
            "location": "/sdk_java_zh/#compiling", 
            "text": "To build this project, the following dependencies must be met   JDK 1.8 or above  Apache Maven   \u4e3a\u4e86\u80fd\u591f\u7f16\u8bd1\u8be5\u5de5\u7a0b\uff0c\u4f60\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u8981\u6c42   JDK 1.8 \u6216\u66f4\u9ad8  Apache Maven   Once your JAVA_HOME points to your installation of JDK 1.8 (or above) and JAVA_HOME/bin and Apache maven are in your PATH, issue the following command to build the jar file:\n\u5f53\u4f60\u7684JAVA_HOME\u6307\u5411\u4e86JDK 1.8\u5b89\u88c5\u76ee\u5f55\uff0c\u5728PATH\u4e2d\u8bbe\u7f6e\u4e86JAVA_HOME/bin\u548c Apache Maven\uff0c\u4f60\u53ef\u4ee5\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u6765\u6253\u5305jar\u6587\u4ef6\uff1a  \n  mvn install \nor \n  mvn install -DskipTests  \u5982\u679c\u4f60\u4e0d\u60f3\u6267\u884c\u5355\u5143\u6d4b\u8bd5\u3002", 
            "title": "\u7f16\u8bd1(Compiling)"
        }, 
        {
            "location": "/sdk_java_zh/#running-the-unit-tests", 
            "text": "To run the unit tests, please use  mvn test  or  mvn install  which will run the unit tests and build the jar file.You must be running a local peer and orderer to be able to run the unit tests.  \u901a\u8fc7 mvn test  \u6765\u6267\u884c\u5355\u5143\u6d4b\u8bd5\u6216  mvn install  \u6267\u884c\u5355\u5143\u6d4b\u8bd5\u5e76\u751f\u6210jar\u6587\u4ef6\u3002\u4f60\u5fc5\u987b\u5728\u672c\u5730\u8fd0\u884c\u4e86peer\u548corderer\u8282\u70b9\u624d\u80fd\u6267\u884c\u5355\u5143\u6d4b\u8bd5\u3002", 
            "title": "\u6267\u884c\u5355\u5143\u6d4b\u8bd5(Running the unit tests)"
        }, 
        {
            "location": "/sdk_java_zh/#running-the-integration-tests", 
            "text": "You must be running local instances of Fabric-ca, Fabric peers, and Fabric orderers to be able to run the integration tests. See above for running these services in Vagrant.\nUse this  maven  command to run the integration tests:  \u4f60\u5fc5\u987b\u5728\u672c\u5730\u8fd0\u884c\u4e86Fabric-ca, Fabric peers, and Fabric orderers\u8282\u70b9\u624d\u80fd\u591f\u6267\u884c\u96c6\u6210\u6d4b\u8bd5\u3002\u53c2\u7167\u4e0a\u6587\u4e2d\u5982\u4f55\u5728Vagrant\u4e2d\u8fd0\u884c\u8fd9\u4e9b\u670d\u52a1\u3002\n\u4f7f\u7528\u4e0b\u9762\u7684 maven \u6307\u4ee4\u6765\u6267\u884c\u96c6\u6210\u6d4b\u8bd5\uff1a   mvn failsafe:integration-test -DskipITs=false", 
            "title": "\u6267\u884c\u96c6\u6210\u6d4b\u8bd5(Running the integration tests)"
        }, 
        {
            "location": "/sdk_java_zh/#end-to-end-test-scenario", 
            "text": "The  src/test/java/org/hyperledger/fabric/sdkintegration/End2endIT.java  integration test is an example of installing, instantiating, invoking and querying a chaincode.\nIt constructs the Hyperledger channel, deploys the  GO  chaincode, invokes the chaincode to do a transfer amount operation and queries the resulting blockchain world state.  This test is a reworked version of the Fabric  e2e_cli example  to demonstrate the features of the SDK.\nTo better understand blockchain and Fabric concepts, we recommend you install and run the  e2e_cli  example.  _src/test/java/org/hyperledger/fabric/sdkintegration/End2endIT.java_\u4e2d\u7684\u96c6\u6210\u6d4b\u8bd5\uff0c\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5b89\u88c5\u3001\u5b9e\u4f8b\u5316\u3001\u8c03\u7528\u548c\u67e5\u8be2\u94fe\u7801\u7684\u4f8b\u5b50\u3002\u5b83\u6784\u5efa\u4e86Hyperledger\u901a\u9053\uff0c\u53d1\u5e03 GO \u7248\u672c\u94fe\u7801\uff0c\u8c03\u7528\u94fe\u7801\uff0c\u6267\u884c\u8f6c\u8d26\u52a8\u4f5c\uff0c\u5e76\u5728\u533a\u5757\u94fe\u4e0a\u67e5\u8be2\u7ed3\u679c\u3002", 
            "title": "\u7aef\u5230\u7aef\u6d4b\u8bd5\u573a\u666f(End to end test scenario)"
        }, 
        {
            "location": "/sdk_java_zh/#end-to-end-test-environment", 
            "text": "The test defines one Fabric orderer and two organizations (peerOrg1, peerOrg2), each of which has 2 peers, one fabric-ca service.  \u8be5\u6d4b\u8bd5\u5305\u542b\u4e00\u4e2aorderer\u8282\u70b9\uff0c\u4e24\u4e2a\u7ec4\u7ec7(peerOrg1, peerOrg2)\uff0c\u6bcf\u4e2a\u7ec4\u7ec7\u5404\u81ea\u5305\u542b\u4e24\u4e2a\u8282\u70b9\uff0c\u4ee5\u53ca\u4e00\u4e2afabric-ca\u670d\u52a1\u3002", 
            "title": "\u7aef\u5230\u7aef\u6d4b\u8bd5\u73af\u5883(End to end test environment)"
        }, 
        {
            "location": "/sdk_java_zh/#certificates-and-other-cryptography-artifacts", 
            "text": "Fabric requires that each organization has private keys and certificates for use in signing and verifying messages going to and from clients, peers and orderers.\nEach organization groups these artifacts in an  MSP  (Membership Service Provider) with a corresponding unique  MSPID  .  Furthermore, each organization is assumed to generate these artifacts independently. The  fabric-ca  project is an example of such a certificate generation service.\nFabric also provides the  cryptogen  tool to automatically generate all cryptographic artifacts needed for the end to end test.\nIn the directory src/test/fixture/sdkintegration/e2e-2Orgs/channel  The command used to generate end2end  crypto-config  artifacts:  build/bin/cryptogen generate --config crypto-config.yaml --output=crypto-config  For ease of assigning ports and mapping of artifacts to physical files, all peers, orderers, and fabric-ca are run as Docker containers controlled via a docker-compose configuration file.  The files used by the end to end are:\n *  src/test/fixture/sdkintegration/e2e-2Orgs/channel   (everything needed to bootstrap the orderer and create the channels)\n *  src/test/fixture/sdkintegration/e2e-2Orgs/crypto-config  (as-is. Used by  configtxgen  and  docker-compose  to map the MSP directories)\n *  src/test/fixture/sdkintegration/docker-compose.yaml  The end to end test case artifacts are stored under the directory  src/test/fixture/sdkintegration/e2e-2Org/channel  .  Fabric\u9700\u8981\u6bcf\u4e2a\u7ec4\u7ec7\u90fd\u6709\u81ea\u5df1\u7684\u79c1\u94a5\u548c\u8bc1\u4e66\uff0c\u7528\u6765\u7b7e\u540d\u548c\u9a8c\u8bc1\u5ba2\u6237\u7aef\u3001\u8282\u70b9\u548corderer\u4e4b\u95f4\u7684\u6d88\u606f\u3002\n\u6bcf\u4e2a\u7ec4\u7ec7\u7684\u8fd9\u4e9b\u5de5\u4ef6\u5728 MSP  (Membership Service Provider)\u4e2d\u90fd\u6709\u7edf\u4e00\u7684\u552f\u4e00  MSPID \u3002  \u800c\u4e14\uff0c\u6211\u4eec\u5047\u8bbe\u5404\u4e2a\u7ec4\u7ec7\u90fd\u662f\u72ec\u7acb\u7684\u751f\u6210\u8fd9\u4e9b\u5de5\u4ef6\u3002 fabric-ca \u5de5\u7a0b\u662f\u4e00\u4e2a\u8bc1\u4e66\u751f\u6210\u670d\u52a1\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\nFabric\u540c\u65f6\u63d0\u4f9b cryptogen \u5de5\u5177\u6765\u81ea\u52a8\u751f\u6210\u7aef\u5bf9\u7aef\u6d4b\u8bd5\u6240\u9700\u7684\u52a0\u5bc6\u7528\u7684\u5de5\u4ef6\u3002\n\u5728src/test/fixture/sdkintegration/e2e-2Orgs/channel\u76ee\u5f55  \u4f7f\u7528  crypto-config  \u547d\u4ee4\u6765\u751f\u6210 end2end \u5de5\u4ef6\uff1a \n    build/bin/cryptogen generate --config crypto-config.yaml --output=crypto-config  \u4e3a\u4e86\u65b9\u4fbf\u5206\u914d\u7aef\u53e3\u548c\u6620\u5c04\u8fd9\u4e9b\u5de5\u4ef6\u5230\u7269\u7406\u6587\u4ef6\uff0c\u6240\u6709\u7684peer\uff0c order \u548cfabric-ca\u90fd\u8fd0\u884c\u5728Docker\u5bb9\u5668\u4e2d\uff0c\u901a\u8fc7docker-compose\u914d\u7f6e\u6587\u4ef6\u6765\u63a7\u5236\u3002  \u4f7f\u7528\u5230\u4e86\u4e0b\u9762\u8fd9\u4e9b\u6587\u4ef6\uff1a\n *  src/test/fixture/sdkintegration/e2e-2Orgs/channel   (everything needed to bootstrap the orderer and create the channels)\n *  src/test/fixture/sdkintegration/e2e-2Orgs/crypto-config  (as-is. Used by  configtxgen  and  docker-compose  to map the MSP directories)\n *  src/test/fixture/sdkintegration/docker-compose.yaml  \u7aef\u5bf9\u7aef\u6d4b\u8bd5\u7528\u4f8b\u5de5\u4ef6\u5b58\u50a8\u5728_src/test/fixture/sdkintegration/e2e-2Org/channel_\u76ee\u5f55\u4e2d\u3002", 
            "title": "\u8bc1\u4e66\u53ca\u5176\u4ed6\u52a0\u5bc6\u5de5\u4ef6(Certificates and other cryptography artifacts)"
        }, 
        {
            "location": "/sdk_java_zh/#tlsordererpeertls-connection-to-orderer-and-peers", 
            "text": "IBM Java needs the following properties defined to use TLS 1.2 to get an HTTPS connections to Fabric CA.  -Dcom.ibm.jsse2.overrideDefaultTLS=true   -Dhttps.protocols=TLSv1.2  We need certificate and key for each of the Orderer and Peers for TLS connection. You can generate your certificate and key files with openssl command as follows:   Set up your own Certificate Authority (CA) for issuing certificates  For each of orderers and peers:  generate a private key:  openssl genrsa 512   key.pem .  generate a certificate request (csr):  openssl req -new -days 365 -key key.pem -out csr.pem , which will request your input for some information, where CN has to be the container s alias name (e.g. peer0, peer1, etc), all others can be left blank.  sign the csr with the CA private key to generate a certificate:  openssl ca -days 365 -in csr.pem -keyfile {CA s privatekey} -notext -out cert.pem  put the resulting cert.pem and key.pem together with the CA s certificate (as the name cacert.pem) in the directory where the docker container can access.   The option -notext in the last openssl command in the above is important. Without the option, the resulting cert.pemmay does not work for some Java implementation (e.g. IBM JDK).\nThe certificates and keys for the end-to-end test case are stored in the directory  src/test/fixture/sdkintegration/e2e-2Org/tls/ .  Currently, the pom.xml is set to use netty-tcnative-boringssl for TLS connection to Orderer and Peers, however, you can change the pom.xml (uncomment a few lines) to use an alternative TLS connection via ALPN.  IBM Java\u9700\u8981\u4ee5\u4e0b\u5b9a\u4e49\u4e00\u4e0b\u53c2\u6570\u624d\u80fd\u4f7f\u7528TLS 1.2\u6765\u548cFabric CA\u5efa\u7acbHTTPS\u8fde\u63a5\u3002  -Dcom.ibm.jsse2.overrideDefaultTLS=true   -Dhttps.protocols=TLSv1.2  \u6bcf\u4e2aOrderer\u548cPeer\u5efa\u7acbTLS\u8fde\u63a5\u90fd\u9700\u8981\u8bc1\u4e66\u548c\u79c1\u94a5\u3002\u4f60\u53ef\u4ee5\u6309\u4ee5\u4e0b\u6b65\u9aa4\u901a\u8fc7openssl\u547d\u4ee4\u6765\u751f\u6210\u8bc1\u4e66\u548c\u79c1\u94a5\u6587\u4ef6\uff1a\n * \u8bbe\u7f6e\u4f60\u81ea\u5df1\u7684\u8bc1\u4e66\u8ba4\u8bc1\u673a\u6784\uff08CA\uff09\u6765\u53d1\u884c\u8bc1\u4e66\n * \u5bf9\u6bcf\u4e00\u4e2aOrderer\u548cPeer\n    * \u751f\u6210\u79c1\u94a5  openssl genrsa 512   key.pem \u3002\n    * \u751f\u6210\u8bc1\u4e66\u8bf7\u6c42\uff08csr\uff09 openssl req -new -days 365 -key key.pem -out csr.pem \uff0c\u8fd9\u91cc\u53ef\u80fd\u9700\u8981\u4f60\u586b\u5199\u4e00\u4e9b\u4fe1\u606f\uff0cCN\u5e94\u8be5\u662f\u5bb9\u5668\u7684\u522b\u540d\uff08\u6bd4\u5982peer0\uff0c peer1\u7b49\uff09\uff0c\u5176\u4f59\u7684\u90fd\u53ef\u4ee5\u7559\u7a7a\n    * \u901a\u8fc7CS\u7684\u79c1\u94a5\u6765\u7ed9\u8bc1\u4e66\u8bf7\u6c42\uff08CSR\uff09\u7b7e\u540d\u5e76\u751f\u6210\u8bc1\u4e66\uff1a openssl ca -days 365 -in csr.pem -keyfile {CA s privatekey} -notext -out cert.pem \n    * \u5c06\u751f\u6210\u7684cert.pem \u548c key.pem \u540cCA\u7684\u8bc1\u4e66(\u540d\u5b57cacert.pem)\u4e00\u8d77\u653e\u5230docker\u5bb9\u5668\u53ef\u4ee5\u8bbf\u95ee\u5230\u7684\u76ee\u5f55\u4e2d\u3002  \u4e0a\u9762\u6700\u540e\u4e00\u6761openssl\u547d\u4ee4\u4e2d\u7684 -notext \u9009\u9879\u975e\u5e38\u91cd\u8981\u3002\u6ca1\u6709\u8fd9\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u751f\u6210\u7684cert.pemmay\u6ca1\u529e\u6cd5\u5728\u67d0\u4e9bjava\u73af\u5883\u4e2d\u7528\uff08\u6bd4\u5982java JDK\uff09\u3002\n\u8fd9\u4e9b\u8bc1\u4e66\u548c\u94a5\u5319\u6587\u4ef6\u653e\u5728_src/test/fixture/sdkintegration/e2e-2Org/tls/_\u76ee\u5f55\u4e2d\u3002  \u76ee\u524d\uff0cpom.xml\u8bbe\u7f6e\u4f7f\u7528netty-tcnative-boringssl\u5728Orderer\u548cPeer\u4e4b\u95f4\u5efa\u7acbTLS\u8fde\u63a5\uff0c\u4f60\u53ef\u4ee5\u66f4\u8be5pom.xml(\u6ce8\u91ca\u5176\u4e2d\u4e00\u4e9b\u884c)\u6765\u901a\u8fc7ALPN\u6765\u4f7f\u7528\u5176\u4ed6\u7684TLS\u8fde\u63a5\u3002", 
            "title": "\u901a\u8fc7TLS\u8fde\u63a5\u5230Orderer\u548cPeer(TLS connection to Orderer and Peers)"
        }, 
        {
            "location": "/sdk_java_zh/#chaincode-endorsement-policies", 
            "text": "Policies are described in the  Fabric Endorsement Policies document .\nYou create a policy using a Fabric tool ( an example is shown in  JIRA issue FAB-2376 )\nand give it to the SDK either as a file or a byte array. The SDK, in turn, will use the policy when it creates chaincode instantiation requests.  To input a policy to the SDK, use the  ChaincodeEndorsementPolicy  class.  For testing purposes, there are 2 policy files in the  src/test/resources  directory\n  *  policyBitsAdmin  ( which has policy  AND(DEFAULT.admin)  meaning  1 signature from the DEFAULT MSP admin  is required  )\n  *  policyBitsMember  ( which has policy  AND(DEFAULT.member)  meaning  1 signature from a member of the DEFAULT MSP is required  )  and one file in the  src/test/fixture/sdkintegration/e2e-2Orgs/channel  directory specifically for use in the end to end test scenario\n  *  members_from_org1_or_2.policy  ( which has policy  OR(peerOrg1.member, peerOrg2.member)  meaning   1 signature from a member of either organizations peerOrg1, PeerOrg2 is required )  Alternatively, you can also use ChaincodeEndorsementPolicy class by giving it a YAML file that has the policy defined in it.\n See examples of this in the End2endIT testcases that use  src/test/fixture/sdkintegration/chaincodeendorsementpolicy.yaml \n The file chaincodeendorsementpolicy.yaml has comments that help understand how to create these policies. The first section\n lists all the signature identities you can use in the policy. Currently, only ROLE types are supported.\n The policy section is comprised of  n-of  and  signed-by  elements.  Then n-of ( 1-of   2-of ) require that many ( n ) in that\n section to be true. The  signed-by  references an identity in the identities section.  \u80cc\u4e66\u7b56\u7565\u5728 Fabric Endorsement Policies document \u4e0a\u505a\u4e86\u8be6\u7ec6\u7684\u9610\u91ca\u3002\n\u4f60\u53ef\u4ee5\u901a\u8fc7Fabric\u5de5\u5177\u6765\u521b\u5efa\u4e00\u4e2a\u7b56\u7565(\u5728  JIRA issue FAB-2376  \u6709\u4e2a\u4f8b\u5b50)\u4ee5\u6587\u4ef6\u6216byte\u6570\u7ec4\u65b9\u5f0f\u4f20\u7ed9SDK\u3002\u540c\u65f6SDK\u4f1a\u4f7f\u7528\u8be5\u7b56\u7565\u6765\u521b\u5efa\u94fe\u7801\u521d\u59cb\u5316\u8bf7\u6c42\u3002  \u4f7f\u7528 ChaincodeEndorsementPolicy \u7c7b\u5c06\u7b56\u7565\u4f20\u7ed9SDK\u3002\n\u4e3a\u4e86\u6d4b\u8bd5\u76ee\u7684\uff0c\u5728_src/test/resources_\u4e0b\u6709\u4e24\u4e2a\u7b56\u7565\u6587\u4ef6\u3002\n  *  policyBitsAdmin  ( \u5305\u542b  AND(DEFAULT.admin)  \u7b56\u7565\uff0c  \u9700\u8981\u4e00\u4e2aDEFAULT MSP \u7ba1\u7406\u5458\u7684\u7b7e\u540d  )\n  *  policyBitsMember  ( \u5305\u542b  AND(DEFAULT.member)  \u7b56\u7565\uff0c  \u9700\u8981\u4e00\u4e2aDEFAULT MSP \u6210\u5458\u7684\u7b7e\u540d  )  \u5728_src/test/fixture/sdkintegration/e2e-2Orgs/channel_\u4e0b\u6cb9\u4e00\u4e2a\u6587\u4ef6\uff0c\u6307\u5b9a\u4e86\u7aef\u5bf9\u7aef\u7684\u6d4b\u8bd5\u573a\u666f\n  *  members_from_org1_or_2.policy  ( \u5305\u542b  OR(peerOrg1.member, peerOrg2.member)  \u7b56\u7565   \u9700\u8981\u4efb\u4e00\u7ec4\u7ec7(peerOrg1, PeerOrg2)\u4e0b\u6210\u5458\u7684\u7b7e\u540d )  \u53e6\u5916\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7528ChaincodeEndorsementPolicy\u7c7b\uff0c\u901a\u8fc7\u7ed9\u4ed6\u6307\u5b9a\u4e00\u4e2a\u5305\u542b\u7b56\u7565\u5b9a\u4e49\u7684YAML\u6587\u4ef6\u6765\u5b9e\u73b0\u3002\n\u53c2\u7167_src/test/fixture/sdkintegration/chaincodeendorsementpolicy.yaml_\u76ee\u5f55\u4e0bEnd2endIT\u6d4b\u8bd5\u7528\u4f8b\u3002 \n\u6587\u4ef6chaincodeendorsementpolicy.yaml\u4e2d\uff0c\u6709\u4e00\u4e9b\u5e2e\u52a9\u7406\u89e3\u5982\u4f55\u521b\u5efa\u7b56\u7565\u7684\u6ce8\u91ca\u3002\u7b2c\u4e00\u90e8\u5206\u5217\u51fa\u4e86\u6240\u6709\u53ef\u4ee5\u5728\u7b56\u7565\u4e2d\u4f7f\u7528\u7684\u7b7e\u540d\u3002\u5f53\u524d\u53ea\u652f\u6301ROLE\u7c7b\u578b\u3002\npolicy\u533a\u5757\u5305\u542b n-of  \u548c  signed-by  \u5143\u7d20\u3002n-of ( 1-of   2-of ) \u5143\u7d20\u9700\u8981\u5728\u8fd9\u4e2a\u533a\u5757\u4e2d\u5c06\u201cmany\u201d ( n ) \u8bbe\u7f6e\u4e3a true.  signed-by \u5143\u7d20\u5f15\u7528\u4e86\u5728identities\u533a\u5757\u7684\u8eab\u4efd\u4fe1\u606f\u3002", 
            "title": "\u94fe\u7801\u80cc\u4e66\u7b56\u7565(Chaincode endorsement policies)"
        }, 
        {
            "location": "/sdk_java_zh/#channel-creation-artifacts", 
            "text": "Channel configuration files and orderer bootstrap files ( see directory  src/test/fixture/sdkintegration/e2e-2Orgs/channel  ) are needed when creating a new channel.\nThis is created with the Hyperledger Fabric  configtxgen  tool.  For End2endIT.java the commands are   build/bin/configtxgen -outputCreateChannelTx foo.tx -profile TwoOrgsChannel -channelID foo  build/bin/configtxgen -outputCreateChannelTx bar.tx -profile TwoOrgsChannel -channelID bar  build/bin/configtxgen -outputBlock orderer.block -profile TwoOrgsOrdererGenesis   with the configtxgen config file  src/test/fixture/sdkintegration/e2e-2Orgs/channel/configtx.yaml  If  build/bin/configtxgen  tool is not present  run  make configtxgen  Before running the end to end test case:\n *  you may need to modify  configtx.yaml  to change all hostname and port definitions to match\nyour server(s) hostname(s) and port(s).\n *  you  WILL  have to modify  configtx.yaml  to have the  MSPDir  point to the correct path to the  crypto-config  directories.\n   *  configtx.yaml  currently assumes that you are running in a Vagrant environment where the fabric, fabric-ca and fabric-sdk-java projects exist under the  /opt/gopath/src/github.com/hyperledger  directory.  \u521b\u5efa\u901a\u9053\u7684\u65f6\u5019\uff0c\u9700\u8981\u6709\u901a\u9053\u7684\u914d\u7f6e\u6587\u4ef6\u4ee5\u53caorderer\u5f15\u5bfc\u6587\u4ef6\uff08\u5728_src/test/fixture/sdkintegration/e2e-2Orgs/channel_\u76ee\u5f55\u4e0b\uff09\u3002\n\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u662f\u901a\u8fc7 configtxgen \u6765\u521b\u5efa\u7684\u3002  \u5bf9\u4e8eEnd2endIT.java\u7c7b\u6765\u8bf4\uff0c\u547d\u4ee4\u662f\uff1a\n * build/bin/configtxgen -outputCreateChannelTx foo.tx -profile TwoOrgsChannel -channelID foo\n * build/bin/configtxgen -outputCreateChannelTx bar.tx -profile TwoOrgsChannel -channelID bar\n * build/bin/configtxgen -outputBlock orderer.block -profile TwoOrgsOrdererGenesis  \u914d\u7f6e\u6587\u4ef6\u662f   src/test/fixture/sdkintegration/e2e-2Orgs/channel/configtx.yaml \u3002  \u5982\u679c build/bin/configtxgen \u5de5\u5177\u4e0d\u5b58\u5728\uff0c\u5219\u9700\u8981\u6267\u884c make configtxgen \u6765\u751f\u6210\u3002  \u5728\u4f60\u8fd0\u884c\u7aef\u5bf9\u7aef\u6d4b\u8bd5\u7528\u4f8b\u524d\uff1a  \u4f60\u9700\u8981\u4fee\u6539 configtx.yaml \u6587\u4ef6\uff0c\u5c06\u4e3b\u673a\u540d\u548c\u7aef\u53e3\u5b9a\u4e49\u4fee\u6539\u6210\u4f60\u670d\u52a1\u5668\u771f\u5b9e\u7684\u4e3b\u673a\u540d\u548c\u7aef\u53e3\u3002  \u4f60\u5c06\u4f1a\u9700\u8981\u4fee\u6539 configtx.yaml \u6587\u4ef6\uff0c\u5c06_MSPDir_\u6307\u5411\u5230\u6b63\u786e\u7684_crypto-config_\u76ee\u5f55\u3002\n  *  configtx.yaml \u6587\u4ef6\u5f53\u524d\u5047\u8bbe\u4f60\u8fd0\u884c\u5728Vagrant\u73af\u5883\uff0c\u800c\u4e14fabric\u3001fabric-ca \u548cfabric-sdk-java \u5728_/opt/gopath/src/github.com/hyperledger_\u76ee\u5f55\u4e0b\u3002", 
            "title": "\u901a\u9053\u521b\u5efa\u5de5\u4ef6(Channel creation artifacts)"
        }, 
        {
            "location": "/sdk_java_zh/#gogo-lang-chaincode", 
            "text": "Go lang chaincode dependencies must be contained in vendor folder.\n For an explanation of this see  Vender folder explanation  Go\u8bed\u8a00\u94fe\u7801\u7684\u4f9d\u8d56\u6587\u4ef6\u5fc5\u987b\u5305\u542b\u5728vendor\u76ee\u5f55\u4e0b\u3002\n\u8be6\u7ec6\u89e3\u91ca\u53c2\u7167 Vender folder explanation", 
            "title": "GO\u8bed\u8a00\u94fe\u7801(GO Lang chaincode)"
        }, 
        {
            "location": "/sdk_java_zh/#basic-troubleshooting", 
            "text": "identity or token do not match  Keep in mind that you can perform the enrollment process with the membership services server only once, as the enrollmentSecret is a one-time-use password. If you have performed a FSUser registration/enrollment with the membership services and subsequently deleted the crypto tokens stored on the client side, the next time you try to enroll, errors similar to the ones below will be seen.  Error: identity or token do not match  Error: FSUser is already registered  To address this, remove any stored crypto material from the CA server by following the instructions  here  which typically involves deleting the /var/hyperledger/production directory and restarting the membership services. You will also need to remove any of the crypto tokens stored on the client side by deleting the KeyValStore . That KeyValStore is configurable and is set to ${FSUser.home}/test.properties within the unit tests.  When running the unit tests, you will always need to clean the membership services database and delete the KeyValStore file, otherwise, the unit tests will fail.  \u8bb0\u4f4f\u4f60\u53ea\u80fd\u8fd0\u884c\u6210\u5458\u670d\u52a1\u7684\u767b\u8bb0\u8fdb\u7a0b\uff08enrollment process\uff09\u4e00\u6b21\uff0c\u56e0\u4e3aenrollmentSecret\u662f\u4e00\u6b21\u6027\u5bc6\u7801\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u6267\u884c\u8fc7\u4e00\u6b21FSUser registration/enrollment\uff0c\u7136\u540e\u5220\u9664\u4e86\u52a0\u5bc6\u5b58\u50a8\u5728\u5ba2\u6237\u7aef\u7684token\u540e\uff0c\u4e0b\u4e00\u6b21enroll\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e0b\u9762\u7c7b\u4f3c\u7684\u95ee\u9898\uff1a Error: identity or token do not match  Error: FSUser is already registered  \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u8bf7\u53c2\u7167 here  \u5220\u9664\u6240\u6709\u5b58\u50a8\u5728CA\u670d\u52a1\u5668\u4e0a\u7684\u7684\u52a0\u5bc6\u6587\u4ef6\uff0c\u6587\u4ef6\u76ee\u5f55\u5728/var/hyperledger/production\uff0c\u7136\u540e\u91cd\u542f\u6210\u5458\u670d\u52a1\u3002\u540c\u65f6\u4f60\u8fd8\u9700\u8981\u901a\u8fc7\u5220\u9664KeyValStore\u6765\u6e05\u695a\u5ba2\u6237\u7aef\u6240\u6709\u7684\u52a0\u5bc6token\u3002KeyValStore\u662f\u53ef\u914d\u7f6e\u7684\uff0c\u53c2\u7167${FSUser.home}/test.properties\u6587\u4ef6\u3002  \u5f53\u8fd0\u884c\u6d4b\u8bd5\u7528\u4f8b\u65f6\uff0c\u4f60\u9700\u8981\u6e05\u7406\u6210\u5458\u670d\u52a1\u5668\u6570\u636e\u5e93\u5e76\u5220\u9664KeyValStore\u6587\u4ef6\uff0c\u5426\u5219\u5355\u5143\u6d4b\u8bd5\u4f1a\u5931\u8d25\u3002  java.security.InvalidKeyException: Illegal key size  If you get this error, this means your JDK does not capable of handling unlimited strength crypto algorithms. To fix this issue, You will need to download the JCE libraries for your version of JDK. Please follow the instructions  here  to download and install the JCE for your version of the JDK.  \u5982\u679c\u4f60\u78b0\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u4f60\u7684JDK\u4e0d\u652f\u6301\u65e0\u9650\u957f\u5ea6\u52a0\u5bc6\u903b\u8f91\u3002\u8981\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u9700\u8981\u4e0b\u8f7d\u6b63\u5bf9\u4f60JDK\u7248\u672c\u7684JCE\u5e93\uff0c\u8bf7\u53c2\u7167 \u8fd9\u91cc \u6765\u4e0b\u8f7d\u548c\u5b89\u88c5JCE\u5e93\u3002", 
            "title": "\u7b80\u5355\u7684\u95ee\u9898\u89e3\u51b3(Basic Troubleshooting)"
        }, 
        {
            "location": "/sdk_java_zh/#communicating-with-developers-and-fellow-users", 
            "text": "Sign into  Hyperledger project s Rocket chat \n For this you will also need a  Linux Foundation ID  Join the  fabric-sdk-java  channel.  \u767b\u5f55 Hyperledger project s Rocket chat \u3002\u4f60\u9700\u8981\u4e00\u4e2a Linux Foundation ID \u3002 \u7136\u540e\u52a0\u5165 fabric-sdk-java \u9891\u9053\u3002", 
            "title": "\u548c\u5f00\u53d1\u8005\u4ea4\u6d41(Communicating with developers and fellow users)"
        }, 
        {
            "location": "/sdk_java_zh/#reporting-issues", 
            "text": "If your issue is with building Fabric development environment please discuss this on rocket.chat s #fabric-dev-env channel.\n\u5982\u679c\u4f60\u6709\u7f16\u8bd1Fabric\u5f00\u53d1\u73af\u5883\u7684\u95ee\u9898\uff0c\u8bf7\u5728rocket.chat\u7684 #fabric-dev-env channel\u8ba8\u8bba\u3002  To report an issue please use:  Hyperledger s JIRA .\nTo login you will need a Linux Foundation ID (LFID) which you get at  The Linux Foundation \nif you don t already have one.  \u62a5\u544a\u95ee\u9898\u8bf7\u4f7f\u7528JIRA\uff1a Hyperledger s JIRA \u3002\n\u4f60\u9700\u8981\u4f7f\u7528Linux\u57fa\u91d1\u4f1aID(LFID)\u6765\u767b\u5f55\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u53ef\u4ee5\u5728 The Linux Foundation \u6ce8\u518c\u4e00\u4e2a\u3002  JIRA Fields should be: \n   Type \n   Bug  or  New Feature  Component \n   fabric-sdk-java \n   Fix Versions \n     v1.0.1   Pleases provide as much information that you can with the issue you re experiencing: stack traces logs.  Please provide the output of  java -XshowSettings:properties -version  Logging for the SDK can be enabled with setting environment variables:  ORG_HYPERLEDGER_FABRIC_SDK_LOGLEVEL=TRACE  ORG_HYPERLEDGER_FABRIC_CA_SDK_LOGLEVEL=TRACE  Fabric debug is by default enabled in the SDK docker-compose.yaml file with  On Orderer:  ORDERER_GENERAL_LOGLEVEL=debug  On peers:\nCORE_LOGGING_LEVEL=DEBUG  Fabric CA\nby starting command have the -d parameter.  Upload full logs to the JIRA not just where the issue occurred if possible  \u8bf7\u63d0\u4f9b\u5c3d\u91cf\u591a\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u5806\u6808\u8ddf\u8e2a\u8bb0\u5f55\u3002\n\u8bf7\u63d0\u4f9b  java -XshowSettings:properties -version  \u547d\u4ee4\u7684\u8f93\u51fa\u7ed3\u679c\n\u53ef\u80fd\u7684\u8bdd\uff0c\u8bf7\u4e0a\u4f20\u5f53\u95ee\u9898\u53d1\u751f\u65f6\u5b8c\u6574\u7684\u65e5\u5fd7\u3002  This work is licensed under a  Creative Commons Attribution 4.0 International License .", 
            "title": "\u62a5\u544a\u95ee\u9898(Reporting Issues)"
        }, 
        {
            "location": "/kafka_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nShaoxi Qiu\n\n\n\n\n\n\n\n\n\n\n\u987b\u77e5\uff08Caveat emptor\uff09\n\n\nThis document assumes that the reader generally knows how to set up a Kafka\ncluster and a ZooKeeper ensemble. The purpose of this guide is to identify the\nsteps you need to take so as to have a set of Hyperledger Fabric ordering\nservice nodes (OSNs) use your Kafka cluster and provide an ordering service to\nyour blockchain network.\n\n\n\u8be5\u6587\u6863\u5047\u8bbe\u8bfb\u8005\u5df2\u7ecf\u57fa\u672c\u4e86\u89e3\u5982\u4f55\u53bb\u642d\u5efaKafka\u96c6\u7fa4\u548cZooKeeper\u96c6\u7fa4\u3002\u672c\u6587\u6863\u7684\u76ee\u7684\u662f\u786e\u5b9a\u60a8\u4f7f\u7528Kafka\u96c6\u7fa4\u642d\u5efa\u4e00\u5957Hyperledger Fabric\u6392\u5e8f\u670d\u52a1\u8282\u70b9\u96c6(OSNs)\u4ee5\u53ca\u4e3a\u4f60\u7684\u533a\u5757\u94fe\u7f51\u7edc\u63d0\u4f9b\u6392\u5e8f\u670d\u52a1\u6240\u9700\u8981\u91c7\u53d6\u7684\u6b65\u9aa4\u3002\n\n\n\u6982\u89c8\uff08Big picture\uff09\n\n\nEach channel maps to a separate single-partition topic in Kafka. \n\n\n\u6bcf\u4e00\u4e2a\u901a\u9053(channel)\u5728Kafka\u4e2d\u88ab\u6620\u5c04\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u5355\u5206\u533a(partition)\u7c7b\u522b(topic)\u3002(\u8bd1\u8005\u6ce8\uff1a\u901a\u5e38\u6bcf\u4e2aTopic\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2aPartition\uff0c\u6b64\u5904\u6bcf\u4e2aTopic\u53ea\u5305\u542b\u4e00\u4e2aPartition)\n\n\nWhen an OSN receives transactions via the \nBroadcast\n RPC, it checks to make sure\nthat the broadcasting client has permissions to write on the channel, then\nrelays (i.e. produces) those transactions to the appropriate partition in Kafka.\n\n\n\u5f53\u6392\u5e8f\u8282\u70b9\u901a\u8fc7RPC\n\u5e7f\u64ad\n(\nBroadcast\n)\u63a5\u6536\u5230\u4ea4\u6613\u65f6\uff0c\u5b83\u4f1a\u68c0\u67e5\u5e7f\u64ad\u4ea4\u6613\u7684\u5ba2\u6237\u7aef\u662f\u5426\u6709\u6743\u9650\u53bb\u4fee\u6539\u901a\u9053(channel)\u6570\u636e\uff0c\u7136\u540e\u53cd\u9988\uff08\u5373\u4ea7\u751f\uff09\u8fd9\u4e9b\u4ea4\u6613\u5230Kafka\u7684\u9002\u5f53\u5206\u533a(partition)\u4e2d\u3002\n\n\nThis partition is also consumed by the OSN which groups the received\ntransactions into blocks locally, persists them in its local ledger, and serves\nthem to receiving clients via the \nDeliver\n RPC. \n\n\n\u8be5\u5206\u533a\u4e5f\u88ab\u6392\u5e8f\u8282\u70b9\u6240\u6d88\u8d39(consume)\uff0c\u6392\u5e8f\u8282\u70b9\u5c06\u63a5\u6536\u5230\u7684\u4ea4\u6613\u5206\u7ec4\u5199\u5165\u5230\u672c\u5730\u533a\u5757\uff0c\u5c06\u5176\u4fdd\u7559\u5728\u672c\u5730\u8d26\u672c\u4e2d\uff0c\u5e76\u901a\u8fc7\nDeliver\n RPC\u63d0\u4f9b\u7ed9\u9700\u8981\u63a5\u6536\u7684\u5ba2\u6237\u7aef\u3002\n\n\nFor low-level details, refer\nto \nthe document that describes how we came to this design\n\nhttps://docs.google.com/document/d/1vNMaM7XhOlu9tB_10dKnlrhy5d7b1u8lSY8a-kVjCO4/edit\n_\n\n Figure 8 is a schematic representation of the process described above.\n\n\n\u66f4\u591a\u8be6\u7ec6\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003\nthe document that describes how we came to this design\n\nhttps://docs.google.com/document/d/1vNMaM7XhOlu9tB_10dKnlrhy5d7b1u8lSY8a-kVjCO4/edit\n_\n\n \u56fe8\u662f\u4e0a\u8ff0\u8fc7\u7a0b\u7684\u793a\u610f\u56fe\u3002\n\n\n\u6b65\u9aa4\uff08Steps\uff09\n\n\nLet \nK\n and \nZ\n be the number of nodes in the Kafka cluster and the\nZooKeeper ensemble respectively:\n\n\n\u8bbe\u5b9a\u53d8\u91cf \nK\n \u548c \nZ\n \u5206\u522b\u662fKafka\u96c6\u7fa4\u548cZooKeeper\u96c6\u7fa4\u7684\u8282\u70b9\u6570\u91cf\uff1a\n\n\ni. At a minimum, \nK\n should be set to 4. (As we will explain in Step 4 below,\nthis is the minimum number of nodes necessary in order to exhibit crash fault\ntolerance, i.e. with 4 brokers, you can have 1 broker go down, all channels will\ncontinue to be writeable and readable, and new channels can be created.)\n\n\ni. \nK\n\u7684\u6700\u5c0f\u503c\u9700\u8981\u662f4\u3002(\u6211\u4eec\u5c06\u5728\u6b65\u9aa44\u4e2d\u89e3\u91ca\uff0c\u8fd9\u662f\u5b9e\u73b0 \u6545\u969c\u5bb9\u9519(crash fault tolerance) \u6240\u9700\u8981\u7684\u6700\u5c0f\u6570\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\n4\u4e2a\u8282\u70b9\u53ef\u4ee5\u5bb9\u8bb81\u4e2a\u8282\u70b9\u5b95\u673a\uff0c\u6240\u6709\u7684\u901a\u9053\u80fd\u591f\u7ee7\u7eed\u8bfb\u5199\u4e14\u53ef\u4ee5\u521b\u5efa\u901a\u9053\u3002)(\u8bd1\u8005\uff1aKafka\u8282\u70b9\u88ab\u79f0\u4e3abroker)\n\n\nii. \nZ\n will either be 3, 5, or 7. It has to be an odd number to avoid\nsplit-brain scenarios, and larger than 1 in order to avoid single point of\nfailures. Anything beyond 7 ZooKeeper servers is considered an overkill.\n\n\nii. \nZ\n\u53ef\u4ee5\u662f3\u30015\u6216\u80057\u3002\u5b83\u5fc5\u987b\u662f\u4e00\u4e2a\u5947\u6570\u6765\u907f\u514d\u5206\u88c2(split-brain)\u60c5\u666f\uff0c\u5927\u4e8e1\u4ee5\u907f\u514d\u5355\u70b9\u6545\u969c\u3002\n\u8d85\u8fc77\u4e2aZooKeeper\u670d\u52a1\u5668\u5219\u88ab\u8ba4\u4e3a\u662f\u591a\u4f59\u7684\u3002\n\n\nProceed as follows:\n\n\n\u8bf7\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c:\n\n\n\n\nOrderers: \nEncode the Kafka-related information in the network\ns genesis\nblock.\n If you are using \nconfigtxgen\n, edit \nconfigtx.yaml\n \n or pick a\npreset profile for the system channel\ns genesis block \n  so that:\n\n\n\n\nOrderers: \nKafka \u76f8\u5173\u4fe1\u606f\u88ab\u5199\u5728\u7f51\u7edc\u7684\u521d\u59cb\u533a\u5757\u4e2d.\n \u5982\u679c\u4f60\u4f7f\u7528 \nconfigtxgen\n \u5de5\u5177, \u7f16\u8f91 \nconfigtx.yaml\n \u6587\u4ef6\n \u6216\u8005\u6311\u4e00\u4e2a\u73b0\u6210\u7684\u7cfb\u7edf\u901a\u9053\u7684\u521d\u59cb\u533a\u5757\u914d\u7f6e\u6587\u4ef6 \n  \u5176\u4e2d:\n\n\n    a. ``Orderer.OrdererType`` is set to ``kafka``.\n\n    a. ``Orderer.OrdererType`` \u5b57\u6bb5\u88ab\u8bbe\u7f6e\u4e3a ``kafka``.\n\n    b. ``Orderer.Kafka.Brokers`` contains the address of *at least two* of the\n    Kafka brokers in your cluster in ``IP:port`` notation. The list does not\n    need to be exhaustive. (These are your seed brokers.)\n\n    b. ``Orderer.Kafka.Brokers`` \u5b57\u6bb5\u5305\u542b *\u81f3\u5c11\u4e24\u4e2a* Kafka\u96c6\u7fa4\u4e2d\u7684\u8282\u70b9``IP:port`` \u6837\u5f0f\u7684\u5730\u5740\u3002\u8fd9\u4e2a\u5217\u8868\u6ca1\u6709\u5fc5\u8981\u8be6\u5c3d\u65e0\u9057(\u8fd9\u4e9b\u662f\u4f60\u7684 seed brokers.)\n\n\n\n\n\nOrderers: \nSet the maximum block size.\n Each block will have at most\n\nOrderer.AbsoluteMaxBytes\n bytes (not including headers), a value that you can\nset in \nconfigtx.yaml\n. Let the value you pick here be \nA\n and make note of\nit \n it will affect how you configure your Kafka brokers in Step 4.\n\n\n\n\nOrderers: \n\u8bbe\u7f6e\u533a\u5757\u6700\u5927\u5bb9\u91cf.\n \u6bcf\u4e00\u4e2a\u533a\u5757\u6700\u591a\u53ea\u80fd\u6709 \nOrderer.AbsoluteMaxBytes\n bytes\u7684\u5bb9\u91cf(\u4e0d\u542b\u533a\u5757\u5934\u4fe1\u606f), \u8fd9\u662f\u4e00\u4e2a\u4f60\u53ef\u4ee5\u4fee\u6539\u7684\u503c\uff0c\u5b58\u653e\u5728 \nconfigtx.yaml\n \u914d\u7f6e\u6587\u4ef6\u4e2d. \u5047\u8bbe\u6b64\u5904\u4f60\u8bbe\u7f6e\u7684\u6570\u503c\u4e3a\nA\n,\u5c06\u6b64\u6570\u5b57\u8bb0\u4e0b\u6765 \n \u8fd9\u4f1a\u5f71\u54cd\u4f60\u5728\u6b65\u9aa44\u4e2d\u5bf9\u4e8eKafka brokers \u7684\u914d\u7f6e.\n\n\n\n\nOrderers: \nCreate the genesis block.\n Use \nconfigtxgen\n. The settings you\npicked in Steps 1 and 2 above are system-wide settings, i.e. they apply across\nthe network for all the OSNs. Make note of the genesis block\ns location.\n\n\n\n\nOrderers:  \u4f7f\u7528 \nconfigtxgen\n \u5de5\u5177 \n\u521b\u5efa\u521d\u59cb\u533a\u5757.\n \u5728\u6b65\u9aa41\u548c2\u4e2d\u7684\u8bbe\u7f6e\u662f\u5168\u5c40\u7684\u8bbe\u7f6e, \u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e9b\u8bbe\u7f6e\u7684\u751f\u6548\u8303\u56f4\u662f\u7f51\u7edc\u4e2d\u6240\u6709\u7684\u6392\u5e8f\u8282\u70b9. \u8bb0\u5f55\u4e0b\u521d\u59cb\u533a\u5757\u7684\u4f4d\u7f6e. \n\n\n\n\nKafka cluster: \nConfigure your Kafka brokers appropriately.\n Ensure that\nevery Kafka broker has these keys configured:\n\n\n\n\nKafka \u96c6\u7fa4: \n\u9002\u5f53\u914d\u7f6e\u4f60\u7684Kafka\u96c6\u7fa4.\n \u786e\u4fdd\u6bcf\u4e00\u4e2aKafka\u8282\u70b9\u90fd\u914d\u7f6e\u4e86\u4ee5\u4e0b\u7684\u503c:\n\n\na. ``unclean.leader.election.enable = false`` -- Data consistency is key in\na blockchain environment. We cannot have a channel leader chosen outside of\nthe in-sync replica set, or we run the risk of overwriting the offsets that\nthe previous leader produced, and --as a result-- rewrite the blockchain\nthat the orderers produce.\n\na. ``unclean.leader.election.enable = false`` -- \u6570\u636e\u4e00\u81f4\u6027\u662f\u533a\u5757\u94fe\u73af\u5883\u7684\u5173\u952e. \u6211\u4eec\u4e0d\u80fd\u9009\u62e9\u4e0d\u5728\u540c\u6b65\u526f\u672c\u96c6\u4e2d\u7684channel leader, \u4e5f\u4e0d\u80fd\u5192\u98ce\u9669\u53bb\u8986\u76d6\u524d\u4e00leader\u6240\u4ea7\u751f\u7684\u504f\u79fb\u91cf, \u90a3\u6837\u7684\u7ed3\u679c\u5c31\u662f\u91cd\u5199orderers\u6240\u4ea7\u751f\u7684\u533a\u5757\u94fe\u6570\u636e.\n\nb.  ``min.insync.replicas = M`` -- Where you pick a value ``M`` such that\n1 \n M \n N (see ``default.replication.factor`` below). Data is considered\ncommitted when it is written to at least ``M`` replicas (which are then\nconsidered in-sync and belong to the in-sync replica set, or ISR). In any\nother case, the write operation returns an error. Then:\n\nb.  ``min.insync.replicas = M`` --  ``M`` \u7684\u503c\u9700\u8981\u6ee1\u8db3\n1 \n M \n N (N\u7684\u503c\u53c2\u8003\u540e\u9762\u7684 ``default.replication.factor``). \u6570\u636e\u88ab\u8ba4\u4e3a\u662f\u5b8c\u6210\u63d0\u4ea4\u5f53\u5b83\u88ab\u5199\u5165\u5230\u81f3\u5c11 ``M`` \u4e2a\u526f\u672c\u4e2d(\u4e5f\u5c31\u662f\u8bf4\u5b83\u88ab\u8ba4\u4e3a\u662f\u540c\u6b65\u7684,\u7136\u540e\u88ab\u5199\u5165\u5230\u540c\u6b65\u526f\u672c\u96c6\u4e2d,\u4e5f\u6210\u4e3aISR). \u5176\u4ed6\u60c5\u51b5, \u5199\u5165\u64cd\u4f5c\u8fd4\u56de\u9519\u8bef\u4fe1\u606f. \u7136\u540e:\n\n    i. If up to N-M replicas -- out of the N that the channel data is\n    written to -- become unavailable, operations proceed normally.\n    i. \u5982\u679c\u6709 N-M \u4e2a\u526f\u672c\u4e0d\u53ef\u8bbf\u95ee, \u64cd\u4f5c\u5c06\u6b63\u5e38\u8fdb\u884c.\n    ii. If more replicas become unavailable, Kafka cannot maintain an ISR\n    set of M, so it stops accepting writes. Reads work without issues.\n    The channel becomes writeable again when M replicas get in-sync.\n    ii. \u5982\u679c\u66f4\u591a\u526f\u672c\u4e0d\u53ef\u8bbf\u95ee, Kafka \u4e0d\u80fd\u4f4d\u7f6e\u6570\u91cf M \u7684\u540c\u6b65\u526f\u672c\u96c6(ISR), \u6240\u4ee5\u5b83\u4f1a\u505c\u6b62\u63a5\u53d7\u5199\u5165\u64cd\u4f5c. \u8bfb\u64cd\u4f5c\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c.\n    \u5f53M\u4e2a\u526f\u672c\u91cd\u65b0\u540c\u6b65\u540e,\u901a\u9053\u5c31\u53ef\u4ee5\u518d\u6b21\u53d8\u4e3a\u53ef\u5199\u5165\u72b6\u6001.\n\n\nc. ``default.replication.factor = N`` -- Where you pick a value ``N`` such\nthat N \n K. A replication factor of ``N`` means that each channel will have\nits data replicated to ``N`` brokers. These are the candidates for the ISR\nset of a channel. As we noted in the ``min.insync.replicas section`` above,\nnot all of these brokers have to be available all the time. ``N`` should be\nset *strictly smaller* to ``K`` because channel creations cannot go forward\nif less than ``N`` brokers are up. So if you set N = K, a single broker\ngoing down means that no new channels can be created on the blockchain\nnetwork -- the crash fault tolerance of the ordering service is\nnon-existent.\n\nc. ``default.replication.factor = N`` -- \u9009\u62e9\u4e00\u4e2a ``N`` \u7684\u6570\u503c\u6ee1\u8db3 N \n K (Kafak\u96c6\u7fa4\u6570\u91cf). \u53c2\u6570 ``N`` \u8868\u793a\u6bcf\u4e2achannel \u7684\u6570\u636e\u4f1a\u590d\u5236\u5230 ``N`` \u4e2a broker \u4e2d. \u8fd9\u4e9b\u662f channel \u540c\u6b65\u526f\u672c\u96c6\u7684\u5019\u9009. \u6b63\u5982\u524d\u9762 ``min.insync.replicas`` \u90e8\u5206\u6240\u8bf4\u7684, \u4e0d\u662f\u6240\u6709broker\u90fd\u9700\u8981\u662f\u968f\u65f6\u53ef\u7528\u7684. ``N`` \u503c\u9700\u8981\u8bbe\u7f6e\u4e3a\u7edd\u5bf9\u5c0f\u4e8e ``K`` , \u56e0\u4e3achannel\u7684\u521b\u5efa\u9700\u8981\u4e0d\u5c11\u4e8e ``N`` \u4e2abroker\u662f\u542f\u52a8\u7684. \u6240\u4ee5\u5982\u679c\u8bbe\u7f6e N = K , \u4e00\u4e2a broker \u5b95\u673a\u5c31\u610f\u5473\u7740\u533a\u5757\u94fe\u7f51\u7edc\u4e0d\u80fd\u518d\u521b\u5efachannel. \u90a3\u4e48\u6545\u969c\u5bb9\u9519\u7684\u6392\u5e8f\u670d\u52a1\u4e5f\u5c31\u4e0d\u5b58\u5728\u4e86.\n\n\nd. ``message.max.bytes`` and ``replica.fetch.max.bytes`` should be set to a\nvalue larger than ``A``, the value you picked in\n``Orderer.AbsoluteMaxBytes`` in Step 2 above. Add some buffer to account for\nheaders -- 1 MiB is more than enough. The following condition applies:\n\nd. ``message.max.bytes`` \u548c ``replica.fetch.max.bytes`` \u7684\u503c\u9700\u8981\u5927\u4e8e ``A``, \u5c31\u662f\u5728\u6b65\u9aa42\u4e2d\u9009\u53d6\u7684 ``Orderer.AbsoluteMaxBytes`` \u7684\u503c. \u518d\u4e3a\u533a\u5757\u5934\u589e\u52a0\u4e00\u4e9b\u4f59\u91cf -- 1 MiB \u5c31\u8db3\u591f\u4e86. \u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6:\n\n::\n\n    Orderer.AbsoluteMaxBytes \n replica.fetch.max.bytes \n= message.max.bytes\n\n(For completeness, we note that ``message.max.bytes`` should be strictly\nsmaller to ``socket.request.max.bytes`` which is set by default to 100 MiB.\nIf you wish to have blocks larger than 100 MiB you will need to edit the\nhard-coded value in ``brokerConfig.Producer.MaxMessageBytes`` in\n``fabric/orderer/kafka/config.go`` and rebuild the binary from source.\nThis is not advisable.)\n\n(\u8865\u5145, \u6211\u4eec\u6ce8\u610f\u5230 ``message.max.bytes`` \u9700\u8981\u4e25\u683c\u5c0f\u4e8e ``socket.request.max.bytes`` , \u8fd9\u4e2a\u503c\u9ed8\u8ba4\u662f100Mib. \u5982\u679c\u4f60\u5e0c\u671b\u533a\u5757\u5927\u4e8e100MiB, \u4f60\u9700\u8981\u53bb\u4fee\u6539\u786c\u4ee3\u7801\u4e2d\u7684\u53d8\u91cf ``brokerConfig.Producer.MaxMessageBytes`` , \u4ee3\u7801\u4f4d\u7f6e\u662f ``fabric/orderer/kafka/config.go`` , \u518d\u91cd\u65b0\u7f16\u8bd1\u4ee3\u7801, \u4e0d\u5efa\u8bae\u8fd9\u4e48\u505a.)\n\ne. ``log.retention.ms = -1``. Until the ordering service adds\nsupport for pruning of the Kafka logs, you should disable time-based\nretention and prevent segments from expiring. (Size-based retention -- see\n``log.retention.bytes`` -- is disabled by default in Kafka at the time of\nthis writing, so there's no need to set it explicitly.)\n\ne. ``log.retention.ms = -1``. \u76f4\u5230\u6392\u5e8f\u670d\u52a1\u589e\u52a0\u4e86\u5bf9\u4e8e Kafka \u65e5\u5fd7\u5206\u5272(pruning)\u7684\u652f\u6301\u4e4b\u524d, \u5e94\u8be5\u7981\u7528\u57fa\u4e8e\u65f6\u95f4\u5206\u5272\u7684\u65b9\u5f0f\u4ee5\u907f\u514d\u5355\u4e2a\u65e5\u5fd7\u6587\u4ef6\u5230\u671f\u5206\u6bb5. (\u57fa\u4e8e\u6587\u4ef6\u5927\u5c0f\u7684\u5206\u5272\u65b9\u5f0f -- \u770b\u53c2\u6570 ``log.retention.bytes`` -- \u5728\u672c\u6587\u4e66\u5199\u65f6, \u5728 Kafka \u4e2d\u662f\u9ed8\u8ba4\u88ab\u7981\u7528\u7684, \u6240\u4ee5\u8fd9\u4e2a\u503c\u6ca1\u6709\u5fc5\u8981\u6307\u5b9a\u5730\u5f88\u660e\u786e. )\n\nBased on what we've described above, the minimum allowed values for ``M``\nand ``N`` are 2 and 3 respectively. This configuration allows for the\ncreation of new channels to go forward, and for all channels to continue to\nbe writeable.\n\n\u57fa\u4e8e\u4e0a\u6587\u6240\u63cf\u8ff0\u7684, ``M`` \u548c ``N`` \u7684\u6700\u5c0f\u503c\u5206\u522b\u4e3a 2 \u548c 3 . \u8fd9\u4e2a\u914d\u7f6e\u53ef\u4ee5\u521b\u5efa channel \u5e76\u8ba9\u6240\u6709 channel \u90fd\u662f\u968f\u65f6\u53ef\u4ee5\u5199\u5165\u7684.\n\n\n\n\n\nOrderers: \nPoint each OSN to the genesis block.\n Edit\n\nGeneral.GenesisFile\n in \norderer.yaml\n so that it points to the genesis\nblock created in Step 3 above. (While at it, ensure all other keys in that YAML\nfile are set appropriately.)\n\n\n\n\nOrderers: \n\u5c06\u6240\u6709\u6392\u5e8f\u8282\u70b9\u6307\u5411\u521d\u59cb\u533a\u5757.\n \u7f16\u8f91 \norderer.yaml\n \u6587\u4ef6\u4e2d\u7684\u53c2\u6570 \nGeneral.GenesisFile\n \u4f7f\u5176\u6307\u5411\u6b65\u9aa43\u4e2d\u6240\u521b\u5efa\u7684\u521d\u59cb\u533a\u5757. (\u540c\u65f6, \u786e\u4fddYAML\u6587\u4ef6\u4e2d\u6240\u6709\u5176\u4ed6\u53c2\u6570\u90fd\u662f\u6b63\u786e\u7684.)\n\n\n\n\n\n\nOrderers: \nAdjust polling intervals and timeouts.\n (Optional step.)\n Orderers: \n\u8c03\u6574\u8f6e\u8be2\u95f4\u9694\u548c\u8d85\u65f6\u65f6\u95f4.\n (\u53ef\u9009\u6b65\u9aa4.)\n\n\na. The \nKafka.Retry\n section in the \norderer.yaml\n file allows you to\nadjust the frequency of the metadata/producer/consumer requests, as well as\nthe socket timeouts. (These are all settings you would expect to see in a\nKafka producer or consumer.)\n\n\na.  \norderer.yaml\n \u6587\u4ef6\u4e2d\u7684 \nKafka.Retry\n \u533a\u57df\u8ba9\u4f60\u80fd\u591f\u8c03\u6574  metadata/producer/consumer \u8bf7\u6c42\u7684\u9891\u7387\u4ee5\u53casocket\u7684\u8d85\u65f6\u65f6\u95f4. (\u8fd9\u4e9b\u5e94\u8be5\u5c31\u662f\u6240\u6709\u5728 kafka \u7684\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005 \u4e2d\u4f60\u9700\u8981\u7684\u8bbe\u7f6e)\n\n\nb. Additionally, when a new channel is created, or when an existing channel\nis reloaded (in case of a just-restarted orderer), the orderer interacts\nwith the Kafka cluster in the following ways:\n\n\nb. \u53e6\u5916, \u5f53\u4e00\u4e2a channel \u88ab\u521b\u5efa, \u6216\u5f53\u4e00\u4e2a\u73b0\u6709\u7684 channel \u88ab\u91cd\u65b0\u8bfb\u53d6(\u521a\u542f\u52a8 orderer \u7684\u60c5\u51b5), orderer \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u548c Kafka \u96c6\u7fa4\u8fdb\u884c\u4ea4\u4e92. \n\n\na. It creates a Kafka producer (writer) for the Kafka partition that\ncorresponds to the channel.\n\na. \u4e3a channel \u5bf9\u5e94\u7684 Kafka \u5206\u533a \u521b\u5efa\u4e00\u4e2a Kafka \u751f\u4ea7\u8005.\n\nb. It uses that producer to post a no-op ``CONNECT`` message to that\npartition.\n\nb. \u901a\u8fc7\u751f\u4ea7\u8005\u5411\u8fd9\u4e2a\u5206\u533a\u53d1\u4e00\u4e2a\u7a7a\u7684\u8fde\u63a5\u4fe1\u606f.\n\nc. It creates a Kafka consumer (reader) for that partition.\n\nc. \u4e3a\u8fd9\u4e2a\u5206\u533a\u521b\u5efa\u4e00\u4e2a Kafka \u6d88\u8d39\u8005.\n\nIf any of these steps fail, you can adjust the frequency with which they\nare repeated. Specifically they will be re-attempted every\n``Kafka.Retry.ShortInterval`` for a total of ``Kafka.Retry.ShortTotal``,\nand then every ``Kafka.Retry.LongInterval`` for a total of\n``Kafka.Retry.LongTotal`` until they succeed. Note that the orderer will\nbe unable to write to or read from a channel until all of the steps\nabove have been completed successfully.\n\n\u5982\u679c\u4efb\u610f\u6b65\u9aa4\u51fa\u9519, \u4f60\u53ef\u4ee5\u8c03\u6574\u5176\u91cd\u590d\u7684\u9891\u7387. \n\u8fd9\u4e9b\u6b65\u9aa4\u4f1a\u5728\u6bcf\u4e00\u4e2a Kafka.Retry.ShortInterval \u6307\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u540e\u8fdb\u884c\u91cd\u8bd5 Kafka.Retry.ShortTotal \u6b21, \n\u518d\u4ee5 Kafka.Retry.LongInterval \u89c4\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u91cd\u8bd5 Kafka.Retry.LongTotal \u6b21\u76f4\u5230\u6210\u529f. \n\u9700\u8981\u6ce8\u610f\u7684\u662f orderer \u4e0d\u80fd\u8bfb\u5199\u8be5 channel \u7684\u6570\u636e\u76f4\u5230\u6240\u6709\u4e0a\u8ff0\u6b65\u9aa4\u90fd\u6210\u529f\u6267\u884c.\n\n\n\n\n\n\n\nSet up the OSNs and Kafka cluster so that they communicate over SSL.\n\n(Optional step, but highly recommended.) Refer to \nthe Confluent guide\n\nhttp://docs.confluent.io/2.0.0/kafka/ssl.html\n_ for the Kafka cluster side of\nthe equation, and set the keys under \nKafka.TLS\n in \norderer.yaml\n on every\nOSN accordingly.\n\n\n\n\n\n\n\u5c06\u6392\u5e8f\u8282\u70b9\u548c Kafka \u96c6\u7fa4\u95f4\u8bbe\u7f6e\u4e3a\u901a\u8fc7 SSL \u901a\u8baf.\n \n(\u53ef\u9009\u6b65\u9aa4,\u5f3a\u70c8\u63a8\u8350) \u53c2\u8003 \nthe Confluent guide\n\nhttp://docs.confluent.io/2.0.0/kafka/ssl.html\n_ \u6587\u6863\u4e2d\u5173\u4e8e Kafka \u96c6\u7fa4\u7684\u8bbe\u7f6e, \u6765\u8bbe\u7f6e\u6bcf\u4e2a\u6392\u5e8f\u8282\u70b9 \norderer.yaml\n \u6587\u4ef6\u4e2d  \nKafka.TLS\n \u90e8\u5206\u7684\u5185\u5bb9.\n\n\n\n\nBring up the nodes in the following order: ZooKeeper ensemble, Kafka\ncluster, ordering service nodes.\n\n\n\n\n\u542f\u52a8\u8282\u70b9\u8bf7\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f: ZooKeeper \u96c6\u7fa4, Kafka \u96c6\u7fa4, \u6392\u5e8f\u8282\u70b9\n\n\n\u5176\u4ed6\u6ce8\u610f\u4e8b\u9879\uff08Additional considerations\uff09\n\n\n\n\nPreferred message size.\n In Step 2 above (see \nSteps\n_ section) you can\nalso set the preferred size of blocks by setting the\n\nOrderer.Batchsize.PreferredMaxBytes\n key. Kafka offers higher throughput when\ndealing with relatively small messages; aim for a value no bigger than 1 MiB.\n\n\n\n\n\u9996\u9009\u7684\u6d88\u606f\u5927\u5c0f.\n \u5728\u4e0a\u9762\u7684\u6b65\u9aa42\u4e2d, \u4f60\u4e5f\u80fd\u901a\u8fc7\u53c2\u6570 \nOrderer.Batchsize.PreferredMaxBytes\n \u8bbe\u7f6e\u9996\u9009\u7684\u533a\u5757\u5927\u5c0f.\nKafka \u5904\u7406\u76f8\u5bf9\u8f83\u5c0f\u7684\u4fe1\u606f\u6709\u66f4\u9ad8\u7684\u541e\u5410\u91cf; \u9488\u5bf9\u5c0f\u4e8e 1 MiB \u5927\u5c0f\u7684\u503c.\n\n\n\n\nUsing environment variables to override settings.\n You can override a\nKafka broker or a ZooKeeper server\ns settings by using environment variables.\nReplace the dots of the configuration key with underscores \n\ne.g. \nKAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false\n will allow you to override\nthe default value of \nunclean.leader.election.enable\n. The same applies to the\nOSNs for their \nlocal\n configuration, i.e. what can be set in \norderer.yaml\n.\nFor example \nORDERER_KAFKA_RETRY_SHORTINTERVAL=1s\n allows you to override the\ndefault value for \nOrderer.Kafka.Retry.ShortInterval\n.\n\n\n\n\n\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u91cd\u5199\u8bbe\u7f6e.\n \u4f60\u80fd\u591f\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u6765\u91cd\u5199 Kafka \u8282\u70b9\u548c Zookeeper \u670d\u52a1\u5668\u7684\u8bbe\u7f6e. \u66ff\u6362\u914d\u7f6e\u53c2\u6570\u4e2d\u7684 \u70b9 \u4e3a \u4e0b\u5212\u7ebf \n \u4f8b\u5982 \nKAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false\n \u73af\u5883\u53d8\u91cf\u91cd\u5199\u914d\u7f6e\u53c2\u6570 \nunclean.leader.election.enable\n. \u73af\u5883\u53d8\u91cf\u91cd\u5199\u540c\u6837\u9002\u7528\u4e8e\u6392\u5e8f\u8282\u70b9\u7684\n\u672c\u5730\n\u914d\u7f6e, \u5373 \norderer.yaml\n \u4e2d\u6240\u80fd\u8bbe\u7f6e\u7684. \u4f8b\u5982 \nORDERER_KAFKA_RETRY_SHORTINTERVAL=1s\n \u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u91cd\u5199\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684 \nOrderer.Kafka.Retry.ShortInterval\n.\n\n\nSupported Kafka versions and upgrading\n\n\n\u652f\u6301\u7684 Kafka \u7248\u672c\u548c\u5347\u7ea7\n\n\nSupported Kafka versions for v1 are \n0.9\n and \n0.10\n. (Hyperledger Fabric\nuses the \nsarama client library \nhttps://github.com/Shopify/sarama\n_\nand vendors a version of it that supports Kafka 0.9 and 0.10.)\n\n\nFabric V1 \u652f\u6301\u7684 Kafka \u7248\u672c\u662f \n0.9\n \u548c \n0.10\n. (Hyperledger Fabric \u4f7f\u7528\u4ee3\u7801\u5e93: \nsarama client library \nhttps://github.com/Shopify/sarama\n_ \u652f\u6301\u7684 Kafka \u7248\u672c\u662f \n0.9\n \u548c \n0.10\n)\n\n\nOut of the box the Kafka version defaults to \n0.9.0.1\n. If you wish to use a\ndifferent supported version, specify a supported version using the\n\nKafka.Version\n key in \norderer.yaml\n.\n\n\n\u9ed8\u8ba4\u7684 Kafka \u7248\u672c\u662f \n0.9.0.1\n. \u5982\u679c\u4f60\u4f7f\u7528\u5176\u4ed6\u652f\u6301\u7684\u7248\u672c, \u4fee\u6539 \norderer.yaml\n \u6587\u4ef6\u4e2d\u7684\u53c2\u6570 \nKafka.Version\n.\n\n\nThe current supported Kafka versions are:\n\n\n\u76ee\u524d\u652f\u6301\u7684 Kafka \u7248\u672c\u662f:\n\n\n\n\nVersion: 0.9.0.1\n\n\nVersion: 0.10.0.0\n\n\nVersion: 0.10.0.1\n\n\nVersion: 0.10.1.0\n\n\n\n\n\u8c03\u8bd5\uff08Debugging\uff09\n\n\nSet \nGeneral.LogLevel\n to \nDEBUG\n and \nKafka.Verbose\n in \norderer.yaml\n\nto \ntrue\n.\n\n\n\u8bbe\u7f6e \norderer.yaml\n \u6587\u4ef6\u4e2d \nGeneral.LogLevel\n \u4e3a \nDEBUG\n \u548c \nKafka.Verbose\n \u4e3a \ntrue\n.\n\n\n\u4f8b\u5b50\uff08Example\uff09\n\n\nSample Docker Compose configuration files inline with the recommended settings\nabove can be found under the \nfabric/bddtests\n directory. Look for\n\ndc-orderer-kafka-base.yml\n and \ndc-orderer-kafka.yml\n.\n\n\n\u5305\u542b\u4e86\u63a8\u8350\u7684\u8bbe\u7f6e\u7684Docker Compose \u914d\u7f6e\u6587\u4ef6\u793a\u4f8b\u80fd\u591f\u5728 \nfabric/bddtests\n \u76ee\u5f55\u4e2d\u627e\u5230. \u5305\u62ec \ndc-orderer-kafka-base.yml\n \u6587\u4ef6\u548c \ndc-orderer-kafka.yml\n \u6587\u4ef6.\n\n\n.. Licensed under Creative Commons Attribution 4.0 International License\n   https://creativecommons.org/licenses/by/4.0/", 
            "title": "\u57fa\u4e8ekafka\u7684\u6392\u5e8f\u670d\u52a1"
        }, 
        {
            "location": "/kafka_zh/#caveat-emptor", 
            "text": "This document assumes that the reader generally knows how to set up a Kafka\ncluster and a ZooKeeper ensemble. The purpose of this guide is to identify the\nsteps you need to take so as to have a set of Hyperledger Fabric ordering\nservice nodes (OSNs) use your Kafka cluster and provide an ordering service to\nyour blockchain network.  \u8be5\u6587\u6863\u5047\u8bbe\u8bfb\u8005\u5df2\u7ecf\u57fa\u672c\u4e86\u89e3\u5982\u4f55\u53bb\u642d\u5efaKafka\u96c6\u7fa4\u548cZooKeeper\u96c6\u7fa4\u3002\u672c\u6587\u6863\u7684\u76ee\u7684\u662f\u786e\u5b9a\u60a8\u4f7f\u7528Kafka\u96c6\u7fa4\u642d\u5efa\u4e00\u5957Hyperledger Fabric\u6392\u5e8f\u670d\u52a1\u8282\u70b9\u96c6(OSNs)\u4ee5\u53ca\u4e3a\u4f60\u7684\u533a\u5757\u94fe\u7f51\u7edc\u63d0\u4f9b\u6392\u5e8f\u670d\u52a1\u6240\u9700\u8981\u91c7\u53d6\u7684\u6b65\u9aa4\u3002", 
            "title": "\u987b\u77e5\uff08Caveat emptor\uff09"
        }, 
        {
            "location": "/kafka_zh/#big-picture", 
            "text": "Each channel maps to a separate single-partition topic in Kafka.   \u6bcf\u4e00\u4e2a\u901a\u9053(channel)\u5728Kafka\u4e2d\u88ab\u6620\u5c04\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u5355\u5206\u533a(partition)\u7c7b\u522b(topic)\u3002(\u8bd1\u8005\u6ce8\uff1a\u901a\u5e38\u6bcf\u4e2aTopic\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2aPartition\uff0c\u6b64\u5904\u6bcf\u4e2aTopic\u53ea\u5305\u542b\u4e00\u4e2aPartition)  When an OSN receives transactions via the  Broadcast  RPC, it checks to make sure\nthat the broadcasting client has permissions to write on the channel, then\nrelays (i.e. produces) those transactions to the appropriate partition in Kafka.  \u5f53\u6392\u5e8f\u8282\u70b9\u901a\u8fc7RPC \u5e7f\u64ad ( Broadcast )\u63a5\u6536\u5230\u4ea4\u6613\u65f6\uff0c\u5b83\u4f1a\u68c0\u67e5\u5e7f\u64ad\u4ea4\u6613\u7684\u5ba2\u6237\u7aef\u662f\u5426\u6709\u6743\u9650\u53bb\u4fee\u6539\u901a\u9053(channel)\u6570\u636e\uff0c\u7136\u540e\u53cd\u9988\uff08\u5373\u4ea7\u751f\uff09\u8fd9\u4e9b\u4ea4\u6613\u5230Kafka\u7684\u9002\u5f53\u5206\u533a(partition)\u4e2d\u3002  This partition is also consumed by the OSN which groups the received\ntransactions into blocks locally, persists them in its local ledger, and serves\nthem to receiving clients via the  Deliver  RPC.   \u8be5\u5206\u533a\u4e5f\u88ab\u6392\u5e8f\u8282\u70b9\u6240\u6d88\u8d39(consume)\uff0c\u6392\u5e8f\u8282\u70b9\u5c06\u63a5\u6536\u5230\u7684\u4ea4\u6613\u5206\u7ec4\u5199\u5165\u5230\u672c\u5730\u533a\u5757\uff0c\u5c06\u5176\u4fdd\u7559\u5728\u672c\u5730\u8d26\u672c\u4e2d\uff0c\u5e76\u901a\u8fc7 Deliver  RPC\u63d0\u4f9b\u7ed9\u9700\u8981\u63a5\u6536\u7684\u5ba2\u6237\u7aef\u3002  For low-level details, refer\nto  the document that describes how we came to this design https://docs.google.com/document/d/1vNMaM7XhOlu9tB_10dKnlrhy5d7b1u8lSY8a-kVjCO4/edit _  Figure 8 is a schematic representation of the process described above.  \u66f4\u591a\u8be6\u7ec6\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003 the document that describes how we came to this design https://docs.google.com/document/d/1vNMaM7XhOlu9tB_10dKnlrhy5d7b1u8lSY8a-kVjCO4/edit _  \u56fe8\u662f\u4e0a\u8ff0\u8fc7\u7a0b\u7684\u793a\u610f\u56fe\u3002", 
            "title": "\u6982\u89c8\uff08Big picture\uff09"
        }, 
        {
            "location": "/kafka_zh/#steps", 
            "text": "Let  K  and  Z  be the number of nodes in the Kafka cluster and the\nZooKeeper ensemble respectively:  \u8bbe\u5b9a\u53d8\u91cf  K  \u548c  Z  \u5206\u522b\u662fKafka\u96c6\u7fa4\u548cZooKeeper\u96c6\u7fa4\u7684\u8282\u70b9\u6570\u91cf\uff1a  i. At a minimum,  K  should be set to 4. (As we will explain in Step 4 below,\nthis is the minimum number of nodes necessary in order to exhibit crash fault\ntolerance, i.e. with 4 brokers, you can have 1 broker go down, all channels will\ncontinue to be writeable and readable, and new channels can be created.)  i.  K \u7684\u6700\u5c0f\u503c\u9700\u8981\u662f4\u3002(\u6211\u4eec\u5c06\u5728\u6b65\u9aa44\u4e2d\u89e3\u91ca\uff0c\u8fd9\u662f\u5b9e\u73b0 \u6545\u969c\u5bb9\u9519(crash fault tolerance) \u6240\u9700\u8981\u7684\u6700\u5c0f\u6570\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\n4\u4e2a\u8282\u70b9\u53ef\u4ee5\u5bb9\u8bb81\u4e2a\u8282\u70b9\u5b95\u673a\uff0c\u6240\u6709\u7684\u901a\u9053\u80fd\u591f\u7ee7\u7eed\u8bfb\u5199\u4e14\u53ef\u4ee5\u521b\u5efa\u901a\u9053\u3002)(\u8bd1\u8005\uff1aKafka\u8282\u70b9\u88ab\u79f0\u4e3abroker)  ii.  Z  will either be 3, 5, or 7. It has to be an odd number to avoid\nsplit-brain scenarios, and larger than 1 in order to avoid single point of\nfailures. Anything beyond 7 ZooKeeper servers is considered an overkill.  ii.  Z \u53ef\u4ee5\u662f3\u30015\u6216\u80057\u3002\u5b83\u5fc5\u987b\u662f\u4e00\u4e2a\u5947\u6570\u6765\u907f\u514d\u5206\u88c2(split-brain)\u60c5\u666f\uff0c\u5927\u4e8e1\u4ee5\u907f\u514d\u5355\u70b9\u6545\u969c\u3002\n\u8d85\u8fc77\u4e2aZooKeeper\u670d\u52a1\u5668\u5219\u88ab\u8ba4\u4e3a\u662f\u591a\u4f59\u7684\u3002  Proceed as follows:  \u8bf7\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c:   Orderers:  Encode the Kafka-related information in the network s genesis\nblock.  If you are using  configtxgen , edit  configtx.yaml    or pick a\npreset profile for the system channel s genesis block    so that:   Orderers:  Kafka \u76f8\u5173\u4fe1\u606f\u88ab\u5199\u5728\u7f51\u7edc\u7684\u521d\u59cb\u533a\u5757\u4e2d.  \u5982\u679c\u4f60\u4f7f\u7528  configtxgen  \u5de5\u5177, \u7f16\u8f91  configtx.yaml  \u6587\u4ef6  \u6216\u8005\u6311\u4e00\u4e2a\u73b0\u6210\u7684\u7cfb\u7edf\u901a\u9053\u7684\u521d\u59cb\u533a\u5757\u914d\u7f6e\u6587\u4ef6    \u5176\u4e2d:      a. ``Orderer.OrdererType`` is set to ``kafka``.\n\n    a. ``Orderer.OrdererType`` \u5b57\u6bb5\u88ab\u8bbe\u7f6e\u4e3a ``kafka``.\n\n    b. ``Orderer.Kafka.Brokers`` contains the address of *at least two* of the\n    Kafka brokers in your cluster in ``IP:port`` notation. The list does not\n    need to be exhaustive. (These are your seed brokers.)\n\n    b. ``Orderer.Kafka.Brokers`` \u5b57\u6bb5\u5305\u542b *\u81f3\u5c11\u4e24\u4e2a* Kafka\u96c6\u7fa4\u4e2d\u7684\u8282\u70b9``IP:port`` \u6837\u5f0f\u7684\u5730\u5740\u3002\u8fd9\u4e2a\u5217\u8868\u6ca1\u6709\u5fc5\u8981\u8be6\u5c3d\u65e0\u9057(\u8fd9\u4e9b\u662f\u4f60\u7684 seed brokers.)   Orderers:  Set the maximum block size.  Each block will have at most Orderer.AbsoluteMaxBytes  bytes (not including headers), a value that you can\nset in  configtx.yaml . Let the value you pick here be  A  and make note of\nit   it will affect how you configure your Kafka brokers in Step 4.   Orderers:  \u8bbe\u7f6e\u533a\u5757\u6700\u5927\u5bb9\u91cf.  \u6bcf\u4e00\u4e2a\u533a\u5757\u6700\u591a\u53ea\u80fd\u6709  Orderer.AbsoluteMaxBytes  bytes\u7684\u5bb9\u91cf(\u4e0d\u542b\u533a\u5757\u5934\u4fe1\u606f), \u8fd9\u662f\u4e00\u4e2a\u4f60\u53ef\u4ee5\u4fee\u6539\u7684\u503c\uff0c\u5b58\u653e\u5728  configtx.yaml  \u914d\u7f6e\u6587\u4ef6\u4e2d. \u5047\u8bbe\u6b64\u5904\u4f60\u8bbe\u7f6e\u7684\u6570\u503c\u4e3a A ,\u5c06\u6b64\u6570\u5b57\u8bb0\u4e0b\u6765   \u8fd9\u4f1a\u5f71\u54cd\u4f60\u5728\u6b65\u9aa44\u4e2d\u5bf9\u4e8eKafka brokers \u7684\u914d\u7f6e.   Orderers:  Create the genesis block.  Use  configtxgen . The settings you\npicked in Steps 1 and 2 above are system-wide settings, i.e. they apply across\nthe network for all the OSNs. Make note of the genesis block s location.   Orderers:  \u4f7f\u7528  configtxgen  \u5de5\u5177  \u521b\u5efa\u521d\u59cb\u533a\u5757.  \u5728\u6b65\u9aa41\u548c2\u4e2d\u7684\u8bbe\u7f6e\u662f\u5168\u5c40\u7684\u8bbe\u7f6e, \u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e9b\u8bbe\u7f6e\u7684\u751f\u6548\u8303\u56f4\u662f\u7f51\u7edc\u4e2d\u6240\u6709\u7684\u6392\u5e8f\u8282\u70b9. \u8bb0\u5f55\u4e0b\u521d\u59cb\u533a\u5757\u7684\u4f4d\u7f6e.    Kafka cluster:  Configure your Kafka brokers appropriately.  Ensure that\nevery Kafka broker has these keys configured:   Kafka \u96c6\u7fa4:  \u9002\u5f53\u914d\u7f6e\u4f60\u7684Kafka\u96c6\u7fa4.  \u786e\u4fdd\u6bcf\u4e00\u4e2aKafka\u8282\u70b9\u90fd\u914d\u7f6e\u4e86\u4ee5\u4e0b\u7684\u503c:  a. ``unclean.leader.election.enable = false`` -- Data consistency is key in\na blockchain environment. We cannot have a channel leader chosen outside of\nthe in-sync replica set, or we run the risk of overwriting the offsets that\nthe previous leader produced, and --as a result-- rewrite the blockchain\nthat the orderers produce.\n\na. ``unclean.leader.election.enable = false`` -- \u6570\u636e\u4e00\u81f4\u6027\u662f\u533a\u5757\u94fe\u73af\u5883\u7684\u5173\u952e. \u6211\u4eec\u4e0d\u80fd\u9009\u62e9\u4e0d\u5728\u540c\u6b65\u526f\u672c\u96c6\u4e2d\u7684channel leader, \u4e5f\u4e0d\u80fd\u5192\u98ce\u9669\u53bb\u8986\u76d6\u524d\u4e00leader\u6240\u4ea7\u751f\u7684\u504f\u79fb\u91cf, \u90a3\u6837\u7684\u7ed3\u679c\u5c31\u662f\u91cd\u5199orderers\u6240\u4ea7\u751f\u7684\u533a\u5757\u94fe\u6570\u636e.\n\nb.  ``min.insync.replicas = M`` -- Where you pick a value ``M`` such that\n1   M   N (see ``default.replication.factor`` below). Data is considered\ncommitted when it is written to at least ``M`` replicas (which are then\nconsidered in-sync and belong to the in-sync replica set, or ISR). In any\nother case, the write operation returns an error. Then:\n\nb.  ``min.insync.replicas = M`` --  ``M`` \u7684\u503c\u9700\u8981\u6ee1\u8db3\n1   M   N (N\u7684\u503c\u53c2\u8003\u540e\u9762\u7684 ``default.replication.factor``). \u6570\u636e\u88ab\u8ba4\u4e3a\u662f\u5b8c\u6210\u63d0\u4ea4\u5f53\u5b83\u88ab\u5199\u5165\u5230\u81f3\u5c11 ``M`` \u4e2a\u526f\u672c\u4e2d(\u4e5f\u5c31\u662f\u8bf4\u5b83\u88ab\u8ba4\u4e3a\u662f\u540c\u6b65\u7684,\u7136\u540e\u88ab\u5199\u5165\u5230\u540c\u6b65\u526f\u672c\u96c6\u4e2d,\u4e5f\u6210\u4e3aISR). \u5176\u4ed6\u60c5\u51b5, \u5199\u5165\u64cd\u4f5c\u8fd4\u56de\u9519\u8bef\u4fe1\u606f. \u7136\u540e:\n\n    i. If up to N-M replicas -- out of the N that the channel data is\n    written to -- become unavailable, operations proceed normally.\n    i. \u5982\u679c\u6709 N-M \u4e2a\u526f\u672c\u4e0d\u53ef\u8bbf\u95ee, \u64cd\u4f5c\u5c06\u6b63\u5e38\u8fdb\u884c.\n    ii. If more replicas become unavailable, Kafka cannot maintain an ISR\n    set of M, so it stops accepting writes. Reads work without issues.\n    The channel becomes writeable again when M replicas get in-sync.\n    ii. \u5982\u679c\u66f4\u591a\u526f\u672c\u4e0d\u53ef\u8bbf\u95ee, Kafka \u4e0d\u80fd\u4f4d\u7f6e\u6570\u91cf M \u7684\u540c\u6b65\u526f\u672c\u96c6(ISR), \u6240\u4ee5\u5b83\u4f1a\u505c\u6b62\u63a5\u53d7\u5199\u5165\u64cd\u4f5c. \u8bfb\u64cd\u4f5c\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c.\n    \u5f53M\u4e2a\u526f\u672c\u91cd\u65b0\u540c\u6b65\u540e,\u901a\u9053\u5c31\u53ef\u4ee5\u518d\u6b21\u53d8\u4e3a\u53ef\u5199\u5165\u72b6\u6001.\n\n\nc. ``default.replication.factor = N`` -- Where you pick a value ``N`` such\nthat N   K. A replication factor of ``N`` means that each channel will have\nits data replicated to ``N`` brokers. These are the candidates for the ISR\nset of a channel. As we noted in the ``min.insync.replicas section`` above,\nnot all of these brokers have to be available all the time. ``N`` should be\nset *strictly smaller* to ``K`` because channel creations cannot go forward\nif less than ``N`` brokers are up. So if you set N = K, a single broker\ngoing down means that no new channels can be created on the blockchain\nnetwork -- the crash fault tolerance of the ordering service is\nnon-existent.\n\nc. ``default.replication.factor = N`` -- \u9009\u62e9\u4e00\u4e2a ``N`` \u7684\u6570\u503c\u6ee1\u8db3 N   K (Kafak\u96c6\u7fa4\u6570\u91cf). \u53c2\u6570 ``N`` \u8868\u793a\u6bcf\u4e2achannel \u7684\u6570\u636e\u4f1a\u590d\u5236\u5230 ``N`` \u4e2a broker \u4e2d. \u8fd9\u4e9b\u662f channel \u540c\u6b65\u526f\u672c\u96c6\u7684\u5019\u9009. \u6b63\u5982\u524d\u9762 ``min.insync.replicas`` \u90e8\u5206\u6240\u8bf4\u7684, \u4e0d\u662f\u6240\u6709broker\u90fd\u9700\u8981\u662f\u968f\u65f6\u53ef\u7528\u7684. ``N`` \u503c\u9700\u8981\u8bbe\u7f6e\u4e3a\u7edd\u5bf9\u5c0f\u4e8e ``K`` , \u56e0\u4e3achannel\u7684\u521b\u5efa\u9700\u8981\u4e0d\u5c11\u4e8e ``N`` \u4e2abroker\u662f\u542f\u52a8\u7684. \u6240\u4ee5\u5982\u679c\u8bbe\u7f6e N = K , \u4e00\u4e2a broker \u5b95\u673a\u5c31\u610f\u5473\u7740\u533a\u5757\u94fe\u7f51\u7edc\u4e0d\u80fd\u518d\u521b\u5efachannel. \u90a3\u4e48\u6545\u969c\u5bb9\u9519\u7684\u6392\u5e8f\u670d\u52a1\u4e5f\u5c31\u4e0d\u5b58\u5728\u4e86.\n\n\nd. ``message.max.bytes`` and ``replica.fetch.max.bytes`` should be set to a\nvalue larger than ``A``, the value you picked in\n``Orderer.AbsoluteMaxBytes`` in Step 2 above. Add some buffer to account for\nheaders -- 1 MiB is more than enough. The following condition applies:\n\nd. ``message.max.bytes`` \u548c ``replica.fetch.max.bytes`` \u7684\u503c\u9700\u8981\u5927\u4e8e ``A``, \u5c31\u662f\u5728\u6b65\u9aa42\u4e2d\u9009\u53d6\u7684 ``Orderer.AbsoluteMaxBytes`` \u7684\u503c. \u518d\u4e3a\u533a\u5757\u5934\u589e\u52a0\u4e00\u4e9b\u4f59\u91cf -- 1 MiB \u5c31\u8db3\u591f\u4e86. \u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6:\n\n::\n\n    Orderer.AbsoluteMaxBytes   replica.fetch.max.bytes  = message.max.bytes\n\n(For completeness, we note that ``message.max.bytes`` should be strictly\nsmaller to ``socket.request.max.bytes`` which is set by default to 100 MiB.\nIf you wish to have blocks larger than 100 MiB you will need to edit the\nhard-coded value in ``brokerConfig.Producer.MaxMessageBytes`` in\n``fabric/orderer/kafka/config.go`` and rebuild the binary from source.\nThis is not advisable.)\n\n(\u8865\u5145, \u6211\u4eec\u6ce8\u610f\u5230 ``message.max.bytes`` \u9700\u8981\u4e25\u683c\u5c0f\u4e8e ``socket.request.max.bytes`` , \u8fd9\u4e2a\u503c\u9ed8\u8ba4\u662f100Mib. \u5982\u679c\u4f60\u5e0c\u671b\u533a\u5757\u5927\u4e8e100MiB, \u4f60\u9700\u8981\u53bb\u4fee\u6539\u786c\u4ee3\u7801\u4e2d\u7684\u53d8\u91cf ``brokerConfig.Producer.MaxMessageBytes`` , \u4ee3\u7801\u4f4d\u7f6e\u662f ``fabric/orderer/kafka/config.go`` , \u518d\u91cd\u65b0\u7f16\u8bd1\u4ee3\u7801, \u4e0d\u5efa\u8bae\u8fd9\u4e48\u505a.)\n\ne. ``log.retention.ms = -1``. Until the ordering service adds\nsupport for pruning of the Kafka logs, you should disable time-based\nretention and prevent segments from expiring. (Size-based retention -- see\n``log.retention.bytes`` -- is disabled by default in Kafka at the time of\nthis writing, so there's no need to set it explicitly.)\n\ne. ``log.retention.ms = -1``. \u76f4\u5230\u6392\u5e8f\u670d\u52a1\u589e\u52a0\u4e86\u5bf9\u4e8e Kafka \u65e5\u5fd7\u5206\u5272(pruning)\u7684\u652f\u6301\u4e4b\u524d, \u5e94\u8be5\u7981\u7528\u57fa\u4e8e\u65f6\u95f4\u5206\u5272\u7684\u65b9\u5f0f\u4ee5\u907f\u514d\u5355\u4e2a\u65e5\u5fd7\u6587\u4ef6\u5230\u671f\u5206\u6bb5. (\u57fa\u4e8e\u6587\u4ef6\u5927\u5c0f\u7684\u5206\u5272\u65b9\u5f0f -- \u770b\u53c2\u6570 ``log.retention.bytes`` -- \u5728\u672c\u6587\u4e66\u5199\u65f6, \u5728 Kafka \u4e2d\u662f\u9ed8\u8ba4\u88ab\u7981\u7528\u7684, \u6240\u4ee5\u8fd9\u4e2a\u503c\u6ca1\u6709\u5fc5\u8981\u6307\u5b9a\u5730\u5f88\u660e\u786e. )\n\nBased on what we've described above, the minimum allowed values for ``M``\nand ``N`` are 2 and 3 respectively. This configuration allows for the\ncreation of new channels to go forward, and for all channels to continue to\nbe writeable.\n\n\u57fa\u4e8e\u4e0a\u6587\u6240\u63cf\u8ff0\u7684, ``M`` \u548c ``N`` \u7684\u6700\u5c0f\u503c\u5206\u522b\u4e3a 2 \u548c 3 . \u8fd9\u4e2a\u914d\u7f6e\u53ef\u4ee5\u521b\u5efa channel \u5e76\u8ba9\u6240\u6709 channel \u90fd\u662f\u968f\u65f6\u53ef\u4ee5\u5199\u5165\u7684.   Orderers:  Point each OSN to the genesis block.  Edit General.GenesisFile  in  orderer.yaml  so that it points to the genesis\nblock created in Step 3 above. (While at it, ensure all other keys in that YAML\nfile are set appropriately.)   Orderers:  \u5c06\u6240\u6709\u6392\u5e8f\u8282\u70b9\u6307\u5411\u521d\u59cb\u533a\u5757.  \u7f16\u8f91  orderer.yaml  \u6587\u4ef6\u4e2d\u7684\u53c2\u6570  General.GenesisFile  \u4f7f\u5176\u6307\u5411\u6b65\u9aa43\u4e2d\u6240\u521b\u5efa\u7684\u521d\u59cb\u533a\u5757. (\u540c\u65f6, \u786e\u4fddYAML\u6587\u4ef6\u4e2d\u6240\u6709\u5176\u4ed6\u53c2\u6570\u90fd\u662f\u6b63\u786e\u7684.)    Orderers:  Adjust polling intervals and timeouts.  (Optional step.)\n Orderers:  \u8c03\u6574\u8f6e\u8be2\u95f4\u9694\u548c\u8d85\u65f6\u65f6\u95f4.  (\u53ef\u9009\u6b65\u9aa4.)  a. The  Kafka.Retry  section in the  orderer.yaml  file allows you to\nadjust the frequency of the metadata/producer/consumer requests, as well as\nthe socket timeouts. (These are all settings you would expect to see in a\nKafka producer or consumer.)  a.   orderer.yaml  \u6587\u4ef6\u4e2d\u7684  Kafka.Retry  \u533a\u57df\u8ba9\u4f60\u80fd\u591f\u8c03\u6574  metadata/producer/consumer \u8bf7\u6c42\u7684\u9891\u7387\u4ee5\u53casocket\u7684\u8d85\u65f6\u65f6\u95f4. (\u8fd9\u4e9b\u5e94\u8be5\u5c31\u662f\u6240\u6709\u5728 kafka \u7684\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005 \u4e2d\u4f60\u9700\u8981\u7684\u8bbe\u7f6e)  b. Additionally, when a new channel is created, or when an existing channel\nis reloaded (in case of a just-restarted orderer), the orderer interacts\nwith the Kafka cluster in the following ways:  b. \u53e6\u5916, \u5f53\u4e00\u4e2a channel \u88ab\u521b\u5efa, \u6216\u5f53\u4e00\u4e2a\u73b0\u6709\u7684 channel \u88ab\u91cd\u65b0\u8bfb\u53d6(\u521a\u542f\u52a8 orderer \u7684\u60c5\u51b5), orderer \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u548c Kafka \u96c6\u7fa4\u8fdb\u884c\u4ea4\u4e92.   a. It creates a Kafka producer (writer) for the Kafka partition that\ncorresponds to the channel.\n\na. \u4e3a channel \u5bf9\u5e94\u7684 Kafka \u5206\u533a \u521b\u5efa\u4e00\u4e2a Kafka \u751f\u4ea7\u8005.\n\nb. It uses that producer to post a no-op ``CONNECT`` message to that\npartition.\n\nb. \u901a\u8fc7\u751f\u4ea7\u8005\u5411\u8fd9\u4e2a\u5206\u533a\u53d1\u4e00\u4e2a\u7a7a\u7684\u8fde\u63a5\u4fe1\u606f.\n\nc. It creates a Kafka consumer (reader) for that partition.\n\nc. \u4e3a\u8fd9\u4e2a\u5206\u533a\u521b\u5efa\u4e00\u4e2a Kafka \u6d88\u8d39\u8005.\n\nIf any of these steps fail, you can adjust the frequency with which they\nare repeated. Specifically they will be re-attempted every\n``Kafka.Retry.ShortInterval`` for a total of ``Kafka.Retry.ShortTotal``,\nand then every ``Kafka.Retry.LongInterval`` for a total of\n``Kafka.Retry.LongTotal`` until they succeed. Note that the orderer will\nbe unable to write to or read from a channel until all of the steps\nabove have been completed successfully.\n\n\u5982\u679c\u4efb\u610f\u6b65\u9aa4\u51fa\u9519, \u4f60\u53ef\u4ee5\u8c03\u6574\u5176\u91cd\u590d\u7684\u9891\u7387. \n\u8fd9\u4e9b\u6b65\u9aa4\u4f1a\u5728\u6bcf\u4e00\u4e2a Kafka.Retry.ShortInterval \u6307\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u540e\u8fdb\u884c\u91cd\u8bd5 Kafka.Retry.ShortTotal \u6b21, \n\u518d\u4ee5 Kafka.Retry.LongInterval \u89c4\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u91cd\u8bd5 Kafka.Retry.LongTotal \u6b21\u76f4\u5230\u6210\u529f. \n\u9700\u8981\u6ce8\u610f\u7684\u662f orderer \u4e0d\u80fd\u8bfb\u5199\u8be5 channel \u7684\u6570\u636e\u76f4\u5230\u6240\u6709\u4e0a\u8ff0\u6b65\u9aa4\u90fd\u6210\u529f\u6267\u884c.    Set up the OSNs and Kafka cluster so that they communicate over SSL. \n(Optional step, but highly recommended.) Refer to  the Confluent guide http://docs.confluent.io/2.0.0/kafka/ssl.html _ for the Kafka cluster side of\nthe equation, and set the keys under  Kafka.TLS  in  orderer.yaml  on every\nOSN accordingly.    \u5c06\u6392\u5e8f\u8282\u70b9\u548c Kafka \u96c6\u7fa4\u95f4\u8bbe\u7f6e\u4e3a\u901a\u8fc7 SSL \u901a\u8baf.  \n(\u53ef\u9009\u6b65\u9aa4,\u5f3a\u70c8\u63a8\u8350) \u53c2\u8003  the Confluent guide http://docs.confluent.io/2.0.0/kafka/ssl.html _ \u6587\u6863\u4e2d\u5173\u4e8e Kafka \u96c6\u7fa4\u7684\u8bbe\u7f6e, \u6765\u8bbe\u7f6e\u6bcf\u4e2a\u6392\u5e8f\u8282\u70b9  orderer.yaml  \u6587\u4ef6\u4e2d   Kafka.TLS  \u90e8\u5206\u7684\u5185\u5bb9.   Bring up the nodes in the following order: ZooKeeper ensemble, Kafka\ncluster, ordering service nodes.   \u542f\u52a8\u8282\u70b9\u8bf7\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f: ZooKeeper \u96c6\u7fa4, Kafka \u96c6\u7fa4, \u6392\u5e8f\u8282\u70b9", 
            "title": "\u6b65\u9aa4\uff08Steps\uff09"
        }, 
        {
            "location": "/kafka_zh/#additional-considerations", 
            "text": "Preferred message size.  In Step 2 above (see  Steps _ section) you can\nalso set the preferred size of blocks by setting the Orderer.Batchsize.PreferredMaxBytes  key. Kafka offers higher throughput when\ndealing with relatively small messages; aim for a value no bigger than 1 MiB.   \u9996\u9009\u7684\u6d88\u606f\u5927\u5c0f.  \u5728\u4e0a\u9762\u7684\u6b65\u9aa42\u4e2d, \u4f60\u4e5f\u80fd\u901a\u8fc7\u53c2\u6570  Orderer.Batchsize.PreferredMaxBytes  \u8bbe\u7f6e\u9996\u9009\u7684\u533a\u5757\u5927\u5c0f.\nKafka \u5904\u7406\u76f8\u5bf9\u8f83\u5c0f\u7684\u4fe1\u606f\u6709\u66f4\u9ad8\u7684\u541e\u5410\u91cf; \u9488\u5bf9\u5c0f\u4e8e 1 MiB \u5927\u5c0f\u7684\u503c.   Using environment variables to override settings.  You can override a\nKafka broker or a ZooKeeper server s settings by using environment variables.\nReplace the dots of the configuration key with underscores  \ne.g.  KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false  will allow you to override\nthe default value of  unclean.leader.election.enable . The same applies to the\nOSNs for their  local  configuration, i.e. what can be set in  orderer.yaml .\nFor example  ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s  allows you to override the\ndefault value for  Orderer.Kafka.Retry.ShortInterval .   \u4f7f\u7528\u73af\u5883\u53d8\u91cf\u91cd\u5199\u8bbe\u7f6e.  \u4f60\u80fd\u591f\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u6765\u91cd\u5199 Kafka \u8282\u70b9\u548c Zookeeper \u670d\u52a1\u5668\u7684\u8bbe\u7f6e. \u66ff\u6362\u914d\u7f6e\u53c2\u6570\u4e2d\u7684 \u70b9 \u4e3a \u4e0b\u5212\u7ebf   \u4f8b\u5982  KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false  \u73af\u5883\u53d8\u91cf\u91cd\u5199\u914d\u7f6e\u53c2\u6570  unclean.leader.election.enable . \u73af\u5883\u53d8\u91cf\u91cd\u5199\u540c\u6837\u9002\u7528\u4e8e\u6392\u5e8f\u8282\u70b9\u7684 \u672c\u5730 \u914d\u7f6e, \u5373  orderer.yaml  \u4e2d\u6240\u80fd\u8bbe\u7f6e\u7684. \u4f8b\u5982  ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s  \u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u91cd\u5199\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684  Orderer.Kafka.Retry.ShortInterval .", 
            "title": "\u5176\u4ed6\u6ce8\u610f\u4e8b\u9879\uff08Additional considerations\uff09"
        }, 
        {
            "location": "/kafka_zh/#supported-kafka-versions-and-upgrading", 
            "text": "", 
            "title": "Supported Kafka versions and upgrading"
        }, 
        {
            "location": "/kafka_zh/#kafka", 
            "text": "Supported Kafka versions for v1 are  0.9  and  0.10 . (Hyperledger Fabric\nuses the  sarama client library  https://github.com/Shopify/sarama _\nand vendors a version of it that supports Kafka 0.9 and 0.10.)  Fabric V1 \u652f\u6301\u7684 Kafka \u7248\u672c\u662f  0.9  \u548c  0.10 . (Hyperledger Fabric \u4f7f\u7528\u4ee3\u7801\u5e93:  sarama client library  https://github.com/Shopify/sarama _ \u652f\u6301\u7684 Kafka \u7248\u672c\u662f  0.9  \u548c  0.10 )  Out of the box the Kafka version defaults to  0.9.0.1 . If you wish to use a\ndifferent supported version, specify a supported version using the Kafka.Version  key in  orderer.yaml .  \u9ed8\u8ba4\u7684 Kafka \u7248\u672c\u662f  0.9.0.1 . \u5982\u679c\u4f60\u4f7f\u7528\u5176\u4ed6\u652f\u6301\u7684\u7248\u672c, \u4fee\u6539  orderer.yaml  \u6587\u4ef6\u4e2d\u7684\u53c2\u6570  Kafka.Version .  The current supported Kafka versions are:  \u76ee\u524d\u652f\u6301\u7684 Kafka \u7248\u672c\u662f:   Version: 0.9.0.1  Version: 0.10.0.0  Version: 0.10.0.1  Version: 0.10.1.0", 
            "title": "\u652f\u6301\u7684 Kafka \u7248\u672c\u548c\u5347\u7ea7"
        }, 
        {
            "location": "/kafka_zh/#debugging", 
            "text": "Set  General.LogLevel  to  DEBUG  and  Kafka.Verbose  in  orderer.yaml \nto  true .  \u8bbe\u7f6e  orderer.yaml  \u6587\u4ef6\u4e2d  General.LogLevel  \u4e3a  DEBUG  \u548c  Kafka.Verbose  \u4e3a  true .", 
            "title": "\u8c03\u8bd5\uff08Debugging\uff09"
        }, 
        {
            "location": "/kafka_zh/#example", 
            "text": "Sample Docker Compose configuration files inline with the recommended settings\nabove can be found under the  fabric/bddtests  directory. Look for dc-orderer-kafka-base.yml  and  dc-orderer-kafka.yml .  \u5305\u542b\u4e86\u63a8\u8350\u7684\u8bbe\u7f6e\u7684Docker Compose \u914d\u7f6e\u6587\u4ef6\u793a\u4f8b\u80fd\u591f\u5728  fabric/bddtests  \u76ee\u5f55\u4e2d\u627e\u5230. \u5305\u62ec  dc-orderer-kafka-base.yml  \u6587\u4ef6\u548c  dc-orderer-kafka.yml  \u6587\u4ef6.  .. Licensed under Creative Commons Attribution 4.0 International License\n   https://creativecommons.org/licenses/by/4.0/", 
            "title": "\u4f8b\u5b50\uff08Example\uff09"
        }, 
        {
            "location": "/channels_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nYi Zeng\n\n\n\n\n\n\n\n\n\n\nA Hyperledger Fabric channel is a private \u201csubnet\u201d of communication between two or more specific network members, for the purpose of conducting private and confidential transactions. A channel is defined by members (organizations), anchor peers per member, the shared ledger, chaincode application(s) and the ordering service node(s). Each transaction on the network is executed on a channel, where each party must be authenticated and authorized to transact on that channel. Each peer that joins a channel, has its own identity given by a membership services provider (MSP), which authenticates each peer to its channel peers and services.\n\n\n\u5728\u8d85\u7ea7\u8d26\u672cFabric\u4e2d\uff0c\u4e00\u4e2a\u901a\u9053\u662f\u6307\u4e00\u4e2a\u5728\u4e24\u4e2a\u6216\u591a\u4e2a\u7279\u5b9a\u7f51\u7edc\u6210\u5458\u95f4\u7684\u4e13\u95e8\u4e3a\u79c1\u4eba\u7684\u548c\u673a\u5bc6\u7684\u4ea4\u6613\u4e3a\u76ee\u7684\u800c\u5efa\u7acb\u7684\u79c1\u6709\n\u5b50\u7f51\n\u3002\u4e00\u4e2a\u901a\u9053\u7684\u5b9a\u4e49\u4e2d\u5305\u542b\uff1a\u6210\u5458\uff08\u7ec4\u7ec7\uff09\uff0c\u6bcf\u4e2a\u6210\u5458\u7684\u951a\u8282\u70b9\uff0c\u5171\u4eab\u5e10\u672c\uff0c\u94fe\u4e0a\u4ee3\u7801\u5e94\u7528\u7a0b\u5e8f\u548c\u6392\u5e8f\u670d\u52a1\u8282\u70b9\u3002\u7f51\u7edc\u4e0a\u7684\u6bcf\u4e2a\u4ea4\u6613\u90fd\u5728\u4e00\u4e2a\u6307\u5b9a\u7684\u901a\u9053\u4e2d\u6267\u884c\uff0c\u5728\u901a\u9053\u4e2d\u4ea4\u6613\u5fc5\u987b\u901a\u8fc7\u901a\u9053\u4e2d\u7684\u6bcf\u90e8\u5206\u7684\u8ba4\u8bc1\u548c\u6388\u6743\u3002\u8981\u52a0\u5165\u4e00\u4e2a\u901a\u9053\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u5fc5\u987b\u6709\u81ea\u5df1\u7684\u901a\u8fc7\u6210\u5458\u670d\u52a1\u63d0\u4f9b\u5546\uff08MSP\uff09\u83b7\u5f97\u7684\u8eab\u4efd\u6807\u8bc6\uff0c\u7528\u4e8e\u9274\u5b9a\u6bcf\u4e2a\u8282\u70b9\u5728\u901a\u9053\u4e2d\u7684\u662f\u4ec0\u4e48\u8282\u70b9\u548c\u670d\u52a1\u3002\n\n\nTo create a new channel, the client SDK calls configuration system chaincode and references properties such as anchor peer\ns, and members (organizations). This request creates a \ngenesis block for the channel ledger, which stores configuration information about the channel policies, members and anchor peers. When adding a new member to an existing channel, either this genesis block, or if applicable, a more recent reconfiguration block, is shared with the new member.\n\n\n\u8981\u521b\u5efa\u4e00\u4e2a\u901a\u9053\uff0c\u5ba2\u6237\u7aefSDK\u8c03\u7528\u914d\u7f6e\u7cfb\u7edf\u94fe\u4e0a\u4ee3\u7801\u548c\u53c2\u8003\u5c5e\u6027\uff0c\u6bd4\u5982\u951a\u8282\u70b9\u548c\u6210\u5458\uff08\u7ec4\u7ec7\uff09\u3002\u8fd9\u4e2a\u8bf7\u6c42\u4f1a\u4e3a\u901a\u9053\u7684\u8d26\u672c\u521b\u5efa\u4e00\u4e2a\u521b\u4e16\u533a\u5757\uff0c\u7528\u4e8e\u5b58\u50a8\u5173\u4e8e\u901a\u9053\u7684\u7b56\u7565\uff0c\u6210\u5458\u548c\u951a\u8282\u70b9\u7684\u914d\u7f6e\u4fe1\u606f\u3002\u5f53\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u65b0\u6210\u5458\u5230\u73b0\u6709\u901a\u9053\u65f6\uff0c\u8fd9\u4e2a\u521b\u4e16\u533a\u5757\uff0c\u6216\u8005\u6700\u65b0\u7684\u65b0\u914d\u7f6e\u533a\u5757\uff08\u5982\u679c\u53ef\u7528\uff09\uff0c\u5c06\u4f1a\u5171\u4eab\u7ed9\u8fd9\u4e2a\u65b0\u6210\u5458\u3002\n\n\nNote\n\u6ce8\u610f\n\n\nSee the Channel Configuration (configtx) section for more more details on the properties and proto structures of config transactions.\n\n\n\u53c2\u8003\u901a\u9053\u914d\u7f6e\uff08configtx\uff09\u7ae0\u8282\uff0c\u53ef\u4ee5\u67e5\u770b\u66f4\u591a\u5173\u4e8e\u4ea4\u6613\u7684\u914d\u7f6e\u5c5e\u6027\u548c\u5178\u578b\u7684\u7ed3\u6784\u7684\u660e\u7ec6\u4fe1\u606f\u3002\n\n\nThe election of a leading peer for each member on a channel determines which peer communicates with the ordering service on behalf of the member. If no leader is identified, an algorithm can be used to identify the leader. The consensus service orders transactions and delivers them, in a block, to each leading peer, which then distributes the block to its member peers, and across the channel, using the gossip protocol.\n\n\n\u4ece\u901a\u9053\u7684\u6240\u6709\u8282\u70b9\u4e2d\u9009\u4e3e\u51fa\u7684\u9886\u5bfc\u8282\u70b9\u51b3\u5b9a\u54ea\u4e2a\u8282\u70b9\u7528\u4e8e\u4ee3\u8868\u5176\u4ed6\u6210\u5458\u8282\u70b9\u4e0e\u6392\u5e8f\u670d\u52a1\u901a\u8baf\u3002\u5982\u679c\u8fd8\u6ca1\u6709\u9886\u5bfc\u8282\u70b9\uff0c\u90a3\u4e48\u4e00\u4e2a\u7b97\u6cd5\u53ef\u4ee5\u7528\u4e8e\u6807\u8bc6\u51fa\u9886\u5bfc\u8282\u70b9\u3002\u5171\u8bc6\u670d\u52a1\u5bf9\u4ea4\u6613\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u6253\u5305\u6210\u533a\u5757\uff0c\u53d1\u9001\u533a\u5757\u7ed9\u6bcf\u4e2a\u9886\u5bfc\u8282\u70b9\uff0c\u7136\u540e\u9886\u5bfc\u8282\u70b9\u628a\u533a\u5757\u5206\u53d1\u7ed9\u5176\u6210\u5458\u8282\u70b9\uff0c\u7136\u540e\u4f7f\u7528gossip\u534f\u8bae\u7a7f\u8fc7\u901a\u9053\u3002\n\n\nAlthough any one anchor peer can belong to multiple channels, and therefore maintain multiple ledgers, no ledger data can pass from one channel to another. This separation of ledgers, by channel, is defined and implemented by configuration chaincode, the identity membership service and the gossip data dissemination protocol. The dissemination of data, which includes information on transactions, ledger state and channel membership, is restricted to peers with verifiable membership on the channel. This isolation of peers and ledger data, by channel, allows network members that require private and confidential transactions to coexist with business competitors and other restricted members, on the same blockchain network.\n\n\n\u867d\u7136\u4efb\u610f\u4e00\u4e2a\u951a\u8282\u70b9\u90fd\u53ef\u4ee5\u5c5e\u4e8e\u591a\u4e2a\u901a\u9053\uff0c\u800c\u4e14\u7ef4\u62a4\u4e86\u591a\u4e2a\u8d26\u672c\uff0c\u4f46\u662f\u4e0d\u4f1a\u6709\u4efb\u4f55\u8d26\u672c\u6570\u636e\u4f1a\u4ece\u4e00\u4e2a\u901a\u9053\u4f20\u5230\u53e6\u4e00\u4e2a\u901a\u9053\u3002\u8fd9\u5c31\u662f\u6839\u636e\u901a\u9053\u5bf9\u8d26\u672c\u7684\u5206\u79bb\uff0c\u8fd9\u79cd\u5206\u79bb\u662f\u5728\u914d\u7f6e\u94fe\u4e0a\u4ee3\u7801\uff0c\u6210\u5458\u6807\u8bc6\u670d\u52a1\u548cgossip\u4f20\u64ad\u534f\u8bae\u4e2d\u5b9a\u4e49\u548c\u5b9e\u73b0\u3002\u6570\u636e\u7684\u4f20\u64ad\uff0c\u5305\u62ec\u4ea4\u6613\u7684\u4fe1\u606f\uff0c\u8d26\u672c\u72b6\u6001\u548c\u901a\u9053\u6210\u5458\u7b49\u90fd\u5728\u901a\u9053\u5185\u53d7\u9650\u5236\u7684\u9a8c\u8bc1\u6210\u5458\u8eab\u4efd\u7684\u8282\u70b9\u4e4b\u95f4\u3002\u8fd9\u79cd\u6839\u636e\u901a\u9053\u5bf9\u8282\u70b9\u548c\u8d26\u672c\u6570\u636e\u8fdb\u884c\u9694\u79bb\uff0c\u5141\u8bb8\u7f51\u7edc\u6210\u5458\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u8bf7\u6c42\u79c1\u6709\u7684\u548c\u4fdd\u5bc6\u7684\u4ea4\u6613\u7ed9\u4e1a\u52a1\u4e0a\u7684\u7ade\u4e89\u5bf9\u624b\u548c\u5176\u4ed6\u53d7\u9650\u7684\u6210\u5458\u3002", 
            "title": "Channels"
        }, 
        {
            "location": "/ledger_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nYuan Jin\n\n\nLinsheng Yu\n\n\n\n\n\n\n\n\nLedger - \u8d26\u672c\n\n\nThe ledger is the sequenced, tamper-resistant record of all state transitions in the fabric. State transitions are a result of chaincode invocations (\u2018transactions\u2019) submitted by participating parties. Each transaction results in a set of asset key-value pairs that are committed to the ledger as creates, updates, or deletes.\n\n\n\u8d26\u672c\u662fFabric\u4e2d\u6240\u6709\u72b6\u6001\u8f6c\u6362\u7684\u8bb0\u5f55\uff0c\u5177\u6709\u6709\u5e8f\u548c\u9632\u7be1\u6539\u7684\u7279\u70b9\u3002\u72b6\u6001\u8f6c\u6362\u662f\u53c2\u4e0e\u5404\u65b9\u63d0\u4ea4\u94fe\u4ee3\u7801\u8c03\u7528\uff08\u4ea4\u6613\uff09\u4ea7\u751f\u7684\u7ed3\u679c\u3002\u6bcf\u4e2a\u4ea4\u6613\u4f1a\u4ea7\u751f\u4e00\u7ec4\u8d44\u4ea7\u952e\u503c\u5bf9\uff0c\u8fd9\u4e9b\u952e\u503c\u5bf9\u4f5c\u4e3a\u201c\u521b\u5efa\u201d\u3001\u201c\u66f4\u65b0\u201d\u6216\u8005\u201c\u5220\u9664\u201d\u63d0\u4ea4\u7ed9\u8d26\u672c\u3002\n\n\nThe ledger is comprised of a blockchain (\u2018chain\u2019) to store the immutable, sequenced record in blocks, as well as a state database to maintain current fabric state. There is one ledger per channel. Each peer maintains a copy of the ledger for each channel of which they are a member.\n\n\n\u8d26\u672c\u7531\u4e00\u4e2a\u533a\u5757\u94fe\uff08\u94fe\uff09\u6784\u6210\uff0c\u5e76\u5c06\u4e0d\u53ef\u53d8\u7684\u3001\u6709\u5e8f\u7684\u8bb0\u5f55\u5b58\u653e\u5728\u533a\u5757\u4e2d\uff1b\u540c\u65f6\u5305\u542b\u4e00\u4e2a\u72b6\u6001\u6570\u636e\u5e93\u6765\u8bb0\u5f55\u5f53\u524d\u7684Fabric\u72b6\u6001\u3002\u6bcf\u4e2a\u901a\u9053\u4e2d\u5404\u6709\u4e00\u4e2a\u8d26\u672c\u3002\u5404\u4e2a\u8282\u70b9\u5bf9\u4e8e\u5b83\u6240\u5c5e\u7684\u6bcf\u4e2a\u901a\u9053\uff0c\u90fd\u4f1a\u4fdd\u5b58\u4e00\u4efd\u8be5\u901a\u9053\u7684\u8d26\u672c\u526f\u672c\u3002\n\n\nChain - \u94fe\n\n\nThe chain is a transaction log, structured as hash-linked blocks, where each block contains a sequence of N transactions. The block header includes a hash of the block\u2019s transactions, as well as a hash of the prior block\u2019s header. In this way, all transactions on the ledger are sequenced and cryptographically linked together. In other words, it is not possible to tamper with the ledger data, without breaking the hash links. The hash of the latest block represents every transaction that has come before, making it possible to ensure that all peers are in a consistent and trusted state.\n\n\n\u94fe\u662f\u4e00\u4e2a\u4ea4\u6613\u65e5\u5fd7\uff0c\u5b83\u7531\u54c8\u5e0c\u503c\u94fe\u63a5\u7684\u533a\u5757\u6784\u9020\u800c\u6210\uff0c\u6bcf\u4e2a\u533a\u5757\u5305\u542bN\u4e2a\u6709\u5e8f\u7684\u4ea4\u6613\u3002\u5757\u5934\u4e2d\u5305\u542b\u4e86\u672c\u533a\u5757\u6240\u8bb0\u5f55\u4ea4\u6613\u7684\u54c8\u5e0c\u503c\uff0c\u4ee5\u53ca\u4e0a\u4e00\u4e2a\u533a\u5757\u5934\u7684\u54c8\u5e0c\u503c\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u8d26\u672c\u4e2d\u7684\u6240\u6709\u4ea4\u6613\u90fd\u88ab\u6709\u5e8f\u7684\u3001\u52a0\u5bc6\u7684\u5f62\u5f0f\u4e32\u8054\u5728\u4e86\u4e00\u8d77\u3002\u6362\u8a00\u4e4b\uff0c\u5982\u679c\u4e0d\u7834\u574f\u54c8\u5e0c\u94fe\u7684\u8bdd\uff0c\u662f\u65e0\u6cd5\u7be1\u6539\u8d26\u672c\u6570\u636e\u7684\u3002\u6700\u65b0\u533a\u5757\u7684\u54c8\u5e0c\u662f\u4e4b\u524d\u6bcf\u4e00\u7b14\u4ea4\u6613\u7684\u4f53\u73b0\uff0c\u4ece\u800c\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u7684\u8282\u70b9\u5904\u4e8e\u4e00\u81f4\u7684\u53ef\u4fe1\u4efb\u7684\u72b6\u6001\u3002\n\n\nThe chain is stored on the peer file system (either local or attached storage), efficiently supporting the append-only nature of the blockchain workload.\n\n\n\u94fe\u88ab\u5b58\u653e\u4e8e\u8282\u70b9\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff08\u672c\u5730\u7684\u6216\u8005\u6302\u8f7d\u7684\uff09\uff0c\u6709\u6548\u5730\u652f\u6301\u7740\u533a\u5757\u94fe\u5de5\u4f5c\u91cf\u53ea\u8ffd\u52a0\u7684\u7279\u6027\u3002\n\n\nState Database - \u72b6\u6001\u6570\u636e\u5e93\n\n\nThe ledger\u2019s current state data represents the latest values for all keys ever included in the chain transaction log. Since current state represents all latest key values known to the channel, it is sometimes referred to as World State.\n\n\n\u8d26\u672c\u7684\u5f53\u524d\u72b6\u6001\u4fe1\u606f\u5448\u73b0\u7684\u662f\u94fe\u4ea4\u6613\u65e5\u5fd7\u4e2d\u8bb0\u5f55\u8fc7\u7684\u6240\u6709\u952e\u7684\u6700\u65b0\u503c\u3002\u7531\u4e8e\u5f53\u524d\u72b6\u6001\u8868\u793a\u7684\u662f\u901a\u9053\u5df2\u77e5\u7684\u6240\u6709\u952e\u7684\u6700\u65b0\u503c\uff0c\u7531\u6b64\u4e5f\u5e38\u88ab\u79f0\u4f5c\u4e16\u754c\u72b6\u6001\u3002\n\n\nChaincode invocations execute transactions against the current state data. To make these chaincode interactions extremely efficient, the latest values of all keys are stored in a state database. The state database is simply an indexed view into the chain\u2019s transaction log, it can therefore be regenerated from the chain at any time. The state database will automatically get recovered (or generated if needed) upon peer startup, before transactions are accepted.\n\n\n\u94fe\u7801\u8c03\u7528\u57fa\u4e8e\u5f53\u524d\u7684\u72b6\u6001\u6570\u636e\u6267\u884c\u4ea4\u6613\u3002\u4e3a\u4e86\u4f7f\u94fe\u7801\u8c03\u7528\u9ad8\u6548\u8fd0\u884c\uff0c\u6240\u6709\u952e\u7684\u6700\u65b0\u503c\u88ab\u5b58\u50a8\u5728\u72b6\u6001\u6570\u636e\u5e93\u4e2d\u3002\u72b6\u6001\u6570\u636e\u5e93\u662f\u94fe\u7684\u4ea4\u6613\u65e5\u5fd7\u7684\u7d22\u5f15\u89c6\u56fe\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u968f\u65f6\u4ece\u94fe\u4e2d\u91cd\u65b0\u5bfc\u51fa\u3002\u8282\u70b9\u542f\u52a8\u7684\u65f6\u5019\uff0c\u5728\u63a5\u53d7\u4ea4\u6613\u4e4b\u524d\uff0c\u72b6\u6001\u6570\u636e\u5e93\u5c06\u88ab\u81ea\u52a8\u6062\u590d\uff08\u6216\u8005\u6839\u636e\u9700\u8981\u4ea7\u751f\uff09\u3002\n\n\nTransaction Flow - \u4ea4\u6613\u6d41\u7a0b\n\n\nAt a high level, the transaction flow consists of a transaction proposal sent by an application client to specific endorsing peers. The endorsing peers verify the client signature, and execute a chaincode function to simulate the transaction. The output is the chaincode results, a set of key/value versions that were read in the chaincode (read set), and the set of keys/values that were written in chaincode (write set). The proposal response gets sent back to the client along with an endorsement signature.\n\n\n\u6982\u62ec\u800c\u8a00\uff0c\u4ea4\u6613\u6d41\u7a0b\u7531\u5e94\u7528\u5ba2\u6237\u7aef\u53d1\u9001\u7ed9\u80cc\u4e66\u8282\u70b9\u4ea4\u6613\u63d0\u6848\u7ec4\u6210\u3002\u80cc\u4e66\u8282\u70b9\u9a8c\u8bc1\u5ba2\u6237\u7aef\u7684\u7b7e\u540d\uff0c\u7136\u540e\u6267\u884c\u94fe\u7801\u6765\u6a21\u62df\u4ea4\u6613\u3002\u4ea7\u751f\u7684\u8f93\u51fa\u5c31\u662f\u94fe\u7801\u7ed3\u679c\uff0c\u4e00\u7ec4\u94fe\u7801\u8bfb\u53d6\u7684\u952e\u503c\u7248\u672c\uff08\u8bfb\u96c6\u5408\uff09\uff0c\u548c\u4e00\u7ec4\u88ab\u5199\u5165\u94fe\u7801\u7684\u952e\u503c\u96c6\u5408\uff08\u5199\u96c6\u5408\uff09\u3002\u4ea4\u6613\u63d0\u6848\u7684\u54cd\u5e94\u88ab\u53d1\u9001\u56de\u5ba2\u6237\u7aef\uff0c\u540c\u65f6\u5305\u542b\u4e86\u80cc\u4e66\u7b7e\u540d\u3002\n\n\nThe client assembles the endorsements into a transaction payload and broadcasts it to an ordering service. The ordering service delivers ordered transactions as blocks to all peers on a channel.\n\n\n\u5ba2\u6237\u7aef\u6c47\u603b\u6240\u6709\u7684\u80cc\u4e66\u5230\u4e00\u4e2a\u4ea4\u6613\u6709\u6548\u8f7d\u8377\u4e2d\uff0c\u5e76\u5c06\u5b83\u5e7f\u64ad\u5230\u6392\u5e8f\u670d\u52a1\u3002\u6392\u5e8f\u670d\u52a1\u5c06\u6392\u597d\u5e8f\u7684\u4ea4\u6613\u653e\u5165\u533a\u5757\u5e76\u53d1\u9001\u5230\u901a\u9053\u5185\u7684\u6240\u6709\u8282\u70b9\u3002\n\n\nBefore committal, peers will validate the transactions. First, they will check the endorsement policy to ensure that the correct allotment of the specified peers have signed the results, and they will authenticate the signatures against the transaction payload.\n\n\n\u5728\u63d0\u4ea4\u4e4b\u524d\uff0c\u8282\u70b9\u4eec\u4f1a\u9a8c\u8bc1\u4ea4\u6613\u3002\u9996\u5148\u5b83\u4eec\u4f1a\u68c0\u67e5\u80cc\u4e66\u7b56\u7565\u6765\u4fdd\u8bc1\u8db3\u591f\u7684\u6307\u5b9a\u8282\u70b9\u6b63\u786e\u5730\u5bf9\u7ed3\u679c\u8fdb\u884c\u4e86\u7b7e\u540d\uff0c\u5e76\u4e14\u4f1a\u8ba4\u8bc1\u4ea4\u6613\u6709\u6548\u8f7d\u8377\u4e2d\u7684\u7b7e\u540d\u3002\n\n\nSecondly, peers will perform a versioning check against the transaction read set, to ensure data integrity and protect against threats such as double-spending. The fabric has concurrency control whereby transactions execute in parallel (by endorsers) to increase throughput, and upon commit (by all peers) each transaction is verified to ensure that no other transaction has modified data it has read. In other words, it ensures that the data that was read during chaincode execution has not changed since execution (endorsement) time, and therefore the execution results are still valid and can be committed to the ledger state database. If the data that was read has been changed by another transaction, then the transaction in the block is marked as invalid and is not applied to the ledger state database. The client application is alerted, and can handle the error or retry as appropriate.\n\n\n\u5176\u6b21\uff0c\u8282\u70b9\u4eec\u4f1a\u5bf9\u4ea4\u6613\u7684\u8bfb\u96c6\u5408\u8fdb\u884c\u7248\u672c\u68c0\u67e5\uff0c\u4ece\u800c\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u5e76\u9632\u8303\u4e00\u4e9b\u653b\u51fb\uff0c\u6bd4\u5982\u53cc\u82b1\u3002Fabric\u62e5\u6709\u5e76\u53d1\u63a7\u5236\uff0c\u4ece\u800c\u4ea4\u6613\u53ef\u4ee5\uff08\u88ab\u80cc\u4e66\u8282\u70b9\uff09\u5e76\u884c\u8fd0\u884c\u6765\u63d0\u9ad8\u541e\u5410\u91cf\uff0c\u800c\u4e14\u5f53\u4ea4\u6613\uff08\u88ab\u8282\u70b9\uff09\u63d0\u4ea4\u65f6\uff0c\u6bcf\u4e2a\u4ea4\u6613\u90fd\u4f1a\u88ab\u9a8c\u8bc1\u6765\u4fdd\u8bc1\u5b83\u6240\u8bfb\u53d6\u7684\u6570\u636e\u6ca1\u6709\u88ab\u5176\u4ed6\u4ea4\u6613\u66f4\u6539\u3002\u6362\u8a00\u4e4b\uff0c\u5b83\u786e\u4fdd\u94fe\u7801\u6267\u884c\u671f\u95f4\u6240\u8bfb\u53d6\u7684\u6570\u636e\u4ece\u6267\u884c\uff08\u80cc\u4e66\uff09\u5f00\u59cb\u540e\u6ca1\u6709\u53d8\u52a8\u3002\u5982\u679c\u8bfb\u53d6\u7684\u6570\u636e\u88ab\u5176\u4ed6\u4ea4\u6613\u6539\u52a8\u4e86\uff0c\u90a3\u4e48\u533a\u5757\u4e2d\u7684\u4ea4\u6613\u5c06\u88ab\u6807\u8bb0\u6210\u65e0\u6548\u7684\uff0c\u4e5f\u4e0d\u4f1a\u88ab\u5e94\u7528\u5230\u8d26\u672c\u72b6\u6001\u6570\u636e\u5e93\u3002\u5ba2\u6237\u7aef\u5e94\u7528\u4f1a\u6536\u5230\u63d0\u9192\uff0c\u4ece\u800c\u8fdb\u884c\u7ea0\u9519\u6216\u9002\u5f53\u91cd\u8bd5\u3002\n\n\nSee the \nTransaction Flow\n and \nRead-Write set semantics\n topics for a deeper dive on transaction structure, concurrency control, and the state DB.\n\n\n\u8981\u8fdb\u4e00\u6b65\u4e86\u89e3\u4ea4\u6613\u7684\u7ed3\u6784\uff0c\u5e76\u53d1\u63a7\u5236\u548c\u72b6\u6001\u6570\u636e\u5e93\u7684\u76f8\u5173\u5185\u5bb9\uff0c\u53ef\u4ee5\u53c2\u8003\n\u4ea4\u6613\u6d41\u7a0b\n\u548c\n\u8bfb\u5199\u96c6\u5408\u8bed\u8a00\u5b66\n\u3002\n\n\nState Database options - \u72b6\u6001\u6570\u636e\u5e93\u9009\u9879\n\n\nState database options include LevelDB and CouchDB (beta). LevelDB is the default key/value state database embedded in the peer process. CouchDB is an optional alternative external state database. Like the LevelDB key/value store, CouchDB can store any binary data that is modeled in chaincode (CouchDB attachment functionality is used internally for non-JSON binary data). But as a JSON document store, CouchDB additionally enables rich query against the chaincode data, when chaincode values (e.g. assets) are modeled as JSON data.\n\n\n\u72b6\u6001\u6570\u636e\u5e93\u9009\u9879\u5305\u62ecLevelDB\u548cCouchDB(beta)\u3002LevelDB\u662f\u8282\u70b9\u6d41\u7a0b\u4e2d\u96c6\u6210\u7684\u7f3a\u7701\u952e\u503c\u72b6\u6001\u6570\u636e\u5e93\u3002CouchDB\u662f\u53ef\u9009\u7684\u5916\u90e8\u72b6\u6001\u6570\u636e\u5e93\u3002\u7c7b\u4f3c\u4e8eLevelDB\u7684\u952e\u503c\u5e93\uff0cCouchDB\u80fd\u5b58\u50a8\u4efb\u4f55\u94fe\u7801\u4e2d\u5efa\u6a21\u7684\u4e8c\u8fdb\u5236\u6570\u636e\uff08CouchDB\u9644\u4ef6\u529f\u80fd\u88ab\u5185\u90e8\u7528\u4e8e\u975eJSON\u683c\u5f0f\u7684\u4e8c\u8fdb\u5236\u6570\u636e\uff09\u3002\u4f46\u4f5c\u4e3a\u4e00\u4e2aJSON\u683c\u5f0f\u6587\u6863\u5e93\uff0c\u5f53\u94fe\u7801\u7684\u6570\u636e\uff08\u6bd4\u5982\u8d44\u4ea7\uff09\u4ee5JSON\u683c\u5f0f\u5efa\u6a21\u65f6\uff0cCouchDB\u989d\u5916\u63d0\u4f9b\u4e86\u8bb8\u591a\u9488\u5bf9\u94fe\u7801\u6570\u636e\u7684\u67e5\u8be2\u65b9\u5f0f\u3002\n\n\nBoth LevelDB and CouchDB support core chaincode operations such as getting and setting a key (asset), and querying based on keys. Keys can be queried by range, and composite keys can be modeled to enable equivalence queries against multiple parameters. For example a composite key of (owner,asset_id) can be used to query all assets owned by a certain entity. These key-based queries can be used for read-only queries against the ledger, as well as in transactions that update the ledger.\n\n\nLevelDB\u548cCouchDB\u90fd\u652f\u6301\u6838\u5fc3\u7684\u94fe\u7801\u64cd\u4f5c\uff0c\u6bd4\u5982\u83b7\u53d6\u548c\u8bbe\u7f6e\u4e00\u4e2a\u952e\uff08\u8d44\u4ea7\uff09\uff0c\u4ee5\u53ca\u57fa\u4e8e\u952e\u8fdb\u884c\u67e5\u8be2\u7b49\u3002\u952e\u7684\u67e5\u8be2\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u8303\u56f4\uff0c\u800c\u4e14\u53ef\u4ee5\u901a\u8fc7\u6784\u5efa\u7ec4\u5408\u952e\u6765\u8fbe\u5230\u6309\u591a\u4e2a\u53c2\u6570\u8fdb\u884c\u67e5\u8be2\u7684\u540c\u7b49\u6548\u679c\u3002\u6bd4\u5982\u4e00\u4e2a\u7ec4\u5408\u952e\uff08\u62e5\u6709\u8005\uff0c\u8d44\u4ea7\u7f16\u53f7\uff09\u53ef\u4ee5\u88ab\u7528\u6765\u67e5\u8be2\u67d0\u5b9e\u4f53\u6240\u62e5\u6709\u7684\u6240\u6709\u8d44\u4ea7\u3002\u8fd9\u4e9b\u57fa\u4e8e\u952e\u7684\u67e5\u8be2\u53ef\u4ee5\u88ab\u7528\u505a\u9488\u5bf9\u8d26\u672c\u7684\u53ea\u8bfb\u67e5\u8be2\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u88ab\u5e94\u7528\u5728\u5bf9\u8d26\u672c\u8fdb\u884c\u66f4\u65b0\u7684\u4ea4\u6613\u4e2d\u3002\n\n\nIf you model assets as JSON and use CouchDB, you can also perform complex rich queries against the chaincode data values, using the CouchDB JSON query language within chaincode. These types of queries are excellent for understanding what is on the ledger. Proposal responses for these types of queries are typically useful to the client application, but are not typically submitted as transactions to the ordering service. In fact the fabric does not guarantee the result set is stable between chaincode execution and commit time for rich queries, and therefore rich queries are not appropriate for use in update transactions, unless your application can guarantee the result set is stable between chaincode execution time and commit time, or can handle potential changes in subsequent transactions. For example, if you perform a rich query for all assets owned by Alice and transfer them to Bob, a new asset may be assigned to Alice by another transaction between chaincode execution time and commit time, and you would miss this \u2018phantom\u2019 item.\n\n\n\u5982\u679c\u4f60\u5c06\u8d44\u4ea7\u4ee5JSON\u683c\u5f0f\u8fdb\u884c\u5efa\u6a21\uff0c\u5e76\u4e14\u4f7f\u7528\u7684\u662fCouchDB\uff0c\u90a3\u4f60\u53ef\u4ee5\u901a\u8fc7CouchDB\u7684JSON\u67e5\u8be2\u8bed\u8a00\uff0c\u5bf9\u94fe\u7801\u7684\u6570\u636e\u503c\u8fdb\u884c\u590d\u6742\u591a\u6837\u7684\u67e5\u8be2\u3002\u8fd9\u4e9b\u67e5\u8be2\u7c7b\u578b\u53ef\u4ee5\u5f88\u597d\u7684\u5e2e\u52a9\u7406\u89e3\u8d26\u672c\u4e2d\u5305\u542b\u4ec0\u4e48\u3002\u67e5\u8be2\u7c7b\u578b\u7684\u63d0\u6848\u54cd\u5e94\u5bf9\u5ba2\u6237\u7aef\u5e94\u7528\u901a\u5e38\u5f88\u6709\u7528\uff0c\u4f46\u5e76\u4e0d\u4f1a\u88ab\u4f5c\u4e3a\u4ea4\u6613\u63d0\u4ea4\u5230\u6392\u5e8f\u670d\u52a1\u3002\u5b9e\u9645\u4e0a\u5bf9\u4e8e\u5bcc\u67e5\u8be2\uff08rich query\uff09\uff0cFabric\u5e76\u4e0d\u4fdd\u8bc1\u7ed3\u679c\u96c6\u5728\u94fe\u7801\u6267\u884c\u548c\u63d0\u4ea4\u8fc7\u7a0b\u4e2d\u95f4\u662f\u7a33\u5b9a\u7684\uff0c\u6216\u8005\u80fd\u5904\u7406\u540e\u7eed\u4ea4\u6613\u4e2d\u6f5c\u5728\u7684\u53d8\u5316\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u4f60\u5bf9\u6240\u6709Alice\u62e5\u6709\u7684\u8d44\u4ea7\u8fdb\u884c\u5bcc\u67e5\u8be2\uff0c\u5e76\u8f6c\u79fb\u7ed9Bob\uff0c\u90a3\u5728\u94fe\u7801\u6267\u884c\u548c\u63d0\u4ea4\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u4f1a\u6709\u53e6\u4e00\u4e2a\u4ea4\u6613\u5c06\u4e00\u4e2a\u65b0\u7684\u8d44\u4ea7\u5206\u914d\u7ed9\u4e86Alice\uff0c\u4f60\u5c06\u4f1a\u9519\u5931\u8fd9\u4e2a\u201c\u5e7b\u5f71\u201d\u9879\u3002\n\n\nCouchDB runs as a separate database process alongside the peer, therefore there are additional considerations in terms of setup, management, and operations. You may consider starting with the default embedded LevelDB, and move to CouchDB if you require the additional complex rich queries. It is a good practice to model chaincode asset data as JSON, so that you have the option to perform complex rich queries if needed in the future.\n\n\nCouchDB\u4f5c\u4e3a\u72ec\u7acb\u7684\u6570\u636e\u5e93\u8fdb\u7a0b\u8ddf\u8282\u70b9\u4e00\u8d77\u8fd0\u884c\uff0c\u6240\u4ee5\u5b89\u88c5\u3001\u7ba1\u7406\u548c\u64cd\u4f5c\u7684\u65f6\u5019\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684\u8003\u8651\u3002\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5f00\u59cb\u7684\u65f6\u5019\u7528\u7f3a\u7701\u96c6\u6210\u7684LevelDB\uff0c\u7136\u540e\u5f53\u4f60\u9700\u8981\u989d\u5916\u7684\u590d\u6742\u67e5\u8be2\u65f6\u518d\u5207\u6362\u5230CouchDB\u3002\u5c06\u94fe\u7801\u7684\u8d44\u4ea7\u6570\u636e\u4ee5JSON\u683c\u5f0f\u5efa\u6a21\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u5b9e\u8df5\uff0c\u8fd9\u6837\u6709\u5229\u4e8e\u4f60\u5c06\u6765\u8fdb\u884c\u590d\u6742\u591a\u6837\u7684\u67e5\u8be2\u3002\n\n\nTo enable CouchDB as the state database, configure the /fabric/sampleconfig/core.yaml stateDatabase section.\n\n\n\u5982\u679c\u8981\u7528CouchDB\u4f5c\u4e3a\u72b6\u6001\u6570\u636e\u5e93\uff0c\u9700\u8981\u5bf9/fabric/sampleconfig/core.yaml stateDatabase\u8fd9\u90e8\u5206\u8fdb\u884c\u914d\u7f6e\u3002", 
            "title": "\u8d26\u672c"
        }, 
        {
            "location": "/ledger_zh/#ledger-", 
            "text": "The ledger is the sequenced, tamper-resistant record of all state transitions in the fabric. State transitions are a result of chaincode invocations (\u2018transactions\u2019) submitted by participating parties. Each transaction results in a set of asset key-value pairs that are committed to the ledger as creates, updates, or deletes.  \u8d26\u672c\u662fFabric\u4e2d\u6240\u6709\u72b6\u6001\u8f6c\u6362\u7684\u8bb0\u5f55\uff0c\u5177\u6709\u6709\u5e8f\u548c\u9632\u7be1\u6539\u7684\u7279\u70b9\u3002\u72b6\u6001\u8f6c\u6362\u662f\u53c2\u4e0e\u5404\u65b9\u63d0\u4ea4\u94fe\u4ee3\u7801\u8c03\u7528\uff08\u4ea4\u6613\uff09\u4ea7\u751f\u7684\u7ed3\u679c\u3002\u6bcf\u4e2a\u4ea4\u6613\u4f1a\u4ea7\u751f\u4e00\u7ec4\u8d44\u4ea7\u952e\u503c\u5bf9\uff0c\u8fd9\u4e9b\u952e\u503c\u5bf9\u4f5c\u4e3a\u201c\u521b\u5efa\u201d\u3001\u201c\u66f4\u65b0\u201d\u6216\u8005\u201c\u5220\u9664\u201d\u63d0\u4ea4\u7ed9\u8d26\u672c\u3002  The ledger is comprised of a blockchain (\u2018chain\u2019) to store the immutable, sequenced record in blocks, as well as a state database to maintain current fabric state. There is one ledger per channel. Each peer maintains a copy of the ledger for each channel of which they are a member.  \u8d26\u672c\u7531\u4e00\u4e2a\u533a\u5757\u94fe\uff08\u94fe\uff09\u6784\u6210\uff0c\u5e76\u5c06\u4e0d\u53ef\u53d8\u7684\u3001\u6709\u5e8f\u7684\u8bb0\u5f55\u5b58\u653e\u5728\u533a\u5757\u4e2d\uff1b\u540c\u65f6\u5305\u542b\u4e00\u4e2a\u72b6\u6001\u6570\u636e\u5e93\u6765\u8bb0\u5f55\u5f53\u524d\u7684Fabric\u72b6\u6001\u3002\u6bcf\u4e2a\u901a\u9053\u4e2d\u5404\u6709\u4e00\u4e2a\u8d26\u672c\u3002\u5404\u4e2a\u8282\u70b9\u5bf9\u4e8e\u5b83\u6240\u5c5e\u7684\u6bcf\u4e2a\u901a\u9053\uff0c\u90fd\u4f1a\u4fdd\u5b58\u4e00\u4efd\u8be5\u901a\u9053\u7684\u8d26\u672c\u526f\u672c\u3002", 
            "title": "Ledger - \u8d26\u672c"
        }, 
        {
            "location": "/ledger_zh/#chain-", 
            "text": "The chain is a transaction log, structured as hash-linked blocks, where each block contains a sequence of N transactions. The block header includes a hash of the block\u2019s transactions, as well as a hash of the prior block\u2019s header. In this way, all transactions on the ledger are sequenced and cryptographically linked together. In other words, it is not possible to tamper with the ledger data, without breaking the hash links. The hash of the latest block represents every transaction that has come before, making it possible to ensure that all peers are in a consistent and trusted state.  \u94fe\u662f\u4e00\u4e2a\u4ea4\u6613\u65e5\u5fd7\uff0c\u5b83\u7531\u54c8\u5e0c\u503c\u94fe\u63a5\u7684\u533a\u5757\u6784\u9020\u800c\u6210\uff0c\u6bcf\u4e2a\u533a\u5757\u5305\u542bN\u4e2a\u6709\u5e8f\u7684\u4ea4\u6613\u3002\u5757\u5934\u4e2d\u5305\u542b\u4e86\u672c\u533a\u5757\u6240\u8bb0\u5f55\u4ea4\u6613\u7684\u54c8\u5e0c\u503c\uff0c\u4ee5\u53ca\u4e0a\u4e00\u4e2a\u533a\u5757\u5934\u7684\u54c8\u5e0c\u503c\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u8d26\u672c\u4e2d\u7684\u6240\u6709\u4ea4\u6613\u90fd\u88ab\u6709\u5e8f\u7684\u3001\u52a0\u5bc6\u7684\u5f62\u5f0f\u4e32\u8054\u5728\u4e86\u4e00\u8d77\u3002\u6362\u8a00\u4e4b\uff0c\u5982\u679c\u4e0d\u7834\u574f\u54c8\u5e0c\u94fe\u7684\u8bdd\uff0c\u662f\u65e0\u6cd5\u7be1\u6539\u8d26\u672c\u6570\u636e\u7684\u3002\u6700\u65b0\u533a\u5757\u7684\u54c8\u5e0c\u662f\u4e4b\u524d\u6bcf\u4e00\u7b14\u4ea4\u6613\u7684\u4f53\u73b0\uff0c\u4ece\u800c\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u7684\u8282\u70b9\u5904\u4e8e\u4e00\u81f4\u7684\u53ef\u4fe1\u4efb\u7684\u72b6\u6001\u3002  The chain is stored on the peer file system (either local or attached storage), efficiently supporting the append-only nature of the blockchain workload.  \u94fe\u88ab\u5b58\u653e\u4e8e\u8282\u70b9\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff08\u672c\u5730\u7684\u6216\u8005\u6302\u8f7d\u7684\uff09\uff0c\u6709\u6548\u5730\u652f\u6301\u7740\u533a\u5757\u94fe\u5de5\u4f5c\u91cf\u53ea\u8ffd\u52a0\u7684\u7279\u6027\u3002", 
            "title": "Chain - \u94fe"
        }, 
        {
            "location": "/ledger_zh/#state-database-", 
            "text": "The ledger\u2019s current state data represents the latest values for all keys ever included in the chain transaction log. Since current state represents all latest key values known to the channel, it is sometimes referred to as World State.  \u8d26\u672c\u7684\u5f53\u524d\u72b6\u6001\u4fe1\u606f\u5448\u73b0\u7684\u662f\u94fe\u4ea4\u6613\u65e5\u5fd7\u4e2d\u8bb0\u5f55\u8fc7\u7684\u6240\u6709\u952e\u7684\u6700\u65b0\u503c\u3002\u7531\u4e8e\u5f53\u524d\u72b6\u6001\u8868\u793a\u7684\u662f\u901a\u9053\u5df2\u77e5\u7684\u6240\u6709\u952e\u7684\u6700\u65b0\u503c\uff0c\u7531\u6b64\u4e5f\u5e38\u88ab\u79f0\u4f5c\u4e16\u754c\u72b6\u6001\u3002  Chaincode invocations execute transactions against the current state data. To make these chaincode interactions extremely efficient, the latest values of all keys are stored in a state database. The state database is simply an indexed view into the chain\u2019s transaction log, it can therefore be regenerated from the chain at any time. The state database will automatically get recovered (or generated if needed) upon peer startup, before transactions are accepted.  \u94fe\u7801\u8c03\u7528\u57fa\u4e8e\u5f53\u524d\u7684\u72b6\u6001\u6570\u636e\u6267\u884c\u4ea4\u6613\u3002\u4e3a\u4e86\u4f7f\u94fe\u7801\u8c03\u7528\u9ad8\u6548\u8fd0\u884c\uff0c\u6240\u6709\u952e\u7684\u6700\u65b0\u503c\u88ab\u5b58\u50a8\u5728\u72b6\u6001\u6570\u636e\u5e93\u4e2d\u3002\u72b6\u6001\u6570\u636e\u5e93\u662f\u94fe\u7684\u4ea4\u6613\u65e5\u5fd7\u7684\u7d22\u5f15\u89c6\u56fe\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u968f\u65f6\u4ece\u94fe\u4e2d\u91cd\u65b0\u5bfc\u51fa\u3002\u8282\u70b9\u542f\u52a8\u7684\u65f6\u5019\uff0c\u5728\u63a5\u53d7\u4ea4\u6613\u4e4b\u524d\uff0c\u72b6\u6001\u6570\u636e\u5e93\u5c06\u88ab\u81ea\u52a8\u6062\u590d\uff08\u6216\u8005\u6839\u636e\u9700\u8981\u4ea7\u751f\uff09\u3002", 
            "title": "State Database - \u72b6\u6001\u6570\u636e\u5e93"
        }, 
        {
            "location": "/ledger_zh/#transaction-flow-", 
            "text": "At a high level, the transaction flow consists of a transaction proposal sent by an application client to specific endorsing peers. The endorsing peers verify the client signature, and execute a chaincode function to simulate the transaction. The output is the chaincode results, a set of key/value versions that were read in the chaincode (read set), and the set of keys/values that were written in chaincode (write set). The proposal response gets sent back to the client along with an endorsement signature.  \u6982\u62ec\u800c\u8a00\uff0c\u4ea4\u6613\u6d41\u7a0b\u7531\u5e94\u7528\u5ba2\u6237\u7aef\u53d1\u9001\u7ed9\u80cc\u4e66\u8282\u70b9\u4ea4\u6613\u63d0\u6848\u7ec4\u6210\u3002\u80cc\u4e66\u8282\u70b9\u9a8c\u8bc1\u5ba2\u6237\u7aef\u7684\u7b7e\u540d\uff0c\u7136\u540e\u6267\u884c\u94fe\u7801\u6765\u6a21\u62df\u4ea4\u6613\u3002\u4ea7\u751f\u7684\u8f93\u51fa\u5c31\u662f\u94fe\u7801\u7ed3\u679c\uff0c\u4e00\u7ec4\u94fe\u7801\u8bfb\u53d6\u7684\u952e\u503c\u7248\u672c\uff08\u8bfb\u96c6\u5408\uff09\uff0c\u548c\u4e00\u7ec4\u88ab\u5199\u5165\u94fe\u7801\u7684\u952e\u503c\u96c6\u5408\uff08\u5199\u96c6\u5408\uff09\u3002\u4ea4\u6613\u63d0\u6848\u7684\u54cd\u5e94\u88ab\u53d1\u9001\u56de\u5ba2\u6237\u7aef\uff0c\u540c\u65f6\u5305\u542b\u4e86\u80cc\u4e66\u7b7e\u540d\u3002  The client assembles the endorsements into a transaction payload and broadcasts it to an ordering service. The ordering service delivers ordered transactions as blocks to all peers on a channel.  \u5ba2\u6237\u7aef\u6c47\u603b\u6240\u6709\u7684\u80cc\u4e66\u5230\u4e00\u4e2a\u4ea4\u6613\u6709\u6548\u8f7d\u8377\u4e2d\uff0c\u5e76\u5c06\u5b83\u5e7f\u64ad\u5230\u6392\u5e8f\u670d\u52a1\u3002\u6392\u5e8f\u670d\u52a1\u5c06\u6392\u597d\u5e8f\u7684\u4ea4\u6613\u653e\u5165\u533a\u5757\u5e76\u53d1\u9001\u5230\u901a\u9053\u5185\u7684\u6240\u6709\u8282\u70b9\u3002  Before committal, peers will validate the transactions. First, they will check the endorsement policy to ensure that the correct allotment of the specified peers have signed the results, and they will authenticate the signatures against the transaction payload.  \u5728\u63d0\u4ea4\u4e4b\u524d\uff0c\u8282\u70b9\u4eec\u4f1a\u9a8c\u8bc1\u4ea4\u6613\u3002\u9996\u5148\u5b83\u4eec\u4f1a\u68c0\u67e5\u80cc\u4e66\u7b56\u7565\u6765\u4fdd\u8bc1\u8db3\u591f\u7684\u6307\u5b9a\u8282\u70b9\u6b63\u786e\u5730\u5bf9\u7ed3\u679c\u8fdb\u884c\u4e86\u7b7e\u540d\uff0c\u5e76\u4e14\u4f1a\u8ba4\u8bc1\u4ea4\u6613\u6709\u6548\u8f7d\u8377\u4e2d\u7684\u7b7e\u540d\u3002  Secondly, peers will perform a versioning check against the transaction read set, to ensure data integrity and protect against threats such as double-spending. The fabric has concurrency control whereby transactions execute in parallel (by endorsers) to increase throughput, and upon commit (by all peers) each transaction is verified to ensure that no other transaction has modified data it has read. In other words, it ensures that the data that was read during chaincode execution has not changed since execution (endorsement) time, and therefore the execution results are still valid and can be committed to the ledger state database. If the data that was read has been changed by another transaction, then the transaction in the block is marked as invalid and is not applied to the ledger state database. The client application is alerted, and can handle the error or retry as appropriate.  \u5176\u6b21\uff0c\u8282\u70b9\u4eec\u4f1a\u5bf9\u4ea4\u6613\u7684\u8bfb\u96c6\u5408\u8fdb\u884c\u7248\u672c\u68c0\u67e5\uff0c\u4ece\u800c\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u5e76\u9632\u8303\u4e00\u4e9b\u653b\u51fb\uff0c\u6bd4\u5982\u53cc\u82b1\u3002Fabric\u62e5\u6709\u5e76\u53d1\u63a7\u5236\uff0c\u4ece\u800c\u4ea4\u6613\u53ef\u4ee5\uff08\u88ab\u80cc\u4e66\u8282\u70b9\uff09\u5e76\u884c\u8fd0\u884c\u6765\u63d0\u9ad8\u541e\u5410\u91cf\uff0c\u800c\u4e14\u5f53\u4ea4\u6613\uff08\u88ab\u8282\u70b9\uff09\u63d0\u4ea4\u65f6\uff0c\u6bcf\u4e2a\u4ea4\u6613\u90fd\u4f1a\u88ab\u9a8c\u8bc1\u6765\u4fdd\u8bc1\u5b83\u6240\u8bfb\u53d6\u7684\u6570\u636e\u6ca1\u6709\u88ab\u5176\u4ed6\u4ea4\u6613\u66f4\u6539\u3002\u6362\u8a00\u4e4b\uff0c\u5b83\u786e\u4fdd\u94fe\u7801\u6267\u884c\u671f\u95f4\u6240\u8bfb\u53d6\u7684\u6570\u636e\u4ece\u6267\u884c\uff08\u80cc\u4e66\uff09\u5f00\u59cb\u540e\u6ca1\u6709\u53d8\u52a8\u3002\u5982\u679c\u8bfb\u53d6\u7684\u6570\u636e\u88ab\u5176\u4ed6\u4ea4\u6613\u6539\u52a8\u4e86\uff0c\u90a3\u4e48\u533a\u5757\u4e2d\u7684\u4ea4\u6613\u5c06\u88ab\u6807\u8bb0\u6210\u65e0\u6548\u7684\uff0c\u4e5f\u4e0d\u4f1a\u88ab\u5e94\u7528\u5230\u8d26\u672c\u72b6\u6001\u6570\u636e\u5e93\u3002\u5ba2\u6237\u7aef\u5e94\u7528\u4f1a\u6536\u5230\u63d0\u9192\uff0c\u4ece\u800c\u8fdb\u884c\u7ea0\u9519\u6216\u9002\u5f53\u91cd\u8bd5\u3002  See the  Transaction Flow  and  Read-Write set semantics  topics for a deeper dive on transaction structure, concurrency control, and the state DB.  \u8981\u8fdb\u4e00\u6b65\u4e86\u89e3\u4ea4\u6613\u7684\u7ed3\u6784\uff0c\u5e76\u53d1\u63a7\u5236\u548c\u72b6\u6001\u6570\u636e\u5e93\u7684\u76f8\u5173\u5185\u5bb9\uff0c\u53ef\u4ee5\u53c2\u8003 \u4ea4\u6613\u6d41\u7a0b \u548c \u8bfb\u5199\u96c6\u5408\u8bed\u8a00\u5b66 \u3002", 
            "title": "Transaction Flow - \u4ea4\u6613\u6d41\u7a0b"
        }, 
        {
            "location": "/ledger_zh/#state-database-options-", 
            "text": "State database options include LevelDB and CouchDB (beta). LevelDB is the default key/value state database embedded in the peer process. CouchDB is an optional alternative external state database. Like the LevelDB key/value store, CouchDB can store any binary data that is modeled in chaincode (CouchDB attachment functionality is used internally for non-JSON binary data). But as a JSON document store, CouchDB additionally enables rich query against the chaincode data, when chaincode values (e.g. assets) are modeled as JSON data.  \u72b6\u6001\u6570\u636e\u5e93\u9009\u9879\u5305\u62ecLevelDB\u548cCouchDB(beta)\u3002LevelDB\u662f\u8282\u70b9\u6d41\u7a0b\u4e2d\u96c6\u6210\u7684\u7f3a\u7701\u952e\u503c\u72b6\u6001\u6570\u636e\u5e93\u3002CouchDB\u662f\u53ef\u9009\u7684\u5916\u90e8\u72b6\u6001\u6570\u636e\u5e93\u3002\u7c7b\u4f3c\u4e8eLevelDB\u7684\u952e\u503c\u5e93\uff0cCouchDB\u80fd\u5b58\u50a8\u4efb\u4f55\u94fe\u7801\u4e2d\u5efa\u6a21\u7684\u4e8c\u8fdb\u5236\u6570\u636e\uff08CouchDB\u9644\u4ef6\u529f\u80fd\u88ab\u5185\u90e8\u7528\u4e8e\u975eJSON\u683c\u5f0f\u7684\u4e8c\u8fdb\u5236\u6570\u636e\uff09\u3002\u4f46\u4f5c\u4e3a\u4e00\u4e2aJSON\u683c\u5f0f\u6587\u6863\u5e93\uff0c\u5f53\u94fe\u7801\u7684\u6570\u636e\uff08\u6bd4\u5982\u8d44\u4ea7\uff09\u4ee5JSON\u683c\u5f0f\u5efa\u6a21\u65f6\uff0cCouchDB\u989d\u5916\u63d0\u4f9b\u4e86\u8bb8\u591a\u9488\u5bf9\u94fe\u7801\u6570\u636e\u7684\u67e5\u8be2\u65b9\u5f0f\u3002  Both LevelDB and CouchDB support core chaincode operations such as getting and setting a key (asset), and querying based on keys. Keys can be queried by range, and composite keys can be modeled to enable equivalence queries against multiple parameters. For example a composite key of (owner,asset_id) can be used to query all assets owned by a certain entity. These key-based queries can be used for read-only queries against the ledger, as well as in transactions that update the ledger.  LevelDB\u548cCouchDB\u90fd\u652f\u6301\u6838\u5fc3\u7684\u94fe\u7801\u64cd\u4f5c\uff0c\u6bd4\u5982\u83b7\u53d6\u548c\u8bbe\u7f6e\u4e00\u4e2a\u952e\uff08\u8d44\u4ea7\uff09\uff0c\u4ee5\u53ca\u57fa\u4e8e\u952e\u8fdb\u884c\u67e5\u8be2\u7b49\u3002\u952e\u7684\u67e5\u8be2\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u8303\u56f4\uff0c\u800c\u4e14\u53ef\u4ee5\u901a\u8fc7\u6784\u5efa\u7ec4\u5408\u952e\u6765\u8fbe\u5230\u6309\u591a\u4e2a\u53c2\u6570\u8fdb\u884c\u67e5\u8be2\u7684\u540c\u7b49\u6548\u679c\u3002\u6bd4\u5982\u4e00\u4e2a\u7ec4\u5408\u952e\uff08\u62e5\u6709\u8005\uff0c\u8d44\u4ea7\u7f16\u53f7\uff09\u53ef\u4ee5\u88ab\u7528\u6765\u67e5\u8be2\u67d0\u5b9e\u4f53\u6240\u62e5\u6709\u7684\u6240\u6709\u8d44\u4ea7\u3002\u8fd9\u4e9b\u57fa\u4e8e\u952e\u7684\u67e5\u8be2\u53ef\u4ee5\u88ab\u7528\u505a\u9488\u5bf9\u8d26\u672c\u7684\u53ea\u8bfb\u67e5\u8be2\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u88ab\u5e94\u7528\u5728\u5bf9\u8d26\u672c\u8fdb\u884c\u66f4\u65b0\u7684\u4ea4\u6613\u4e2d\u3002  If you model assets as JSON and use CouchDB, you can also perform complex rich queries against the chaincode data values, using the CouchDB JSON query language within chaincode. These types of queries are excellent for understanding what is on the ledger. Proposal responses for these types of queries are typically useful to the client application, but are not typically submitted as transactions to the ordering service. In fact the fabric does not guarantee the result set is stable between chaincode execution and commit time for rich queries, and therefore rich queries are not appropriate for use in update transactions, unless your application can guarantee the result set is stable between chaincode execution time and commit time, or can handle potential changes in subsequent transactions. For example, if you perform a rich query for all assets owned by Alice and transfer them to Bob, a new asset may be assigned to Alice by another transaction between chaincode execution time and commit time, and you would miss this \u2018phantom\u2019 item.  \u5982\u679c\u4f60\u5c06\u8d44\u4ea7\u4ee5JSON\u683c\u5f0f\u8fdb\u884c\u5efa\u6a21\uff0c\u5e76\u4e14\u4f7f\u7528\u7684\u662fCouchDB\uff0c\u90a3\u4f60\u53ef\u4ee5\u901a\u8fc7CouchDB\u7684JSON\u67e5\u8be2\u8bed\u8a00\uff0c\u5bf9\u94fe\u7801\u7684\u6570\u636e\u503c\u8fdb\u884c\u590d\u6742\u591a\u6837\u7684\u67e5\u8be2\u3002\u8fd9\u4e9b\u67e5\u8be2\u7c7b\u578b\u53ef\u4ee5\u5f88\u597d\u7684\u5e2e\u52a9\u7406\u89e3\u8d26\u672c\u4e2d\u5305\u542b\u4ec0\u4e48\u3002\u67e5\u8be2\u7c7b\u578b\u7684\u63d0\u6848\u54cd\u5e94\u5bf9\u5ba2\u6237\u7aef\u5e94\u7528\u901a\u5e38\u5f88\u6709\u7528\uff0c\u4f46\u5e76\u4e0d\u4f1a\u88ab\u4f5c\u4e3a\u4ea4\u6613\u63d0\u4ea4\u5230\u6392\u5e8f\u670d\u52a1\u3002\u5b9e\u9645\u4e0a\u5bf9\u4e8e\u5bcc\u67e5\u8be2\uff08rich query\uff09\uff0cFabric\u5e76\u4e0d\u4fdd\u8bc1\u7ed3\u679c\u96c6\u5728\u94fe\u7801\u6267\u884c\u548c\u63d0\u4ea4\u8fc7\u7a0b\u4e2d\u95f4\u662f\u7a33\u5b9a\u7684\uff0c\u6216\u8005\u80fd\u5904\u7406\u540e\u7eed\u4ea4\u6613\u4e2d\u6f5c\u5728\u7684\u53d8\u5316\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u4f60\u5bf9\u6240\u6709Alice\u62e5\u6709\u7684\u8d44\u4ea7\u8fdb\u884c\u5bcc\u67e5\u8be2\uff0c\u5e76\u8f6c\u79fb\u7ed9Bob\uff0c\u90a3\u5728\u94fe\u7801\u6267\u884c\u548c\u63d0\u4ea4\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u4f1a\u6709\u53e6\u4e00\u4e2a\u4ea4\u6613\u5c06\u4e00\u4e2a\u65b0\u7684\u8d44\u4ea7\u5206\u914d\u7ed9\u4e86Alice\uff0c\u4f60\u5c06\u4f1a\u9519\u5931\u8fd9\u4e2a\u201c\u5e7b\u5f71\u201d\u9879\u3002  CouchDB runs as a separate database process alongside the peer, therefore there are additional considerations in terms of setup, management, and operations. You may consider starting with the default embedded LevelDB, and move to CouchDB if you require the additional complex rich queries. It is a good practice to model chaincode asset data as JSON, so that you have the option to perform complex rich queries if needed in the future.  CouchDB\u4f5c\u4e3a\u72ec\u7acb\u7684\u6570\u636e\u5e93\u8fdb\u7a0b\u8ddf\u8282\u70b9\u4e00\u8d77\u8fd0\u884c\uff0c\u6240\u4ee5\u5b89\u88c5\u3001\u7ba1\u7406\u548c\u64cd\u4f5c\u7684\u65f6\u5019\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684\u8003\u8651\u3002\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5f00\u59cb\u7684\u65f6\u5019\u7528\u7f3a\u7701\u96c6\u6210\u7684LevelDB\uff0c\u7136\u540e\u5f53\u4f60\u9700\u8981\u989d\u5916\u7684\u590d\u6742\u67e5\u8be2\u65f6\u518d\u5207\u6362\u5230CouchDB\u3002\u5c06\u94fe\u7801\u7684\u8d44\u4ea7\u6570\u636e\u4ee5JSON\u683c\u5f0f\u5efa\u6a21\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u5b9e\u8df5\uff0c\u8fd9\u6837\u6709\u5229\u4e8e\u4f60\u5c06\u6765\u8fdb\u884c\u590d\u6742\u591a\u6837\u7684\u67e5\u8be2\u3002  To enable CouchDB as the state database, configure the /fabric/sampleconfig/core.yaml stateDatabase section.  \u5982\u679c\u8981\u7528CouchDB\u4f5c\u4e3a\u72b6\u6001\u6570\u636e\u5e93\uff0c\u9700\u8981\u5bf9/fabric/sampleconfig/core.yaml stateDatabase\u8fd9\u90e8\u5206\u8fdb\u884c\u914d\u7f6e\u3002", 
            "title": "State Database options - \u72b6\u6001\u6570\u636e\u5e93\u9009\u9879"
        }, 
        {
            "location": "/read-write-set/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nLinsheng Yu\n\n\n\n\n\n\n\n\n\n\n\u4ea4\u6613\u6a21\u62df\u548cread-write set\n\n\n\u5728\u80cc\u4e66\u8282\u70b9\u4e0a\u7684\u4ea4\u6613\u6a21\u62df\u671f\u95f4\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4ea4\u6613\u7684read-write set\u3002\nread set\n\u5305\u542b\u5728\u6a21\u62df\u671f\u95f4\u4ea4\u6613\u8bfb\u53d6\u5230\u7684\u552f\u4e00key\u53ca\u5bf9\u5e94version\u3002\nwrite set\n\u4ea4\u6613\u6539\u5199\u7684\u552f\u4e00key\uff08\u53ef\u80fd\u4e0e\nread set\n\u4e2d\u7684key\u91cd\u53e0\uff09\u53ca\u5bf9\u5e94\u7684\u65b0value\u3002\u5982\u679c\u4ea4\u6613\u7684\u66f4\u65b0\u64cd\u4f5c\u662f\u5220\u9664\u4e00\u4e2akey\uff0c\u5219\u5728\nwrite set\n\u4e3a\u8be5key\u8bbe\u7f6e\u4e00\u4e2adelete\u6807\u8bb0\u3002\n\n\n\u6b64\u5916\uff0c\u5982\u679c\u4ea4\u6613\u4e2d\u5bf9\u4e00\u4e2akey\u6539\u5199\u591a\u6b21\uff0c\u5219\u53ea\u4fdd\u7559\u6700\u540e\u7684\u4fee\u6539\u503c\u3002\u5982\u679c\u4ea4\u6613\u4e2d\u8bfb\u53d6\u4e00\u4e2akey\u7684\u503c\uff0c\u5373\u4f7f\u4ea4\u6613\u5728\u8bfb\u53d6\u4e4b\u524d\u66f4\u65b0\u4e86\u8be5key\u7684\u503c\uff0c\u8bfb\u53d6\u5230\u7684\u4e5f\u4f1a\u662f\u4e4b\u524d\u63d0\u4ea4\u8fc7\u7684\u800c\u4e0d\u662f\u521a\u66f4\u65b0\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e0d\u80fd\u8bfb\u53d6\u5230\u540c\u4e00\u4ea4\u6613\u4e2d\u4fee\u6539\u7684\u503c\u3002\n\n\n\u5982\u524d\u6240\u8ff0\uff0ckey\u7684version\u53ea\u8bb0\u5f55\u5728\nread set\n\uff1b\nwrite set\n\u53ea\u5305\u542bkey\u53ca\u5bf9\u5e94\u65b0value\u3002\n\n\n\u5bf9\u4e8e\nread set\n\u7684version\u7684\u5b9e\u73b0\u6709\u5f88\u591a\u79cd\u65b9\u6848\uff0c\u6700\u57fa\u672c\u8981\u6c42\u5c31\u662f\u4e3akey\u751f\u6210\u4e00\u4e2a\u975e\u91cd\u590d\u6807\u8bc6\u7b26\u3002\u4f8b\u5982\u7528\u9012\u589e\u7684\u5e8f\u53f7\u4f5c\u4e3aversion\u3002\u5728\u76ee\u524d\u7684\u4ee3\u7801\u5b9e\u73b0\u4e2d\u6211\u4eec\u4f7f\u7528\u4e86blockchain height\u4f5c\u4e3aversion\u65b9\u6848\uff0c\u5c31\u662f\u7528\u4ea4\u6613\u7684height\u4f5c\u4e3a\u8be5\u4ea4\u6613\u6240\u4fee\u6539\u7684key\u7684version\u3002\u4ea4\u6613height\u7531\u4e00\u4e2a\u7ed3\u6784\u8868\u793a\uff08\u89c1\u4e0b\u9762Height struc\uff09\uff0c\u5176\u4e2dTxNum\u8868\u793a\u8fd9\u4e2atx\u5728block\u4e2d\u7684height\uff08\u8bd1\u6ce8\uff1a\u4e5f\u5c31\u662f\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u987a\u5e8f\uff09\u3002\u8be5\u65b9\u6848\u76f8\u8f83\u4e8e\u9012\u589e\u5e8f\u53f7\u6709\u5f88\u591a\u4f18\u70b9\n\u4e3b\u8981\u662f\u8fd9\u6837\u7684version\u53ef\u4ee5\u5f88\u597d\u5730\u5229\u7528\u5230\u8bf8\u5982statedb\u3001\u4ea4\u6613\u6a21\u62df\u548c\u6821\u9a8c\u8fd9\u4e9b\u6a21\u5757\u4e2d\u3002\n\n\n\u6b64\u5916\uff0c\u5982\u679c\u6a21\u62df\u4ea4\u6613\u4e2d\u6267\u884c\u4e86\u6279\u91cf\u67e5\u8be2\uff08range query\uff09\uff0c\u6279\u91cf\u67e5\u8be2\u7ed3\u679c\u4f1a\u88ab\u653e\u5230read-write set\u4e2d\u7684\nquery-info\n\u3002\n\n\n// \u8bd1\u6ce8\n\n// read-write set \u7ed3\u6784\ntype TxReadWriteSet struct {\n    NsRWs []*NsReadWriteSet\n}\ntype NsReadWriteSet struct {\n    NameSpace        string\n    Reads            []*KVRead\n    Writes           []*KVWrite\n    RangeQueriesInfo []*RangeQueryInfo\n}\ntype RangeQueryInfo struct {\n    StartKey     string\n    EndKey       string\n    ItrExhausted bool\n    Results      []*KVRead\n    ResultHash   *MerkleSummary\n}\ntype MerkleSummary struct {\n    MaxDegree      int\n    MaxLevel       MerkleTreeLevel\n    MaxLevelHashes []Hash\n}\ntype MerkleTreeLevel int\ntype Hash []byte\n\n// read set \u7ed3\u6784\ntype KVRead struct {\n    Key     string\n    Version *Height\n}\ntype Height struct {\n    BlockNum uint64\n    TxNum    uint64\n}\n\n// write set \u7ed3\u6784\ntype KVWrite struct {\n    Key      string\n    IsDelete bool\n    Value    []byte\n}\n\n\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u5047\u8bbe\u7684\u4ea4\u6613\u6a21\u62df\u751f\u6210\u7684read-write set\u793a\u4f8b\uff0c\u7b80\u5355\u8d77\u89c1\uff0c\u793a\u4f8b\u4e2d\u4f7f\u7528\u4e86\u9012\u589e\u5e8f\u53f7\u4f5c\u4e3aversion\u3002\n\n\nTxReadWriteSet\n\n  \nNsReadWriteSet name=\"chaincode1\"\n\n    \nread-set\n\n      \nread key=\"K1\", version=\"1\"\n\n      \nread key=\"K2\", version=\"1\"\n\n    \n/read-set\n\n    \nwrite-set\n\n      \nwrite key=\"K1\", value=\"V1\"\n\n      \nwrite key=\"K3\", value=\"V2\"\n\n      \nwrite key=\"K4\", isDelete=\"true\"\n\n    \n/write-set\n\n  \n/NsReadWriteSet\n\n\nTxReadWriteSet\n\n\n\n\n\u4f7f\u7528read-write set \u9a8c\u8bc1\u4ea4\u6613\u548c\u66f4\u65b0worldState\n\n\n\u63d0\u4ea4\u8282\u70b9\uff08committer\uff09\u5229\u7528\nread set\n\u90e8\u5206\u6821\u9a8c\u4ea4\u6613\u7684\u6709\u6548\u6027\uff1b\u7528\nwrite set\n\u90e8\u5206\u66f4\u65b0key\u7684version\u548cvalue\u3002\n\n\n\u5728\u9a8c\u8bc1\u9636\u6bb5\uff0c\u5982\u679c\nread set\n\u4e2d\u6bcf\u4e2akey\u7684version\u90fd\u4e0estateDB\u4e2d\u5bf9\u5e94worldState\uff08\u5047\u8bbe\u6240\u6709\u4e4b\u524d\u7684\u6709\u6548\u4ea4\u6613\uff0c\u5305\u62ec\u540c\u4e00\u4e2ablock\u4e2d\u7684\u4ea4\u6613\uff0c\u90fd\u5df2\u7ecf\u63d0\u4ea4\u5b8c\u6210\uff0c\u5373\u5df2\u66f4\u65b0ledger\uff09\u7684version\u76f8\u5339\u914d\uff0c\u5219\u8ba4\u4e3a\u6b64\u4ea4\u6613\u6709\u6548\u3002\n\n\n\u5982\u679cread-write set\u4e2d\u5305\u542b\nquery-info\n\uff0c\u5219\u8fd8\u8981\u5bf9\u6b64\u6267\u884c\u989d\u5916\u7684\u6821\u9a8c\u3002\u8be5\u6821\u9a8c\u786e\u4fdd\u5728\u6b64\u6279\u91cf\u67e5\u8be2\u7684\u7ed3\u679c\u8303\u56f4\u5185\u6ca1\u6709key\u88ab\u589e\u5220\u6539\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u5728\u9a8c\u8bc1\u9636\u6bb5\u91cd\u65b0\u6267\u884c\u8be5\u6279\u91cf\u67e5\u8be2\uff08\u6a21\u62df\u671f\u95f4\u6267\u884c\u7684\u4ea4\u6613\uff09\u5e94\u8be5\u4ea7\u751f\u4e0e\u6a21\u62df\u4ea4\u6613\u671f\u95f4\u76f8\u540c\u7684\u7ed3\u679c\u3002\u6b64\u6821\u9a8c\u786e\u4fdd\u4ea4\u6613\u5728\u63d0\u4ea4\u65f6\u51fa\u73b0\u5e7b\u8bfb\u4f1a\u88ab\u8ba4\u4e3a\u65e0\u6548\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u5e7b\u8bfb\u4fdd\u62a4\u4ec5\u9650\u4e8eChaincode\u7684\nGetStateByRange\n\u548c\nGetStateByPartialCompositeKey\n\u4e24\u4e2a\u65b9\u6cd5\n\uff08\u8bd1\u6ce8\uff1a\u6b64\u5904\u6587\u6863\u4e0a\u63d0\u5230\u7684\u662f\nGetStateByRange\n\u548c\nGetQueryResult\n\u4e24\u4e2a\u65b9\u6cd5\uff0c\u4f46\u5728\u4ee3\u7801\u91cc\u7684\u6ce8\u91ca\u5374\u4e0d\u662f\u8fd9\u6837\uff0c\u6b64\u5904\u4ee5\u4ee3\u7801\u4e3a\u51c6\u3002\u8be6\u89c1fabric/examples/chaincode/go/marbles02/marbles_chaincode.go\uff09\n\u3002\u800c\u5176\u4ed6\u6279\u91cf\u67e5\u8be2\u65b9\u6cd5\uff08\u5982\uff1a\nGetQueryResult\n\uff09\u4f1a\u6709\u5e7b\u8bfb\u98ce\u9669\uff0c\u56e0\u6b64\u8fd9\u79cd\u67e5\u8be2\u5e94\u8be5\u53ea\u7528\u4e8e\u4e0d\u4f1a\u88ab\u63d0\u4ea4\u5230ordering\u7684\n\u53ea\u8bfb\u4ea4\u6613\n\uff0c\u9664\u975eapp\u80fd\u4fdd\u8bc1\u4ea4\u6613\u6a21\u62df\u548c\u4ea4\u6613\u9a8c\u8bc1\u63d0\u4ea4\u4e24\u9636\u6bb5\u4e4b\u95f4\u7ed3\u679c\u96c6\u7a33\u5b9a\u3002\n\n\n\u5982\u679c\u4ea4\u6613\u9a8c\u8bc1\u901a\u8fc7\uff0ccommitter\u5c31\u4f1a\u7528\nwrite set\n\u66f4\u65b0worldState\u3002\u5728\u66f4\u65b0\u9636\u6bb5\uff0c\nwrite set\n\u4e2d\u7684\u6bcf\u4e2akey\u5728worldState\u4e2d\u5bf9\u5e94\u7684value\u90fd\u4f1a\u88ab\u66f4\u65b0\uff0c\u7136\u540eworldState\u4e2d\u8fd9\u4e9bkey\u7684version\u4e5f\u4f1a\u968f\u7740\u66f4\u65b0\u3002\n\n\n\u4ea4\u6613\u6a21\u62df\u4e0e\u4ea4\u6613\u9a8c\u8bc1 \u793a\u4f8b\n\n\n\u672c\u8282\u901a\u8fc7\u793a\u4f8b\u573a\u666f\u5e2e\u52a9\u7406\u89e3read-write set\u3002\u5b58\u5728\u4e00\u4e2akey\u8bbe\u4e3a\nk\n\uff0c\u5728worldState\u4e2d\u7531\u5143\u7ec4\n(k,var,val)\n\u8868\u793a\uff0c\u5176\u4e2d\nver\n\u662f\nk\n\u7684\u6700\u65b0\u7684version\uff0c\nval\n\u662f\nk\n\u7684value\u3002\n\n\n\u73b0\u5728\u6709\u4e94\u4e2a\u4ea4\u6613\uff0c\u5206\u522b\u662f\nT1,T2,T3,T4,T5\n\uff0c\u8fd9\u4e94\u4e2a\u4ea4\u6613\u7684\u6a21\u62df\u8fc7\u7a0b\u662f\u9488\u5bf9\u76f8\u540c\u7684worldSate\u5feb\u7167\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u663e\u793a\u4e86\u6a21\u62df\u4ea4\u6613\u7684worldState\u5feb\u7167\u4ee5\u53ca\u6bcf\u4e2a\u4ea4\u6613\u6267\u884c\u8bfb\u5199\u7684\u987a\u5e8f\u3002\n\n\nWorld state: (k1,1,v1), (k2,1,v2), (k3,1,v3), (k4,1,v4), (k5,1,v5)\nT1 -\n Write(k1, v1'), Write(k2, v2')\nT2 -\n Read(k1), Write(k3, v3')\nT3 -\n Write(k2, v2'')\nT4 -\n Write(k2, v2'''), read(k2)\nT5 -\n Write(k6, v6'), read(k5)\n\n\n\n\u5047\u8bbe\u8fd9\u4e9b\u4ea4\u6613\u7684\u987a\u5e8f\u662fT1,\nT5\uff08\u53ef\u80fd\u5728\u540c\u4e00\u4e2ablock\u6216\u8005\u4e0d\u540cblock\uff09\n\n\n\n\nT1\n\u9a8c\u8bc1\u6210\u529f\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709read\u64cd\u4f5c\u3002\u4e4b\u540e\u5728worldState\u4e2d\u7684\nk1\n\u548c\nk2\n\u4f1a\u88ab\u66f4\u65b0\u6210\n(k1,2,v1'), (k2,2,v2')\n\n\nT2\n\u9a8c\u8bc1\u5931\u8d25\uff0c\u56e0\u4e3a\u5b83\u8bfb\u53d6\u7684\nk1\n\u5728\u4e4b\u524d\u7684\u4ea4\u6613\nT1\n\u4e2d\u88ab\u4fee\u6539\u4e86\n\uff08\u8bd1\u6ce8\uff1a\u9700\u8981\u7279\u522b\u6ce8\u610f\u4e00\u4e2a\u524d\u63d0\uff0c\u5373\u8fd9\u4e94\u4e2a\u4ea4\u6613\u7684\u6a21\u62df\u8fc7\u7a0b\u662f\u5bf9\u4e8e\u76f8\u540c\u7684worldState\u5feb\u7167\uff0c\u800c\u4e14T2\u53c8\u6709write\u64cd\u4f5c\uff0c\u6240\u4ee5T2\u4f1a\u8fdb\u5165commit\u9636\u6bb5\u8fdb\u884c\u9a8c\u8bc1\uff0c\u8fd9\u6837T2\u7684k1.ver=1\uff0cT1\u5b8c\u6210\u540e\u5b9e\u9645\u7684k1.ver=2\u4e86\uff0c\u7136\u540eT2\u5728commit\u6821\u9a8c\u662f\u5c31\u4f1a\u5931\u8d25\u3002\u4e5f\u5c31\u662f\u4e0a\u6587\u63d0\u5230\u7684\u4e00\u4e2a\u4ea4\u6613\u7684\u6a21\u62df\u548c\u63d0\u4ea4\u671f\u95f4\uff0c\u67d0key\u7684\u503c\u88ab\u4fee\u6539\u3002\u3002\u3002\n\u4f46\u662f\u6709\u4e2a\u7591\u95ee\uff0c\u6b63\u5e38\u4f7f\u7528\u4e2d\u5e94\u8be5\u4f1a\u7ecf\u5e38\u51fa\u73b0T1\u3001T2\u8fd9\u79cd\u987a\u5e8f\u7684\u60c5\u51b5\uff0c\u96be\u9053\u4f1a\u7ecf\u5e38\u53d1\u751f\u4ea4\u6613\u6821\u9a8c\u5931\u8d25\uff1f\uff1f\u5982\u679c\u5982\u6b64\uff0c\u90a3\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\u5c82\u4e0d\u5f88\u96be\u7528?\u6682\u6709\u6b64\u7591\uff0c\u6709\u5f85\u7814\u7a76\n\uff09\n\n\nT3\n\u9a8c\u8bc1\u6210\u529f\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709read\u64cd\u4f5c\u3002\u4e4b\u540e\u5728worldState\u4e2d\u7684\nk2\n\u4f1a\u88ab\u66f4\u65b0\u6210\n(k2,3,v2'')\n\n\nT4\n\u9a8c\u8bc1\u5931\u8d25\uff0c\u56e0\u4e3a\u5b83\u8bfb\u53d6\u7684\nk2\n\u5728\u4e4b\u524d\u7684\u4ea4\u6613\nT1\n\u4e2d\u88ab\u4fee\u6539\u4e86\n\n\nT5\n\u9a8c\u8bc1\u6210\u529f\uff0c\u56e0\u4e3a\u5b83\u8bfb\u53d6\u7684\nk5\n\u6ca1\u6709\u5728\u4e4b\u524d\u7684\u4efb\u4f55\u4ea4\u6613\u4e2d\u4fee\u6539\n\n\n\n\n\u6ce8\u610f\uff1a\n\u4ea4\u6613\u4e0d\u652f\u6301\u591aread-write set", 
            "title": "Read-Write set"
        }, 
        {
            "location": "/read-write-set/#read-write-set", 
            "text": "\u5728\u80cc\u4e66\u8282\u70b9\u4e0a\u7684\u4ea4\u6613\u6a21\u62df\u671f\u95f4\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4ea4\u6613\u7684read-write set\u3002 read set \u5305\u542b\u5728\u6a21\u62df\u671f\u95f4\u4ea4\u6613\u8bfb\u53d6\u5230\u7684\u552f\u4e00key\u53ca\u5bf9\u5e94version\u3002 write set \u4ea4\u6613\u6539\u5199\u7684\u552f\u4e00key\uff08\u53ef\u80fd\u4e0e read set \u4e2d\u7684key\u91cd\u53e0\uff09\u53ca\u5bf9\u5e94\u7684\u65b0value\u3002\u5982\u679c\u4ea4\u6613\u7684\u66f4\u65b0\u64cd\u4f5c\u662f\u5220\u9664\u4e00\u4e2akey\uff0c\u5219\u5728 write set \u4e3a\u8be5key\u8bbe\u7f6e\u4e00\u4e2adelete\u6807\u8bb0\u3002  \u6b64\u5916\uff0c\u5982\u679c\u4ea4\u6613\u4e2d\u5bf9\u4e00\u4e2akey\u6539\u5199\u591a\u6b21\uff0c\u5219\u53ea\u4fdd\u7559\u6700\u540e\u7684\u4fee\u6539\u503c\u3002\u5982\u679c\u4ea4\u6613\u4e2d\u8bfb\u53d6\u4e00\u4e2akey\u7684\u503c\uff0c\u5373\u4f7f\u4ea4\u6613\u5728\u8bfb\u53d6\u4e4b\u524d\u66f4\u65b0\u4e86\u8be5key\u7684\u503c\uff0c\u8bfb\u53d6\u5230\u7684\u4e5f\u4f1a\u662f\u4e4b\u524d\u63d0\u4ea4\u8fc7\u7684\u800c\u4e0d\u662f\u521a\u66f4\u65b0\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e0d\u80fd\u8bfb\u53d6\u5230\u540c\u4e00\u4ea4\u6613\u4e2d\u4fee\u6539\u7684\u503c\u3002  \u5982\u524d\u6240\u8ff0\uff0ckey\u7684version\u53ea\u8bb0\u5f55\u5728 read set \uff1b write set \u53ea\u5305\u542bkey\u53ca\u5bf9\u5e94\u65b0value\u3002  \u5bf9\u4e8e read set \u7684version\u7684\u5b9e\u73b0\u6709\u5f88\u591a\u79cd\u65b9\u6848\uff0c\u6700\u57fa\u672c\u8981\u6c42\u5c31\u662f\u4e3akey\u751f\u6210\u4e00\u4e2a\u975e\u91cd\u590d\u6807\u8bc6\u7b26\u3002\u4f8b\u5982\u7528\u9012\u589e\u7684\u5e8f\u53f7\u4f5c\u4e3aversion\u3002\u5728\u76ee\u524d\u7684\u4ee3\u7801\u5b9e\u73b0\u4e2d\u6211\u4eec\u4f7f\u7528\u4e86blockchain height\u4f5c\u4e3aversion\u65b9\u6848\uff0c\u5c31\u662f\u7528\u4ea4\u6613\u7684height\u4f5c\u4e3a\u8be5\u4ea4\u6613\u6240\u4fee\u6539\u7684key\u7684version\u3002\u4ea4\u6613height\u7531\u4e00\u4e2a\u7ed3\u6784\u8868\u793a\uff08\u89c1\u4e0b\u9762Height struc\uff09\uff0c\u5176\u4e2dTxNum\u8868\u793a\u8fd9\u4e2atx\u5728block\u4e2d\u7684height\uff08\u8bd1\u6ce8\uff1a\u4e5f\u5c31\u662f\u4ea4\u6613\u5728\u533a\u5757\u4e2d\u7684\u987a\u5e8f\uff09\u3002\u8be5\u65b9\u6848\u76f8\u8f83\u4e8e\u9012\u589e\u5e8f\u53f7\u6709\u5f88\u591a\u4f18\u70b9 \u4e3b\u8981\u662f\u8fd9\u6837\u7684version\u53ef\u4ee5\u5f88\u597d\u5730\u5229\u7528\u5230\u8bf8\u5982statedb\u3001\u4ea4\u6613\u6a21\u62df\u548c\u6821\u9a8c\u8fd9\u4e9b\u6a21\u5757\u4e2d\u3002  \u6b64\u5916\uff0c\u5982\u679c\u6a21\u62df\u4ea4\u6613\u4e2d\u6267\u884c\u4e86\u6279\u91cf\u67e5\u8be2\uff08range query\uff09\uff0c\u6279\u91cf\u67e5\u8be2\u7ed3\u679c\u4f1a\u88ab\u653e\u5230read-write set\u4e2d\u7684 query-info \u3002  // \u8bd1\u6ce8\n\n// read-write set \u7ed3\u6784\ntype TxReadWriteSet struct {\n    NsRWs []*NsReadWriteSet\n}\ntype NsReadWriteSet struct {\n    NameSpace        string\n    Reads            []*KVRead\n    Writes           []*KVWrite\n    RangeQueriesInfo []*RangeQueryInfo\n}\ntype RangeQueryInfo struct {\n    StartKey     string\n    EndKey       string\n    ItrExhausted bool\n    Results      []*KVRead\n    ResultHash   *MerkleSummary\n}\ntype MerkleSummary struct {\n    MaxDegree      int\n    MaxLevel       MerkleTreeLevel\n    MaxLevelHashes []Hash\n}\ntype MerkleTreeLevel int\ntype Hash []byte\n\n// read set \u7ed3\u6784\ntype KVRead struct {\n    Key     string\n    Version *Height\n}\ntype Height struct {\n    BlockNum uint64\n    TxNum    uint64\n}\n\n// write set \u7ed3\u6784\ntype KVWrite struct {\n    Key      string\n    IsDelete bool\n    Value    []byte\n}  \u4e0b\u9762\u662f\u4e00\u4e2a\u5047\u8bbe\u7684\u4ea4\u6613\u6a21\u62df\u751f\u6210\u7684read-write set\u793a\u4f8b\uff0c\u7b80\u5355\u8d77\u89c1\uff0c\u793a\u4f8b\u4e2d\u4f7f\u7528\u4e86\u9012\u589e\u5e8f\u53f7\u4f5c\u4e3aversion\u3002  TxReadWriteSet \n   NsReadWriteSet name=\"chaincode1\" \n     read-set \n       read key=\"K1\", version=\"1\" \n       read key=\"K2\", version=\"1\" \n     /read-set \n     write-set \n       write key=\"K1\", value=\"V1\" \n       write key=\"K3\", value=\"V2\" \n       write key=\"K4\", isDelete=\"true\" \n     /write-set \n   /NsReadWriteSet  TxReadWriteSet", 
            "title": "\u4ea4\u6613\u6a21\u62df\u548cread-write set"
        }, 
        {
            "location": "/read-write-set/#read-write-set-worldstate", 
            "text": "\u63d0\u4ea4\u8282\u70b9\uff08committer\uff09\u5229\u7528 read set \u90e8\u5206\u6821\u9a8c\u4ea4\u6613\u7684\u6709\u6548\u6027\uff1b\u7528 write set \u90e8\u5206\u66f4\u65b0key\u7684version\u548cvalue\u3002  \u5728\u9a8c\u8bc1\u9636\u6bb5\uff0c\u5982\u679c read set \u4e2d\u6bcf\u4e2akey\u7684version\u90fd\u4e0estateDB\u4e2d\u5bf9\u5e94worldState\uff08\u5047\u8bbe\u6240\u6709\u4e4b\u524d\u7684\u6709\u6548\u4ea4\u6613\uff0c\u5305\u62ec\u540c\u4e00\u4e2ablock\u4e2d\u7684\u4ea4\u6613\uff0c\u90fd\u5df2\u7ecf\u63d0\u4ea4\u5b8c\u6210\uff0c\u5373\u5df2\u66f4\u65b0ledger\uff09\u7684version\u76f8\u5339\u914d\uff0c\u5219\u8ba4\u4e3a\u6b64\u4ea4\u6613\u6709\u6548\u3002  \u5982\u679cread-write set\u4e2d\u5305\u542b query-info \uff0c\u5219\u8fd8\u8981\u5bf9\u6b64\u6267\u884c\u989d\u5916\u7684\u6821\u9a8c\u3002\u8be5\u6821\u9a8c\u786e\u4fdd\u5728\u6b64\u6279\u91cf\u67e5\u8be2\u7684\u7ed3\u679c\u8303\u56f4\u5185\u6ca1\u6709key\u88ab\u589e\u5220\u6539\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u5728\u9a8c\u8bc1\u9636\u6bb5\u91cd\u65b0\u6267\u884c\u8be5\u6279\u91cf\u67e5\u8be2\uff08\u6a21\u62df\u671f\u95f4\u6267\u884c\u7684\u4ea4\u6613\uff09\u5e94\u8be5\u4ea7\u751f\u4e0e\u6a21\u62df\u4ea4\u6613\u671f\u95f4\u76f8\u540c\u7684\u7ed3\u679c\u3002\u6b64\u6821\u9a8c\u786e\u4fdd\u4ea4\u6613\u5728\u63d0\u4ea4\u65f6\u51fa\u73b0\u5e7b\u8bfb\u4f1a\u88ab\u8ba4\u4e3a\u65e0\u6548\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u5e7b\u8bfb\u4fdd\u62a4\u4ec5\u9650\u4e8eChaincode\u7684 GetStateByRange \u548c GetStateByPartialCompositeKey \u4e24\u4e2a\u65b9\u6cd5 \uff08\u8bd1\u6ce8\uff1a\u6b64\u5904\u6587\u6863\u4e0a\u63d0\u5230\u7684\u662f GetStateByRange \u548c GetQueryResult \u4e24\u4e2a\u65b9\u6cd5\uff0c\u4f46\u5728\u4ee3\u7801\u91cc\u7684\u6ce8\u91ca\u5374\u4e0d\u662f\u8fd9\u6837\uff0c\u6b64\u5904\u4ee5\u4ee3\u7801\u4e3a\u51c6\u3002\u8be6\u89c1fabric/examples/chaincode/go/marbles02/marbles_chaincode.go\uff09 \u3002\u800c\u5176\u4ed6\u6279\u91cf\u67e5\u8be2\u65b9\u6cd5\uff08\u5982\uff1a GetQueryResult \uff09\u4f1a\u6709\u5e7b\u8bfb\u98ce\u9669\uff0c\u56e0\u6b64\u8fd9\u79cd\u67e5\u8be2\u5e94\u8be5\u53ea\u7528\u4e8e\u4e0d\u4f1a\u88ab\u63d0\u4ea4\u5230ordering\u7684 \u53ea\u8bfb\u4ea4\u6613 \uff0c\u9664\u975eapp\u80fd\u4fdd\u8bc1\u4ea4\u6613\u6a21\u62df\u548c\u4ea4\u6613\u9a8c\u8bc1\u63d0\u4ea4\u4e24\u9636\u6bb5\u4e4b\u95f4\u7ed3\u679c\u96c6\u7a33\u5b9a\u3002  \u5982\u679c\u4ea4\u6613\u9a8c\u8bc1\u901a\u8fc7\uff0ccommitter\u5c31\u4f1a\u7528 write set \u66f4\u65b0worldState\u3002\u5728\u66f4\u65b0\u9636\u6bb5\uff0c write set \u4e2d\u7684\u6bcf\u4e2akey\u5728worldState\u4e2d\u5bf9\u5e94\u7684value\u90fd\u4f1a\u88ab\u66f4\u65b0\uff0c\u7136\u540eworldState\u4e2d\u8fd9\u4e9bkey\u7684version\u4e5f\u4f1a\u968f\u7740\u66f4\u65b0\u3002", 
            "title": "\u4f7f\u7528read-write set \u9a8c\u8bc1\u4ea4\u6613\u548c\u66f4\u65b0worldState"
        }, 
        {
            "location": "/read-write-set/#_1", 
            "text": "\u672c\u8282\u901a\u8fc7\u793a\u4f8b\u573a\u666f\u5e2e\u52a9\u7406\u89e3read-write set\u3002\u5b58\u5728\u4e00\u4e2akey\u8bbe\u4e3a k \uff0c\u5728worldState\u4e2d\u7531\u5143\u7ec4 (k,var,val) \u8868\u793a\uff0c\u5176\u4e2d ver \u662f k \u7684\u6700\u65b0\u7684version\uff0c val \u662f k \u7684value\u3002  \u73b0\u5728\u6709\u4e94\u4e2a\u4ea4\u6613\uff0c\u5206\u522b\u662f T1,T2,T3,T4,T5 \uff0c\u8fd9\u4e94\u4e2a\u4ea4\u6613\u7684\u6a21\u62df\u8fc7\u7a0b\u662f\u9488\u5bf9\u76f8\u540c\u7684worldSate\u5feb\u7167\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u663e\u793a\u4e86\u6a21\u62df\u4ea4\u6613\u7684worldState\u5feb\u7167\u4ee5\u53ca\u6bcf\u4e2a\u4ea4\u6613\u6267\u884c\u8bfb\u5199\u7684\u987a\u5e8f\u3002  World state: (k1,1,v1), (k2,1,v2), (k3,1,v3), (k4,1,v4), (k5,1,v5)\nT1 -  Write(k1, v1'), Write(k2, v2')\nT2 -  Read(k1), Write(k3, v3')\nT3 -  Write(k2, v2'')\nT4 -  Write(k2, v2'''), read(k2)\nT5 -  Write(k6, v6'), read(k5)  \u5047\u8bbe\u8fd9\u4e9b\u4ea4\u6613\u7684\u987a\u5e8f\u662fT1, T5\uff08\u53ef\u80fd\u5728\u540c\u4e00\u4e2ablock\u6216\u8005\u4e0d\u540cblock\uff09   T1 \u9a8c\u8bc1\u6210\u529f\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709read\u64cd\u4f5c\u3002\u4e4b\u540e\u5728worldState\u4e2d\u7684 k1 \u548c k2 \u4f1a\u88ab\u66f4\u65b0\u6210 (k1,2,v1'), (k2,2,v2')  T2 \u9a8c\u8bc1\u5931\u8d25\uff0c\u56e0\u4e3a\u5b83\u8bfb\u53d6\u7684 k1 \u5728\u4e4b\u524d\u7684\u4ea4\u6613 T1 \u4e2d\u88ab\u4fee\u6539\u4e86 \uff08\u8bd1\u6ce8\uff1a\u9700\u8981\u7279\u522b\u6ce8\u610f\u4e00\u4e2a\u524d\u63d0\uff0c\u5373\u8fd9\u4e94\u4e2a\u4ea4\u6613\u7684\u6a21\u62df\u8fc7\u7a0b\u662f\u5bf9\u4e8e\u76f8\u540c\u7684worldState\u5feb\u7167\uff0c\u800c\u4e14T2\u53c8\u6709write\u64cd\u4f5c\uff0c\u6240\u4ee5T2\u4f1a\u8fdb\u5165commit\u9636\u6bb5\u8fdb\u884c\u9a8c\u8bc1\uff0c\u8fd9\u6837T2\u7684k1.ver=1\uff0cT1\u5b8c\u6210\u540e\u5b9e\u9645\u7684k1.ver=2\u4e86\uff0c\u7136\u540eT2\u5728commit\u6821\u9a8c\u662f\u5c31\u4f1a\u5931\u8d25\u3002\u4e5f\u5c31\u662f\u4e0a\u6587\u63d0\u5230\u7684\u4e00\u4e2a\u4ea4\u6613\u7684\u6a21\u62df\u548c\u63d0\u4ea4\u671f\u95f4\uff0c\u67d0key\u7684\u503c\u88ab\u4fee\u6539\u3002\u3002\u3002 \u4f46\u662f\u6709\u4e2a\u7591\u95ee\uff0c\u6b63\u5e38\u4f7f\u7528\u4e2d\u5e94\u8be5\u4f1a\u7ecf\u5e38\u51fa\u73b0T1\u3001T2\u8fd9\u79cd\u987a\u5e8f\u7684\u60c5\u51b5\uff0c\u96be\u9053\u4f1a\u7ecf\u5e38\u53d1\u751f\u4ea4\u6613\u6821\u9a8c\u5931\u8d25\uff1f\uff1f\u5982\u679c\u5982\u6b64\uff0c\u90a3\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\u5c82\u4e0d\u5f88\u96be\u7528?\u6682\u6709\u6b64\u7591\uff0c\u6709\u5f85\u7814\u7a76 \uff09  T3 \u9a8c\u8bc1\u6210\u529f\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709read\u64cd\u4f5c\u3002\u4e4b\u540e\u5728worldState\u4e2d\u7684 k2 \u4f1a\u88ab\u66f4\u65b0\u6210 (k2,3,v2'')  T4 \u9a8c\u8bc1\u5931\u8d25\uff0c\u56e0\u4e3a\u5b83\u8bfb\u53d6\u7684 k2 \u5728\u4e4b\u524d\u7684\u4ea4\u6613 T1 \u4e2d\u88ab\u4fee\u6539\u4e86  T5 \u9a8c\u8bc1\u6210\u529f\uff0c\u56e0\u4e3a\u5b83\u8bfb\u53d6\u7684 k5 \u6ca1\u6709\u5728\u4e4b\u524d\u7684\u4efb\u4f55\u4ea4\u6613\u4e2d\u4fee\u6539   \u6ce8\u610f\uff1a \u4ea4\u6613\u4e0d\u652f\u6301\u591aread-write set", 
            "title": "\u4ea4\u6613\u6a21\u62df\u4e0e\u4ea4\u6613\u9a8c\u8bc1 \u793a\u4f8b"
        }, 
        {
            "location": "/gossip_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nXiao Zhang\n\n\n\n\n\n\n\n\n\n\nHyperledger Fabric optimizes blockchain network performance, security and scalability by dividing workload across transaction execution (endorsing and committing) peers and transaction ordering nodes. This decoupling of network operations requires a secure, reliable and scalable data dissemination protocol to ensure data integrity and consistency. To meet these requirements, the fabric implements a \ngossip data dissemination protocol\n.\n\n\nHyperLedger Fabric\u901a\u8fc7\u628a\u5de5\u4f5c\u8282\u70b9\u5206\u89e3\u4e3a\u6267\u884c\u4ea4\u6613\uff08\u80cc\u4e66\u548c\u63d0\u4ea4\uff09\u8282\u70b9\u548c\u4ea4\u6613\u6392\u5e8f\u8282\u70b9\u6765\u4f18\u5316\u533a\u5757\u94fe\u7f51\u7edc\u6027\u80fd\uff0c\u5b89\u5168\u6027\u548c\u53ef\u6269\u5c55\u6027\u3002\u8fd9\u79cd\u89e3\u8026\u7f51\u7edc\u64cd\u4f5c\u7684\u65b9\u5f0f\u9700\u8981\u4e00\u4e2a\u5b89\u5168\u3001\u53ef\u9760\u3001\u53ef\u6269\u5c55\u7684\u6570\u636e\u5206\u53d1\u534f\u8bae\u6765\u4fdd\u8bc1\u6570\u636e\u7684\u5b8c\u6574\u6027\u548c\u4e00\u81f4\u6027\u3002\u4e3a\u4e86\u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42\uff0cFabric\u5e94\u7528\u4e86\nGossip\u6570\u636e\u5206\u53d1\u534f\u8bae\n\u3002\n\n\nGossip\u534f\u8bae(Gossip protocol)\n\n\nPeers leverage gossip to broadcast ledger and channel data in a scalable fashion. Gossip messaging is continuous, and each peer on a channel is constantly receiving current and consistent ledger data, from multiple peers. Each gossiped message is signed, thereby allowing Byzantine participants sending faked messages to be easily identified and the distribution of the message(s) to unwanted targets to be prevented. Peers affected by delays, network partitions or other causations resulting in missed blocks, will eventually be synced up to the current ledger state by contacting peers in possession of these missing blocks.\n\n\n\u8282\u70b9\u5229\u7528Gossip\u6765\u4ee5\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u65b9\u5f0f\u5e7f\u64ad\u8d26\u672c\u548c\u901a\u9053\u6570\u636e\u3002Gossip\u51fa\u6765\u6d88\u606f\u662f\u8fde\u7eed\u7684\uff0c\u5e76\u4e14\u901a\u9053\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u5728\u4e0d\u65ad\u5730\u63a5\u6536\u5f53\u524d\u6765\u81ea\u591a\u4e2a\u8282\u70b9\u7684\u8d26\u672c\u4e2d\u5df2\u8fbe\u6210\u4e00\u81f4\u6027\u7684\u6570\u636e\u3002\u6bcf\u4e2a\u901a\u8fc7Gossip\u4f20\u8f93\u7684\u6d88\u606f\u90fd\u4f1a\u88ab\u7b7e\u540d\uff0c\u56e0\u6b64\u7531\u62dc\u5360\u5ead\u8282\u70b9\u53d1\u9001\u7684\u4f2a\u9020\u7684\u6d88\u606f\u5c06\u4f1a\u5f88\u5bb9\u6613\u5730\u88ab\u8bc6\u522b\u51fa\u6765\uff0c\u800c\u4e14\u53ef\u4ee5\u9632\u6b62\u5c06\u6d88\u606f\u5206\u53d1\u5230\u4e0d\u5e0c\u671b\u53d1\u9001\u7684\u76ee\u6807\u5904\u3002\u8282\u70b9\u56e0\u4e3a\u53d7\u5230\u5ef6\u8fdf\u3001\u7f51\u7edc\u5206\u533a\u6216\u8005\u5176\u4ed6\u539f\u56e0\u7684\u5f71\u54cd\u5bfc\u81f4\u7f3a\u5c11\u90e8\u5206\u533a\u5757\u7684\u60c5\u51b5\uff0c\u6700\u7ec8\u5c06\u901a\u8fc7\u8054\u7cfb\u5df2\u62e5\u6709\u8fd9\u4e9b\u7f3a\u5931\u7684\u533a\u5757\u7684\u8282\u70b9\u7684\u65b9\u5f0f\uff0c\u4e0e\u5f53\u524d\u8d26\u672c\u72b6\u6001\u8fdb\u884c\u540c\u6b65\u3002\n\n\nThe gossip-based data dissemination protocol performs three primary functions on a Fabric network:\n1.  Manages peer discovery and channel membership, by continually identifying available member peers, and eventually detecting peers that have gone offline.\n2.  Disseminates ledger data across all peers on a channel. Any peer with data that is out of sync with the rest of the channel identifies the missing blocks and syncs itself by copying the correct data.\n3.  Bring newly connected peers up to speed by allowing peer-to-peer state transfer update of ledger data.\n\n\n\u57fa\u4e8eGossip\u7684\u6570\u636e\u4f20\u64ad\u534f\u8bae\u5728Fabric\u7f51\u7edc\u4e0a\u6267\u884c\u4e09\u4e2a\u4e3b\u8981\u529f\u80fd\uff1a\n1.  \u901a\u8fc7\u4e0d\u65ad\u8bc6\u522b\u53ef\u7528\u7684\u6210\u5458\u8282\u70b9\u5e76\u6700\u7ec8\u76d1\u6d4b\u8282\u70b9\u79bb\u7ebf\u72b6\u6001\u7684\u65b9\u5f0f\uff0c\u5bf9\u8282\u70b9\u7684\u53d1\u73b0\u548c\u901a\u9053\u4e2d\u7684\u6210\u5458\u8fdb\u884c\u7ba1\u7406\u3002\n2.  \u901a\u8fc7\u901a\u9053\u4e2d\u7684\u6240\u6709\u8282\u70b9\u6765\u5206\u53d1\u8d26\u672c\u6570\u636e\u3002\u4efb\u4f55\u6570\u636e\u672a\u540c\u6b65\u7684\u8282\u70b9\u90fd\u53ef\u4ee5\u901a\u8fc7\u901a\u9053\u4e2d\u5176\u4ed6\u8282\u70b9\u6765\u6807\u8bc6\u7f3a\u5931\u7684\u533a\u5757\uff0c\u5e76\u901a\u8fc7\u590d\u5236\u6b63\u786e\u7684\u6570\u636e\u6765\u8fdb\u884c\u540c\u6b65\u3002\n3.  \u901a\u8fc7\u5141\u8bb8\u70b9\u5bf9\u70b9\u72b6\u6001\u4f20\u8f93\u66f4\u65b0\u8d26\u672c\u6570\u636e\uff0c\u4f7f\u65b0\u52a0\u5165\u8fde\u63a5\u7684\u8282\u70b9\u5feb\u901f\u5f97\u5230\u540c\u6b65\u3002\n\n\nGossip-based broadcasting operates by peers receiving messages from other peers on the channel, and then forwarding these messages to a number of randomly-selected peers on the channel, where this number is a configurable constant. Peers can also exercise a pull mechanism, rather than waiting for delivery of a message. This cycle repeats, with the result of channel membership, ledger and state information continually being kept current and in sync. For dissemination of new blocks, the \nleader\n peer on the channel pulls the data from the ordering service and initiates gossip dissemination to peers.\n\n\n\u57fa\u4e8eGossip\u7684\u5e7f\u64ad\u7531\u8282\u70b9\u63a5\u6536\u6765\u81ea\u8be5\u901a\u9053\u4e2d\u7684\u5176\u4ed6\u8282\u70b9\u7684\u6d88\u606f\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u6d88\u606f\u8f6c\u53d1\u5230\u901a\u9053\u4e0a\u7684\u591a\u4e2a\u968f\u673a\u9009\u62e9\u7684\u8282\u70b9\u3002\u8fd9\u4e2a\u8282\u70b9\u6570\u662f\u4e2a\u53ef\u914d\u7f6e\u7684\u5e38\u6570\u3002\u8282\u70b9\u4e5f\u53ef\u4ee5\u4e3b\u52a8\u62c9\u53d6\u6d88\u606f\uff0c\u800c\u4e0d\u662f\u7b49\u5f85\u6d88\u606f\u53d1\u9001\u3002\u5faa\u73af\u91cd\u590d\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u4f7f\u901a\u9053\u4e2d\u6210\u5458\u7684\u8d26\u672c\u548c\u72b6\u6001\u4fe1\u606f\u4e0d\u65ad\u4fdd\u6301\u548c\u5f53\u524d\u6700\u65b0\u72b6\u6001\u540c\u6b65\u3002\u4e3a\u4e86\u4f20\u64ad\u65b0\u533a\u5757\uff0c\u901a\u9053\u4e2d\u7684\n\u9886\u5bfc\u8005\n\u8282\u70b9\u4ece\u6392\u5e8f\u670d\u52a1\u4e2d\u62c9\u53d6\u6570\u636e\uff0c\u5e76\u5411\u5176\u4ed6\u8282\u70b9\u53d1\u9001Gossip\u6d88\u606f\u3002\n\n\nGossip\u6d88\u606f\u4f20\u8f93(Gossip messaging)\n\n\nOnline peers indicate their availability by continually broadcasting \u201calive\u201d messages, with each containing the \npublic key infrastructure (PKI)\n ID and the signature of the sender over the message. Peers maintain channel membership by collecting these alive messages; if no peer receives an alive message from a specific peer, this \u201cdead\u201d peer is eventually purged from channel membership. Because \u201calive\u201d messages are cryptographically signed, malicious peers can never impersonate other peers, as they lack a signing key authorized by a root certificate authority (CA).\n\n\n\u5728\u7ebf\u7684\u8282\u70b9\u901a\u8fc7\u6301\u7eed\u5730\u5e7f\u64ad\u201c\u6d3b\u8dc3\u201d\u6d88\u606f\u6765\u8868\u660e\u4ed6\u4eec\u7684\u53ef\u7528\u6027\uff0c\u6bcf\u6761\u6d88\u606f\u90fd\u5305\u542b\n\u516c\u94a5\u57fa\u7840\u8bbe\u65bd\uff08PKI\uff09\n\u7684ID\u548c\u6d88\u606f\u53d1\u9001\u8005\u5bf9\u6d88\u606f\u7684\u7b7e\u540d\u3002\u8282\u70b9\u901a\u8fc7\u6536\u96c6\u8fd9\u4e9b\u6d3b\u8dc3\u6d88\u606f\u6765\u7ef4\u62a4\u901a\u9053\u6210\u5458\u8eab\u4efd\u3002\u5982\u679c\u6ca1\u6709\u8282\u70b9\u80fd\u4ece\u67d0\u4e2a\u7279\u5b9a\u7684\u8282\u70b9\u6536\u5230\u6d3b\u8dc3\u6d88\u606f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u201c\u6b7b\u4ea1\u201d\u7684\u8282\u70b9\u6700\u7ec8\u5c06\u4ece\u901a\u9053\u6210\u5458\u8eab\u4efd\u5217\u8868\u4e2d\u88ab\u5220\u9664\u3002\u7531\u4e8e\u201c\u6d3b\u8dc3\u201d\u4fe1\u606f\u662f\u901a\u8fc7\u5bc6\u7801\u5b66\u7b97\u6cd5\u8fdb\u884c\u7b7e\u540d\u7684\uff0c\u56e0\u6b64\u6076\u610f\u8282\u70b9\u65e0\u6cd5\u4f2a\u88c5\u6210\u5176\u4ed6\u8282\u70b9\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7f3a\u5c11\u6839\u8bc1\u4e66\u9881\u53d1\u673a\u6784\uff08CA\uff09\u6388\u6743\u7684\u7b7e\u540d\u5bc6\u94a5\u3002\n\n\nIn addition to the automatic forwarding of received messages, a state reconciliation process synchronizes \nworld state\n across peers on each channel. Each peer continually pulls blocks from other peers on the channel, in order to repair its own state if discrepancies are identified. Because fixed connectivity is not required to maintain gossip-based data dissemination, the process reliably provides data consistency and integrity to the shared ledger, including tolerance for node crashes.\n\n\n\u9664\u4e86\u5c06\u63a5\u6536\u5230\u7684\u6d88\u606f\u7684\u81ea\u52a8\u8f6c\u53d1\u4e4b\u5916\uff0c\u72b6\u6001\u534f\u7a0b\u8fd8\u4f1a\u5728\u6bcf\u4e2a\u901a\u9053\u4e0a\u540c\u6b65\u8282\u70b9\u95f4\u7684\n\u4e16\u754c\u72b6\u6001\n\u3002\u6bcf\u4e2a\u8282\u70b9\u4e0d\u505c\u5730\u4ece\u901a\u9053\u4e2d\u7684\u5176\u4ed6\u8282\u70b9\u4e2d\u63d0\u53d6\u533a\u5757\uff0c\u4ee5\u4fbf\u5728\u51fa\u73b0\u5dee\u5f02\u65f6\u4fee\u6b63\u81ea\u5df1\u7684\u72b6\u6001\u3002\u7531\u4e8e\u4e0d\u9700\u8981\u56fa\u5b9a\u8fde\u63a5\u6765\u7ef4\u62a4\u57fa\u4e8eGossip\u7684\u6570\u636e\u4f20\u64ad\uff0c\u56e0\u6b64\u8be5\u6d41\u7a0b\u53ef\u4ee5\u53ef\u9760\u5730\u4e3a\u5171\u4eab\u8d26\u672c\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u548c\u5b8c\u6574\u6027\uff0c\u5305\u62ec\u5bf9\u8282\u70b9\u5d29\u6e83\u7684\u5bb9\u9519\u3002\n\n\nBecause channels are segregated, peers on one channel cannot message or share information on any other channel. Though any peer can belong to multiple channels, partitioned messaging prevents blocks from being disseminated to peers that are not in the channel by applying message routing policies based on peers\u2019 channel subscriptions.\n\n\n\u7531\u4e8e\u901a\u9053\u4e4b\u95f4\u76f8\u4e92\u9694\u79bb\uff0c\u4e00\u4e2a\u901a\u9053\u4e0a\u7684\u8282\u70b9\u4e0d\u80fd\u5728\u5176\u4ed6\u4efb\u4f55\u901a\u9053\u4e0a\u53d1\u9001\u6216\u5171\u4eab\u4fe1\u606f\u3002\u5c3d\u7ba1\u4efb\u4f55\u8282\u70b9\u90fd\u53ef\u80fd\u5c5e\u4e8e\u591a\u4e2a\u901a\u9053\uff0c\u4f46\u662f\u901a\u8fc7\u5c06\u57fa\u4e8e\u8282\u70b9\u901a\u9053\u8ba2\u9605\u7684\u673a\u5236\u4f5c\u4e3a\u6d88\u606f\u5206\u53d1\u7b56\u7565\uff0c\u8282\u70b9\u65e0\u6cd5\u5c06\u88ab\u5206\u9694\u5f00\u7684\u6d88\u606f\u4f20\u64ad\u7ed9\u4e0d\u5728\u901a\u9053\u4e2d\u7684\u8282\u70b9\u3002\n\n\nNotes:\n\n1. Security of point-to-point messages are handled by the peer TLS layer, and do not require signatures. Peers are authenticated by their certificates, which are assigned by a CA. Although TLS certs are also used, it is the peer certificates that are authenticated in the gossip layer. Ledger blocks are signed by the ordering service, and then delivered to the leader peers on a channel. 2. Authentication is governed by the membership service provider for the peer. When the peer connects to the channel for the first time, the TLS session binds with fabric membership identity. This essentially authenticates each peer to the connecting peer, with respect to membership in the network and channel.\n\n\n\u6ce8\u610f\uff1a\n\n1.  \u70b9\u5bf9\u70b9\u6d88\u606f\u7684\u5b89\u5168\u6027\u7531\u8282\u70b9\u7684TLS\u5c42\u5904\u7406\uff0c\u4e0d\u9700\u8981\u7b7e\u540d\u3002\u8282\u70b9\u901a\u8fc7\u5176\u7531CA\u5206\u914d\u7684\u8bc1\u4e66\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002\u8282\u70b9\u5728Gossip\u5c42\u7684\u8eab\u4efd\u8ba4\u8bc1\u4f1a\u901a\u8fc7TLS\u8bc1\u4e66\u4f53\u73b0\u3002\u8d26\u672c\u4e2d\u7684\u533a\u5757\u7531\u6392\u5e8f\u670d\u52a1\u8fdb\u884c\u7b7e\u540d\uff0c\u7136\u540e\u4f20\u9012\u7ed9\u901a\u9053\u4e2d\u7684\u9886\u5bfc\u8005\u8282\u70b9\u3002\n2.  \u8ba4\u8bc1\u8fc7\u7a0b\u7531\u8282\u70b9\u7684\u6210\u5458\u7ba1\u7406\u670d\u52a1\u7684\u63d0\u4f9b\u8005\u8fdb\u884c\u7ba1\u7406\u3002\u5f53\u8282\u70b9\u7b2c\u4e00\u6b21\u8fde\u63a5\u5230\u901a\u9053\u4e2d\u7684\u65f6\u5019\uff0cTLS\u4f1a\u8bdd\u5c06\u4e0eFabric\u6210\u5458\u8eab\u4efd\u7ed1\u5b9a\u3002\u8fd9\u6837\u672c\u8d28\u4e0a\u4f7f\u6bcf\u4e2a\u8282\u70b9\u4e0e\u76f8\u8fde\u7684\u8282\u70b9\u8fdb\u884c\u8ba4\u8bc1\uff0c\u4ece\u800c\u4e0e\u7f51\u7edc\u548c\u901a\u9053\u4e2d\u7684\u6210\u5458\u8eab\u4efd\u5173\u8054\u8d77\u6765\u3002", 
            "title": "Gossip\u6570\u636e\u4f20\u8f93\u534f\u8bae"
        }, 
        {
            "location": "/gossip_zh/#gossipgossip-protocol", 
            "text": "Peers leverage gossip to broadcast ledger and channel data in a scalable fashion. Gossip messaging is continuous, and each peer on a channel is constantly receiving current and consistent ledger data, from multiple peers. Each gossiped message is signed, thereby allowing Byzantine participants sending faked messages to be easily identified and the distribution of the message(s) to unwanted targets to be prevented. Peers affected by delays, network partitions or other causations resulting in missed blocks, will eventually be synced up to the current ledger state by contacting peers in possession of these missing blocks.  \u8282\u70b9\u5229\u7528Gossip\u6765\u4ee5\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u65b9\u5f0f\u5e7f\u64ad\u8d26\u672c\u548c\u901a\u9053\u6570\u636e\u3002Gossip\u51fa\u6765\u6d88\u606f\u662f\u8fde\u7eed\u7684\uff0c\u5e76\u4e14\u901a\u9053\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u5728\u4e0d\u65ad\u5730\u63a5\u6536\u5f53\u524d\u6765\u81ea\u591a\u4e2a\u8282\u70b9\u7684\u8d26\u672c\u4e2d\u5df2\u8fbe\u6210\u4e00\u81f4\u6027\u7684\u6570\u636e\u3002\u6bcf\u4e2a\u901a\u8fc7Gossip\u4f20\u8f93\u7684\u6d88\u606f\u90fd\u4f1a\u88ab\u7b7e\u540d\uff0c\u56e0\u6b64\u7531\u62dc\u5360\u5ead\u8282\u70b9\u53d1\u9001\u7684\u4f2a\u9020\u7684\u6d88\u606f\u5c06\u4f1a\u5f88\u5bb9\u6613\u5730\u88ab\u8bc6\u522b\u51fa\u6765\uff0c\u800c\u4e14\u53ef\u4ee5\u9632\u6b62\u5c06\u6d88\u606f\u5206\u53d1\u5230\u4e0d\u5e0c\u671b\u53d1\u9001\u7684\u76ee\u6807\u5904\u3002\u8282\u70b9\u56e0\u4e3a\u53d7\u5230\u5ef6\u8fdf\u3001\u7f51\u7edc\u5206\u533a\u6216\u8005\u5176\u4ed6\u539f\u56e0\u7684\u5f71\u54cd\u5bfc\u81f4\u7f3a\u5c11\u90e8\u5206\u533a\u5757\u7684\u60c5\u51b5\uff0c\u6700\u7ec8\u5c06\u901a\u8fc7\u8054\u7cfb\u5df2\u62e5\u6709\u8fd9\u4e9b\u7f3a\u5931\u7684\u533a\u5757\u7684\u8282\u70b9\u7684\u65b9\u5f0f\uff0c\u4e0e\u5f53\u524d\u8d26\u672c\u72b6\u6001\u8fdb\u884c\u540c\u6b65\u3002  The gossip-based data dissemination protocol performs three primary functions on a Fabric network:\n1.  Manages peer discovery and channel membership, by continually identifying available member peers, and eventually detecting peers that have gone offline.\n2.  Disseminates ledger data across all peers on a channel. Any peer with data that is out of sync with the rest of the channel identifies the missing blocks and syncs itself by copying the correct data.\n3.  Bring newly connected peers up to speed by allowing peer-to-peer state transfer update of ledger data.  \u57fa\u4e8eGossip\u7684\u6570\u636e\u4f20\u64ad\u534f\u8bae\u5728Fabric\u7f51\u7edc\u4e0a\u6267\u884c\u4e09\u4e2a\u4e3b\u8981\u529f\u80fd\uff1a\n1.  \u901a\u8fc7\u4e0d\u65ad\u8bc6\u522b\u53ef\u7528\u7684\u6210\u5458\u8282\u70b9\u5e76\u6700\u7ec8\u76d1\u6d4b\u8282\u70b9\u79bb\u7ebf\u72b6\u6001\u7684\u65b9\u5f0f\uff0c\u5bf9\u8282\u70b9\u7684\u53d1\u73b0\u548c\u901a\u9053\u4e2d\u7684\u6210\u5458\u8fdb\u884c\u7ba1\u7406\u3002\n2.  \u901a\u8fc7\u901a\u9053\u4e2d\u7684\u6240\u6709\u8282\u70b9\u6765\u5206\u53d1\u8d26\u672c\u6570\u636e\u3002\u4efb\u4f55\u6570\u636e\u672a\u540c\u6b65\u7684\u8282\u70b9\u90fd\u53ef\u4ee5\u901a\u8fc7\u901a\u9053\u4e2d\u5176\u4ed6\u8282\u70b9\u6765\u6807\u8bc6\u7f3a\u5931\u7684\u533a\u5757\uff0c\u5e76\u901a\u8fc7\u590d\u5236\u6b63\u786e\u7684\u6570\u636e\u6765\u8fdb\u884c\u540c\u6b65\u3002\n3.  \u901a\u8fc7\u5141\u8bb8\u70b9\u5bf9\u70b9\u72b6\u6001\u4f20\u8f93\u66f4\u65b0\u8d26\u672c\u6570\u636e\uff0c\u4f7f\u65b0\u52a0\u5165\u8fde\u63a5\u7684\u8282\u70b9\u5feb\u901f\u5f97\u5230\u540c\u6b65\u3002  Gossip-based broadcasting operates by peers receiving messages from other peers on the channel, and then forwarding these messages to a number of randomly-selected peers on the channel, where this number is a configurable constant. Peers can also exercise a pull mechanism, rather than waiting for delivery of a message. This cycle repeats, with the result of channel membership, ledger and state information continually being kept current and in sync. For dissemination of new blocks, the  leader  peer on the channel pulls the data from the ordering service and initiates gossip dissemination to peers.  \u57fa\u4e8eGossip\u7684\u5e7f\u64ad\u7531\u8282\u70b9\u63a5\u6536\u6765\u81ea\u8be5\u901a\u9053\u4e2d\u7684\u5176\u4ed6\u8282\u70b9\u7684\u6d88\u606f\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u6d88\u606f\u8f6c\u53d1\u5230\u901a\u9053\u4e0a\u7684\u591a\u4e2a\u968f\u673a\u9009\u62e9\u7684\u8282\u70b9\u3002\u8fd9\u4e2a\u8282\u70b9\u6570\u662f\u4e2a\u53ef\u914d\u7f6e\u7684\u5e38\u6570\u3002\u8282\u70b9\u4e5f\u53ef\u4ee5\u4e3b\u52a8\u62c9\u53d6\u6d88\u606f\uff0c\u800c\u4e0d\u662f\u7b49\u5f85\u6d88\u606f\u53d1\u9001\u3002\u5faa\u73af\u91cd\u590d\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u4f7f\u901a\u9053\u4e2d\u6210\u5458\u7684\u8d26\u672c\u548c\u72b6\u6001\u4fe1\u606f\u4e0d\u65ad\u4fdd\u6301\u548c\u5f53\u524d\u6700\u65b0\u72b6\u6001\u540c\u6b65\u3002\u4e3a\u4e86\u4f20\u64ad\u65b0\u533a\u5757\uff0c\u901a\u9053\u4e2d\u7684 \u9886\u5bfc\u8005 \u8282\u70b9\u4ece\u6392\u5e8f\u670d\u52a1\u4e2d\u62c9\u53d6\u6570\u636e\uff0c\u5e76\u5411\u5176\u4ed6\u8282\u70b9\u53d1\u9001Gossip\u6d88\u606f\u3002", 
            "title": "Gossip\u534f\u8bae(Gossip protocol)"
        }, 
        {
            "location": "/gossip_zh/#gossipgossip-messaging", 
            "text": "Online peers indicate their availability by continually broadcasting \u201calive\u201d messages, with each containing the  public key infrastructure (PKI)  ID and the signature of the sender over the message. Peers maintain channel membership by collecting these alive messages; if no peer receives an alive message from a specific peer, this \u201cdead\u201d peer is eventually purged from channel membership. Because \u201calive\u201d messages are cryptographically signed, malicious peers can never impersonate other peers, as they lack a signing key authorized by a root certificate authority (CA).  \u5728\u7ebf\u7684\u8282\u70b9\u901a\u8fc7\u6301\u7eed\u5730\u5e7f\u64ad\u201c\u6d3b\u8dc3\u201d\u6d88\u606f\u6765\u8868\u660e\u4ed6\u4eec\u7684\u53ef\u7528\u6027\uff0c\u6bcf\u6761\u6d88\u606f\u90fd\u5305\u542b \u516c\u94a5\u57fa\u7840\u8bbe\u65bd\uff08PKI\uff09 \u7684ID\u548c\u6d88\u606f\u53d1\u9001\u8005\u5bf9\u6d88\u606f\u7684\u7b7e\u540d\u3002\u8282\u70b9\u901a\u8fc7\u6536\u96c6\u8fd9\u4e9b\u6d3b\u8dc3\u6d88\u606f\u6765\u7ef4\u62a4\u901a\u9053\u6210\u5458\u8eab\u4efd\u3002\u5982\u679c\u6ca1\u6709\u8282\u70b9\u80fd\u4ece\u67d0\u4e2a\u7279\u5b9a\u7684\u8282\u70b9\u6536\u5230\u6d3b\u8dc3\u6d88\u606f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u201c\u6b7b\u4ea1\u201d\u7684\u8282\u70b9\u6700\u7ec8\u5c06\u4ece\u901a\u9053\u6210\u5458\u8eab\u4efd\u5217\u8868\u4e2d\u88ab\u5220\u9664\u3002\u7531\u4e8e\u201c\u6d3b\u8dc3\u201d\u4fe1\u606f\u662f\u901a\u8fc7\u5bc6\u7801\u5b66\u7b97\u6cd5\u8fdb\u884c\u7b7e\u540d\u7684\uff0c\u56e0\u6b64\u6076\u610f\u8282\u70b9\u65e0\u6cd5\u4f2a\u88c5\u6210\u5176\u4ed6\u8282\u70b9\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7f3a\u5c11\u6839\u8bc1\u4e66\u9881\u53d1\u673a\u6784\uff08CA\uff09\u6388\u6743\u7684\u7b7e\u540d\u5bc6\u94a5\u3002  In addition to the automatic forwarding of received messages, a state reconciliation process synchronizes  world state  across peers on each channel. Each peer continually pulls blocks from other peers on the channel, in order to repair its own state if discrepancies are identified. Because fixed connectivity is not required to maintain gossip-based data dissemination, the process reliably provides data consistency and integrity to the shared ledger, including tolerance for node crashes.  \u9664\u4e86\u5c06\u63a5\u6536\u5230\u7684\u6d88\u606f\u7684\u81ea\u52a8\u8f6c\u53d1\u4e4b\u5916\uff0c\u72b6\u6001\u534f\u7a0b\u8fd8\u4f1a\u5728\u6bcf\u4e2a\u901a\u9053\u4e0a\u540c\u6b65\u8282\u70b9\u95f4\u7684 \u4e16\u754c\u72b6\u6001 \u3002\u6bcf\u4e2a\u8282\u70b9\u4e0d\u505c\u5730\u4ece\u901a\u9053\u4e2d\u7684\u5176\u4ed6\u8282\u70b9\u4e2d\u63d0\u53d6\u533a\u5757\uff0c\u4ee5\u4fbf\u5728\u51fa\u73b0\u5dee\u5f02\u65f6\u4fee\u6b63\u81ea\u5df1\u7684\u72b6\u6001\u3002\u7531\u4e8e\u4e0d\u9700\u8981\u56fa\u5b9a\u8fde\u63a5\u6765\u7ef4\u62a4\u57fa\u4e8eGossip\u7684\u6570\u636e\u4f20\u64ad\uff0c\u56e0\u6b64\u8be5\u6d41\u7a0b\u53ef\u4ee5\u53ef\u9760\u5730\u4e3a\u5171\u4eab\u8d26\u672c\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u548c\u5b8c\u6574\u6027\uff0c\u5305\u62ec\u5bf9\u8282\u70b9\u5d29\u6e83\u7684\u5bb9\u9519\u3002  Because channels are segregated, peers on one channel cannot message or share information on any other channel. Though any peer can belong to multiple channels, partitioned messaging prevents blocks from being disseminated to peers that are not in the channel by applying message routing policies based on peers\u2019 channel subscriptions.  \u7531\u4e8e\u901a\u9053\u4e4b\u95f4\u76f8\u4e92\u9694\u79bb\uff0c\u4e00\u4e2a\u901a\u9053\u4e0a\u7684\u8282\u70b9\u4e0d\u80fd\u5728\u5176\u4ed6\u4efb\u4f55\u901a\u9053\u4e0a\u53d1\u9001\u6216\u5171\u4eab\u4fe1\u606f\u3002\u5c3d\u7ba1\u4efb\u4f55\u8282\u70b9\u90fd\u53ef\u80fd\u5c5e\u4e8e\u591a\u4e2a\u901a\u9053\uff0c\u4f46\u662f\u901a\u8fc7\u5c06\u57fa\u4e8e\u8282\u70b9\u901a\u9053\u8ba2\u9605\u7684\u673a\u5236\u4f5c\u4e3a\u6d88\u606f\u5206\u53d1\u7b56\u7565\uff0c\u8282\u70b9\u65e0\u6cd5\u5c06\u88ab\u5206\u9694\u5f00\u7684\u6d88\u606f\u4f20\u64ad\u7ed9\u4e0d\u5728\u901a\u9053\u4e2d\u7684\u8282\u70b9\u3002  Notes: \n1. Security of point-to-point messages are handled by the peer TLS layer, and do not require signatures. Peers are authenticated by their certificates, which are assigned by a CA. Although TLS certs are also used, it is the peer certificates that are authenticated in the gossip layer. Ledger blocks are signed by the ordering service, and then delivered to the leader peers on a channel. 2. Authentication is governed by the membership service provider for the peer. When the peer connects to the channel for the first time, the TLS session binds with fabric membership identity. This essentially authenticates each peer to the connecting peer, with respect to membership in the network and channel.  \u6ce8\u610f\uff1a \n1.  \u70b9\u5bf9\u70b9\u6d88\u606f\u7684\u5b89\u5168\u6027\u7531\u8282\u70b9\u7684TLS\u5c42\u5904\u7406\uff0c\u4e0d\u9700\u8981\u7b7e\u540d\u3002\u8282\u70b9\u901a\u8fc7\u5176\u7531CA\u5206\u914d\u7684\u8bc1\u4e66\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002\u8282\u70b9\u5728Gossip\u5c42\u7684\u8eab\u4efd\u8ba4\u8bc1\u4f1a\u901a\u8fc7TLS\u8bc1\u4e66\u4f53\u73b0\u3002\u8d26\u672c\u4e2d\u7684\u533a\u5757\u7531\u6392\u5e8f\u670d\u52a1\u8fdb\u884c\u7b7e\u540d\uff0c\u7136\u540e\u4f20\u9012\u7ed9\u901a\u9053\u4e2d\u7684\u9886\u5bfc\u8005\u8282\u70b9\u3002\n2.  \u8ba4\u8bc1\u8fc7\u7a0b\u7531\u8282\u70b9\u7684\u6210\u5458\u7ba1\u7406\u670d\u52a1\u7684\u63d0\u4f9b\u8005\u8fdb\u884c\u7ba1\u7406\u3002\u5f53\u8282\u70b9\u7b2c\u4e00\u6b21\u8fde\u63a5\u5230\u901a\u9053\u4e2d\u7684\u65f6\u5019\uff0cTLS\u4f1a\u8bdd\u5c06\u4e0eFabric\u6210\u5458\u8eab\u4efd\u7ed1\u5b9a\u3002\u8fd9\u6837\u672c\u8d28\u4e0a\u4f7f\u6bcf\u4e2a\u8282\u70b9\u4e0e\u76f8\u8fde\u7684\u8282\u70b9\u8fdb\u884c\u8ba4\u8bc1\uff0c\u4ece\u800c\u4e0e\u7f51\u7edc\u548c\u901a\u9053\u4e2d\u7684\u6210\u5458\u8eab\u4efd\u5173\u8054\u8d77\u6765\u3002", 
            "title": "Gossip\u6d88\u606f\u4f20\u8f93(Gossip messaging)"
        }, 
        {
            "location": "/msp_acl_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nYongfu Liang\n\n\n\n\n\n\n\n\n\n\n\u8be6\u7ec6\u5185\u5bb9\u8bf7\u770b\n\u8fd9\u91cc", 
            "title": "MSP&ACL"
        }, 
        {
            "location": "/sdk-design_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nLidong Guo\n\n\n\n\n\n\n\n\n\n\n1 \u6982\u8981\n\n\nHyperledger Fabric v1.0\u63d0\u4f9b\u4e86\u57fa\u672c\u7684Protocol Buffers \u683c\u5f0f\u7684API\u901a\u8fc7gRPC\u534f\u8bae\u4f5c\u7528\u4e8e\u533a\u5757\u94fe\u7f51\u7edc\u3002\u8fd9\u4e9bAPI\u5305\u542b\u4e86\u4ea4\u6613\u5904\u7406\u3001\u5b89\u5168\u7684\u6210\u5458\u5173\u7cfb\u670d\u52a1\u3001\u533a\u5757\u94fe\u904d\u5386\u548c\u4e8b\u4ef6\u5904\u7406\u3002\u6709\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u652f\u6301Protocol Buffers\uff0c\u5305\u62ecGo, C#, Java, Javascript, Python, and C++\u3002\u6240\u4ee5\u6709\u5fc5\u8981\u7ed9\u5e94\u7528\u5f00\u53d1\u5de5\u7a0b\u5e08\u63d0\u4f9b\u4e00\u4e2a\u672c\u5730SDK\u3002\n\n\n\u672c\u6587\u6863\u8be6\u8ff0\u4e86\u4e00\u4e2aSDK\u5e94\u8be5\u63d0\u4f9b\u7684API\u6700\u5c0f\u96c6\u5408\u7684\u5b9e\u73b0\u3002\u4e00\u4e2aSDK\u7684\u76ee\u6807\u5373\u8981\u89e3\u51b3\u5ba2\u6237\u5728\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u76f4\u63a5\u9762\u5bf9\u7684\u4e00\u4e9b\u539f\u59cb\u9700\u6c42\uff1b\u53c8\u8981\u505a\u4e00\u4e9b\u9876\u5c42\u7684\u5408\u7406\u62bd\u8c61\u4ee5\u56fe\u65b9\u4fbf\u5f00\u53d1\u4eba\u5458\u5f00\u53d1\uff0c\u5e76\u4e14\u5728\u672c\u5730\u5e94\u7528\u4ee3\u7801\u4e2d\u4f7f\u7528\u8fd9\u4e9bAPI\u540e\u65b9\u4fbf\u5f00\u53d1\u5de5\u4f5c\u7684\u8fdb\u884c\u3002\u7136\u800c\uff0c\u4f7f\u7528SDK\u5e76\u4e0d\u4f1a\u59a8\u788d\u5e94\u7528\u76f4\u63a5\u8c03\u7528gRPC\u7684\u64cd\u4f5c\u3002\n\n\n\u8bf7\u6ce8\u610f\uff0c\u5f53\u524d\u7684REST API\u5e76\u4e0d\u88ab\u63a8\u8350\u4f7f\u7528\uff0cSDK\u4e0d\u5e94\u8be5\u57fa\u4e8e\u4f7f\u7528REST API \u800c\u521b\u5efa\u3002\u8df3\u8fc7REST\u76f4\u63a5\u4f7f\u7528gRPC\u7684\u539f\u56e0\u662f\uff1a\u80fd\u591f\u63a7\u5236\u5168\u53cc\u5411\u7684\u6570\u636e\u6d41\uff08\u5927\u90e8\u5206\u7684API\u8c03\u7528\u90fd\u662f\u5f02\u6b65\u7684\uff09\uff0c\u66f4\u597d\u7684\u6027\u80fd\u3002\u6b64\u5916\uff0c\u81ea\u4ece\u8282\u70b9\u5185\u90e8\u6a21\u5757\u901a\u4fe1\u4f7f\u7528\u4e86gRPC\u4e4b\u540e\uff0c\u4fbf\u4e0d\u5fc5\u518d\u5f00\u653e\u66f4\u591a\u7684HTTP/HTTPS\u7aef\u53e3\u4e86\u3002\n\n\n\u4e00\u4e2a\u4f8b\u5916\u7684\u60c5\u51b5\u662f\uff0c\u65b0\u7684\u6210\u5458\u670d\u52a1\u65b9\u5f0f\uff08CA\uff09\u662f\u6309REST API\u7684\u89c4\u5219\u5b9e\u73b0\u7684\n\n\n\u4f5c\u4e3a\u53c2\u8003\uff0cFabric v1.0\u7684\u67b6\u6784\u548c\u4ea4\u4e92\u6a21\u578b\u53ef\u4ee5\u5728\u4e0b\u9762\u8fd9\u4e2a\u94fe\u63a5\u6240\u6307\u5411\u7684\u5de5\u4f5c\u5355\u5143\u7684\u9644\u4ef6\u6587\u6863\u91cc\u9762\u67e5\u770b https://jira.hyperledger.org/browse/FAB-37\n\n\n2 \u76ee\u6807\n\n\n2.1 \u5e94\u7528\u5f00\u53d1\n\n\nFabric SDK\u5e94\u8be5\u53ef\u4ee5\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\u7684\u591a\u79cd\u64cd\u4f5c\u533a\u5757\u94fe\u7f51\u7edc\u7684\u65b9\u5f0f\u3002\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u90e8\u7f72/\u6267\u884cchaincode\uff0c\u76d1\u542c\u7f51\u7edc\u4e2d\u4ea7\u751f\u7684\u4e8b\u4ef6\uff0c\u63a5\u6536\u5757\u4fe1\u606f\uff0c\u628a\u4ea4\u6613\u5b58\u50a8\u5230\u8d26\u672c\u4e2d\uff0c\u7b49\u7b49\n\n\n2.2 chaincode\u5f00\u53d1\n\n\nFabric SDK\u5e94\u8be5\u53ef\u4ee5\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u7f16\u5199chaincode\u5355\u5143\u6d4b\u8bd5\u4ee3\u7801\u3002\u5f00\u53d1\u4eba\u5458\u5e94\u8be5\u80fd\u591f\u5728\u4e0d\u628achaincode\u90e8\u7f72\u5230\u7f51\u7edc\u4e0a\u7684\u60c5\u51b5\u4e0b\u5feb\u901f\u6d4b\u8bd5chaincode\n\n\n3 \u539f\u5219\n\n\n3.1 \u826f\u597d\u7684API\u6587\u6863\uff0c\u6570\u636e\u6a21\u578b\uff0c\u793a\u4f8b\u4ee3\u7801\n\n\nSDK\u5e94\u8be5\u63d0\u4f9b\u6e05\u6670\u7684\u6587\u6863\u8bf4\u660e\uff0c\u5305\u62ec\u53ef\u7528\u7684API\uff0c\u6570\u636e\u6a21\u578b\uff0c\u5982\u4f55\u4f7f\u7528API\u7684\u793a\u4f8b\u8bf4\u660e\n\n\n3.2 \u4fbf\u4e8e\u4f7f\u7528\n\n\nChaincode\u5f00\u53d1\u4eba\u5458\u548c\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u5173\u6ce8\u4e8e\u4e66\u5199\u4e1a\u52a1\u903b\u8f91\u4ee3\u7801\u3002\u5c3d\u7ba1\u5f00\u53d1\u4eba\u5458\u719f\u6089fabric\u5185\u90e8\u6784\u4ef6\u5bf9\u5f00\u53d1\u672c\u8eab\u662f\u6709\u5229\u7684\uff0c\u4f46\u662f\u8fd9\u4e0d\u5e94\u8be5\u662f\u4e00\u4e2a\u5fc5\u987b\u7684\u5148\u51b3\u6761\u4ef6\u3002SDK\u7f16\u8bd1\u65f6\u95f4\u4e0a\u4e0d\u5e94\u8be5\u5bf9fabric project\u6709\u4efb\u4f55\u4f9d\u8d56\u3002\uff08\u9664\u975e\u539f\u59cb\u6587\u4ef6\u5b9a\u4e49\u4e86\u591a\u79cd\u5408\u7ea6\uff1f\uff1f\uff09 SDK packages/jars/libraries \u5e94\u8be5\u5728\u5e38\u7528\u7684\u8d44\u6e90\u5e93\u7f51\u7ad9\u4e0a\u53ef\u83b7\u53d6\uff0c\u4ee5\u65b9\u4fbf\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u8f7b\u677e\u5b89\u88c5\u5b83\u4eec\u6216\u8005\u7acb\u5373\u5f00\u59cb\u7f16\u5199Chaincode\u6765\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\n3.3 \u6027\u80fd\n\n\n\u8fd9\u4e2aSDK\u5fc5\u987b\u4ed4\u7ec6\u8bbe\u8ba1\u6765\u8fbe\u5230\u9ad8\u541e\u5410\u91cf\uff0c\u6c34\u5e73\u6269\u5c55\u80fd\u529b\u548c\u66f4\u4f4e\u7684\u5ef6\u8fdf\u3002\u5b83\uff08\u672cSDK\uff09\u5e94\u8be5\u662f\u4e00\u4e2a\u7ec4\u4ef6\u72b6\u6001\u65e0\u5173\u5316\u7684\u7406\u60f3\u5b9e\u73b0\uff0c\u6216\u8005\u5141\u8bb8\u5e94\u7528\u5b9e\u4f8b\u501f\u52a9\u6570\u636e\u5e93\u5171\u4eab\u72b6\u6001\u3002\n\n\n3.4 \u7248\u672c\u63a7\u5236\n\n\n\u7edf\u4e00\u7684\u7248\u672c\u63a7\u5236\u4e0b\uff0c\u5efa\u8bae\u5c06SDK\u901a\u8fc7\u591a\u79cd\u8bed\u8a00\u5b9e\u73b0\uff0c\u5e76\u4e14\u591a\u79cd\u5b9e\u73b0\u7684SDK\u4e4b\u95f4\u5728\u529f\u80fd\u4e0a\u80fd\u591f\u4fdd\u6301\u4e92\u901a\n\n\n3.5 \u53ef\u670d\u52a1\u6027\n\n\n\u672cSDK\u5e94\u8be5\u65b9\u4fbf\u4e8e\u5728\u53ef\u670d\u52a1\u6027\u652f\u6301\u4e2d\u6dfb\u52a0\u63d2\u4ef6\uff0c\u5373\u65e5\u5fd7\u7cfb\u7edf\u3002\u5b83\u5e94\u8be5\u5141\u8bb8SDK\u4f7f\u7528\u65b9\u7684\u5e94\u7528\u6dfb\u52a0\u4e00\u4e2a\u65e5\u5fd7\u5904\u7406\u7684\u5b9e\u4f8b\u3002\u5e94\u7528\u503e\u5411\u4e8e\u5728SDK\u5185\u90e8\u548c\u5916\u90e8\u4f7f\u7528\u4e00\u4e2a\u901a\u7528\u7684\u65e5\u5fd7\u7cfb\u7edf\uff0c\u8fd9\u662f\u975e\u5e38\u6709\u7528\u7684\u3002\u4e00\u4e2aIT\u7ec4\u7ec7\u4e3a\u4e86\u76d1\u89c6\u548c\u5206\u6790\u901a\u5e38\u4f1a\u5b89\u88c5\u65e5\u5fd7\u811a\u672c\uff0c\u6bd4\u5982\u5bf9\u4e00\u4e2a\u6807\u51c6\u65e5\u5fd7\u683c\u5f0f\u7684\u9700\u6c42\u3002\u672cSDK\u5e94\u8be5\u6709\u4e00\u4e2a\u7f16\u8bd1\u8fdb\u7248\u672c\u7684\u65e5\u5fd7\u7cfb\u7edf\u4ee5\u4fbf\u4e8e\u5f00\u53d1\u4eba\u5458\u901a\u8fc7\u9ed8\u8ba4\u65b9\u5f0f\u83b7\u53d6\u65e5\u5fd7\u3002\u4f46\u662f\u5b83\u5fc5\u987b\u5141\u8bb8\u8bbe\u7f6e\u4e00\u4e2a\u62e5\u6709\u4e00\u7cfb\u5217\u6807\u51c6\u96c6\u5408\u7684\u5916\u90e8\u65e5\u5fd7\u7cfb\u7edf\u6765\u8bb0\u5f55API\u65e5\u5fd7\u3002\n\n\n4 \u573a\u666f\n\n\n\u6709\u8bb8\u591a\u79cd\u53ef\u80fd\u7684\u573a\u666f\uff0c\u4f46\u662f\u8ba9\u6211\u4eec\u5173\u6ce8\u4e00\u5c11\u90e8\u5206\u6765\u8bf4\u660eSDK\u7684\u6574\u4f53\u529f\u80fd\u3002\n\n\n4.1 \u6210\u5458\u7684\u6ce8\u518c\u548c\u767b\u8bb0\n\n\n\u4e3a\u4e86\u8ddffabric\u4ea4\u4e92\uff0c\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u5177\u5907\u4e00\u4e2a\u4e13\u6709\u7684\u8eab\u4efd\u8ba4\u8bc1\uff0c\u8fd9\u4e2a\u8ba4\u8bc1\u88ab\u7f16\u7801\u8fdb\u4e00\u4e2a\u53eb\u505aECert\uff08\u767b\u8bb0\u8bc1\u4e66\uff09\u7684\u6210\u5458\u8bc1\u4e66\u91cc\u3002\u8fd9\u4e2a\u8bc1\u4e66\u53ef\u80fd\u662f\u7531\u5916\u90e8\u7684\u8ba4\u8bc1\u673a\u6784\u63d0\u4f9b\uff0c\u6216\u8005\u7531fabric\u6210\u5458\u670d\u52a1\u63d0\u4f9b\uff0c\u53ea\u8981\u8fd9\u4e2aECert\u53ef\u4ee5\u88abfabric\u7ec4\u4ef6\u5728\u5efa\u7acb\u94fe\u7684\u4fe1\u4efb\u94fe\u65f6\u9a8c\u8bc1\u5373\u53ef\u3002\n\n\n\u5982\u679c\u7528\u4e00\u4e2a\u6807\u51c6\u7684CA\u6765\u7ba1\u7406\u5206\u914dECert\uff0c\u4ea4\u6613\u4f1a\u88abECert\u7b7e\u540d\u3002\u8fd9\u5c06\u4f7f\u5f97\u6bcf\u4e00\u4e2a\u4ea4\u6613\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5ba2\u6237\u7aef\u90fd\u662f\u53ef\u9a8c\u8bc1\u7684\u3002\n\n\n\u53e6\u4e00\u65b9\u9762\uff0cMSP\u5728fabric\u4e2d\u7684\u8bbe\u8ba1\u662f\uff0c\u5229\u7528\u4e00\u4e2a\u52a0\u5bc6\u7b97\u6cd5\u4eceECert\u7684\u5bc6\u94a5\u5bf9\u5bfc\u51fa\u4e00\u4e2a\u5bc6\u94a5\u5bf9\uff0c\u56e0\u6b64\u4e3a\u6bcf\u4e00\u4e2a\u4ea4\u6613\u4ea7\u751f\u4e00\u4e2a\u5047\u540d\u8bc1\u4e66\uff0c\u53c8\u53eb\u505aTCert\u3002\u4e00\u4e2aTCert\u4e0d\u80fd\u4ee3\u8868\u4e00\u4e2a\u8ba4\u8bc1\u7684\u8eab\u4efd\uff0c\u4f46\u662f\u80fd\u901a\u8fc7\u6210\u5458\u670d\u52a1\u8ffd\u8e2a\u5230\u539f\u59cb\u7684ECert\u3002\u8fd9\u4e2a\u6280\u672f\u5728\u8bb8\u591a\u4e1a\u52a1\u573a\u666f\u4e0b\u9690\u85cf\u4ea4\u6613\u8ba4\u8bc1\u662f\u975e\u5e38\u6709\u7528\u7684\u3002\n\n\nFabric\u63d0\u4f9b\u4e86MSP\u63a5\u53e3\u7684\u4e00\u79cd\u5b9e\u73b0\uff0c\u547d\u540d\u4e3a\u201cCOP\u201d\u7acb\u610f\u6765\u6e90\u4e8e\u5b83\u7684\u4f5c\u7528\u5c31\u50cf\u8b66\u5bdf\uff0c\u800c\u4e0d\u662f\u6765\u6e90\u4e8e\u9996\u5b57\u6bcd\u3002\u5728github\u7684\u7ec4\u7ec7\u8d85\u7ea7\u8d26\u672c\u91cc\u9762\u7684\u4ee3\u7801\u5e93\u201cfabric-cop\u201d\u5c31\u662f\u5b83\u3002\uff08\u8bd1\u8005\u6ce8\uff1a\u5728github\u4e0ahyperledger\u7ec4\u7ec7\u4e0b\u5e76\u672a\u627e\u5230\u8fd9\u4e2a\u4ee3\u7801\u5e93\uff0c\u53ef\u80fd\u662f\u672c\u6587\u6863\u6210\u4e66\u540e\u53c8\u6709\u53d8\u66f4\u3002\uff09\n\n\n\u5982\u679c\u7ed9\u4e00\u4e2a\u57fa\u4e8efabric\u7684\u7f51\u7edc\u914d\u7f6e\u4e00\u4e2a\u5916\u90e8\u7684CA\uff0c\u7136\u540e\u7528\u6237\u6ce8\u518c\u4e5f\u4f1a\u5728\u5916\u90e8\u7ef4\u62a4\u3002\u8fd9\u4e2a\u5916\u90e8\u7684\u7528\u6237\u6ce8\u518c\u7cfb\u7edf\u8d1f\u8d23\u8ba4\u8bc1\u7528\u6237\u3002\u4e00\u4e2a\u5df2\u7ecf\u88ab\u8ba4\u8bc1\u7684\u7528\u6237\u4e3a\u4e86\u83b7\u53d6ECert\u53ef\u4ee5\u4f7f\u7528CA\u8bf7\u6c42\u767b\u8bb0\u3002\n\n\n\u5c31SDK\u800c\u8a00\uff0c\u5e94\u8be5\u6709\u4e24\u79cdAPI\uff1a\u652f\u6301\u4efb\u4f55CA\uff08\u5305\u62ec\u5185\u5efa\u7684\u548c\u5916\u90e8\u7684\uff09\u7684\u901a\u7528API\uff0c\u548c\u4e13\u95e8\u4e3afabric\u7684\u5185\u5efa\u6210\u5458\u670d\u52a1\u63d0\u4f9b\u7684API\u3002\u901a\u7528API\u8d1f\u8d23\u5141\u8bb8\u4f7f\u7528SDK\u7684\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u6700\u57fa\u672c\u7684\u64cd\u4f5c\u6bd4\u5982\u5173\u8054\u7528\u6237\u8eab\u4efd\uff0c\u547d\u540d\u4e3a\u201cenroll()\u201d\uff0c\u4e3a\u8ba4\u8bc1\u7528\u6237\u83b7\u53d6ECert\u7684\u7a0b\u5e8f\uff1b\u8fd8\u6709\u201cgetTCerts()\u201d\uff0c\u83b7\u53d6\u4ea4\u6613\u8bc1\u4e66\u5141\u8bb8\u7528\u6237\u63d0\u4ea4\u4ea4\u6613\u3002\n\n\n\u5ba2\u6237\u7aef\u6709\u5173\u53ef\u9009\u7684\u6210\u5458\u670d\u52a1\u5b9e\u73b0\uff08\u5373COP\uff09\u7684\u8bbe\u8ba1\u9700\u8981\u5355\u72ec\u7684\u6587\u6863\u6765\u8bf4\u660e\u3002https://docs.google.com/document/d/1TO-sdHGpn8ifB9C_pH_y54H75Rx0RdXvZih7-lhsLII/edit\n\n\n4.2 \u94fe\u7684\u521b\u5efa\n\n\nHyperledger Fabric\u6240\u8bbe\u8ba1\u7684\u652f\u6301\u9690\u79c1\u6027\u548c\u673a\u5bc6\u6027\u7684\u901a\u9053\u548c\u8d26\u672c\uff0c\u7edf\u4e00\u88ab\u79f0\u4e3a\u4e00\u4e2a\u201c\u94fe\u201d\u3002\u901a\u9053\u548c\u8d26\u672c\u8bbe\u8ba1\u66f4\u591a\u5185\u5bb9\u8bf7\u67e5\u770b\uff1a\nhttps://docs.google.com/document/d/1eRNxxQ0P8yp4Wh__Vi6ddaN_vhN2RQHP-IruHNUwyhc/edit#\u3002\u901a\u4fe1\uff08\u4f20\u8f93\u4e2d\u7684\u6570\u636e\uff09\u88ab\u9650\u5236\u5728\u53c2\u4e0e\u65b9\u4e4b\u95f4\u7684\u901a\u9053\u5185\uff0c\u540c\u65f6\u5757\u5185\u6570\u636e\uff08\u5df2\u88ab\u6301\u4e45\u5316\u7684\u6570\u636e\uff09\u4fdd\u5b58\u5728\u4e00\u4e2a\u79c1\u6709\u7684\u4ec5\u4ec5\u5728\u8fd9\u4e9b\u53c2\u4e0e\u65b9\u4e4b\u95f4\u5206\u5e03\u5f0f\u5b58\u50a8\u7684\u8d26\u672c\u4e2d\u3002\u4e0d\u5c5e\u4e8e\u94fe\u7684\u7f51\u7edc\u8282\u70b9\u4e0d\u4e86\u89e3\u901a\u9053\u548c\u79c1\u6709\u8d26\u672c\u5185\u90e8\u4efb\u4f55\u4e8b\u7269\uff0c\u4e5f\u4e0d\u80fd\u5229\u7528\u8fd9\u4e9b\u4e8b\u7269\u3002\n\n\n\u4e00\u65e6\u4e00\u4e2a\u94fe\u88ab\u521b\u5efa\uff0c\u5e94\u7528\u53ef\u4ee5\u53d1\u9001\u4ea4\u6613\u7ed9\u94fe\u4e0a\u4ee5\u79c1\u6709\u65b9\u5f0f\u5b58\u5728\u7684\u8282\u70b9\uff0c\u5e76\u4e14\u5df2\u63d0\u4ea4\u88ab\u9a8c\u8bc1\u7684\u4ea4\u6613\u5230\u79c1\u6709\u8d26\u672c\u3002\n\n\n\u521b\u5efa\u94fe\u7684\u8d23\u4efb\u843d\u5728\u5e94\u7528\u7a0b\u5e8f\u8eab\u4e0a\u3002\u901a\u8fc7SDK\u5e94\u7528\u7a0b\u5e8f\u521d\u59cb\u5316\u94fe\u7684\u7ec4\u7ec7\u56e2\u4f53\uff08\u7f51\u7edc\u6210\u5458\u7684\u4ee3\u8868\uff09\u6784\u6210\u5e76\u4e14\u7ed9\u6392\u5e8f\u670d\u52a1\u3002\n\n\n\u5728SDK\u91cc\uff0c\u901a\u9053\u548c\u5b83\u672c\u8eab\u5173\u8054\u7684\u8d26\u672c\u7684\u7ed1\u5b9a\u7531\u94fe\u7c7b\u4f53\u73b0\u3002\u5e94\u7528\u548c\u6307\u5b9a\u7684\u6392\u5e8f\u8282\u70b9\u7b2c\u4e00\u6b21\u51c6\u5907\u4e00\u4e2a\u65b0\u7684\u901a\u9053\u5e76\u4e14\u83b7\u53d6\u4e00\u4e2a\u5305\u542b\u5173\u4e8e\u65b0\u94fe\u7684\u5bc6\u94a5\u4fe1\u606f\u7684\u521b\u4e16\u533a\u5757\uff0c\u5305\u542b\u53c2\u4e0e\u8005\u4fe1\u606f\uff08URL\u548c\u8bc1\u4e66\uff09\u3001\u6392\u5e8f\u8282\u70b9\u4fe1\u606f\uff08URL\u548c\u8bc1\u4e66\uff09\u3002\u5e94\u7528\u901a\u8fc7\u76ee\u6807\u662f\u914d\u7f6e\u7cfb\u7edfchaincode\u7684\u914d\u7f6e\u5316\u4ea4\u6613\u6765\u534f\u8c03\u65b0\u901a\u9053\u5bf9\u53c2\u4e0e\u8282\u70b9\u7684\u9080\u8bf7\u3002\n\n\n\n\n4.3 \u4ea4\u6613\u652f\u6301\n\n\n\u4e00\u4e2a\u4ea4\u6613\u5305\u542b\u660e\u786e\u7684\u4e24\u4e2a\u6b65\u9aa4\uff1a\u80cc\u4e66\u548c\u63d0\u4ea4\u3002\u80cc\u4e66\u662f\u8bf7\u6c42\u8282\u70b9\u5bf9\u4ea4\u6613\u7684\u7ed3\u679c\u8fdb\u884c\u8fd0\u884c\u5e76\u80cc\u4e66\uff08\u7b7e\u540d\uff09\uff1b\u63d0\u4ea4\u662f\u5728\u4ea4\u6613\u548c\u4ea4\u6613\u7684\u80cc\u4e66\u5185\u5bb9\u7684\u6709\u6548\u671f\u5185\u8bf7\u6c42\u5171\u8bc6\u3002\n\n\n\u4e0b\u56fe\u8bf4\u660e\u4ea4\u6613\u65f6\u5ba2\u6237\u7aefSDK\u548c\u8282\u70b9\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u67e5\u770b\u67b6\u6784\u6587\u6863\uff08https://github.com/hyperledger/fabric/blob/master/proposals/r1/Next-Consensus-Architecture-Proposal.md\uff09\u3002\n\n\n\u9996\u5148SDK\u548c\u5e94\u7528\u534f\u540c\u5de5\u4f5c\uff0c\u4f7f\u7528\u5e94\u7528\u7684\uff08\u6216\u8005\u88ab\u8ba4\u8bc1\u7528\u6237\u7684\uff09\u79c1\u94a5\u7ed9\u4fe1\u606f\u7b7e\u540d\uff08\u6240\u6709\u7684\u5916\u90e8\u4fe1\u606f\u90fd\u9700\u8981\u7b7e\u540d\u8ba4\u8bc1\uff09\u3002\u7136\u540e\u5b83\u6839\u636e\u80cc\u4e66\u7b56\u7565\uff08\u901a\u8fc7\u9a8c\u8bc1\u7cfb\u7edf\u94fe\u7801\u6216\u8005VSCC\u5b9e\u73b0\u7684\uff09\u7ed9\u4e00\u4e2a\u6216\u591a\u4e2a\u8282\u70b9\u53d1\u9001\u4fe1\u606f\u3002\u5b83\u83b7\u5f97\u5f02\u6b65\u7684\u53cd\u9988\u5e76\u4e14\u51b3\u5b9a\u662f\u5426\u6267\u884c\u521b\u5efa\u548c\u63d0\u4ea4\u4ea4\u6613\u5230\u5171\u8bc6\u670d\u52a1\u3002\u6267\u884c\u4ea4\u6613\u63d0\u4ea4\u7684\u51b3\u5b9a\u662f\u57fa\u4e8e\u80cc\u4e66\u7b56\u7565\u8c13\u8bcd\uff08\u5c31\u50cf2 out of 3\uff09\u57fa\u4e8e\u5e26\u5916\u77e5\u8bc6\u3002\u4e00\u65e6\u63d0\u4ea4\uff0c\u4ea4\u6613\u7684\u5904\u7406\u6d41\u7a0b\u4fbf\u662f\u5f02\u6b65\u7684\uff0c\u6240\u4ee5SDK\u76d1\u542c\u63d0\u4ea4\u4e8b\u4ef6\u6765\u901a\u77e5\u5e94\u7528\u4ea4\u6613\u5904\u7406\u6d41\u7a0b\u7684\u5b8c\u6210\u6216\u8005\u62d2\u7edd\u7684\u7ed3\u679c\u3002\n\n\n\n\n\u4e0a\u56fe\u662f\u5bf9\u4ea4\u6613\u6d41\u7a0b\u975e\u5e38\u4e0a\u5c42\u7684\u63cf\u8ff0\u3002SDK\u4e2d\u6709\u8be6\u7ec6\u7684\u6267\u884c\u7f51\u7edc\u548c\u73af\u5883\u914d\u7f6e\uff0c\u5305\u62ec\u83b7\u53d6\u7b7e\u540d\u5bc6\u94a5\u6765\u5b89\u5168\u7684\u7ba1\u7406\u6210\u5458\uff0c\u5904\u7406\u4ea4\u6613\u548c\u4e8b\u4ef6\u6d41\uff0c\uff08\u4f9d\u8d56\u5e94\u7528\u7684\uff09\u591a\u79cd\u5171\u8bc6\u901a\u9053\u3002\n\n\n5 \u5ba2\u6237\u7aef\u670d\u52a1\u5668API\u53c2\u8003\n\n\n\u4e0b\u9762\u7684\u94fe\u63a5\u6307\u5411gRPC\u4e0efabric\uff08\u8282\u70b9\uff0c\u6392\u5e8f\u8005\u548c\u6210\u5458\u670d\u52a1\uff09\u6c9f\u901a\u7684\u4fe1\u606f\u548c\u670d\u52a1\u5b9a\u4e49\u3002\n\n\nProposal\n \uff08\u90e8\u7f72\u6216\u8005\u4ea4\u6613\u8c03\u7528\u7684\u63d0\u6848\uff09\n\n\nProposalResponse\n \uff08\u5168\u5c40\u7684\u63d0\u6848\u56de\u5e94\uff09\n\n\nChaincode\n \uff08chaincode\uff0c\u8c03\u7528\uff0c\u90e8\u7f72\uff0c\u7b49\u7ec6\u8282\uff09\n\n\nChaincodeProposal\n (chaincode-specific proposal header and payload)\n\n\nTransaction\n (transaction invocation)\n\n\nChaincodeTransaction\n (chaincode-specific transaction action payload)\n\n\n\u65b0\u7684COP API\u662f\u57fa\u4e8ejson\u7684\uff0c\u9700\u8981\u6dfb\u52a0\u5230\u65b0\u7684\u6210\u5458\u670d\u52a1\u8bbe\u8ba1\u4e2d\u3002\n\n\n\u6d88\u606f\u5b9a\u4e49\u5e94\u8be5\u662f\u8bbe\u8ba1SDK APIs\u7684\u4e00\u4e2a\u7075\u611f\u6765\u6e90\u3002APIs\u660e\u663e\u6ca1\u6709\u5fe0\u5b9e\u7684\u53cd\u6620\u51fa\u6d88\u606f\u5b9a\u4e49\uff0c\u56e0\u4e3aSDK\u53ef\u4ee5\u4f7f\u7528\u667a\u80fd\u7f3a\u7701\u548c\u72b6\u6001\u4fe1\u606f\u6765\u6700\u5c0f\u5316\u8bf7\u6c42\u7684\u53c2\u6570\u3002\n\n\n6 \u8be6\u7ec6\u8bf4\u660e\n\n\n\u8fd9\u91cc\u6211\u4eec\u8ba8\u8bba\u8bbe\u8ba1\u539f\u5219\u548c\u67b6\u6784\u601d\u8def\u3002\n\n\n\u603b\u7684\u6765\u8bf4\uff0c\u6211\u4eec\u6709\u4e0d\u540c\u7b49\u7ea7\u7684\uff08\u6570\u503c\u8d8a\u5c0f\u8868\u793a\u7b49\u7ea7\u8d8a\u9ad8\uff09\u4e00\u4e9b\u6a21\u5757\uff1a\n\n\nPackage: Hyperledger Fabric Client\n\n\n\n\n\n\n\n\n\u6a21\u5757\n\n\n\u7b49\u7ea7\n\n\n\u529f\u80fd\n\n\n\n\n\n\n\n\n\n\nClient\n\n\n0\n\n\n\u4e3b\u8981\u7684\u5165\u53e3\u6a21\u5757\u3002\u5b83\u5fc5\u987b\u5141\u8bb8\u7528\u6237\u521b\u5efa\u9700\u8981\u7684\u4efb\u4f55\u5bf9\u8c61\u6765\u6267\u884c\u6240\u6709\u652f\u6301\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u76f4\u63a5\u8fde\u63a5\u7f51\u7edc\uff0cchaincode\u90e8\u7f72\uff0c\u4ea4\u6613\u6267\u884c\uff0c\u591a\u79cd\u67e5\u8be2\u3002\u53e6\u5916\uff0c\u57fa\u4e8e\u7f16\u7801\u89c4\u8303\u548c\u666e\u904d\u7684\u793e\u533a\u7ec3\u4e60\uff0c\u6bcf\u4e00\u79cd\u8bed\u8a00\u7684\u5b9e\u73b0\u4e5f\u80fd\u51b3\u5b9a\u662f\u5426\u6dfb\u52a0\u65b9\u4fbf\u7684\u65b9\u6cd5\uff0c\u5982sendTransaction(chain, tx)\n\n\n\n\n\n\nChain\n\n\n1\n\n\n\u4e00\u4e2a\u94fe\u4ee3\u8868\u4e00\u4e9b\u8282\u70b9\u7279\u522b\u5f62\u6210\u7684\u4e00\u4e2a\u7f51\u7edc\uff0c\u542f\u52a8\u4e00\u4e2a\u5171\u8bc6\u7684\u901a\u9053\uff0c\u5728\u901a\u9053\u4e2d\u4ea4\u6613\u53ef\u4ee5\u88ab\u72ec\u7acb\u7684\u5904\u7406\u3002\u4e00\u4e2a\u7f51\u7edc\u53ef\u80fd\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u94fe\u3002\u94fe\u4e0a\u7684\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u5355\u72ec\u7684\u8d26\u672c\u5305\u542b\u4ea4\u6613\u5728\u94fe\u4e0a\u6d3e\u53d1\uff0c\u5305\u62ec\u6210\u5458\u5173\u7cfb\u7684\u4efb\u4f55\u914d\u7f6e\u3002\u6240\u6709\u7684\u4ea4\u6613\u90fd\u662f\u5728\u94fe\u4e0a\u53d1\u9001\uff0c\u4e00\u4e2a\u5e94\u7528\u53ef\u80fd\u64cd\u4f5c\u591a\u4e2a\u94fe\u3002\n\n\n\n\n\n\nPeer\n\n\n2\n\n\n\u4ee3\u8868\u7f51\u7edc\u4e0a\u7684\u8ba1\u7b97\u8282\u70b9\u3002\u8282\u70b9\u7684\u89d2\u8272\u6709\u80cc\u4e66\u8282\u70b9\u548c\u63d0\u4ea4\u8282\u70b9\uff0c\u5b83\u4eec\u90fd\u5728\u7ef4\u62a4\u7740\u8d26\u672c\u3002\u5e94\u7528\u53ef\u80fd\u8fde\u63a5\u5230\u4e00\u5b9a\u6570\u91cf\u7684\u53ef\u7528\u7684\u8282\u70b9\n\n\n\n\n\n\nOrderer\n\n\n2\n\n\n\u7c7b\u4f3c\u8282\u70b9\uff0c\u4e0d\u540c\u7684\u662f\u5b83\u4ee3\u8868\u6392\u5e8f\u670d\u52a1\u7684\u7ec8\u7aef\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u8282\u70b9\uff08\u5f00\u53d1\u65f6\u672c\u5730\u5b89\u88c5\uff09\u6216\u8005\u4e00\u4e2a\u7f51\u7edc\u6392\u5e8f\u8005\u7684\u4ee3\u7406\u8282\u70b9\u3002\u57fa\u4e8e\u533a\u5757\u94fe\u7f51\u7edc\u7684fabric\u4f1a\u6709\u4e00\u4e2a\u7531\u591a\u4e2a\u6392\u5e8f\u8005\u8282\u70b9\u7ec4\u6210\u7684\u5355\u72ec\u7684\u6392\u5e8f\u670d\u52a1\u3002\u5e94\u7528\u53ef\u4ee5\u9009\u62e9\u4fe1\u4efb\u7279\u5b9a\u7684\u6392\u5e8f\u8005\uff0c\u6216\u8005\u4e00\u90e8\u5206\u6392\u5e8f\u8005\uff0c\u6216\u8005\u8bbe\u7f6e\u4ee3\u7406\u53bb\u7ed9\u6392\u5e8f\u8005\u8282\u70b9\u5e7f\u64ad\u4ea4\u6613\u3002\n\n\n\n\n\n\nUser\n\n\n2\n\n\n\u4ee3\u8868\u5728\u7f51\u7edc\u4e0a\u4ea4\u6613\u7684\u7528\u6237\u3002\u7528\u6237\u5b9e\u4f8b\u53ef\u4ee5\u57fa\u4e8e\u767b\u8bb0\u8bc1\u4e66\u88ab\u521d\u59cb\u5316\u3002\u8bc1\u4e66\u53ef\u4ee5\u4ece\u6210\u5458\u670d\u52a1\u6216\u8005\u5916\u90e8CA\u83b7\u53d6\u3002\u7406\u8bba\u4e0a\uff0c\u8fd9\u79cd\u7528\u6237\u4e5f\u80fd\u4ee3\u8868\u7f51\u7edc\u4e0a\u7684\u8282\u70b9\u6210\u5458\u3002\u7136\u800c\uff0c\u8fd9\u4e0e\u5e94\u7528\u7a0b\u5e8f\u65e0\u5173\uff08\u8fd9\u66f4\u50cf\u662f\u7f51\u7edc\u7ba1\u7406\u65b9\u9762\u7684\u95ee\u9898\uff09\uff0c\u6240\u4ee5\u5728\u8fd9\u4e2a\u8bbe\u8ba1\u4e2d\u6ca1\u6709\u5f00\u653e\u3002\n\n\n\n\n\n\nProposal\n\n\n3\n\n\n\u767b\u8bb0\u7684\u7528\u6237\u53ef\u4ee5\u5411\u8282\u70b9\u5217\u8868\u63d0\u51fa\u4ea4\u6613\u63d0\u6848\u6765\u80cc\u4e66\u4ea4\u6613\u3002\u4e00\u65e6\u63a5\u6536\u5230\u80cc\u4e66\u54cd\u5e94\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u51b3\u5b9a\u662f\u5426\u5df2\u7ecf\u83b7\u53d6\u80cc\u4e66\u7b7e\u540d\uff0c\u662f\u5426\u9700\u8981\u6267\u884c\u63d0\u4ea4\u4ea4\u6613\u5230\u5171\u8bc6\u670d\u52a1\u3002\u8fd9\u662f\u5173\u4e8e\u63d0\u6848\u539f\u59cb\u7684GRPC\u6d88\u606f\u7684\u5305\u88c5\u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u4fbf\u5229\u7684\u521b\u5efa\u65b9\u6cd5\u3002\n\n\n\n\n\n\nProposalResponse\n\n\n3\n\n\n\u63d0\u6848\u8c03\u7528\u80cc\u4e66\u8282\u70b9\u7684\u54cd\u5e94\uff0c\u6253\u5305\u80cc\u4e66\u7ed3\u679c\uff08\u662f\u6216\u5426\uff09\uff0c\u7b7e\u540d\uff0c\u7b49\u7b49\u3002\u8fd9\u662f\u5173\u4e8e\u63d0\u6848\u54cd\u5e94\u539f\u59cb\u7684GRPC\u6d88\u606f\u5305\u88c5\u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u4fbf\u5229\u7684\u65b9\u6cd5\u6765\u5229\u7528\u5b83\u81ea\u5df1\u7684\u5185\u5bb9\uff08\u80cc\u4e66\uff0c\u7b7e\u540d\uff0c\u7b49\u7b49\uff09\u3002\n\n\n\n\n\n\nTransaction\n\n\n3\n\n\n\u767b\u8bb0\u7528\u6237\u6536\u96c6\u4e86\u80cc\u4e66\u4e4b\u540e\u53ef\u4ee5\u63d0\u4ea4\u4ea4\u6613\u3002\u4ea4\u6613\u8bf7\u6c42\u5305\u542b\u80cc\u4e66\u7b7e\u540d\u548cMVCC+post-image\uff0c\u5e76\u4e14\u4f7f\u7528\u6392\u5e8f\u670d\u52a1API\u3002\u4ea4\u6613\u6709\u4e24\u79cd\u7c7b\u578b\uff1a\u90e8\u7f72\u548c\u6267\u884c\u3002\u8fd9\u662f\u4ea4\u6613\u6709\u5173\u539f\u59cbGRPC\u6d88\u606f\u7684\u5305\u88c5\u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u4fbf\u5229\u7684\u521b\u5efa\u65b9\u6cd5\u3002\n\n\n\n\n\n\nCryptoSuite\n\n\n3\n\n\n\u52a0\u5bc6\u6a21\u5757\u6253\u5305\u4e86\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5\uff0c\u975e\u5bf9\u79f0\u52a0\u5bc6\u7684\u5bc6\u94a5\u5bf9\uff0c\u5bf9\u79f0\u52a0\u5bc6\u7684\u5bc6\u94a5\u6d88\u606f\uff0c\u5b89\u5168\u7684hash\u548cMAC\u3002\n\n\n\n\n\n\n\n\nPackage: Member Service\n \n\n\n\n\n\n\n\n\n\u6a21\u5757\n\n\n\u7b49\u7ea7\n\n\n\u529f\u80fd\n\n\n\n\n\n\n\n\n\n\nMemberService\n\n\n0\n\n\n\u8fd9\u662ffabric\u53ef\u9009\u6a21\u5757\u7684\u5ba2\u6237\u7aef\uff0c\u6210\u5458\u670d\u52a1\u3002\u672c\u6a21\u5757\u7684\u4e3b\u8981\u529f\u80fd\u662f\u4ece\u6210\u5458\u670d\u52a1\u83b7\u53d6\u7528\u6237\u767b\u8bb0\u8bc1\u4e66\u3002\u53e6\u5916\uff0c\u8fd9\u4e2a\u6a21\u5757\u672c\u8eab\u6216\u5b83\u7684\u6269\u5c55\u7c7b\u4e5f\u5e94\u8be5\u80fd\u5728fabric\u9ed8\u8ba4\u7684\u6210\u5458\u670d\u52a1\u7684\u5b9e\u73b0\u4e2d\u63d0\u4f9b\u53ef\u7528\u7684\u989d\u5916\u7684\u529f\u80fd\uff0c\u5982\u7528\u6237\u6ce8\u518c\u529f\u80fd\u3002\n\n\n\n\n\n\n\n\n\u4e3a\u4e86\u5e2e\u52a9\u8bf4\u660e\u4ee5\u4e0a\u5404\u6a21\u5757\u7684\u5173\u7cfb\uff0c\u6211\u4eec\u7ed9\u51fa\u4e86\u4ee5\u4e0b\u7684UML\u56fe\uff1a\n\n\n\n\n6.1 \u5ba2\u6237\u7aef\n\n\n\u548c\u7ec8\u7aef\u7528\u6237\u4e3b\u8981\u7684\u4ea4\u4e92\u5904\u7406\u5668\u3002\u5ba2\u6237\u7aef\u5b9e\u4f8b\u63d0\u4f9b\u548c\u7f51\u7edc\u4e0a\u7684\u8282\u70b9\uff0c\u6392\u5e8f\u8005\uff0c\u53ef\u9009\u6210\u5458\u670d\u52a1\u4ea4\u4e92\u7684\u5904\u7406\u5668\u3002\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528SDK\u9700\u8981\u548c\u591a\u4e2a\u7f51\u7edc\u4ea4\u4e92\uff0c\u5206\u522b\u901a\u8fc7\u5355\u72ec\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b\u8fdb\u884c\u3002\n\n\n\u6bcf\u4e2a\u5ba2\u6237\u7aef\u88ab\u521b\u5efa\u65f6\uff0c\u5e94\u8be5\u662f\u4f7f\u7528\u6765\u81ea\u4e8e\u5171\u8bc6\u670d\u52a1\u7684\u914d\u7f6e\u6570\u636e\u521d\u59cb\u5316\u521b\u5efa\uff0c\u8fd9\u4e9b\u6570\u636e\u5305\u542b\u4e00\u4e2a\u88ab\u4fe1\u4efb\u7684\u6839\u7684\u5217\u8868\uff0c\u6392\u5e8f\u8282\u70b9\u8bc1\u4e66\u548cIP\u5730\u5740\uff0c\u8fd8\u6709\u4e00\u4e2a\u8282\u70b9\u8bc1\u4e66\u5217\u8868\u548c\u53ef\u4f7f\u7528\u7684IP\u5730\u5740\u3002\u8fd9\u5fc5\u987b\u662f\u4f5c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u73af\u5883\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u7684\u3002\u5e94\u7528\u7a0b\u5e8f\u8d1f\u8d23\u7ef4\u62a4\u5ba2\u6237\u7aef\u7684\u914d\u7f6e\uff0c\u56e0\u4e3aSDK\u4e0d\u6301\u4e45\u5730\u4fdd\u5b58\u8fd9\u4e2a\u5bf9\u8c61\u3002\n\n\n\u6bcf\u4e2a\u5ba2\u6237\u7aef\u5b9e\u4f8b\u53ef\u4ee5\u7ef4\u62a4\u51e0\u6761\u94fe\u4ee3\u8868\u901a\u9053\u548c\u76f8\u5173\u7684\u8d26\u672c\u3002\n\n\n\n\n\n\nnew_chain\uff08\u521b\u5efa\u4e00\u4e2a\u65b0\u94fe\uff09\n\n\n\u6839\u636e\u53c2\u6570\u7ed9\u51fa\u7684\u540d\u5b57\u521b\u5efa\u4e00\u4e2a\u94fe\u7684\u5b9e\u4f8b\u3002\u8fd9\u5b9e\u9645\u4e0a\u4ee3\u8868\u201c\u901a\u9053\u201d\uff08\u6b63\u5982\u4e0a\u9762\u89e3\u91ca\u7684\uff09\uff0c\u8fd9\u4e2a\u8c03\u7528\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5bf9\u8c61\u3002\u521d\u59cb\u5316\u8fd9\u4e2a\u901a\u9053\uff0c\u8fd9\u4e2a\u8fd4\u56de\u7684\u5bf9\u8c61\u4e0a\u5fc5\u987b\u914d\u7f6e\u4e00\u4e2a\u53c2\u4e0e\u65b9\u7684\u80cc\u4e66\u8005\u5217\u8868\u548c\u6392\u5e8f\u8005\u8282\u70b9\u3002\n\n\nParams \uff08\u53c2\u6570\uff09\n\n\n\n\nname (str):\u94fe\u7684\u540d\u79f0\uff0c\u63a8\u8350\u4f7f\u7528\u547d\u540d\u7a7a\u95f4\u9632\u6b62\u78b0\u649e\n\n\n\n\nReturns\uff08\u8fd4\u56de\u503c\uff09\n\n\n\n\n(Chain instance):\u672a\u521d\u59cb\u5316\u7684\u94fe\u7684\u5b9e\u4f8b\n\n\n\n\n\n\n\n\nget_chain\uff08\u83b7\u53d6\u94fe\uff09\n\n\n\u83b7\u53d6\u94fe\u7684\u5b9e\u4f8b\u3002\u672c\u63a5\u53e3\u5141\u8bb8\u4fdd\u5b58\u5df2\u5b58\u5728\u7684\u94fe\u5b9e\u4f8b\u4f9b\u4e4b\u540e\u7684\u68c0\u7d22\uff0c\u5e76\u4e14\u5728\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u4e4b\u95f4\u5171\u4eab\u3002\u8bb0\u5f55\u94fe\u7684\u4fe1\u606f\u662f\u5e94\u7528\u7a0b\u5e8f\u6216\u8005SDK\u8d1f\u8d23\u7684\u4e8b\u60c5\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u67e5\u770b\u5b58\u50a8\u4e2d\u94fe\u7684\u4fe1\u606f\uff0c\u5b83\u53ef\u4ee5\u8c03\u7528\u53e6\u5916\u4e00\u79cdAPI\u67e5\u8be2\u4e00\u4e2a\u6216\u591a\u4e2a\u8282\u70b9\u6765\u83b7\u5f97\u8fd9\u4e9b\u4fe1\u606f\u3002\n\n\nParams\n\n\n\n\nname (str): The name of the chain \uff08\u94fe\u7684\u540d\u79f0\uff09\n\n\n\n\nReturns\n\n\n\n\n(Chain instance or None): the chain instance for the name. \uff08\u4ee5\u5165\u53c2\u547d\u540d\u7684\u94fe\u7684\u5b9e\u4f8b\uff09\n\n\n\n\nError:\n\n\n\n\nThe state store has not been set\uff08\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u5b58\u50a8\u72b6\u6001\uff09\n\n\nA chain does not exist under that name\uff08\u4e0d\u5b58\u5728\u8be5\u540d\u79f0\u547d\u540d\u7684\u94fe\uff09\n\n\n\n\n\n\n\n\nquery_chain_info\uff08\u67e5\u8be2\u94fe\u7684\u4fe1\u606f\uff09\n\n\n\u8fd9\u662f\u4e00\u4e2a\u7f51\u7edc\u8c03\u7528\uff0c\u7528\u6765\u67e5\u8be2\u6307\u5b9a\u7684\u8282\u70b9\u4e0a\u94fe\u7684\u4fe1\u606f\u3002\u76ee\u6807\u8282\u70b9\u5fc5\u987b\u662f\u5c5e\u4e8e\u76ee\u6807\u94fe\uff0c\u624d\u80fd\u591f\u8fd4\u56de\u8bf7\u6c42\u7684\u4fe1\u606f\u3002\n\n\nParams\n\n\n\n\nname (str): The name of the chain \uff08\u94fe\u540d\uff09\n\n\npeers (array of Peer instances): target Peers to query\uff08\u67e5\u8be2\u7684\u76ee\u6807\u8282\u70b9\uff09\n\n\n\n\nReturns\n\n\n\n\n(Chain instance or None): the chain instance for the name.\uff08\u4ee5\u5165\u53c2\u547d\u540d\u7684\u94fe\u7684\u5b9e\u4f8b\u3002\uff09\n\n\n\n\nError:\n\n\n\n\nThe target Peer(s) does not know anything about the chain\uff08\u76ee\u6807\u8282\u70b9\u4e0d\u4e86\u89e3\u94fe\u7684\u4fe1\u606f\uff09\n\n\n\n\n\n\n\n\nset_state_store\uff08\u8bbe\u7f6e\u72b6\u6001\u7684\u5b58\u50a8\uff09\n\n\nSDK\u5e94\u8be5\u6709\u4e00\u4e2a\u5185\u5efa\u7684\u952e\u503c\u5b58\u50a8\u7684\u5b9e\u73b0\uff08\u5efa\u8bae\u662f\u57fa\u4e8e\u6587\u4ef6\u7684\u5b9e\u73b0\uff0c\u4ee5\u4fbf\u4e8e\u5728\u5f00\u53d1\u4e2d\u8bbe\u7f6e\uff09\u3002\u4f46\u662f\u751f\u4ea7\u7cfb\u7edf\u9700\u8981\u901a\u8fc7\u6570\u636e\u5e93\u4e3a\u66f4\u591a\u7684\u7a33\u5b9a\u5b58\u50a8\u548c\u805a\u7c07\u5b58\u50a8\u5907\u4efd\uff0c\u6240\u4ee5\u591a\u79cd\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u53ef\u4ee5\u901a\u8fc7\u6570\u636e\u5e93\u5171\u4eab\u5e94\u7528\u72b6\u6001\uff08\u5907\u6ce8\uff1a\u5e94\u7528\u4e0d\u9700\u8981\u4e30\u5bcc\u7684\u72b6\u6001\uff09\u3002\u8fd9\u4e2aAPI\u4f7f\u5f97\u5b58\u50a8\u6a21\u5757\u5177\u6709\u53ef\u63d2\u62d4\u7279\u6027\uff0c\u6240\u4ee5\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u5b58\u50a8\u5b9e\u73b0\u3002\n\n\nParams\n\n\n\n\nstore (KeyValueStore): instance of an alternative KeyValueStore implementation provided by the consuming app.\uff08\u4f7f\u7528\u65b9\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7684\u952e\u503c\u5b58\u50a8\u5b9e\u73b0\u7684\u5b9e\u4f8b\uff09\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\n\n\n\n\nget_state_store\uff08\u83b7\u53d6\u72b6\u6001\u5b58\u50a8\uff09\n\n\n\u4e3aclient\u63d0\u4f9b\u7684\u83b7\u53d6\u72b6\u6001\u5b58\u50a8\u7684\u5bf9\u8c61\u7684\u4fbf\u5229\u65b9\u6cd5\n\n\nParams\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\n(KeyValueStore instance): The KeyValueStore implementation object set within this Client, or null if it does not exist\uff08\u8fd4\u56de\u8bbe\u7f6e\u5230client\u4e2d\u7684\u6309\u952e\u503c\u5bf9\u65b9\u5f0f\u5b9e\u73b0\u7684\u5b58\u50a8\u5bf9\u8c61\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd4\u56de\u7a7a\uff09\n\n\n\n\n\n\n\n\nset_crypto_suite\uff08\u8bbe\u7f6e\u52a0\u5bc6\u6a21\u5757\uff09\n\n\n\u8bbe\u7f6e\u4e00\u4e2a\u52a0\u5bc6\u6a21\u5757\u7684\u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u662f\u6309CryptoSuite\u63a5\u53e3\u5b9e\u73b0\u7684\u3002\u4e00\u4e2a\u52a0\u5bc6\u6a21\u5757\u6253\u5305\u4e86\u6570\u5b57\u7b7e\u540d\u7684\u7b97\u6cd5\u548c\u4f7f\u7528\u975e\u5bf9\u79f0\u5bc6\u94a5\u5bf9\u7684\u52a0\u5bc6\u529f\u80fd\uff0c\u4f7f\u7528\u5bf9\u79f0\u5bc6\u94a5\u52a0\u5bc6\u7684\u6d88\u606f\uff0c\u5b89\u5168\u7684hashing\u5904\u7406\u548cMAC\u3002\n\n\nParams\n\n\n\n\nSuite (object): an instance of a crypto suite implementation\uff08\u6309\u63a5\u53e3\u5b9e\u73b0\u7684\u52a0\u5bc6\u6a21\u5757\u7684\u5b9e\u4f8b\uff09\n\n\n\n\n\n\n\n\nget_crypto_suite\uff08\u83b7\u53d6\u52a0\u5bc6\u6a21\u5757\uff09\n\n\nClient\u83b7\u53d6\u52a0\u5bc6\u6a21\u5757\u5bf9\u8c61\u7684\u4fbf\u5229\u65b9\u6cd5\u3002\n\n\nParams\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\n(CryptoSuite instance): The CryptoSuite implementation object set within this Client, or null if it does not exist\uff08\u52a0\u5bc6\u6a21\u5757\u7684\u5bf9\u8c61\uff09\n\n\nset_user_context\uff08\u8bbe\u7f6e\u7528\u6237\u4e0a\u4e0b\u6587\uff09\n\n\n\n\n\u6839\u636eclient\u5b9e\u4f8b\u7684\u5b89\u5168\u7684\u4e0a\u4e0b\u6587\u8bbe\u7f6e\u7528\u6237\u7c7b\u7684\u5b9e\u4f8b\u3002\u7528\u6237\u7684\u8d44\u683c\u8bc1\u4e66\u4f1a\u88ab\u7528\u6765\u6267\u884c\u4ea4\u6613\u5e76\u4e14\u67e5\u8be2\u533a\u5757\u94fe\u7f51\u7edc\u3002\u5982\u679c\u72b6\u6001\u5b58\u50a8\u5df2\u7ecf\u8bbe\u7f6e\u5230\u4e86client\u5b9e\u4f8b\u4e0a\uff0c\u6839\u636e\u8bbe\u5b9a\u7684\u7528\u6237\u4e0a\u4e0b\u6587\uff0cSDK\u53ef\u4ee5\u628a\u5bf9\u8c61\u4fdd\u5b58\u5728\u4e00\u4e2a\u6301\u4e45\u5316\u7684\u7f13\u5b58\u4e2d\u3002\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u72b6\u6001\u5b58\u50a8\uff0c\u5f53\u5e94\u7528\u7a0b\u5e8f\u5d29\u6e83\u6216\u8005\u88ab\u8986\u76d6\u65f6\uff0c\u7f13\u5b58\u4e0d\u80fd\u88ab\u521b\u5efa\uff0c\u5e76\u4e14\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u518d\u6b21\u8bbe\u7f6e\u7528\u6237\u4e0a\u4e0b\u6587\u3002\n\n\nParams\n\n\n\n\nuser (User): an instance of the User class encapsulating the authenticated user\u2019s signing materials (private key and enrollment certificate) \uff08\u53c2\u6570\u662f\u7528\u6237\uff0c\u7528\u6237\u7c7b\u7684\u5b9e\u4f8b\uff0c\u5b83\u628a\u88ab\u8ba4\u8bc1\u7528\u6237\u62e5\u6709\u7684\u7b7e\u540d\u6750\u6599\uff08\u79c1\u94a5\u548c\u80cc\u4e66\u8bc1\u4e66\uff09\u6253\u5305\u5728\u5185\uff09\n\n\n\n\n\n\n\n\nget_user_context\uff08\u83b7\u53d6\u7528\u6237\u4e0a\u4e0b\u6587\uff09\n\n\n\u6b63\u5982\u4e0a\u9762\u6240\u89e3\u91ca\u7684\uff0cclient\u5b9e\u4f8b\u53ef\u4ee5\u62e5\u6709\u4e00\u4e2a\u53ef\u9009\u7684\u72b6\u6001\u5b58\u50a8\u3002SDK\u4fdd\u5b58\u5df2\u6ce8\u518c\u7528\u6237\u5230\u53ef\u4ee5\u88ab\u5e94\u7528\u7a0b\u5e8f\u7684\u5df2\u8ba4\u8bc1\u7528\u6237\uff08\u8ba4\u8bc1\u7684\u5de5\u4f5c\u5728SDK\u4e4b\u5916\u7531\u5e94\u7528\u7a0b\u5e8f\u5b8c\u6210\uff09\u5229\u7528\u7684\u5b58\u50a8\u4e2d\u3002\u672c\u65b9\u6cd5\u8bd5\u56fe\u901a\u8fc7\u672c\u5730\u5b58\u50a8\u4e2d\u7684\u540d\u79f0\uff08\u901a\u8fc7\u952e\u503c\u5b58\u50a8\u63a5\u53e3\u83b7\u53d6\uff09\u52a0\u8f7d\u7528\u6237\u3002\u5df2\u52a0\u8f7d\u7684\u7528\u6237\u5bf9\u8c61\u5fc5\u987b\u4ee3\u8868\u4e00\u4e2a\u5df2\u6ce8\u518c\u7528\u6237\uff0c\u5e76\u4e14\u8be5\u7528\u6237\u62e5\u6709\u4e00\u4e2a\u5df2\u4fe1\u4efb\u7684CA\uff08\u5982COP\u670d\u52a1\uff09\u7b7e\u540d\u7684\u53ef\u7528\u7684\u80cc\u4e66\u8bc1\u4e66\u3002\n\n\nParams\n\n\n\n\nname (str): The name of the user \uff08\u7528\u6237\u540d\u79f0\uff09\n\n\n\n\nReturns\n\n\n\n\n(User instance): The user object corresponding to the name, or null if the user does not exist or if the state store has not been set\uff08\u8fd4\u56de\u5339\u914d\u540d\u79f0\u7684\u7528\u6237\u5bf9\u8c61\uff0c\u5982\u679c\u7528\u6237\u4e0d\u5b58\u5728\u6216\u8005\u72b6\u6001\u5b58\u50a8\u672a\u8bbe\u7f6e\u8fd4\u56de\u7a7a\uff09\n\n\n\n\n\n\n\n\n6.2 \u94fe\n\n\n\u201c\u94fe\u201d\u5bf9\u8c61\u4ece\u901a\u9053\u83b7\u53d6\u8bbe\u7f6e\u9879\uff0c\u7531\u6392\u5e8f\u8005\u8282\u70b9\u521b\u5efa\uff0c\u4e0e\u6392\u5e8f\u8005\u7ed9\u901a\u9053\u4e0a\u53c2\u4e0e\u7684\u8282\u70b9\u6d3e\u53d1\u4ea4\u6613\u7684\u884c\u4e3a\u76f8\u9694\u79bb\u3002\u6839\u636e\u8282\u70b9\u5217\u8868\u548c\u6392\u5e8f\u8005\u5217\u8868\u914d\u7f6e\u94fe\u4e4b\u540e\uff0c\u5b83\u5fc5\u987b\u88ab\u521d\u59cb\u5316\u3002\u521d\u59cb\u5316\u8fc7\u7a0b\u7ed9\u6392\u5e8f\u8005\u8282\u70b9\u53d1\u9001\u4e00\u4e2a\u914d\u7f6e\u4ea4\u6613\u6765\u521b\u5efa\u7279\u5b9a\u7684\u901a\u9053\uff0c\u5e76\u4e14\u8be2\u95ee\u8282\u70b9\u52a0\u5165\u901a\u9053\u3002\n\n\n\n\n\n\nadd_peer\uff08\u6dfb\u52a0\u8282\u70b9\uff09\n\n\n\u7ed9\u94fe\u5bf9\u8c61\u6dfb\u52a0\u8282\u70b9\uff0c\u8fd9\u662f\u7eaf\u672c\u5730\u64cd\u4f5c\u3002\n\n\nParams\n\n\n\n\npeer (Peer): an instance of the Peer class that has been initialized with URL, TLC certificate, and enrollment certificate\uff08\u5165\u53c2\uff1a\u88abURL\uff0cTLC\u8bc1\u4e66\uff0c\u548c\u80cc\u4e66\u8bc1\u4e66\u521d\u59cb\u5316\u4e4b\u540e\u7684Peer\u7c7b\u7684\u5bf9\u8c61\u3002\uff09\n\n\n\n\n\n\n\n\nremove_peer\uff08\u79fb\u9664\u8282\u70b9\uff09\n\n\n\u4ece\u94fe\u5bf9\u8c61\u79fb\u9664\u8282\u70b9\uff0c\u8fd9\u662f\u4e00\u4e2a\u7eaf\u672c\u5730\u64cd\u4f5c\u3002\n\n\nParams\n\n\n\n\npeer (Peer): an instance of the Peer class\uff08\u8282\u70b9\u5b9e\u4f8b\uff09\n\n\n\n\n\n\n\n\nget_peers\uff08\u83b7\u53d6\u8282\u70b9\uff09\n\n\n\u4ece\u94fe\u7684\u672c\u5730\u4fe1\u606f\u83b7\u53d6\u8282\u70b9\u3002\n\n\nParams\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\n(Peer list): The peer list on the chain\uff08\u8fd4\u56de\u94fe\u4e0a\u7684\u8282\u70b9\u5217\u8868\u3002\uff09\n\n\n\n\n\n\n\n\nadd_orderer\uff08\u6dfb\u52a0\u6392\u5e8f\u8282\u70b9\uff09\n\n\n\u7ed9\u94fe\u5bf9\u8c61\u6dfb\u52a0\u6392\u5e8f\u8005\u8282\u70b9\uff0c\u8fd9\u662f\u7eaf\u672c\u5730\u64cd\u4f5c\u3002\u94fe\u5b9e\u4f8b\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u5355\u4e2a\u7684\u6392\u5e8f\u8005\u8282\u70b9\uff0c\u8fd9\u4e2a\u6392\u5e8f\u8005\u8d1f\u8d23\u5411\u6392\u5e8f\u8005\u7f51\u7edc\u4e2d\u5176\u4ed6\u6392\u5e8f\u8005\u5e7f\u64ad\u8bf7\u6c42\u3002\u6216\u8005\u5982\u679c\u5e94\u7528\u4e0d\u4fe1\u4efb\u6392\u5e8f\u8005\u8282\u70b9\uff0c\u5b83\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u66f4\u591a\u7684\u6392\u5e8f\u8005\uff0c\u4ec5\u9700\u8981\u5411\u94fe\u5bf9\u8c61\u6dfb\u52a0\u5b83\u4eec\u5373\u53ef\u3002\u6709\u5173\u67d0\u4e2a\u6392\u5e8f\u8005\u7684\u6240\u6709API\u4f1a\u540c\u65f6\u5e7f\u64ad\u7ed9\u6240\u6709\u7684\u6392\u5e8f\u8005\u3002\n\n\nParams\n\n\n\n\norderer (Orderer): an instance of the Orderer class \uff08Orderer\u5b9e\u4f8b\uff09\n\n\n\n\n\n\n\n\nremove_orderer\uff08\u79fb\u9664\u6392\u5e8f\u8282\u70b9\uff09\n\n\n\u4ece\u94fe\u5bf9\u8c61\u79fb\u9664\u6392\u5e8f\u8005\u8282\u70b9\uff0c\u8fd9\u662f\u7eaf\u672c\u5730\u64cd\u4f5c\u3002\n\n\nParams\n\n\n\n\norderer (Orderer): an instance of the Orderer class\n\n\n\n\n\n\n\n\nget_orderers\uff08\u83b7\u53d6\u6392\u5e8f\u8282\u70b9\uff09\n\n\n\u83b7\u53d6\u94fe\u7684\u6392\u5e8f\u8282\u70b9\uff0c\u8fd9\u662f\u7eaf\u672c\u5730\u64cd\u4f5c\u3002\n\n\nParams\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\n(Orderer list): The orderer list on the chain\n\n\n\n\n\n\n\n\ninitialize_chain\uff08\u521d\u59cb\u5316\u94fe\uff09\n\n\n\u8c03\u7528\u6392\u5e8f\u8005\u6765\u5f00\u59cb\u521b\u5efa\u65b0\u7684\u94fe\uff0c\u521b\u5efa\u52a8\u4f5c\u672c\u8eab\u662f\u5f00\u653e\u7684\u65b0\u7684\u6d88\u606f\u6d41\u548c\u8fde\u63a5\u53c2\u4e0e\u8282\u70b9\u7684\u7ec4\u5408\u3002\u8fd9\u662f\u4e00\u4e2a\u8017\u65f6\u7684\u5904\u7406\u3002\u53ea\u6709\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u9700\u8981\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u3002\u4e00\u65e6\u94fe\u88ab\u6210\u529f\u521b\u5efa\uff0c\u5176\u4ed6\u7684\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u4ec5\u4ec5\u9700\u8981\u8c03\u7528get_chain()\u6765\u83b7\u53d6\u6709\u5173\u94fe\u7684\u4fe1\u606f\u3002\n\n\nParams\n\n\n\n\nNone\n\n\n\n\nReturns \uff08\u94fe\u7684\u521d\u59cb\u5316\u52a8\u4f5c\u662f\u5426\u6267\u884c\u6210\u529f\uff09\n\n\n\n\n(bool): whether the chain initialization process was successful\n\n\n\n\n\n\n\n\nupdate_chain\uff08\u66f4\u65b0\u94fe\uff09\n\n\n\u8c03\u7528\u6392\u5e8f\u8005\u8282\u70b9\u6765\u66f4\u65b0\u5df2\u7ecf\u5b58\u5728\u7684\u94fe\u3002\u8fd9\u5141\u8bb8\u7ed9\u5df2\u5b58\u5728\u7684\u94fe\u6dfb\u52a0\u6216\u5220\u9664\u8282\u70b9\uff0c\u4e5f\u662f\u57fa\u4e8e\u8bc1\u4e66\u91cd\u5efa\u5bf9\u8282\u70b9\u8bc1\u4e66\u4fe1\u606f\u8fdb\u884c\u66f4\u65b0\u3002\n\n\nParams\n\n\n\n\nNone\n\n\n\n\nReturns \uff08\u66f4\u65b0\u94fe\u7684\u64cd\u4f5c\u662f\u5426\u6210\u529f\uff09\n\n\n\n\n(bool): whether the chain update process was successful\n\n\n\n\n\n\n\n\nis_readonly\uff08\u662f\u5426\u53ea\u8bfb\uff09\n\n\n\u83b7\u53d6\u94fe\u7684\u72b6\u6001\u6765\u67e5\u770b\u5e95\u5c42\u901a\u9053\u662f\u5426\u5df2\u7ecf\u88ab\u7ec8\u6b62\uff0c\u521b\u5efa\u4e00\u4e2a\u53ea\u8bfb\u94fe\uff0c\u53ef\u4ee5\u67e5\u8be2\u4fe1\u606f\uff08\u4ea4\u6613\u548c\u72b6\u6001\uff09\u4f46\u662f\u4e0d\u53ef\u4ee5\u63d0\u4ea4\u65b0\u7684\u4ea4\u6613\u3002\n\n\nParams\n\n\n\n\nNone\n\n\n\n\nReturns \uff08\u662f\u5426\u53ea\u8bfb\uff09\n\n\n\n\n(bool): is ready-only (true) or not\n\n\n\n\n\n\n\n\nquery_info\uff08\u67e5\u8be2\u4fe1\u606f\uff09\n\n\n\u67e5\u8be2\u94fe\u7684\u72b6\u6001\uff08\u9ad8\u5ea6\uff0c\u5df2\u77e5\u7684\u8282\u70b9\uff09\u4e2d\u591a\u79cd\u6709\u7528\u4fe1\u606f\u3002\n\n\nParams\n\n\n\n\nnone\n\n\n\n\nReturns \n\n\n\n\n(ChainInfo) with height, currently the only useful info\n\n\n\n\n\n\n\n\nquery_block\uff08\u67e5\u8be2\u5757\uff09\n\n\n\u6839\u636e\u5757\u53f7\u67e5\u8be2\u5757\u3002\n\n\nParams\n\n\n\n\nblockNumber (number)\n\n\n\n\nReturns\n\n\n\n\nObject containing the block\n\n\n\n\n\n\n\n\nquery_transaction\uff08\u67e5\u8be2\u4ea4\u6613\uff09\n\n\n\u6839\u636e\u4ea4\u6613\u53f7\u67e5\u8be2\u4ea4\u6613\u3002\n\n\nParams\n\n\n\n\ntransactionID\n\n\n\n\nReturns\n\n\n\n\nTransactionInfo containing the transaction\n\n\n\n\n\n\n\n\ncreate_deploy_proposal\uff08\u521b\u5efa\u90e8\u7f72\u63d0\u6848\uff09\n\n\n\u521b\u5efa\u4ea4\u6613\u63d0\u6848\u3002\u901a\u8fc7\u6570\u636e\uff08chaincodeID\uff0cchaincode\u8c03\u7528\uff0c\u7b49\uff09\u88c5\u914d\u63d0\u6848\uff0c\u5e76\u4e14\u4f7f\u7528\u5339\u914dECert\u7b7e\u540d\u7684\u79c1\u94a5\u7b7e\u540d\u63d0\u6848\u3002\n\n\nParams\n\n\n\n\nchaincode_path (string): path to the chaincode to deploy\n\n\nchaincode_name (string): a custom name to identify the chaincode on the chain\n\n\nfcn (string): name of the chaincode function to call after deploy to initiate the state\uff08chaincode\u7684\u65b9\u6cd5\u540d\uff0c\u90e8\u7f72\u540e\u521d\u59cb\u5316\u72b6\u6001\u65f6\u8981\u8c03\u7528\u5b83\uff09\n\n\nargs (string[]): arguments for calling the init function designated by \u201cfcn\u201d\uff08\u4e0a\u9762fcn\u7684\u53c2\u6570\uff09\n\n\nsign (Bool): Whether to sign the transaction, default to True\n\n\n\n\nReturns\n\n\n\n\n(Proposal): The created Proposal instance or None.\n\n\n\n\n\n\n\n\ncreate_transaction_proposal\uff08\u521b\u5efa\u4ea4\u6613\u63d0\u6848\uff09\n\n\n\u4e3a\u4ea4\u6613\u521b\u5efa\u4e00\u4e2a\u63d0\u6848\u3002\u901a\u8fc7\u6570\u636e\uff08chaincode\u540d\u79f0\uff0c\u9700\u8981\u8c03\u7528\u7684\u65b9\u6cd5\uff0c\u53c2\u6570\u7b49\uff09\u88c5\u914d\u63d0\u6848\uff0c\u5e76\u4e14\u4f7f\u7528\u5339\u914dECert\u7b7e\u540d\u7684\u79c1\u94a5\u7ed9\u63d0\u6848\u7b7e\u540d\u3002\n\n\nParams\n\n\n\n\nchaincode_name (string): The name given to the target chaincode to invoke\uff08\u8981\u6267\u884c\u7684\u76ee\u6807chaincode\u7684\u540d\u79f0\uff09\n\n\nargs (string[]): arguments for calling the \u201cinvoke\u201d method on the chaincode\uff08\u6b63\u5728\u8c03\u7528\u6267\u884c\u7684chaincode\u4e0a\u7684\u65b9\u6cd5\u7684\u53c2\u6570\uff09\n\n\nSign (Bool): Whether to sign the transaction, default to True\n\n\n\n\nReturns\n\n\n\n\n(Transaction_Proposal instance): The created Transaction_Proposal instance or None.\n\n\n\n\n\n\n\n\nsend_transaction_proposal\uff08\u53d1\u9001\u4ea4\u6613\u63d0\u6848\uff09\n\n\n\u628a\u521b\u5efa\u597d\u7684\u63d0\u6848\u53d1\u9001\u7ed9\u8282\u70b9\u53bb\u80cc\u4e66\u3002\n\n\nParams\n\n\n\n\ntransaction_proposal (Transaction_Proposal): The transaction proposal data\uff08\u4ea4\u6613\u63d0\u6848\u7684\u6570\u636e\uff09\n\n\nchain: The target chain whose peers the proposal will be sent to\uff08\u63d0\u6848\u5c06\u8981\u53d1\u9001\u7ed9\u7684\u8282\u70b9\u6240\u5728\u7684\u76ee\u6807\u94fe\uff09\n\n\nretry (Number): Times to retry when failure, by default to 0 (no retry)\uff08\u91cd\u8bd5\u6b21\u6570\uff0c\u9ed8\u8ba40\uff09\n\n\n\n\nReturns\n\n\n\n\n(Transaction_Proposal_Response response): The response to send proposal request.\uff08\u53d1\u9001\u63d0\u6848\u8bf7\u6c42\u540e\u7684\u54cd\u5e94\uff09\n\n\n\n\n\n\n\n\ncreate_transaction\uff08\u521b\u5efa\u4ea4\u6613\uff09\n\n\n\u9075\u4ece\u80cc\u4e66\u7b56\u7565\u6839\u636e\u63d0\u6848\u7684\u54cd\u5e94\u4fe1\u606f\u521b\u5efa\u4ea4\u6613\u3002\n\n\nParams\n\n\n\n\nproposal_responses ([Transaction_Proposal_Response]): The array of proposal responses received in the proposal call.\uff08\u5728\u63d0\u6848\u7684\u8c03\u7528\u4e2d\u8fd4\u56de\u7684\u54cd\u5e94\u4fe1\u606f\u7684\u6570\u7ec4\uff09\n\n\n\n\nReturns\n\n\n\n\n(Transaction instance): The created transaction object instance.\uff08\u521b\u5efa\u7684\u4ea4\u6613\u5bf9\u8c61\u5b9e\u4f8b\uff09\n\n\n\n\n\n\n\n\nsend_transaction\uff08\u53d1\u9001\u4ea4\u6613\uff09\n\n\n\u7ed9\u94fe\u7684\u6392\u5e8f\u670d\u52a1\uff08\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u6392\u5e8f\u8005\u8282\u70b9\u7ec4\u6210\uff09\u53d1\u9001\u4ea4\u6613\uff0c\u7136\u540e\u505a\u5171\u8bc6\u548c\u63d0\u4ea4\u5230\u8d26\u672c\u7684\u5de5\u4f5c\u3002\n\n\n\u672c\u8c03\u7528\u662f\u5f02\u6b65\u7684\uff0c\u5e76\u4e14\u4ea4\u6613\u63d0\u4ea4\u6210\u529f\u4fe1\u606f\u662f\u901a\u8fc7\u5757\u6216\u8005chaincode\u4e8b\u4ef6\u901a\u77e5\u7684\u3002\uff08\u672c\u65b9\u6cd5\u5fc5\u987b\u7ed9\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e00\u4e2a\u54cd\u5e94\u673a\u5236\u5173\u8054\u4e8b\u4ef6\u76d1\u542c\u5668\u5904\u7406\u201c\u4ea4\u6613\u5df2\u63d0\u4ea4\u201d\uff0c\u201c\u4ea4\u6613\u5b8c\u6210\u201d\uff0c\u201c\u9519\u8bef\u201d\u7b49\u4e8b\u4ef6\u3002\uff09\n\n\n\u4e0b\u9762\u6709\u4e24\u79cd\u6709\u5173fabric\u540e\u7aef\u7684\u6c9f\u901a\u65b9\u5f0f\uff0c\u89e6\u53d1\u4e0d\u540c\u7684\u4e8b\u4ef6\u56de\u8c03\u7ed9\u5e94\u7528\u7a0b\u5e8f\u5904\u7406\u5668\n\n\n\n\n\u6392\u5e8f\u8005\u670d\u52a1\u7684gRPC\u5ba2\u6237\u7aef\u5728\u201c\u5e7f\u64ad\u201d\u8c03\u7528\u7684\u8bf7\u6c42\u6216\u54cd\u5e94\u65b9\u6cd5\u4e2d\u4f7f\u7528\u5e38\u89c4\u7684\u65e0\u72b6\u6001\u7684HTTP \u8fde\u63a5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7684\u5b9e\u73b0\u9700\u8981\u5728\u54cd\u5e94\u4e2d\u63a5\u6536\u5230\u6210\u529f\u786e\u8ba4\u65f6\u53d1\u9001\u201c\u4ea4\u6613\u5df2\u63d0\u4ea4\u201d\u4e8b\u4ef6\uff0c\u6216\u8005\u5728\u63a5\u6536\u5230\u9519\u8bef\u65f6\u53d1\u9001\u201c\u9519\u8bef\u201d\u4e8b\u4ef6\n\n\n\u4e3a\u4e86\u652f\u6301fabric\u201cBLOCK\u201d \u201d, \u201cCHAINCODE\u201d\u548c\u201cTRANSACTION\u201d\u4e8b\u4ef6\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u7684\u5b9e\u73b0\u9700\u8981\u548c\u4f5c\u4e3a\u5185\u90e8\u4e8b\u4ef6\u67a2\u7ebd\u673a\u5236\u4e00\u90e8\u5206\u7684\u94fe\u4e8b\u4ef6\u6e90\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u6301\u4e45\u7684\u8fde\u63a5\u3002\u8fd9\u4e9b\u4e8b\u4ef6\u5e94\u8be5\u5f15\u53d1\u65b9\u6cd5\u7ed9\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u201c\u5b8c\u6210\u201d\u6216\u201c\u9519\u8bef\u201d\u4e8b\u4ef6\u3002\n\n\n\n\nParams\n\n\n\n\ntransaction (Transaction): The transaction object constructed above\uff08\u4e0a\u9762\u521b\u5efa\u7684\u4ea4\u6613\u5bf9\u8c61\u3002\uff09\n\n\n\n\nReturns\uff08\u4e00\u4e2a\u4e8b\u4ef6\u5904\u7406\uff0c\u53ef\u4ee5\u5173\u8054\u5230\u5e94\u7528\u7a0b\u5e8f\u4e8b\u4ef6\u5904\u7406\u5668\u7684\uff09\n\n\n\n\nresult (EventEmitter): an handle to allow the application to attach event handlers on\u201csubmitted\u201d, \u201ccomplete\u201d, and \u201cerror\u201d.\n\n\n\n\n\n\n\n\n6.3 \u7528\u6237\n\n\n\u7528\u6237\u7c7b\u4ee3\u8868\u5df2\u7ecf\u901a\u8fc7\u6ce8\u518c\u8bc1\u4e66\u6ce8\u518c\u548c\u7b7e\u540d\u5bc6\u94a5\u7b7e\u540d\u7684\u5df2\u767b\u8bb0\u7528\u6237\u3002\u6ce8\u518c\u8bc1\u4e66\u5fc5\u987b\u901a\u8fc7\u533a\u5757\u94fe\u7f51\u7edc\u914d\u7f6e\u4fe1\u4efb\u7684CA\u8bc1\u4e66\u7b7e\u540d\u3002\u5df2\u6ce8\u518c\u7528\u6237\uff08\u62e5\u6709\u5df2\u7b7e\u540d\u5bc6\u94a5\u548c\u6ce8\u518c\u8bc1\u4e66\uff09\u53ef\u4ee5\u5f15\u5bfcchaincode\u90e8\u7f72\uff0c\u4ea4\u6613\u548c\u94fe\u4e0a\u67e5\u8be2\u3002\n\n\n\u7528\u6237\u6ce8\u518c\u8bc1\u4e66\u53ef\u4ee5\u4e8b\u5148\u4f5c\u4e3a\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u4eceCA\u83b7\u53d6\uff0c\u6216\u8005\u53ef\u4ee5\u901a\u8fc7\u5b83\u672c\u8eab\u7684\u767b\u8bb0\u7a0b\u5e8f\u4ece\u53ef\u9009\u7684fabric COP\u670d\u52a1\u83b7\u53d6\u3002\n\n\n\u6709\u65f6\u7528\u6237\u8ba4\u8bc1\u548c\u8282\u70b9\u8ba4\u8bc1\u4f1a\u6df7\u6dc6\u3002\u56e0\u4e3a\u7528\u6237\u53ef\u4ee5\u5229\u7528\u79c1\u94a5\uff0c\u6240\u4ee5\u7528\u6237\u8eab\u4efd\u6709\u4ee3\u7406\u7b7e\u540d\u7684\u80fd\u529b\uff0c\u800c\u8282\u70b9\u5728\u5e94\u7528\u7a0b\u5e8f/SDKs\u4e0a\u4e0b\u6587\u4e2d\u53ea\u6709\u9a8c\u8bc1\u7b7e\u540d\u7684\u8ba4\u8bc1\u80fd\u529b\u3002\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u4f7f\u7528\u8282\u70b9\u8eab\u4efd\u6765\u7b7e\u540d\u56e0\u4e3a\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u5229\u7528\u8282\u70b9\u8eab\u4efd\u7684\u79c1\u94a5\u3002\n\n\n\n\n\n\nget_name\uff08\u83b7\u53d6\u540d\u79f0\uff09\n\n\n\u83b7\u53d6\u6210\u5458\u540d\u79f0\u3002\u4ece\u5bf9\u8c61\u5b9e\u4f8b\u8bf7\u6c42\u53c2\u6570\u3002\n\n\nReturns (str):\n\n\n\n\nThe name of the user\n\n\n\n\nget_roles\uff08\u83b7\u53d6\u89d2\u8272\uff09\n\n\n\u83b7\u53d6\u7528\u6237\u7684\u89d2\u8272\u3002\u5b83\u53ef\u80fd\u662f\u201c\u5ba2\u6237\u7aef\u201d\u201c\u5ba1\u8ba1\u5458\u201d\u8fd9\u7c7b\u503c\u7684\u6570\u7ec4\u3002\u6210\u5458\u670d\u52a1\u591a\u5b9a\u4e49\u4e86\u4e24\u4e2a\u7684\u89d2\u8272\u7528\u6765\u4fdd\u5b58\u8282\u70b9\u6210\u5458\u5173\u7cfb\uff0c\u5982\u201c\u8282\u70b9\u201d\u548c\u201c\u9a8c\u8bc1\u8005\u201d\uff0c\u8fd9\u4e24\u4e2a\u6ca1\u6709\u66b4\u9732\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\n\n\n\n\nReturns (str[]):\n\n\n\n\nThe roles for this user\n\n\n\n\n\n\n\n\nget_enrollment_certificate\uff08\u83b7\u53d6\u80cc\u4e66\u8bc1\u4e66\uff09\n\n\n\u8fd4\u56de\u5e95\u5c42\u8ba4\u8bc1\u8bc1\u4e66\u4ee3\u8868\u7684\u7528\u6237\u8eab\u4efd\u8bc1\u4e66\u3002\n\n\nParams: none\n\n\nReturns:\n\n\n\n\nCertificate in PEM format signed by the trusted CA\uff08\u8fd4\u56de\u5df2\u4fe1\u4efb\u7684CA\u6309PEM\u683c\u5f0f\u7b7e\u540d\u7684\u8bc1\u4e66\uff09\n\n\n\n\n\n\n\n\nset_name\uff08\u8bbe\u7f6e\u540d\u79f0\uff09\n\n\n\u8bbe\u7f6e\u7528\u6237\u7684\u540d\u79f0/ID\u3002\n\n\nParams:\n\n\n\n\nname (string[): The user name / id.\n\n\n\n\n\n\n\n\nset_roles\uff08\u8bbe\u7f6e\u89d2\u8272\uff09\n\n\n\u6309\u4e0a\u9762\u5b9a\u4e49\u7684\u89d2\u8272\u503c\u8bbe\u7f6e\u7528\u6237\u89d2\u8272\u3002\n\n\nParams:\n\n\n\n\nRoles (string[]): The list of roles for the user\uff08\u5165\u53c2\u7528\u6237\u7684\u89d2\u8272\u5217\u8868\u3002\uff09\n\n\n\n\n\n\n\n\nset_enrollment_certificate\uff08\u8bbe\u7f6e\u80cc\u4e66\u8bc1\u4e66\uff09\n\n\n\u8bbe\u7f6e\u7528\u6237\u7684\u80cc\u4e66\u8bc1\u4e66\u3002\n\n\nParams: \n\n\n\n\nCertificate : The certificate in PEM format signed by the trusted CA\uff08\u5165\u53c2\u662f\u88ab\u5df2\u4fe1\u4efb\u7684CA\u6309PEM\u683c\u5f0f\u7b7e\u540d\u7684\u8bc1\u4e66\uff09\n\n\n\n\n\n\n\n\ngenerate_tcerts\uff08\u751f\u6210\u4ea4\u6613\u8bc1\u4e66\uff09\n\n\n\u83b7\u53d6\u4e00\u7cfb\u5217TCert\uff0c\u53ef\u4ee5\u5728\u4ea4\u6613\u4e2d\u4f7f\u7528\u3002TCert\u548c\u4ea4\u6613\u4e4b\u95f4\u662f\u4e00\u5bf9\u4e00\u7684\u5173\u7cfb\u3002TCert\u53ef\u4ee5\u5728\u672c\u5730\u901a\u8fc7SDK\u4f7f\u7528\u7528\u6237\u7684\u52a0\u5bc6\u6570\u636e\u9879\u751f\u6210\u3002\n\n\nParams\n\n\n\n\ncount (number): how many in the batch to obtain?\uff08\u83b7\u53d6\u7684\u4ea4\u6613\u8bc1\u4e66\u7684\u6570\u91cf\uff09\n\n\nAttributes (string[]): list of attributes to include in the TCert\uff08TCert\u5305\u542b\u7684\u5c5e\u6027\u7684\u5217\u8868\uff09\n\n\n\n\nReturns (TCert[]):\n\n\n\n\nAn array of TCerts\n\n\n\n\n\n\n\n\n6.4 \u8282\u70b9\n\n\n\u8282\u70b9\u7c7b\u4ee3\u8868\u4e86\u8fdc\u7a0b\u8282\u70b9\u548c\u5b83\u672c\u8eab\u7f51\u7edc\u6210\u5458\u7684\u6570\u636e\uff0c\u5373\u7528\u6765\u9a8c\u8bc1\u7b7e\u540d\u7684ECert\u3002\u8282\u70b9\u6210\u5458\u4ee3\u8868\u7ec4\u7ec7\uff0c\u4e0d\u50cf\u7528\u6237\u6210\u5458\u4ee3\u8868\u4e2a\u4f53\u3002\n\n\n\u5f53\u8282\u70b9\u88ab\u521b\u5efa\u540e\uff0c\u53ea\u8981\u914d\u7f6e\u4e00\u4e2a\u540d\u4e3a\u201ceventSourceUrl\u201d\u7684\u5c5e\u6027\uff0c\u8282\u70b9\u5b9e\u4f8b\u5c31\u53ef\u4ee5\u88ab\u6307\u5b9a\u4e3a\u4e00\u4e2a\u4e8b\u4ef6\u6e90\u3002\u5141\u8bb8SDK\u81ea\u52a8\u5173\u8054\u4ea4\u6613\u4e8b\u4ef6\u76d1\u542c\u5668\u4e8b\u4ef6\u6d41\u3002\n\n\n\u9700\u8981\u8bf4\u660e\u7684\u662f\u8282\u70b9\u4e8b\u4ef6\u6d41\u529f\u80fd\u5728\u8282\u70b9\u5c42\u6b21\uff0c\u4e0d\u5728\u94fe\u548cchaincode\u7684\u5c42\u6b21\u3002\n\n\n\n\n\n\nconnectEventSource\uff08\u8fde\u63a5\u4e8b\u4ef6\u6e90\uff09\n\n\n\u7531\u4e8e\u51e0\u4e4e\u6240\u6709\u8282\u70b9\u90fd\u662f\u4e8b\u4ef6\u7684\u751f\u4ea7\u8005\uff0c\u5f53\u521b\u5efa\u4e00\u4e2a\u8282\u70b9\u5b9e\u4f8b\u65f6\uff0c\u5e94\u7528\u53ef\u4ee5\u6307\u5b9a\u5b83\u4f5c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u7684\u4e8b\u4ef6\u6e90\u3002\u53ea\u9700\u8981\u94fe\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9\u6210\u4e3a\u4e8b\u4ef6\u6e90\uff0c\u56e0\u4e3a\u94fe\u4e0a\u7684\u6240\u6709\u8282\u70b9\u4ea7\u751f\u7684\u4e8b\u4ef6\u76f8\u540c\u3002\u672c\u65b9\u6cd5\u544a\u8bc9SDK\u5bf9\u4e8e\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\u54ea\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u4e8b\u4ef6\u6e90\u4f7f\u7528\u3002\u7ba1\u7406\u4e0e\u8282\u70b9\u7684EventHub\u8fde\u63a5\u7684\u751f\u547d\u5468\u671f\u662fSDK\u7684\u8d23\u4efb\u3002\u7406\u89e3\u5e76\u901a\u77e5\u9009\u62e9\u7684\u8282\u70b9\u60f3\u63a5\u6536\u54ea\u79cd\u4e8b\u4ef6\u7c7b\u578b\u4ee5\u53ca\u60f3\u4f7f\u7528\u54ea\u4e2a\u56de\u8c03\u65b9\u6cd5\uff0c\u662f\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u7684\u8d23\u4efb\u3002\n\n\nParams:\n\n\n\n\nNone\n\n\n\n\nResult:\n\n\n\n\nPromise/Future: this gives the app a handle to attach \u201csuccess\u201d and \u201cerror\u201d listeners\uff08\u5e94\u7528\u83b7\u5f97\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\u6765\u5173\u8054\u201c\u6210\u529f\u201d\u6216\u201c\u9519\u8bef\u201d\u7684\u76d1\u542c\u5668\uff09\n\n\n\n\n\n\n\n\nis_event_listened\uff08\u4e8b\u4ef6\u662f\u5426\u5df2\u88ab\u76d1\u542c\u7684\u6807\u8bb0\uff09\n\n\n\u7f51\u7edc\u8c03\u7528\u53ef\u4ee5\u663e\u793a\u51fa\u662f\u5426\u81f3\u5c11\u6709\u4e00\u4e2a\u76d1\u542c\u5668\u5df2\u7ecf\u8fde\u63a5\u5230\u4e8b\u4ef6\u7684\u76ee\u6807\u8282\u70b9\u3002\u8fd9\u80fd\u5e2e\u52a9\u5e94\u7528\u5b9e\u4f8b\u5728\u5d29\u6e83\u540e\u6062\u590d\u4e2d\u6216\u8005\u591a\u4e2a\u5b9e\u4f8b\u90e8\u7f72\u7684\u60c5\u51b5\u4e0b\u51b3\u5b9a\u662f\u5426\u9700\u8981\u8fde\u63a5\u4e8b\u4ef6\u6e90\u3002\n\n\n\u5907\u6ce8\uff1a\u8fd9\u4e2a\u8bf7\u6c42\u5bf9\u8282\u70b9\u4e0a\u4e8b\u4ef6\u7684\u751f\u6210\u8005\u6709\u5f3a\u5316\u4f5c\u7528\u3002\n\n\nParams:\n\n\n\n\neventName (string): required \uff08\u5fc5\u9700\u7684\uff09\n\n\nchain (Chain): optional \uff08\u53ef\u9009\u7684\uff09\n\n\n\n\nResult:\uff08\u662f\u5426\u5df2\u7ecf\u88ab\u94fe\u4e0a\u7684\u4e00\u4e9b\u5e94\u7528\u5b9e\u4f8b\u76d1\u542c\uff09\n\n\n\n\n(boolean): whether the said event has been listened on by some application instance on that chain \n\n\n\n\n\n\n\n\naddListener\uff08\u6dfb\u52a0\u76d1\u542c\u5668\uff09\n\n\n\u65b9\u6cd5\u4e3a\u8fde\u63a5\u5230\u4e8b\u4ef6\u6e90\u7684\u8282\u70b9\u63d0\u4f9b\uff0c\u76d1\u542c\u5668\u6ce8\u518c\u5728EventCallBack\uff0c\u7528\u4ee5\u63a5\u6536\u4e8b\u4ef6\u7c7b\u578b\u96c6\u7684\u56de\u8c03\u3002\u6dfb\u52a0\u76d1\u542c\u5668\u7684\u65b9\u6cd5\u53ef\u4ee5\u88ab\u6267\u884c\u591a\u6b21\u6765\u652f\u6301\u4e0d\u540c\u7684EventCallBack\u65b9\u6cd5\u63a5\u6536\u4e0d\u540c\u7c7b\u578b\u7684\u4e8b\u4ef6\u3002\n\n\n\u8bf4\u660e\uff1a\u4ee5\u4e0b\u7684\u53c2\u6570\u5728\u67d0\u4e9b\u8bed\u8a00\u91cc\u662f\u53ef\u9009\u7684\uff0c\u6bd4\u5982Java\uff0c\u4e3a\u76d1\u542c\u5668\u63a5\u53e3\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u628a\u8be5\u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u6570\u3002\n\n\nParams:\n\n\n\n\neventType : ie. Block, Chaincode, Transaction \uff08\u4e8b\u4ef6\u7c7b\u578b\uff09\n\n\neventTypeData : Object Specific for event type as necessary, currently needed for \u201cChaincode\u201d event type, specifying a matching pattern to the event name set in the chaincode(s) being executed on the target Peer, and for \u201cTransaction\u201d event type, specifying the transaction ID \uff08\u4e8b\u4ef6\u7c7b\u578b\u6570\u636e\uff1a\u4e8b\u4ef6\u7c7b\u578b\u6709\u5fc5\u8981\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u5bf9\u8c61\uff0c\u5bf9\u4e8e\u201cchaincode\u201d\u4e8b\u4ef6\u7c7b\u578b\u8981\u6c42\u662f\uff0c\u5728\u76ee\u6807\u8282\u70b9\u4e0a\u6267\u884c\u7684chaincode\u4e2d\u8bbe\u7f6e\u4e00\u4e2a\u6307\u5b9a\u7684\u4e8b\u4ef6\u540d\u5339\u914d\u8303\u5f0f\uff1b\u5bf9\u4e8e\u201cTransaction\u201d\u4e8b\u4ef6\u7c7b\u578b\uff0c\u8981\u6307\u5b9a\u4ea4\u6613ID\u3002\uff09\n\n\neventCallback : Client Application class registering for the callback.\uff08\u4e8b\u4ef6\u56de\u8c03\uff1a\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u7c7b\u4e3a\u56de\u8c03\u800c\u6ce8\u518c\u7684\u3002\uff09\n\n\n\n\nReturns:\n\n\n\n\n[event-listener-ref] a reference to the event listener, some language uses an ID (javascript), others uses object reference (Java)\uff08\u8fd4\u56de\u503c\uff1a\u4e8b\u4ef6\u76d1\u542c\u5668\u7684\u5f15\u7528\uff0c\u6307\u5411\u4e8b\u4ef6\u76d1\u542c\u5668\u7684\u5f15\u7528\uff0c\u6709\u4e9b\u8bed\u8a00\uff08javascript\uff09\u4f7f\u7528ID\uff0c\u5176\u4ed6\u7684\u8bed\u8a00\uff08Java\uff09\u4f7f\u7528\u5bf9\u8c61\u5f15\u7528\u3002\uff09\n\n\n\n\n\n\n\n\nremoveListener\uff08\u79fb\u9664\u76d1\u542c\u5668\uff09\n\n\n\u89e3\u6ce8\u518c\u76d1\u542c\u5668\n\n\nParams:\uff08SDK\u8fd4\u56de\u4e8b\u4ef6\u76d1\u542c\u5668\u7684\u5f15\u7528\uff09\n\n\n\n\n[event-listener-ref] : reference returned by SDK for event listener\n\n\n\n\nReturns:\n\n\n\n\nstatusFlag: Success / Failure\n\n\n\n\n\n\n\n\nget_name\uff08\u83b7\u53d6\u540d\u79f0\uff09\n\n\n\u83b7\u53d6\u8282\u70b9\u540d\u79f0\u3002\u9700\u8981\u5bf9\u8c61\u5b9e\u4f8b\u7684\u53c2\u6570\u3002\n\n\nReturns (str):\n\n\n\n\nThe name of the Peer\n\n\n\n\n\n\n\n\nset_name\uff08\u8bbe\u7f6e\u540d\u79f0\uff09\n\n\nSet the Peer name / id.\n\n\nParams:\n\n\n\n\nName (string): The unique name / id of this Peer.\n\n\n\n\n\n\n\n\nget_roles\uff08\u83b7\u53d6\u89d2\u8272\uff09\n\n\n\u83b7\u53d6\u8282\u70b9\u53c2\u4e0e\u7684\u7528\u6237\u7684\u89d2\u8272\u3002\u53ef\u80fd\u7684\u7ed3\u679c\u662f\u201cclient\u201d\u548c\u201cauditor\u201d\u7684\u6570\u7ec4\u3002\u6210\u5458\u670d\u52a1\u591a\u5b9a\u4e49\u4e86\u4e24\u4e2a\u89d2\u8272\u6765\u4fdd\u5b58\u8282\u70b9\u6210\u5458\u5173\u7cfb\uff1a\u201cpeer\u201d\u548c\u201cvalidator\u201d\uff0c\u8fd9\u4e24\u4e2a\u6ca1\u6709\u66b4\u9732\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\nReturns (str[]):\n\n\n\n\nThe roles for this user\n\n\n\n\n\n\n\n\nset_roles\uff08\u8bbe\u7f6e\u89d2\u8272\uff09\n\n\n\u8bbe\u7f6e\u8282\u70b9\u53c2\u4e0e\u7684\u7528\u6237\u89d2\u8272\u3002\u503c\u9075\u4ece\u4e0a\u9762\u9884\u5b9a\u7684\u51e0\u4e2a\u503c\u3002\n\n\nParams:\n\n\n\n\nRoles (string[]): The list of roles for the user\uff08\u7528\u6237\u89d2\u8272\u5217\u8868\uff09\n\n\n\n\n\n\n\n\nget_enrollment_certificate\uff08\u83b7\u53d6\u80cc\u4e66\u8bc1\u4e66\uff09\n\n\n\u8fd4\u56de\u5e95\u5c42\u4ee3\u8868\u7528\u6237\u8eab\u4efd\u7684ECert\u3002\n\n\nParams: none\n\n\nReturns:\n\n\n\n\nCertificate in PEM format signed by the trusted CA\n\n\n\n\n\n\n\n\nset_enrollment_certificate\uff08\u8bbe\u7f6e\u80cc\u4e66\u8bc1\u4e66\uff09\n\n\nSet the Peer\u2019s enrollment certificate.\n\n\nParams:\n\n\n\n\nCertificate: Certificate in PEM format signed by the trusted CA\n\n\n\n\n\n\n\n\n6.5 \u952e\u503c\u5b58\u50a8\uff08\u63a5\u53e3\uff09\n\n\n\u533a\u5757\u94fe\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u4fdd\u5b58\u72b6\u6001\uff0c\u5305\u542b\u7528\u6237\u767b\u8bb0\u6750\u6599\uff08\u79c1\u94a5\uff0cCA\u7b7e\u540d\u7684\u8bc1\u4e66\uff09\u3002\u8fd9\u4e9b\u72b6\u6001\u9700\u8981\u88ab\u6301\u4e45\u5316\u3002\u201cKeyValueStore\u201d\u7684\u63a5\u53e3\u4e3aSDK\u81ea\u52a8\u4fdd\u5b58\u72b6\u6001\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u673a\u5236\uff0c\u8fd9\u5bf9\u5e94\u7528\u7a0b\u5e8f\u662f\u6709\u76ca\u7684\u3002\n\u5982\u679c\u5e94\u7528\u4f7f\u7528\u57fa\u4e8e\u8f6f\u4ef6\u5bc6\u94a5\u751f\u6210\u5668\u5373CryptoSuite\u7684\u5b9e\u73b0\uff0c\u90a3\u4e48\u5b83\u9700\u8981\u952e\u503c\u5b58\u50a8\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u4e00\u4e2a\u5b58\u50a8\u7cfb\u7edf\uff0cSDK\u5e94\u8be5\u9ed8\u8ba4\u4f7f\u7528\u4e00\u4e2a\u5185\u5efa\u7684\u5b9e\u73b0\uff0c\u6bd4\u5982\u4e00\u4e2a\u57fa\u4e8e\u672c\u5730\u6587\u4ef6\u7cfb\u7edf\u7684\u5b9e\u73b0\u3002\n\n\nSDK\u4e5f\u53ef\u4ee5\u5728\u8fd9\u4e2a\u952e\u503c\u5b58\u50a8\u7cfb\u7edf\u91cc\u9762\u4ee5\u53ef\u9009\u7f13\u5b58\u7684\u65b9\u5f0f\u4fdd\u5b58\u7528\u6237\u767b\u8bb0\u6750\u6599\u3002\u4f46\u662f\uff0c\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u6ca1\u6709\u914d\u7f6e\u4e00\u4e2a\u952e\u503c\u5b58\u50a8\u7cfb\u7edf\uff0cSDK\u4f1a\u628a\u5e94\u7528\u7a0b\u5e8f\u7406\u89e3\u6210\u9009\u62e9\u4e86\u603b\u662f\u4e3a\u4f1a\u8bdd\u8bbe\u7f6e\u4e0a\u4e0b\u6587\uff0c\u5e76\u4e14\u6ca1\u6709\u610f\u56fe\u4f7f\u7528\u9ed8\u8ba4\u7684\u952e\u503c\u5b58\u50a8\u3002\n\n\n\n\n\n\nget_value\uff08\u83b7\u53d6\u503c\uff09\n\n\nRetrieves a value given a key\n\n\nParams\n\n\n\n\nkey (str): The name of the key\n\n\n\n\nReturns\n\n\n\n\nResult (Object): The value\n\n\n\n\n\n\n\n\nset_value\uff08\u5b58\u5165\u503c\uff09\n\n\nSets the value\n\n\nParams\n\n\n\n\nKey\n\n\nvalue\n\n\n\n\nReturns\n\n\n\n\nAcknowledgement of successful storage of the value\n\n\n\n\n\n\n\n\n6.6 \u52a0\u5bc6\u6a21\u5757\uff08\u63a5\u53e3\uff09\n\n\n\u52a0\u5bc6\u6a21\u5757\u6253\u5305\u4e86\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5\u548c\u975e\u5bf9\u79f0\u52a0\u5bc6\u65b9\u6cd5\uff0c\u6d88\u606f\u5bf9\u79f0\u52a0\u5bc6\u65b9\u6cd5\uff0c\u548chash\u4ee5\u53caMAC\u3002\u8fd9\u662f\u4e3a\u533a\u5757\u94fe\u52a0\u5bc6\u670d\u52a1\u63d0\u4f9b\u8005\u63a5\u53e3\u7684\u4e00\u4e2a\u955c\u50cf\u8bbe\u8ba1\uff0c\u88abfabric\u52a0\u5bc6\u56e2\u961f\u53d1\u8868\u3002\n\n\nDefault implementation currently planned for the peer and COP, and must be implemented by the SDK\u2019s default implementation also: \n\n\n\n\nECDSA: curves \u201csecp256r1\u201d and \u201csecp384r1\u201d\n\n\nAES: AES128, AES256 with CBC/CTR/GCM mode key length = 128 bits\n\n\n\n\nSHA: SHA256, SHA384, SHA3_256, SHA3_384\n\n\n\n\n\n\ngenerate_key\uff08\u751f\u6210\u5bc6\u94a5\uff09\n\n\nGenerate a key based on the options. The output can be a private key or a public key in an asymmetric algorithm, or a secret key of a symmetric algorithm.\n\n\nParams\n\n\n\n\nopts (Object): an object that encapsulates two properties, \u201calgorithm\u201d and\u201cephemeral\u201d.\n\n\n\n\nReturns\n\n\n\n\nResult (Key): The key object\n\n\n\n\n\n\n\n\nderiveKey\uff08\u5bfc\u51fa\u5bc6\u94a5\uff09\n\n\nDerives a key from k using opts.\n\n\nParams\n\n\n\n\nk (Key)\n\n\nopts (Object)\n\n\n\n\nReturns\n\n\n\n\n(Key) derived key\n\n\n\n\n\n\n\n\nimportKey\uff08\u5bfc\u5165\u5bc6\u94a5\uff09\n\n\nImports a key from its raw representation using opts.\n\n\nParams\n\n\n\n\nk (Key)\n\n\nopts (Object)\n\n\n\n\nReturns\n\n\n\n\n(Key) An instance of the Key class wrapping the raw key bytes\n\n\n\n\n\n\n\n\ngetKey\uff08\u83b7\u53d6\u5bc6\u94a5\uff09\n\n\nReturns the key this CSP associates to the Subject Key Identifier ski .\n\n\nParams\n\n\n\n\nski (byte[])\n\n\n\n\nReturns\n\n\n\n\n(Key) An instance of the Key class corresponding to the ski\n\n\n\n\n\n\n\n\nhash\uff08hash\u5904\u7406\uff09\n\n\nHashes messages msg using options opts .\n\n\nParams\n\n\n\n\nmsg (byte[])\n\n\nopts (Object) an object that encapsulates property \u201calgorithm\u201d with values for hashing algorithms such as \u201cSHA2\u201d or \u201cSHA3\u201d\n\n\n\n\nReturns\n\n\n\n\n(Key) An instance of the Key class corresponding to the ski\n\n\n\n\n\n\n\n\nencrypt\uff08\u52a0\u5bc6\uff09\n\n\nEncrypt plain text.\n\n\nParams\n\n\n\n\nkey (Key) public encryption key\n\n\nplainText (byte[])\n\n\nopts (Object)\n\n\n\n\nReturns\n\n\n\n\n(byte[]) Cipher text\n\n\n\n\n\n\n\n\ndecrypt\uff08\u89e3\u5bc6\uff09\n\n\nDecrypt cipher text.\n\n\nParams\n\n\n\n\nkey (Key) private decryption key\n\n\ncipherText (byte[])\n\n\nopts (Object)\n\n\n\n\nReturns\n\n\n\n\n(byte[]) Plain text\n\n\n\n\n\n\n\n\nsign\uff08\u7b7e\u540d\uff09\n\n\nSign the data.\n\n\nParams\n\n\n\n\nKey (Key) private signing key\n\n\ndigest (byte[]) fixed-length digest of the target message to be signed\n\n\nopts (function) hashing function to use\n\n\n\n\nReturns\n\n\n\n\nResult(Object):Signature object\n\n\n\n\n\n\n\n\nverify\uff08\u9a8c\u8bc1\uff09\n\n\nVerify the signature.\n\n\nParams\n\n\n\n\nkey (Key) public verification key\n\n\nsignature (byte[]) signature\n\n\ndigest (byte[]) original digest that was signed\n\n\n\n\nReturns\n\n\n\n\n(bool): verification successful or not\n\n\n\n\n\n\n\n\n7 \u5904\u7406\u7f51\u7edc\u9519\u8bef\n\n\n\u5ba2\u6237\u7aefSDK\u548cfabric\u7528\u4e24\u4e2a\u65b9\u6cd5\u6c9f\u901a\uff1a\u65e0\u72b6\u6001\u7684HTTP\u8fde\u63a5\u548cHTTP\u957f\u8fde\u63a5\u3002\n\n\n\u53d1\u9001\u63d0\u6848\u548c\u53d1\u9001\u4ea4\u6613\u8c03\u7528\u5728\u8bf7\u6c42/\u54cd\u5e94\u4e2d\u662f\u65e0\u72b6\u6001\u7684\u3002\u5982\u679c\u51fa\u73b0\u7f51\u7edc\u9519\u8bef\uff0c\u8c03\u7528\u4f1a\u8d85\u65f6\u3002SDK\u5e94\u8be5\u6709\u4e00\u4e2a\u53ef\u914d\u7f6e\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u65b9\u4fbf\u5e94\u7528\u7a0b\u5e8f\u57fa\u4e8e\u5bf9\u5ba2\u6237\u7aef\u5e94\u7528\u548cfabric\u8282\u70b9\u4e4b\u95f4\u7684\u7f51\u7edc\u7279\u5f81\u7684\u7406\u89e3\u63a7\u5236\u8c03\u7528\u7684\u52a8\u4f5c\u3002\n\n\n\u53e6\u5916\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u80fd\u6709\u4e00\u4e2a\u91cd\u8bd5\u6b21\u6570\uff0c\u4ee5\u4fbf\u4e8eSDK\u6839\u636e\u8d85\u65f6\u9519\u8bef\u81ea\u52a8\u8bd5\u56fe\u91cd\u8fdeHTTP\u8c03\u7528\u3002\u8fd9\u4e9b\u91cd\u8bd5\u90fd\u5c1d\u8bd5\u5e76\u4e14\u4ecd\u7136\u53d1\u751f\u8d85\u65f6\u9519\u8bef\u4e4b\u540e\uff0c\u8fde\u63a5\u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u3002\n\n\n\u53e6\u4e00\u65b9\u9762\uff0c\u4e8b\u4ef6\u6d41\u8fde\u63a5SDK\u548c\u4e8b\u4ef6\u6e90\u8282\u70b9\u662f\u957f\u8fde\u63a5\u3002\u7279\u522b\u5730\uff0c\u7531\u4e8e\u4e8b\u4ef6\u6d41\u63a5\u53e3\u88abfabric\u5b9a\u4e49\uff0c\u8fde\u63a5\u662f\u53cc\u5411\u7684\uff0c\u5141\u8bb8\u6d88\u606f\u53d1\u9001\u5230\u4e24\u65b9\u3002\u5bf9\u4e8e\u7f51\u7edc\u9519\u8bef\uff0c\u4ee5\u9632\u4e22\u5931\u4e8b\u4ef6\u548c\u4e0d\u80fd\u89e6\u53d1client\u5e94\u7528\u6ce8\u518c\u7684\u76d1\u542c\u5668\u7684\u7ed3\u679c\uff0c\u8fde\u63a5\u4f1a\u88ab\u65ad\u5f00\u3002\n\n\n\u4e3a\u5e94\u7528\u7684\u5229\u76ca\u8003\u8651SDK\u5e94\u8be5\u8bd5\u56fe\u91cd\u65b0\u53d1\u8d77\u8fde\u63a5\u3002\u4f46\u662f\uff0c\u5982\u679c\u5728\u5c1d\u8bd5\u4e86\u91cd\u8fde\u6b21\u6570\u4e4b\u540e\u4e0d\u80fd\u6062\u590d\u8fde\u63a5\uff0c\u5e94\u8be5\u7528\u4e00\u4e2a\u9ad8\u7ea7\u522b\u7684\u4e25\u91cd\u9519\u8bef\u901a\u77e5\u5e94\u7528\u8fd9\u79cd\u60c5\u51b5\u3002\n\n\n8 \u53c2\u8003\n\n\n1) Next-Consensus-Architecture_Proposal:\nhttps://github.com/hyperledger/fabric/blob/master/proposals/r1/Next-Consensus-Architec\nture-Proposal.md\n\n\n2) Consensus endorsing, consenting, and committing model:\nhttps://jira.hyperledger.org/browse/FAB-37\n\n\n3) Node.js SDK\nhttps://github.com/hyperledger/fabric-sdk-node\n\n\n4) Fabric-Cop Design\nhttps://docs.google.com/document/d/1TRYHcaT8yMn8MZlDtreqzkDcXx0WI50AV2JpAcv\nAM5w\n\n\n5) Next Hyperledger-Fabric Architecture Protocol messages\nhttps://docs.google.com/document/d/1qD2zOTxmPoss3Xop_pDdkSXHozIR4N27NEsym\nosW4Gk", 
            "title": "Fabric SDK \u8bbe\u8ba1"
        }, 
        {
            "location": "/sdk-design_zh/#1", 
            "text": "Hyperledger Fabric v1.0\u63d0\u4f9b\u4e86\u57fa\u672c\u7684Protocol Buffers \u683c\u5f0f\u7684API\u901a\u8fc7gRPC\u534f\u8bae\u4f5c\u7528\u4e8e\u533a\u5757\u94fe\u7f51\u7edc\u3002\u8fd9\u4e9bAPI\u5305\u542b\u4e86\u4ea4\u6613\u5904\u7406\u3001\u5b89\u5168\u7684\u6210\u5458\u5173\u7cfb\u670d\u52a1\u3001\u533a\u5757\u94fe\u904d\u5386\u548c\u4e8b\u4ef6\u5904\u7406\u3002\u6709\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u652f\u6301Protocol Buffers\uff0c\u5305\u62ecGo, C#, Java, Javascript, Python, and C++\u3002\u6240\u4ee5\u6709\u5fc5\u8981\u7ed9\u5e94\u7528\u5f00\u53d1\u5de5\u7a0b\u5e08\u63d0\u4f9b\u4e00\u4e2a\u672c\u5730SDK\u3002  \u672c\u6587\u6863\u8be6\u8ff0\u4e86\u4e00\u4e2aSDK\u5e94\u8be5\u63d0\u4f9b\u7684API\u6700\u5c0f\u96c6\u5408\u7684\u5b9e\u73b0\u3002\u4e00\u4e2aSDK\u7684\u76ee\u6807\u5373\u8981\u89e3\u51b3\u5ba2\u6237\u5728\u533a\u5757\u94fe\u7f51\u7edc\u4e2d\u76f4\u63a5\u9762\u5bf9\u7684\u4e00\u4e9b\u539f\u59cb\u9700\u6c42\uff1b\u53c8\u8981\u505a\u4e00\u4e9b\u9876\u5c42\u7684\u5408\u7406\u62bd\u8c61\u4ee5\u56fe\u65b9\u4fbf\u5f00\u53d1\u4eba\u5458\u5f00\u53d1\uff0c\u5e76\u4e14\u5728\u672c\u5730\u5e94\u7528\u4ee3\u7801\u4e2d\u4f7f\u7528\u8fd9\u4e9bAPI\u540e\u65b9\u4fbf\u5f00\u53d1\u5de5\u4f5c\u7684\u8fdb\u884c\u3002\u7136\u800c\uff0c\u4f7f\u7528SDK\u5e76\u4e0d\u4f1a\u59a8\u788d\u5e94\u7528\u76f4\u63a5\u8c03\u7528gRPC\u7684\u64cd\u4f5c\u3002  \u8bf7\u6ce8\u610f\uff0c\u5f53\u524d\u7684REST API\u5e76\u4e0d\u88ab\u63a8\u8350\u4f7f\u7528\uff0cSDK\u4e0d\u5e94\u8be5\u57fa\u4e8e\u4f7f\u7528REST API \u800c\u521b\u5efa\u3002\u8df3\u8fc7REST\u76f4\u63a5\u4f7f\u7528gRPC\u7684\u539f\u56e0\u662f\uff1a\u80fd\u591f\u63a7\u5236\u5168\u53cc\u5411\u7684\u6570\u636e\u6d41\uff08\u5927\u90e8\u5206\u7684API\u8c03\u7528\u90fd\u662f\u5f02\u6b65\u7684\uff09\uff0c\u66f4\u597d\u7684\u6027\u80fd\u3002\u6b64\u5916\uff0c\u81ea\u4ece\u8282\u70b9\u5185\u90e8\u6a21\u5757\u901a\u4fe1\u4f7f\u7528\u4e86gRPC\u4e4b\u540e\uff0c\u4fbf\u4e0d\u5fc5\u518d\u5f00\u653e\u66f4\u591a\u7684HTTP/HTTPS\u7aef\u53e3\u4e86\u3002  \u4e00\u4e2a\u4f8b\u5916\u7684\u60c5\u51b5\u662f\uff0c\u65b0\u7684\u6210\u5458\u670d\u52a1\u65b9\u5f0f\uff08CA\uff09\u662f\u6309REST API\u7684\u89c4\u5219\u5b9e\u73b0\u7684  \u4f5c\u4e3a\u53c2\u8003\uff0cFabric v1.0\u7684\u67b6\u6784\u548c\u4ea4\u4e92\u6a21\u578b\u53ef\u4ee5\u5728\u4e0b\u9762\u8fd9\u4e2a\u94fe\u63a5\u6240\u6307\u5411\u7684\u5de5\u4f5c\u5355\u5143\u7684\u9644\u4ef6\u6587\u6863\u91cc\u9762\u67e5\u770b https://jira.hyperledger.org/browse/FAB-37", 
            "title": "1 \u6982\u8981"
        }, 
        {
            "location": "/sdk-design_zh/#2", 
            "text": "", 
            "title": "2 \u76ee\u6807"
        }, 
        {
            "location": "/sdk-design_zh/#21", 
            "text": "Fabric SDK\u5e94\u8be5\u53ef\u4ee5\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\u7684\u591a\u79cd\u64cd\u4f5c\u533a\u5757\u94fe\u7f51\u7edc\u7684\u65b9\u5f0f\u3002\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u90e8\u7f72/\u6267\u884cchaincode\uff0c\u76d1\u542c\u7f51\u7edc\u4e2d\u4ea7\u751f\u7684\u4e8b\u4ef6\uff0c\u63a5\u6536\u5757\u4fe1\u606f\uff0c\u628a\u4ea4\u6613\u5b58\u50a8\u5230\u8d26\u672c\u4e2d\uff0c\u7b49\u7b49", 
            "title": "2.1 \u5e94\u7528\u5f00\u53d1"
        }, 
        {
            "location": "/sdk-design_zh/#22-chaincode", 
            "text": "Fabric SDK\u5e94\u8be5\u53ef\u4ee5\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u7f16\u5199chaincode\u5355\u5143\u6d4b\u8bd5\u4ee3\u7801\u3002\u5f00\u53d1\u4eba\u5458\u5e94\u8be5\u80fd\u591f\u5728\u4e0d\u628achaincode\u90e8\u7f72\u5230\u7f51\u7edc\u4e0a\u7684\u60c5\u51b5\u4e0b\u5feb\u901f\u6d4b\u8bd5chaincode", 
            "title": "2.2 chaincode\u5f00\u53d1"
        }, 
        {
            "location": "/sdk-design_zh/#3", 
            "text": "", 
            "title": "3 \u539f\u5219"
        }, 
        {
            "location": "/sdk-design_zh/#31-api", 
            "text": "SDK\u5e94\u8be5\u63d0\u4f9b\u6e05\u6670\u7684\u6587\u6863\u8bf4\u660e\uff0c\u5305\u62ec\u53ef\u7528\u7684API\uff0c\u6570\u636e\u6a21\u578b\uff0c\u5982\u4f55\u4f7f\u7528API\u7684\u793a\u4f8b\u8bf4\u660e", 
            "title": "3.1 \u826f\u597d\u7684API\u6587\u6863\uff0c\u6570\u636e\u6a21\u578b\uff0c\u793a\u4f8b\u4ee3\u7801"
        }, 
        {
            "location": "/sdk-design_zh/#32", 
            "text": "Chaincode\u5f00\u53d1\u4eba\u5458\u548c\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u5173\u6ce8\u4e8e\u4e66\u5199\u4e1a\u52a1\u903b\u8f91\u4ee3\u7801\u3002\u5c3d\u7ba1\u5f00\u53d1\u4eba\u5458\u719f\u6089fabric\u5185\u90e8\u6784\u4ef6\u5bf9\u5f00\u53d1\u672c\u8eab\u662f\u6709\u5229\u7684\uff0c\u4f46\u662f\u8fd9\u4e0d\u5e94\u8be5\u662f\u4e00\u4e2a\u5fc5\u987b\u7684\u5148\u51b3\u6761\u4ef6\u3002SDK\u7f16\u8bd1\u65f6\u95f4\u4e0a\u4e0d\u5e94\u8be5\u5bf9fabric project\u6709\u4efb\u4f55\u4f9d\u8d56\u3002\uff08\u9664\u975e\u539f\u59cb\u6587\u4ef6\u5b9a\u4e49\u4e86\u591a\u79cd\u5408\u7ea6\uff1f\uff1f\uff09 SDK packages/jars/libraries \u5e94\u8be5\u5728\u5e38\u7528\u7684\u8d44\u6e90\u5e93\u7f51\u7ad9\u4e0a\u53ef\u83b7\u53d6\uff0c\u4ee5\u65b9\u4fbf\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u8f7b\u677e\u5b89\u88c5\u5b83\u4eec\u6216\u8005\u7acb\u5373\u5f00\u59cb\u7f16\u5199Chaincode\u6765\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u3002", 
            "title": "3.2 \u4fbf\u4e8e\u4f7f\u7528"
        }, 
        {
            "location": "/sdk-design_zh/#33", 
            "text": "\u8fd9\u4e2aSDK\u5fc5\u987b\u4ed4\u7ec6\u8bbe\u8ba1\u6765\u8fbe\u5230\u9ad8\u541e\u5410\u91cf\uff0c\u6c34\u5e73\u6269\u5c55\u80fd\u529b\u548c\u66f4\u4f4e\u7684\u5ef6\u8fdf\u3002\u5b83\uff08\u672cSDK\uff09\u5e94\u8be5\u662f\u4e00\u4e2a\u7ec4\u4ef6\u72b6\u6001\u65e0\u5173\u5316\u7684\u7406\u60f3\u5b9e\u73b0\uff0c\u6216\u8005\u5141\u8bb8\u5e94\u7528\u5b9e\u4f8b\u501f\u52a9\u6570\u636e\u5e93\u5171\u4eab\u72b6\u6001\u3002", 
            "title": "3.3 \u6027\u80fd"
        }, 
        {
            "location": "/sdk-design_zh/#34", 
            "text": "\u7edf\u4e00\u7684\u7248\u672c\u63a7\u5236\u4e0b\uff0c\u5efa\u8bae\u5c06SDK\u901a\u8fc7\u591a\u79cd\u8bed\u8a00\u5b9e\u73b0\uff0c\u5e76\u4e14\u591a\u79cd\u5b9e\u73b0\u7684SDK\u4e4b\u95f4\u5728\u529f\u80fd\u4e0a\u80fd\u591f\u4fdd\u6301\u4e92\u901a", 
            "title": "3.4 \u7248\u672c\u63a7\u5236"
        }, 
        {
            "location": "/sdk-design_zh/#35", 
            "text": "\u672cSDK\u5e94\u8be5\u65b9\u4fbf\u4e8e\u5728\u53ef\u670d\u52a1\u6027\u652f\u6301\u4e2d\u6dfb\u52a0\u63d2\u4ef6\uff0c\u5373\u65e5\u5fd7\u7cfb\u7edf\u3002\u5b83\u5e94\u8be5\u5141\u8bb8SDK\u4f7f\u7528\u65b9\u7684\u5e94\u7528\u6dfb\u52a0\u4e00\u4e2a\u65e5\u5fd7\u5904\u7406\u7684\u5b9e\u4f8b\u3002\u5e94\u7528\u503e\u5411\u4e8e\u5728SDK\u5185\u90e8\u548c\u5916\u90e8\u4f7f\u7528\u4e00\u4e2a\u901a\u7528\u7684\u65e5\u5fd7\u7cfb\u7edf\uff0c\u8fd9\u662f\u975e\u5e38\u6709\u7528\u7684\u3002\u4e00\u4e2aIT\u7ec4\u7ec7\u4e3a\u4e86\u76d1\u89c6\u548c\u5206\u6790\u901a\u5e38\u4f1a\u5b89\u88c5\u65e5\u5fd7\u811a\u672c\uff0c\u6bd4\u5982\u5bf9\u4e00\u4e2a\u6807\u51c6\u65e5\u5fd7\u683c\u5f0f\u7684\u9700\u6c42\u3002\u672cSDK\u5e94\u8be5\u6709\u4e00\u4e2a\u7f16\u8bd1\u8fdb\u7248\u672c\u7684\u65e5\u5fd7\u7cfb\u7edf\u4ee5\u4fbf\u4e8e\u5f00\u53d1\u4eba\u5458\u901a\u8fc7\u9ed8\u8ba4\u65b9\u5f0f\u83b7\u53d6\u65e5\u5fd7\u3002\u4f46\u662f\u5b83\u5fc5\u987b\u5141\u8bb8\u8bbe\u7f6e\u4e00\u4e2a\u62e5\u6709\u4e00\u7cfb\u5217\u6807\u51c6\u96c6\u5408\u7684\u5916\u90e8\u65e5\u5fd7\u7cfb\u7edf\u6765\u8bb0\u5f55API\u65e5\u5fd7\u3002", 
            "title": "3.5 \u53ef\u670d\u52a1\u6027"
        }, 
        {
            "location": "/sdk-design_zh/#4", 
            "text": "\u6709\u8bb8\u591a\u79cd\u53ef\u80fd\u7684\u573a\u666f\uff0c\u4f46\u662f\u8ba9\u6211\u4eec\u5173\u6ce8\u4e00\u5c11\u90e8\u5206\u6765\u8bf4\u660eSDK\u7684\u6574\u4f53\u529f\u80fd\u3002", 
            "title": "4 \u573a\u666f"
        }, 
        {
            "location": "/sdk-design_zh/#41", 
            "text": "\u4e3a\u4e86\u8ddffabric\u4ea4\u4e92\uff0c\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u5177\u5907\u4e00\u4e2a\u4e13\u6709\u7684\u8eab\u4efd\u8ba4\u8bc1\uff0c\u8fd9\u4e2a\u8ba4\u8bc1\u88ab\u7f16\u7801\u8fdb\u4e00\u4e2a\u53eb\u505aECert\uff08\u767b\u8bb0\u8bc1\u4e66\uff09\u7684\u6210\u5458\u8bc1\u4e66\u91cc\u3002\u8fd9\u4e2a\u8bc1\u4e66\u53ef\u80fd\u662f\u7531\u5916\u90e8\u7684\u8ba4\u8bc1\u673a\u6784\u63d0\u4f9b\uff0c\u6216\u8005\u7531fabric\u6210\u5458\u670d\u52a1\u63d0\u4f9b\uff0c\u53ea\u8981\u8fd9\u4e2aECert\u53ef\u4ee5\u88abfabric\u7ec4\u4ef6\u5728\u5efa\u7acb\u94fe\u7684\u4fe1\u4efb\u94fe\u65f6\u9a8c\u8bc1\u5373\u53ef\u3002  \u5982\u679c\u7528\u4e00\u4e2a\u6807\u51c6\u7684CA\u6765\u7ba1\u7406\u5206\u914dECert\uff0c\u4ea4\u6613\u4f1a\u88abECert\u7b7e\u540d\u3002\u8fd9\u5c06\u4f7f\u5f97\u6bcf\u4e00\u4e2a\u4ea4\u6613\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5ba2\u6237\u7aef\u90fd\u662f\u53ef\u9a8c\u8bc1\u7684\u3002  \u53e6\u4e00\u65b9\u9762\uff0cMSP\u5728fabric\u4e2d\u7684\u8bbe\u8ba1\u662f\uff0c\u5229\u7528\u4e00\u4e2a\u52a0\u5bc6\u7b97\u6cd5\u4eceECert\u7684\u5bc6\u94a5\u5bf9\u5bfc\u51fa\u4e00\u4e2a\u5bc6\u94a5\u5bf9\uff0c\u56e0\u6b64\u4e3a\u6bcf\u4e00\u4e2a\u4ea4\u6613\u4ea7\u751f\u4e00\u4e2a\u5047\u540d\u8bc1\u4e66\uff0c\u53c8\u53eb\u505aTCert\u3002\u4e00\u4e2aTCert\u4e0d\u80fd\u4ee3\u8868\u4e00\u4e2a\u8ba4\u8bc1\u7684\u8eab\u4efd\uff0c\u4f46\u662f\u80fd\u901a\u8fc7\u6210\u5458\u670d\u52a1\u8ffd\u8e2a\u5230\u539f\u59cb\u7684ECert\u3002\u8fd9\u4e2a\u6280\u672f\u5728\u8bb8\u591a\u4e1a\u52a1\u573a\u666f\u4e0b\u9690\u85cf\u4ea4\u6613\u8ba4\u8bc1\u662f\u975e\u5e38\u6709\u7528\u7684\u3002  Fabric\u63d0\u4f9b\u4e86MSP\u63a5\u53e3\u7684\u4e00\u79cd\u5b9e\u73b0\uff0c\u547d\u540d\u4e3a\u201cCOP\u201d\u7acb\u610f\u6765\u6e90\u4e8e\u5b83\u7684\u4f5c\u7528\u5c31\u50cf\u8b66\u5bdf\uff0c\u800c\u4e0d\u662f\u6765\u6e90\u4e8e\u9996\u5b57\u6bcd\u3002\u5728github\u7684\u7ec4\u7ec7\u8d85\u7ea7\u8d26\u672c\u91cc\u9762\u7684\u4ee3\u7801\u5e93\u201cfabric-cop\u201d\u5c31\u662f\u5b83\u3002\uff08\u8bd1\u8005\u6ce8\uff1a\u5728github\u4e0ahyperledger\u7ec4\u7ec7\u4e0b\u5e76\u672a\u627e\u5230\u8fd9\u4e2a\u4ee3\u7801\u5e93\uff0c\u53ef\u80fd\u662f\u672c\u6587\u6863\u6210\u4e66\u540e\u53c8\u6709\u53d8\u66f4\u3002\uff09  \u5982\u679c\u7ed9\u4e00\u4e2a\u57fa\u4e8efabric\u7684\u7f51\u7edc\u914d\u7f6e\u4e00\u4e2a\u5916\u90e8\u7684CA\uff0c\u7136\u540e\u7528\u6237\u6ce8\u518c\u4e5f\u4f1a\u5728\u5916\u90e8\u7ef4\u62a4\u3002\u8fd9\u4e2a\u5916\u90e8\u7684\u7528\u6237\u6ce8\u518c\u7cfb\u7edf\u8d1f\u8d23\u8ba4\u8bc1\u7528\u6237\u3002\u4e00\u4e2a\u5df2\u7ecf\u88ab\u8ba4\u8bc1\u7684\u7528\u6237\u4e3a\u4e86\u83b7\u53d6ECert\u53ef\u4ee5\u4f7f\u7528CA\u8bf7\u6c42\u767b\u8bb0\u3002  \u5c31SDK\u800c\u8a00\uff0c\u5e94\u8be5\u6709\u4e24\u79cdAPI\uff1a\u652f\u6301\u4efb\u4f55CA\uff08\u5305\u62ec\u5185\u5efa\u7684\u548c\u5916\u90e8\u7684\uff09\u7684\u901a\u7528API\uff0c\u548c\u4e13\u95e8\u4e3afabric\u7684\u5185\u5efa\u6210\u5458\u670d\u52a1\u63d0\u4f9b\u7684API\u3002\u901a\u7528API\u8d1f\u8d23\u5141\u8bb8\u4f7f\u7528SDK\u7684\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u6700\u57fa\u672c\u7684\u64cd\u4f5c\u6bd4\u5982\u5173\u8054\u7528\u6237\u8eab\u4efd\uff0c\u547d\u540d\u4e3a\u201cenroll()\u201d\uff0c\u4e3a\u8ba4\u8bc1\u7528\u6237\u83b7\u53d6ECert\u7684\u7a0b\u5e8f\uff1b\u8fd8\u6709\u201cgetTCerts()\u201d\uff0c\u83b7\u53d6\u4ea4\u6613\u8bc1\u4e66\u5141\u8bb8\u7528\u6237\u63d0\u4ea4\u4ea4\u6613\u3002  \u5ba2\u6237\u7aef\u6709\u5173\u53ef\u9009\u7684\u6210\u5458\u670d\u52a1\u5b9e\u73b0\uff08\u5373COP\uff09\u7684\u8bbe\u8ba1\u9700\u8981\u5355\u72ec\u7684\u6587\u6863\u6765\u8bf4\u660e\u3002https://docs.google.com/document/d/1TO-sdHGpn8ifB9C_pH_y54H75Rx0RdXvZih7-lhsLII/edit", 
            "title": "4.1 \u6210\u5458\u7684\u6ce8\u518c\u548c\u767b\u8bb0"
        }, 
        {
            "location": "/sdk-design_zh/#42", 
            "text": "Hyperledger Fabric\u6240\u8bbe\u8ba1\u7684\u652f\u6301\u9690\u79c1\u6027\u548c\u673a\u5bc6\u6027\u7684\u901a\u9053\u548c\u8d26\u672c\uff0c\u7edf\u4e00\u88ab\u79f0\u4e3a\u4e00\u4e2a\u201c\u94fe\u201d\u3002\u901a\u9053\u548c\u8d26\u672c\u8bbe\u8ba1\u66f4\u591a\u5185\u5bb9\u8bf7\u67e5\u770b\uff1a\nhttps://docs.google.com/document/d/1eRNxxQ0P8yp4Wh__Vi6ddaN_vhN2RQHP-IruHNUwyhc/edit#\u3002\u901a\u4fe1\uff08\u4f20\u8f93\u4e2d\u7684\u6570\u636e\uff09\u88ab\u9650\u5236\u5728\u53c2\u4e0e\u65b9\u4e4b\u95f4\u7684\u901a\u9053\u5185\uff0c\u540c\u65f6\u5757\u5185\u6570\u636e\uff08\u5df2\u88ab\u6301\u4e45\u5316\u7684\u6570\u636e\uff09\u4fdd\u5b58\u5728\u4e00\u4e2a\u79c1\u6709\u7684\u4ec5\u4ec5\u5728\u8fd9\u4e9b\u53c2\u4e0e\u65b9\u4e4b\u95f4\u5206\u5e03\u5f0f\u5b58\u50a8\u7684\u8d26\u672c\u4e2d\u3002\u4e0d\u5c5e\u4e8e\u94fe\u7684\u7f51\u7edc\u8282\u70b9\u4e0d\u4e86\u89e3\u901a\u9053\u548c\u79c1\u6709\u8d26\u672c\u5185\u90e8\u4efb\u4f55\u4e8b\u7269\uff0c\u4e5f\u4e0d\u80fd\u5229\u7528\u8fd9\u4e9b\u4e8b\u7269\u3002  \u4e00\u65e6\u4e00\u4e2a\u94fe\u88ab\u521b\u5efa\uff0c\u5e94\u7528\u53ef\u4ee5\u53d1\u9001\u4ea4\u6613\u7ed9\u94fe\u4e0a\u4ee5\u79c1\u6709\u65b9\u5f0f\u5b58\u5728\u7684\u8282\u70b9\uff0c\u5e76\u4e14\u5df2\u63d0\u4ea4\u88ab\u9a8c\u8bc1\u7684\u4ea4\u6613\u5230\u79c1\u6709\u8d26\u672c\u3002  \u521b\u5efa\u94fe\u7684\u8d23\u4efb\u843d\u5728\u5e94\u7528\u7a0b\u5e8f\u8eab\u4e0a\u3002\u901a\u8fc7SDK\u5e94\u7528\u7a0b\u5e8f\u521d\u59cb\u5316\u94fe\u7684\u7ec4\u7ec7\u56e2\u4f53\uff08\u7f51\u7edc\u6210\u5458\u7684\u4ee3\u8868\uff09\u6784\u6210\u5e76\u4e14\u7ed9\u6392\u5e8f\u670d\u52a1\u3002  \u5728SDK\u91cc\uff0c\u901a\u9053\u548c\u5b83\u672c\u8eab\u5173\u8054\u7684\u8d26\u672c\u7684\u7ed1\u5b9a\u7531\u94fe\u7c7b\u4f53\u73b0\u3002\u5e94\u7528\u548c\u6307\u5b9a\u7684\u6392\u5e8f\u8282\u70b9\u7b2c\u4e00\u6b21\u51c6\u5907\u4e00\u4e2a\u65b0\u7684\u901a\u9053\u5e76\u4e14\u83b7\u53d6\u4e00\u4e2a\u5305\u542b\u5173\u4e8e\u65b0\u94fe\u7684\u5bc6\u94a5\u4fe1\u606f\u7684\u521b\u4e16\u533a\u5757\uff0c\u5305\u542b\u53c2\u4e0e\u8005\u4fe1\u606f\uff08URL\u548c\u8bc1\u4e66\uff09\u3001\u6392\u5e8f\u8282\u70b9\u4fe1\u606f\uff08URL\u548c\u8bc1\u4e66\uff09\u3002\u5e94\u7528\u901a\u8fc7\u76ee\u6807\u662f\u914d\u7f6e\u7cfb\u7edfchaincode\u7684\u914d\u7f6e\u5316\u4ea4\u6613\u6765\u534f\u8c03\u65b0\u901a\u9053\u5bf9\u53c2\u4e0e\u8282\u70b9\u7684\u9080\u8bf7\u3002", 
            "title": "4.2 \u94fe\u7684\u521b\u5efa"
        }, 
        {
            "location": "/sdk-design_zh/#43", 
            "text": "\u4e00\u4e2a\u4ea4\u6613\u5305\u542b\u660e\u786e\u7684\u4e24\u4e2a\u6b65\u9aa4\uff1a\u80cc\u4e66\u548c\u63d0\u4ea4\u3002\u80cc\u4e66\u662f\u8bf7\u6c42\u8282\u70b9\u5bf9\u4ea4\u6613\u7684\u7ed3\u679c\u8fdb\u884c\u8fd0\u884c\u5e76\u80cc\u4e66\uff08\u7b7e\u540d\uff09\uff1b\u63d0\u4ea4\u662f\u5728\u4ea4\u6613\u548c\u4ea4\u6613\u7684\u80cc\u4e66\u5185\u5bb9\u7684\u6709\u6548\u671f\u5185\u8bf7\u6c42\u5171\u8bc6\u3002  \u4e0b\u56fe\u8bf4\u660e\u4ea4\u6613\u65f6\u5ba2\u6237\u7aefSDK\u548c\u8282\u70b9\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u67e5\u770b\u67b6\u6784\u6587\u6863\uff08https://github.com/hyperledger/fabric/blob/master/proposals/r1/Next-Consensus-Architecture-Proposal.md\uff09\u3002  \u9996\u5148SDK\u548c\u5e94\u7528\u534f\u540c\u5de5\u4f5c\uff0c\u4f7f\u7528\u5e94\u7528\u7684\uff08\u6216\u8005\u88ab\u8ba4\u8bc1\u7528\u6237\u7684\uff09\u79c1\u94a5\u7ed9\u4fe1\u606f\u7b7e\u540d\uff08\u6240\u6709\u7684\u5916\u90e8\u4fe1\u606f\u90fd\u9700\u8981\u7b7e\u540d\u8ba4\u8bc1\uff09\u3002\u7136\u540e\u5b83\u6839\u636e\u80cc\u4e66\u7b56\u7565\uff08\u901a\u8fc7\u9a8c\u8bc1\u7cfb\u7edf\u94fe\u7801\u6216\u8005VSCC\u5b9e\u73b0\u7684\uff09\u7ed9\u4e00\u4e2a\u6216\u591a\u4e2a\u8282\u70b9\u53d1\u9001\u4fe1\u606f\u3002\u5b83\u83b7\u5f97\u5f02\u6b65\u7684\u53cd\u9988\u5e76\u4e14\u51b3\u5b9a\u662f\u5426\u6267\u884c\u521b\u5efa\u548c\u63d0\u4ea4\u4ea4\u6613\u5230\u5171\u8bc6\u670d\u52a1\u3002\u6267\u884c\u4ea4\u6613\u63d0\u4ea4\u7684\u51b3\u5b9a\u662f\u57fa\u4e8e\u80cc\u4e66\u7b56\u7565\u8c13\u8bcd\uff08\u5c31\u50cf2 out of 3\uff09\u57fa\u4e8e\u5e26\u5916\u77e5\u8bc6\u3002\u4e00\u65e6\u63d0\u4ea4\uff0c\u4ea4\u6613\u7684\u5904\u7406\u6d41\u7a0b\u4fbf\u662f\u5f02\u6b65\u7684\uff0c\u6240\u4ee5SDK\u76d1\u542c\u63d0\u4ea4\u4e8b\u4ef6\u6765\u901a\u77e5\u5e94\u7528\u4ea4\u6613\u5904\u7406\u6d41\u7a0b\u7684\u5b8c\u6210\u6216\u8005\u62d2\u7edd\u7684\u7ed3\u679c\u3002   \u4e0a\u56fe\u662f\u5bf9\u4ea4\u6613\u6d41\u7a0b\u975e\u5e38\u4e0a\u5c42\u7684\u63cf\u8ff0\u3002SDK\u4e2d\u6709\u8be6\u7ec6\u7684\u6267\u884c\u7f51\u7edc\u548c\u73af\u5883\u914d\u7f6e\uff0c\u5305\u62ec\u83b7\u53d6\u7b7e\u540d\u5bc6\u94a5\u6765\u5b89\u5168\u7684\u7ba1\u7406\u6210\u5458\uff0c\u5904\u7406\u4ea4\u6613\u548c\u4e8b\u4ef6\u6d41\uff0c\uff08\u4f9d\u8d56\u5e94\u7528\u7684\uff09\u591a\u79cd\u5171\u8bc6\u901a\u9053\u3002", 
            "title": "4.3 \u4ea4\u6613\u652f\u6301"
        }, 
        {
            "location": "/sdk-design_zh/#5-api", 
            "text": "\u4e0b\u9762\u7684\u94fe\u63a5\u6307\u5411gRPC\u4e0efabric\uff08\u8282\u70b9\uff0c\u6392\u5e8f\u8005\u548c\u6210\u5458\u670d\u52a1\uff09\u6c9f\u901a\u7684\u4fe1\u606f\u548c\u670d\u52a1\u5b9a\u4e49\u3002  Proposal  \uff08\u90e8\u7f72\u6216\u8005\u4ea4\u6613\u8c03\u7528\u7684\u63d0\u6848\uff09  ProposalResponse  \uff08\u5168\u5c40\u7684\u63d0\u6848\u56de\u5e94\uff09  Chaincode  \uff08chaincode\uff0c\u8c03\u7528\uff0c\u90e8\u7f72\uff0c\u7b49\u7ec6\u8282\uff09  ChaincodeProposal  (chaincode-specific proposal header and payload)  Transaction  (transaction invocation)  ChaincodeTransaction  (chaincode-specific transaction action payload)  \u65b0\u7684COP API\u662f\u57fa\u4e8ejson\u7684\uff0c\u9700\u8981\u6dfb\u52a0\u5230\u65b0\u7684\u6210\u5458\u670d\u52a1\u8bbe\u8ba1\u4e2d\u3002  \u6d88\u606f\u5b9a\u4e49\u5e94\u8be5\u662f\u8bbe\u8ba1SDK APIs\u7684\u4e00\u4e2a\u7075\u611f\u6765\u6e90\u3002APIs\u660e\u663e\u6ca1\u6709\u5fe0\u5b9e\u7684\u53cd\u6620\u51fa\u6d88\u606f\u5b9a\u4e49\uff0c\u56e0\u4e3aSDK\u53ef\u4ee5\u4f7f\u7528\u667a\u80fd\u7f3a\u7701\u548c\u72b6\u6001\u4fe1\u606f\u6765\u6700\u5c0f\u5316\u8bf7\u6c42\u7684\u53c2\u6570\u3002", 
            "title": "5 \u5ba2\u6237\u7aef\u670d\u52a1\u5668API\u53c2\u8003"
        }, 
        {
            "location": "/sdk-design_zh/#6", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u8ba8\u8bba\u8bbe\u8ba1\u539f\u5219\u548c\u67b6\u6784\u601d\u8def\u3002  \u603b\u7684\u6765\u8bf4\uff0c\u6211\u4eec\u6709\u4e0d\u540c\u7b49\u7ea7\u7684\uff08\u6570\u503c\u8d8a\u5c0f\u8868\u793a\u7b49\u7ea7\u8d8a\u9ad8\uff09\u4e00\u4e9b\u6a21\u5757\uff1a  Package: Hyperledger Fabric Client     \u6a21\u5757  \u7b49\u7ea7  \u529f\u80fd      Client  0  \u4e3b\u8981\u7684\u5165\u53e3\u6a21\u5757\u3002\u5b83\u5fc5\u987b\u5141\u8bb8\u7528\u6237\u521b\u5efa\u9700\u8981\u7684\u4efb\u4f55\u5bf9\u8c61\u6765\u6267\u884c\u6240\u6709\u652f\u6301\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u76f4\u63a5\u8fde\u63a5\u7f51\u7edc\uff0cchaincode\u90e8\u7f72\uff0c\u4ea4\u6613\u6267\u884c\uff0c\u591a\u79cd\u67e5\u8be2\u3002\u53e6\u5916\uff0c\u57fa\u4e8e\u7f16\u7801\u89c4\u8303\u548c\u666e\u904d\u7684\u793e\u533a\u7ec3\u4e60\uff0c\u6bcf\u4e00\u79cd\u8bed\u8a00\u7684\u5b9e\u73b0\u4e5f\u80fd\u51b3\u5b9a\u662f\u5426\u6dfb\u52a0\u65b9\u4fbf\u7684\u65b9\u6cd5\uff0c\u5982sendTransaction(chain, tx)    Chain  1  \u4e00\u4e2a\u94fe\u4ee3\u8868\u4e00\u4e9b\u8282\u70b9\u7279\u522b\u5f62\u6210\u7684\u4e00\u4e2a\u7f51\u7edc\uff0c\u542f\u52a8\u4e00\u4e2a\u5171\u8bc6\u7684\u901a\u9053\uff0c\u5728\u901a\u9053\u4e2d\u4ea4\u6613\u53ef\u4ee5\u88ab\u72ec\u7acb\u7684\u5904\u7406\u3002\u4e00\u4e2a\u7f51\u7edc\u53ef\u80fd\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u94fe\u3002\u94fe\u4e0a\u7684\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u5355\u72ec\u7684\u8d26\u672c\u5305\u542b\u4ea4\u6613\u5728\u94fe\u4e0a\u6d3e\u53d1\uff0c\u5305\u62ec\u6210\u5458\u5173\u7cfb\u7684\u4efb\u4f55\u914d\u7f6e\u3002\u6240\u6709\u7684\u4ea4\u6613\u90fd\u662f\u5728\u94fe\u4e0a\u53d1\u9001\uff0c\u4e00\u4e2a\u5e94\u7528\u53ef\u80fd\u64cd\u4f5c\u591a\u4e2a\u94fe\u3002    Peer  2  \u4ee3\u8868\u7f51\u7edc\u4e0a\u7684\u8ba1\u7b97\u8282\u70b9\u3002\u8282\u70b9\u7684\u89d2\u8272\u6709\u80cc\u4e66\u8282\u70b9\u548c\u63d0\u4ea4\u8282\u70b9\uff0c\u5b83\u4eec\u90fd\u5728\u7ef4\u62a4\u7740\u8d26\u672c\u3002\u5e94\u7528\u53ef\u80fd\u8fde\u63a5\u5230\u4e00\u5b9a\u6570\u91cf\u7684\u53ef\u7528\u7684\u8282\u70b9    Orderer  2  \u7c7b\u4f3c\u8282\u70b9\uff0c\u4e0d\u540c\u7684\u662f\u5b83\u4ee3\u8868\u6392\u5e8f\u670d\u52a1\u7684\u7ec8\u7aef\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u8282\u70b9\uff08\u5f00\u53d1\u65f6\u672c\u5730\u5b89\u88c5\uff09\u6216\u8005\u4e00\u4e2a\u7f51\u7edc\u6392\u5e8f\u8005\u7684\u4ee3\u7406\u8282\u70b9\u3002\u57fa\u4e8e\u533a\u5757\u94fe\u7f51\u7edc\u7684fabric\u4f1a\u6709\u4e00\u4e2a\u7531\u591a\u4e2a\u6392\u5e8f\u8005\u8282\u70b9\u7ec4\u6210\u7684\u5355\u72ec\u7684\u6392\u5e8f\u670d\u52a1\u3002\u5e94\u7528\u53ef\u4ee5\u9009\u62e9\u4fe1\u4efb\u7279\u5b9a\u7684\u6392\u5e8f\u8005\uff0c\u6216\u8005\u4e00\u90e8\u5206\u6392\u5e8f\u8005\uff0c\u6216\u8005\u8bbe\u7f6e\u4ee3\u7406\u53bb\u7ed9\u6392\u5e8f\u8005\u8282\u70b9\u5e7f\u64ad\u4ea4\u6613\u3002    User  2  \u4ee3\u8868\u5728\u7f51\u7edc\u4e0a\u4ea4\u6613\u7684\u7528\u6237\u3002\u7528\u6237\u5b9e\u4f8b\u53ef\u4ee5\u57fa\u4e8e\u767b\u8bb0\u8bc1\u4e66\u88ab\u521d\u59cb\u5316\u3002\u8bc1\u4e66\u53ef\u4ee5\u4ece\u6210\u5458\u670d\u52a1\u6216\u8005\u5916\u90e8CA\u83b7\u53d6\u3002\u7406\u8bba\u4e0a\uff0c\u8fd9\u79cd\u7528\u6237\u4e5f\u80fd\u4ee3\u8868\u7f51\u7edc\u4e0a\u7684\u8282\u70b9\u6210\u5458\u3002\u7136\u800c\uff0c\u8fd9\u4e0e\u5e94\u7528\u7a0b\u5e8f\u65e0\u5173\uff08\u8fd9\u66f4\u50cf\u662f\u7f51\u7edc\u7ba1\u7406\u65b9\u9762\u7684\u95ee\u9898\uff09\uff0c\u6240\u4ee5\u5728\u8fd9\u4e2a\u8bbe\u8ba1\u4e2d\u6ca1\u6709\u5f00\u653e\u3002    Proposal  3  \u767b\u8bb0\u7684\u7528\u6237\u53ef\u4ee5\u5411\u8282\u70b9\u5217\u8868\u63d0\u51fa\u4ea4\u6613\u63d0\u6848\u6765\u80cc\u4e66\u4ea4\u6613\u3002\u4e00\u65e6\u63a5\u6536\u5230\u80cc\u4e66\u54cd\u5e94\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u51b3\u5b9a\u662f\u5426\u5df2\u7ecf\u83b7\u53d6\u80cc\u4e66\u7b7e\u540d\uff0c\u662f\u5426\u9700\u8981\u6267\u884c\u63d0\u4ea4\u4ea4\u6613\u5230\u5171\u8bc6\u670d\u52a1\u3002\u8fd9\u662f\u5173\u4e8e\u63d0\u6848\u539f\u59cb\u7684GRPC\u6d88\u606f\u7684\u5305\u88c5\u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u4fbf\u5229\u7684\u521b\u5efa\u65b9\u6cd5\u3002    ProposalResponse  3  \u63d0\u6848\u8c03\u7528\u80cc\u4e66\u8282\u70b9\u7684\u54cd\u5e94\uff0c\u6253\u5305\u80cc\u4e66\u7ed3\u679c\uff08\u662f\u6216\u5426\uff09\uff0c\u7b7e\u540d\uff0c\u7b49\u7b49\u3002\u8fd9\u662f\u5173\u4e8e\u63d0\u6848\u54cd\u5e94\u539f\u59cb\u7684GRPC\u6d88\u606f\u5305\u88c5\u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u4fbf\u5229\u7684\u65b9\u6cd5\u6765\u5229\u7528\u5b83\u81ea\u5df1\u7684\u5185\u5bb9\uff08\u80cc\u4e66\uff0c\u7b7e\u540d\uff0c\u7b49\u7b49\uff09\u3002    Transaction  3  \u767b\u8bb0\u7528\u6237\u6536\u96c6\u4e86\u80cc\u4e66\u4e4b\u540e\u53ef\u4ee5\u63d0\u4ea4\u4ea4\u6613\u3002\u4ea4\u6613\u8bf7\u6c42\u5305\u542b\u80cc\u4e66\u7b7e\u540d\u548cMVCC+post-image\uff0c\u5e76\u4e14\u4f7f\u7528\u6392\u5e8f\u670d\u52a1API\u3002\u4ea4\u6613\u6709\u4e24\u79cd\u7c7b\u578b\uff1a\u90e8\u7f72\u548c\u6267\u884c\u3002\u8fd9\u662f\u4ea4\u6613\u6709\u5173\u539f\u59cbGRPC\u6d88\u606f\u7684\u5305\u88c5\u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u4fbf\u5229\u7684\u521b\u5efa\u65b9\u6cd5\u3002    CryptoSuite  3  \u52a0\u5bc6\u6a21\u5757\u6253\u5305\u4e86\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5\uff0c\u975e\u5bf9\u79f0\u52a0\u5bc6\u7684\u5bc6\u94a5\u5bf9\uff0c\u5bf9\u79f0\u52a0\u5bc6\u7684\u5bc6\u94a5\u6d88\u606f\uff0c\u5b89\u5168\u7684hash\u548cMAC\u3002     Package: Member Service       \u6a21\u5757  \u7b49\u7ea7  \u529f\u80fd      MemberService  0  \u8fd9\u662ffabric\u53ef\u9009\u6a21\u5757\u7684\u5ba2\u6237\u7aef\uff0c\u6210\u5458\u670d\u52a1\u3002\u672c\u6a21\u5757\u7684\u4e3b\u8981\u529f\u80fd\u662f\u4ece\u6210\u5458\u670d\u52a1\u83b7\u53d6\u7528\u6237\u767b\u8bb0\u8bc1\u4e66\u3002\u53e6\u5916\uff0c\u8fd9\u4e2a\u6a21\u5757\u672c\u8eab\u6216\u5b83\u7684\u6269\u5c55\u7c7b\u4e5f\u5e94\u8be5\u80fd\u5728fabric\u9ed8\u8ba4\u7684\u6210\u5458\u670d\u52a1\u7684\u5b9e\u73b0\u4e2d\u63d0\u4f9b\u53ef\u7528\u7684\u989d\u5916\u7684\u529f\u80fd\uff0c\u5982\u7528\u6237\u6ce8\u518c\u529f\u80fd\u3002     \u4e3a\u4e86\u5e2e\u52a9\u8bf4\u660e\u4ee5\u4e0a\u5404\u6a21\u5757\u7684\u5173\u7cfb\uff0c\u6211\u4eec\u7ed9\u51fa\u4e86\u4ee5\u4e0b\u7684UML\u56fe\uff1a", 
            "title": "6 \u8be6\u7ec6\u8bf4\u660e"
        }, 
        {
            "location": "/sdk-design_zh/#61", 
            "text": "\u548c\u7ec8\u7aef\u7528\u6237\u4e3b\u8981\u7684\u4ea4\u4e92\u5904\u7406\u5668\u3002\u5ba2\u6237\u7aef\u5b9e\u4f8b\u63d0\u4f9b\u548c\u7f51\u7edc\u4e0a\u7684\u8282\u70b9\uff0c\u6392\u5e8f\u8005\uff0c\u53ef\u9009\u6210\u5458\u670d\u52a1\u4ea4\u4e92\u7684\u5904\u7406\u5668\u3002\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528SDK\u9700\u8981\u548c\u591a\u4e2a\u7f51\u7edc\u4ea4\u4e92\uff0c\u5206\u522b\u901a\u8fc7\u5355\u72ec\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b\u8fdb\u884c\u3002  \u6bcf\u4e2a\u5ba2\u6237\u7aef\u88ab\u521b\u5efa\u65f6\uff0c\u5e94\u8be5\u662f\u4f7f\u7528\u6765\u81ea\u4e8e\u5171\u8bc6\u670d\u52a1\u7684\u914d\u7f6e\u6570\u636e\u521d\u59cb\u5316\u521b\u5efa\uff0c\u8fd9\u4e9b\u6570\u636e\u5305\u542b\u4e00\u4e2a\u88ab\u4fe1\u4efb\u7684\u6839\u7684\u5217\u8868\uff0c\u6392\u5e8f\u8282\u70b9\u8bc1\u4e66\u548cIP\u5730\u5740\uff0c\u8fd8\u6709\u4e00\u4e2a\u8282\u70b9\u8bc1\u4e66\u5217\u8868\u548c\u53ef\u4f7f\u7528\u7684IP\u5730\u5740\u3002\u8fd9\u5fc5\u987b\u662f\u4f5c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u73af\u5883\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u7684\u3002\u5e94\u7528\u7a0b\u5e8f\u8d1f\u8d23\u7ef4\u62a4\u5ba2\u6237\u7aef\u7684\u914d\u7f6e\uff0c\u56e0\u4e3aSDK\u4e0d\u6301\u4e45\u5730\u4fdd\u5b58\u8fd9\u4e2a\u5bf9\u8c61\u3002  \u6bcf\u4e2a\u5ba2\u6237\u7aef\u5b9e\u4f8b\u53ef\u4ee5\u7ef4\u62a4\u51e0\u6761\u94fe\u4ee3\u8868\u901a\u9053\u548c\u76f8\u5173\u7684\u8d26\u672c\u3002    new_chain\uff08\u521b\u5efa\u4e00\u4e2a\u65b0\u94fe\uff09  \u6839\u636e\u53c2\u6570\u7ed9\u51fa\u7684\u540d\u5b57\u521b\u5efa\u4e00\u4e2a\u94fe\u7684\u5b9e\u4f8b\u3002\u8fd9\u5b9e\u9645\u4e0a\u4ee3\u8868\u201c\u901a\u9053\u201d\uff08\u6b63\u5982\u4e0a\u9762\u89e3\u91ca\u7684\uff09\uff0c\u8fd9\u4e2a\u8c03\u7528\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5bf9\u8c61\u3002\u521d\u59cb\u5316\u8fd9\u4e2a\u901a\u9053\uff0c\u8fd9\u4e2a\u8fd4\u56de\u7684\u5bf9\u8c61\u4e0a\u5fc5\u987b\u914d\u7f6e\u4e00\u4e2a\u53c2\u4e0e\u65b9\u7684\u80cc\u4e66\u8005\u5217\u8868\u548c\u6392\u5e8f\u8005\u8282\u70b9\u3002  Params \uff08\u53c2\u6570\uff09   name (str):\u94fe\u7684\u540d\u79f0\uff0c\u63a8\u8350\u4f7f\u7528\u547d\u540d\u7a7a\u95f4\u9632\u6b62\u78b0\u649e   Returns\uff08\u8fd4\u56de\u503c\uff09   (Chain instance):\u672a\u521d\u59cb\u5316\u7684\u94fe\u7684\u5b9e\u4f8b     get_chain\uff08\u83b7\u53d6\u94fe\uff09  \u83b7\u53d6\u94fe\u7684\u5b9e\u4f8b\u3002\u672c\u63a5\u53e3\u5141\u8bb8\u4fdd\u5b58\u5df2\u5b58\u5728\u7684\u94fe\u5b9e\u4f8b\u4f9b\u4e4b\u540e\u7684\u68c0\u7d22\uff0c\u5e76\u4e14\u5728\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u4e4b\u95f4\u5171\u4eab\u3002\u8bb0\u5f55\u94fe\u7684\u4fe1\u606f\u662f\u5e94\u7528\u7a0b\u5e8f\u6216\u8005SDK\u8d1f\u8d23\u7684\u4e8b\u60c5\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u67e5\u770b\u5b58\u50a8\u4e2d\u94fe\u7684\u4fe1\u606f\uff0c\u5b83\u53ef\u4ee5\u8c03\u7528\u53e6\u5916\u4e00\u79cdAPI\u67e5\u8be2\u4e00\u4e2a\u6216\u591a\u4e2a\u8282\u70b9\u6765\u83b7\u5f97\u8fd9\u4e9b\u4fe1\u606f\u3002  Params   name (str): The name of the chain \uff08\u94fe\u7684\u540d\u79f0\uff09   Returns   (Chain instance or None): the chain instance for the name. \uff08\u4ee5\u5165\u53c2\u547d\u540d\u7684\u94fe\u7684\u5b9e\u4f8b\uff09   Error:   The state store has not been set\uff08\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u5b58\u50a8\u72b6\u6001\uff09  A chain does not exist under that name\uff08\u4e0d\u5b58\u5728\u8be5\u540d\u79f0\u547d\u540d\u7684\u94fe\uff09     query_chain_info\uff08\u67e5\u8be2\u94fe\u7684\u4fe1\u606f\uff09  \u8fd9\u662f\u4e00\u4e2a\u7f51\u7edc\u8c03\u7528\uff0c\u7528\u6765\u67e5\u8be2\u6307\u5b9a\u7684\u8282\u70b9\u4e0a\u94fe\u7684\u4fe1\u606f\u3002\u76ee\u6807\u8282\u70b9\u5fc5\u987b\u662f\u5c5e\u4e8e\u76ee\u6807\u94fe\uff0c\u624d\u80fd\u591f\u8fd4\u56de\u8bf7\u6c42\u7684\u4fe1\u606f\u3002  Params   name (str): The name of the chain \uff08\u94fe\u540d\uff09  peers (array of Peer instances): target Peers to query\uff08\u67e5\u8be2\u7684\u76ee\u6807\u8282\u70b9\uff09   Returns   (Chain instance or None): the chain instance for the name.\uff08\u4ee5\u5165\u53c2\u547d\u540d\u7684\u94fe\u7684\u5b9e\u4f8b\u3002\uff09   Error:   The target Peer(s) does not know anything about the chain\uff08\u76ee\u6807\u8282\u70b9\u4e0d\u4e86\u89e3\u94fe\u7684\u4fe1\u606f\uff09     set_state_store\uff08\u8bbe\u7f6e\u72b6\u6001\u7684\u5b58\u50a8\uff09  SDK\u5e94\u8be5\u6709\u4e00\u4e2a\u5185\u5efa\u7684\u952e\u503c\u5b58\u50a8\u7684\u5b9e\u73b0\uff08\u5efa\u8bae\u662f\u57fa\u4e8e\u6587\u4ef6\u7684\u5b9e\u73b0\uff0c\u4ee5\u4fbf\u4e8e\u5728\u5f00\u53d1\u4e2d\u8bbe\u7f6e\uff09\u3002\u4f46\u662f\u751f\u4ea7\u7cfb\u7edf\u9700\u8981\u901a\u8fc7\u6570\u636e\u5e93\u4e3a\u66f4\u591a\u7684\u7a33\u5b9a\u5b58\u50a8\u548c\u805a\u7c07\u5b58\u50a8\u5907\u4efd\uff0c\u6240\u4ee5\u591a\u79cd\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u53ef\u4ee5\u901a\u8fc7\u6570\u636e\u5e93\u5171\u4eab\u5e94\u7528\u72b6\u6001\uff08\u5907\u6ce8\uff1a\u5e94\u7528\u4e0d\u9700\u8981\u4e30\u5bcc\u7684\u72b6\u6001\uff09\u3002\u8fd9\u4e2aAPI\u4f7f\u5f97\u5b58\u50a8\u6a21\u5757\u5177\u6709\u53ef\u63d2\u62d4\u7279\u6027\uff0c\u6240\u4ee5\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u5b58\u50a8\u5b9e\u73b0\u3002  Params   store (KeyValueStore): instance of an alternative KeyValueStore implementation provided by the consuming app.\uff08\u4f7f\u7528\u65b9\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7684\u952e\u503c\u5b58\u50a8\u5b9e\u73b0\u7684\u5b9e\u4f8b\uff09   Returns   None     get_state_store\uff08\u83b7\u53d6\u72b6\u6001\u5b58\u50a8\uff09  \u4e3aclient\u63d0\u4f9b\u7684\u83b7\u53d6\u72b6\u6001\u5b58\u50a8\u7684\u5bf9\u8c61\u7684\u4fbf\u5229\u65b9\u6cd5  Params   None   Returns   (KeyValueStore instance): The KeyValueStore implementation object set within this Client, or null if it does not exist\uff08\u8fd4\u56de\u8bbe\u7f6e\u5230client\u4e2d\u7684\u6309\u952e\u503c\u5bf9\u65b9\u5f0f\u5b9e\u73b0\u7684\u5b58\u50a8\u5bf9\u8c61\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd4\u56de\u7a7a\uff09     set_crypto_suite\uff08\u8bbe\u7f6e\u52a0\u5bc6\u6a21\u5757\uff09  \u8bbe\u7f6e\u4e00\u4e2a\u52a0\u5bc6\u6a21\u5757\u7684\u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u662f\u6309CryptoSuite\u63a5\u53e3\u5b9e\u73b0\u7684\u3002\u4e00\u4e2a\u52a0\u5bc6\u6a21\u5757\u6253\u5305\u4e86\u6570\u5b57\u7b7e\u540d\u7684\u7b97\u6cd5\u548c\u4f7f\u7528\u975e\u5bf9\u79f0\u5bc6\u94a5\u5bf9\u7684\u52a0\u5bc6\u529f\u80fd\uff0c\u4f7f\u7528\u5bf9\u79f0\u5bc6\u94a5\u52a0\u5bc6\u7684\u6d88\u606f\uff0c\u5b89\u5168\u7684hashing\u5904\u7406\u548cMAC\u3002  Params   Suite (object): an instance of a crypto suite implementation\uff08\u6309\u63a5\u53e3\u5b9e\u73b0\u7684\u52a0\u5bc6\u6a21\u5757\u7684\u5b9e\u4f8b\uff09     get_crypto_suite\uff08\u83b7\u53d6\u52a0\u5bc6\u6a21\u5757\uff09  Client\u83b7\u53d6\u52a0\u5bc6\u6a21\u5757\u5bf9\u8c61\u7684\u4fbf\u5229\u65b9\u6cd5\u3002  Params   None   Returns   (CryptoSuite instance): The CryptoSuite implementation object set within this Client, or null if it does not exist\uff08\u52a0\u5bc6\u6a21\u5757\u7684\u5bf9\u8c61\uff09  set_user_context\uff08\u8bbe\u7f6e\u7528\u6237\u4e0a\u4e0b\u6587\uff09   \u6839\u636eclient\u5b9e\u4f8b\u7684\u5b89\u5168\u7684\u4e0a\u4e0b\u6587\u8bbe\u7f6e\u7528\u6237\u7c7b\u7684\u5b9e\u4f8b\u3002\u7528\u6237\u7684\u8d44\u683c\u8bc1\u4e66\u4f1a\u88ab\u7528\u6765\u6267\u884c\u4ea4\u6613\u5e76\u4e14\u67e5\u8be2\u533a\u5757\u94fe\u7f51\u7edc\u3002\u5982\u679c\u72b6\u6001\u5b58\u50a8\u5df2\u7ecf\u8bbe\u7f6e\u5230\u4e86client\u5b9e\u4f8b\u4e0a\uff0c\u6839\u636e\u8bbe\u5b9a\u7684\u7528\u6237\u4e0a\u4e0b\u6587\uff0cSDK\u53ef\u4ee5\u628a\u5bf9\u8c61\u4fdd\u5b58\u5728\u4e00\u4e2a\u6301\u4e45\u5316\u7684\u7f13\u5b58\u4e2d\u3002\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u72b6\u6001\u5b58\u50a8\uff0c\u5f53\u5e94\u7528\u7a0b\u5e8f\u5d29\u6e83\u6216\u8005\u88ab\u8986\u76d6\u65f6\uff0c\u7f13\u5b58\u4e0d\u80fd\u88ab\u521b\u5efa\uff0c\u5e76\u4e14\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u518d\u6b21\u8bbe\u7f6e\u7528\u6237\u4e0a\u4e0b\u6587\u3002  Params   user (User): an instance of the User class encapsulating the authenticated user\u2019s signing materials (private key and enrollment certificate) \uff08\u53c2\u6570\u662f\u7528\u6237\uff0c\u7528\u6237\u7c7b\u7684\u5b9e\u4f8b\uff0c\u5b83\u628a\u88ab\u8ba4\u8bc1\u7528\u6237\u62e5\u6709\u7684\u7b7e\u540d\u6750\u6599\uff08\u79c1\u94a5\u548c\u80cc\u4e66\u8bc1\u4e66\uff09\u6253\u5305\u5728\u5185\uff09     get_user_context\uff08\u83b7\u53d6\u7528\u6237\u4e0a\u4e0b\u6587\uff09  \u6b63\u5982\u4e0a\u9762\u6240\u89e3\u91ca\u7684\uff0cclient\u5b9e\u4f8b\u53ef\u4ee5\u62e5\u6709\u4e00\u4e2a\u53ef\u9009\u7684\u72b6\u6001\u5b58\u50a8\u3002SDK\u4fdd\u5b58\u5df2\u6ce8\u518c\u7528\u6237\u5230\u53ef\u4ee5\u88ab\u5e94\u7528\u7a0b\u5e8f\u7684\u5df2\u8ba4\u8bc1\u7528\u6237\uff08\u8ba4\u8bc1\u7684\u5de5\u4f5c\u5728SDK\u4e4b\u5916\u7531\u5e94\u7528\u7a0b\u5e8f\u5b8c\u6210\uff09\u5229\u7528\u7684\u5b58\u50a8\u4e2d\u3002\u672c\u65b9\u6cd5\u8bd5\u56fe\u901a\u8fc7\u672c\u5730\u5b58\u50a8\u4e2d\u7684\u540d\u79f0\uff08\u901a\u8fc7\u952e\u503c\u5b58\u50a8\u63a5\u53e3\u83b7\u53d6\uff09\u52a0\u8f7d\u7528\u6237\u3002\u5df2\u52a0\u8f7d\u7684\u7528\u6237\u5bf9\u8c61\u5fc5\u987b\u4ee3\u8868\u4e00\u4e2a\u5df2\u6ce8\u518c\u7528\u6237\uff0c\u5e76\u4e14\u8be5\u7528\u6237\u62e5\u6709\u4e00\u4e2a\u5df2\u4fe1\u4efb\u7684CA\uff08\u5982COP\u670d\u52a1\uff09\u7b7e\u540d\u7684\u53ef\u7528\u7684\u80cc\u4e66\u8bc1\u4e66\u3002  Params   name (str): The name of the user \uff08\u7528\u6237\u540d\u79f0\uff09   Returns   (User instance): The user object corresponding to the name, or null if the user does not exist or if the state store has not been set\uff08\u8fd4\u56de\u5339\u914d\u540d\u79f0\u7684\u7528\u6237\u5bf9\u8c61\uff0c\u5982\u679c\u7528\u6237\u4e0d\u5b58\u5728\u6216\u8005\u72b6\u6001\u5b58\u50a8\u672a\u8bbe\u7f6e\u8fd4\u56de\u7a7a\uff09", 
            "title": "6.1 \u5ba2\u6237\u7aef"
        }, 
        {
            "location": "/sdk-design_zh/#62", 
            "text": "\u201c\u94fe\u201d\u5bf9\u8c61\u4ece\u901a\u9053\u83b7\u53d6\u8bbe\u7f6e\u9879\uff0c\u7531\u6392\u5e8f\u8005\u8282\u70b9\u521b\u5efa\uff0c\u4e0e\u6392\u5e8f\u8005\u7ed9\u901a\u9053\u4e0a\u53c2\u4e0e\u7684\u8282\u70b9\u6d3e\u53d1\u4ea4\u6613\u7684\u884c\u4e3a\u76f8\u9694\u79bb\u3002\u6839\u636e\u8282\u70b9\u5217\u8868\u548c\u6392\u5e8f\u8005\u5217\u8868\u914d\u7f6e\u94fe\u4e4b\u540e\uff0c\u5b83\u5fc5\u987b\u88ab\u521d\u59cb\u5316\u3002\u521d\u59cb\u5316\u8fc7\u7a0b\u7ed9\u6392\u5e8f\u8005\u8282\u70b9\u53d1\u9001\u4e00\u4e2a\u914d\u7f6e\u4ea4\u6613\u6765\u521b\u5efa\u7279\u5b9a\u7684\u901a\u9053\uff0c\u5e76\u4e14\u8be2\u95ee\u8282\u70b9\u52a0\u5165\u901a\u9053\u3002    add_peer\uff08\u6dfb\u52a0\u8282\u70b9\uff09  \u7ed9\u94fe\u5bf9\u8c61\u6dfb\u52a0\u8282\u70b9\uff0c\u8fd9\u662f\u7eaf\u672c\u5730\u64cd\u4f5c\u3002  Params   peer (Peer): an instance of the Peer class that has been initialized with URL, TLC certificate, and enrollment certificate\uff08\u5165\u53c2\uff1a\u88abURL\uff0cTLC\u8bc1\u4e66\uff0c\u548c\u80cc\u4e66\u8bc1\u4e66\u521d\u59cb\u5316\u4e4b\u540e\u7684Peer\u7c7b\u7684\u5bf9\u8c61\u3002\uff09     remove_peer\uff08\u79fb\u9664\u8282\u70b9\uff09  \u4ece\u94fe\u5bf9\u8c61\u79fb\u9664\u8282\u70b9\uff0c\u8fd9\u662f\u4e00\u4e2a\u7eaf\u672c\u5730\u64cd\u4f5c\u3002  Params   peer (Peer): an instance of the Peer class\uff08\u8282\u70b9\u5b9e\u4f8b\uff09     get_peers\uff08\u83b7\u53d6\u8282\u70b9\uff09  \u4ece\u94fe\u7684\u672c\u5730\u4fe1\u606f\u83b7\u53d6\u8282\u70b9\u3002  Params   None   Returns   (Peer list): The peer list on the chain\uff08\u8fd4\u56de\u94fe\u4e0a\u7684\u8282\u70b9\u5217\u8868\u3002\uff09     add_orderer\uff08\u6dfb\u52a0\u6392\u5e8f\u8282\u70b9\uff09  \u7ed9\u94fe\u5bf9\u8c61\u6dfb\u52a0\u6392\u5e8f\u8005\u8282\u70b9\uff0c\u8fd9\u662f\u7eaf\u672c\u5730\u64cd\u4f5c\u3002\u94fe\u5b9e\u4f8b\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u5355\u4e2a\u7684\u6392\u5e8f\u8005\u8282\u70b9\uff0c\u8fd9\u4e2a\u6392\u5e8f\u8005\u8d1f\u8d23\u5411\u6392\u5e8f\u8005\u7f51\u7edc\u4e2d\u5176\u4ed6\u6392\u5e8f\u8005\u5e7f\u64ad\u8bf7\u6c42\u3002\u6216\u8005\u5982\u679c\u5e94\u7528\u4e0d\u4fe1\u4efb\u6392\u5e8f\u8005\u8282\u70b9\uff0c\u5b83\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u66f4\u591a\u7684\u6392\u5e8f\u8005\uff0c\u4ec5\u9700\u8981\u5411\u94fe\u5bf9\u8c61\u6dfb\u52a0\u5b83\u4eec\u5373\u53ef\u3002\u6709\u5173\u67d0\u4e2a\u6392\u5e8f\u8005\u7684\u6240\u6709API\u4f1a\u540c\u65f6\u5e7f\u64ad\u7ed9\u6240\u6709\u7684\u6392\u5e8f\u8005\u3002  Params   orderer (Orderer): an instance of the Orderer class \uff08Orderer\u5b9e\u4f8b\uff09     remove_orderer\uff08\u79fb\u9664\u6392\u5e8f\u8282\u70b9\uff09  \u4ece\u94fe\u5bf9\u8c61\u79fb\u9664\u6392\u5e8f\u8005\u8282\u70b9\uff0c\u8fd9\u662f\u7eaf\u672c\u5730\u64cd\u4f5c\u3002  Params   orderer (Orderer): an instance of the Orderer class     get_orderers\uff08\u83b7\u53d6\u6392\u5e8f\u8282\u70b9\uff09  \u83b7\u53d6\u94fe\u7684\u6392\u5e8f\u8282\u70b9\uff0c\u8fd9\u662f\u7eaf\u672c\u5730\u64cd\u4f5c\u3002  Params   None   Returns   (Orderer list): The orderer list on the chain     initialize_chain\uff08\u521d\u59cb\u5316\u94fe\uff09  \u8c03\u7528\u6392\u5e8f\u8005\u6765\u5f00\u59cb\u521b\u5efa\u65b0\u7684\u94fe\uff0c\u521b\u5efa\u52a8\u4f5c\u672c\u8eab\u662f\u5f00\u653e\u7684\u65b0\u7684\u6d88\u606f\u6d41\u548c\u8fde\u63a5\u53c2\u4e0e\u8282\u70b9\u7684\u7ec4\u5408\u3002\u8fd9\u662f\u4e00\u4e2a\u8017\u65f6\u7684\u5904\u7406\u3002\u53ea\u6709\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u9700\u8981\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u3002\u4e00\u65e6\u94fe\u88ab\u6210\u529f\u521b\u5efa\uff0c\u5176\u4ed6\u7684\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u4ec5\u4ec5\u9700\u8981\u8c03\u7528get_chain()\u6765\u83b7\u53d6\u6709\u5173\u94fe\u7684\u4fe1\u606f\u3002  Params   None   Returns \uff08\u94fe\u7684\u521d\u59cb\u5316\u52a8\u4f5c\u662f\u5426\u6267\u884c\u6210\u529f\uff09   (bool): whether the chain initialization process was successful     update_chain\uff08\u66f4\u65b0\u94fe\uff09  \u8c03\u7528\u6392\u5e8f\u8005\u8282\u70b9\u6765\u66f4\u65b0\u5df2\u7ecf\u5b58\u5728\u7684\u94fe\u3002\u8fd9\u5141\u8bb8\u7ed9\u5df2\u5b58\u5728\u7684\u94fe\u6dfb\u52a0\u6216\u5220\u9664\u8282\u70b9\uff0c\u4e5f\u662f\u57fa\u4e8e\u8bc1\u4e66\u91cd\u5efa\u5bf9\u8282\u70b9\u8bc1\u4e66\u4fe1\u606f\u8fdb\u884c\u66f4\u65b0\u3002  Params   None   Returns \uff08\u66f4\u65b0\u94fe\u7684\u64cd\u4f5c\u662f\u5426\u6210\u529f\uff09   (bool): whether the chain update process was successful     is_readonly\uff08\u662f\u5426\u53ea\u8bfb\uff09  \u83b7\u53d6\u94fe\u7684\u72b6\u6001\u6765\u67e5\u770b\u5e95\u5c42\u901a\u9053\u662f\u5426\u5df2\u7ecf\u88ab\u7ec8\u6b62\uff0c\u521b\u5efa\u4e00\u4e2a\u53ea\u8bfb\u94fe\uff0c\u53ef\u4ee5\u67e5\u8be2\u4fe1\u606f\uff08\u4ea4\u6613\u548c\u72b6\u6001\uff09\u4f46\u662f\u4e0d\u53ef\u4ee5\u63d0\u4ea4\u65b0\u7684\u4ea4\u6613\u3002  Params   None   Returns \uff08\u662f\u5426\u53ea\u8bfb\uff09   (bool): is ready-only (true) or not     query_info\uff08\u67e5\u8be2\u4fe1\u606f\uff09  \u67e5\u8be2\u94fe\u7684\u72b6\u6001\uff08\u9ad8\u5ea6\uff0c\u5df2\u77e5\u7684\u8282\u70b9\uff09\u4e2d\u591a\u79cd\u6709\u7528\u4fe1\u606f\u3002  Params   none   Returns    (ChainInfo) with height, currently the only useful info     query_block\uff08\u67e5\u8be2\u5757\uff09  \u6839\u636e\u5757\u53f7\u67e5\u8be2\u5757\u3002  Params   blockNumber (number)   Returns   Object containing the block     query_transaction\uff08\u67e5\u8be2\u4ea4\u6613\uff09  \u6839\u636e\u4ea4\u6613\u53f7\u67e5\u8be2\u4ea4\u6613\u3002  Params   transactionID   Returns   TransactionInfo containing the transaction     create_deploy_proposal\uff08\u521b\u5efa\u90e8\u7f72\u63d0\u6848\uff09  \u521b\u5efa\u4ea4\u6613\u63d0\u6848\u3002\u901a\u8fc7\u6570\u636e\uff08chaincodeID\uff0cchaincode\u8c03\u7528\uff0c\u7b49\uff09\u88c5\u914d\u63d0\u6848\uff0c\u5e76\u4e14\u4f7f\u7528\u5339\u914dECert\u7b7e\u540d\u7684\u79c1\u94a5\u7b7e\u540d\u63d0\u6848\u3002  Params   chaincode_path (string): path to the chaincode to deploy  chaincode_name (string): a custom name to identify the chaincode on the chain  fcn (string): name of the chaincode function to call after deploy to initiate the state\uff08chaincode\u7684\u65b9\u6cd5\u540d\uff0c\u90e8\u7f72\u540e\u521d\u59cb\u5316\u72b6\u6001\u65f6\u8981\u8c03\u7528\u5b83\uff09  args (string[]): arguments for calling the init function designated by \u201cfcn\u201d\uff08\u4e0a\u9762fcn\u7684\u53c2\u6570\uff09  sign (Bool): Whether to sign the transaction, default to True   Returns   (Proposal): The created Proposal instance or None.     create_transaction_proposal\uff08\u521b\u5efa\u4ea4\u6613\u63d0\u6848\uff09  \u4e3a\u4ea4\u6613\u521b\u5efa\u4e00\u4e2a\u63d0\u6848\u3002\u901a\u8fc7\u6570\u636e\uff08chaincode\u540d\u79f0\uff0c\u9700\u8981\u8c03\u7528\u7684\u65b9\u6cd5\uff0c\u53c2\u6570\u7b49\uff09\u88c5\u914d\u63d0\u6848\uff0c\u5e76\u4e14\u4f7f\u7528\u5339\u914dECert\u7b7e\u540d\u7684\u79c1\u94a5\u7ed9\u63d0\u6848\u7b7e\u540d\u3002  Params   chaincode_name (string): The name given to the target chaincode to invoke\uff08\u8981\u6267\u884c\u7684\u76ee\u6807chaincode\u7684\u540d\u79f0\uff09  args (string[]): arguments for calling the \u201cinvoke\u201d method on the chaincode\uff08\u6b63\u5728\u8c03\u7528\u6267\u884c\u7684chaincode\u4e0a\u7684\u65b9\u6cd5\u7684\u53c2\u6570\uff09  Sign (Bool): Whether to sign the transaction, default to True   Returns   (Transaction_Proposal instance): The created Transaction_Proposal instance or None.     send_transaction_proposal\uff08\u53d1\u9001\u4ea4\u6613\u63d0\u6848\uff09  \u628a\u521b\u5efa\u597d\u7684\u63d0\u6848\u53d1\u9001\u7ed9\u8282\u70b9\u53bb\u80cc\u4e66\u3002  Params   transaction_proposal (Transaction_Proposal): The transaction proposal data\uff08\u4ea4\u6613\u63d0\u6848\u7684\u6570\u636e\uff09  chain: The target chain whose peers the proposal will be sent to\uff08\u63d0\u6848\u5c06\u8981\u53d1\u9001\u7ed9\u7684\u8282\u70b9\u6240\u5728\u7684\u76ee\u6807\u94fe\uff09  retry (Number): Times to retry when failure, by default to 0 (no retry)\uff08\u91cd\u8bd5\u6b21\u6570\uff0c\u9ed8\u8ba40\uff09   Returns   (Transaction_Proposal_Response response): The response to send proposal request.\uff08\u53d1\u9001\u63d0\u6848\u8bf7\u6c42\u540e\u7684\u54cd\u5e94\uff09     create_transaction\uff08\u521b\u5efa\u4ea4\u6613\uff09  \u9075\u4ece\u80cc\u4e66\u7b56\u7565\u6839\u636e\u63d0\u6848\u7684\u54cd\u5e94\u4fe1\u606f\u521b\u5efa\u4ea4\u6613\u3002  Params   proposal_responses ([Transaction_Proposal_Response]): The array of proposal responses received in the proposal call.\uff08\u5728\u63d0\u6848\u7684\u8c03\u7528\u4e2d\u8fd4\u56de\u7684\u54cd\u5e94\u4fe1\u606f\u7684\u6570\u7ec4\uff09   Returns   (Transaction instance): The created transaction object instance.\uff08\u521b\u5efa\u7684\u4ea4\u6613\u5bf9\u8c61\u5b9e\u4f8b\uff09     send_transaction\uff08\u53d1\u9001\u4ea4\u6613\uff09  \u7ed9\u94fe\u7684\u6392\u5e8f\u670d\u52a1\uff08\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u6392\u5e8f\u8005\u8282\u70b9\u7ec4\u6210\uff09\u53d1\u9001\u4ea4\u6613\uff0c\u7136\u540e\u505a\u5171\u8bc6\u548c\u63d0\u4ea4\u5230\u8d26\u672c\u7684\u5de5\u4f5c\u3002  \u672c\u8c03\u7528\u662f\u5f02\u6b65\u7684\uff0c\u5e76\u4e14\u4ea4\u6613\u63d0\u4ea4\u6210\u529f\u4fe1\u606f\u662f\u901a\u8fc7\u5757\u6216\u8005chaincode\u4e8b\u4ef6\u901a\u77e5\u7684\u3002\uff08\u672c\u65b9\u6cd5\u5fc5\u987b\u7ed9\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e00\u4e2a\u54cd\u5e94\u673a\u5236\u5173\u8054\u4e8b\u4ef6\u76d1\u542c\u5668\u5904\u7406\u201c\u4ea4\u6613\u5df2\u63d0\u4ea4\u201d\uff0c\u201c\u4ea4\u6613\u5b8c\u6210\u201d\uff0c\u201c\u9519\u8bef\u201d\u7b49\u4e8b\u4ef6\u3002\uff09  \u4e0b\u9762\u6709\u4e24\u79cd\u6709\u5173fabric\u540e\u7aef\u7684\u6c9f\u901a\u65b9\u5f0f\uff0c\u89e6\u53d1\u4e0d\u540c\u7684\u4e8b\u4ef6\u56de\u8c03\u7ed9\u5e94\u7528\u7a0b\u5e8f\u5904\u7406\u5668   \u6392\u5e8f\u8005\u670d\u52a1\u7684gRPC\u5ba2\u6237\u7aef\u5728\u201c\u5e7f\u64ad\u201d\u8c03\u7528\u7684\u8bf7\u6c42\u6216\u54cd\u5e94\u65b9\u6cd5\u4e2d\u4f7f\u7528\u5e38\u89c4\u7684\u65e0\u72b6\u6001\u7684HTTP \u8fde\u63a5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7684\u5b9e\u73b0\u9700\u8981\u5728\u54cd\u5e94\u4e2d\u63a5\u6536\u5230\u6210\u529f\u786e\u8ba4\u65f6\u53d1\u9001\u201c\u4ea4\u6613\u5df2\u63d0\u4ea4\u201d\u4e8b\u4ef6\uff0c\u6216\u8005\u5728\u63a5\u6536\u5230\u9519\u8bef\u65f6\u53d1\u9001\u201c\u9519\u8bef\u201d\u4e8b\u4ef6  \u4e3a\u4e86\u652f\u6301fabric\u201cBLOCK\u201d \u201d, \u201cCHAINCODE\u201d\u548c\u201cTRANSACTION\u201d\u4e8b\u4ef6\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u7684\u5b9e\u73b0\u9700\u8981\u548c\u4f5c\u4e3a\u5185\u90e8\u4e8b\u4ef6\u67a2\u7ebd\u673a\u5236\u4e00\u90e8\u5206\u7684\u94fe\u4e8b\u4ef6\u6e90\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u6301\u4e45\u7684\u8fde\u63a5\u3002\u8fd9\u4e9b\u4e8b\u4ef6\u5e94\u8be5\u5f15\u53d1\u65b9\u6cd5\u7ed9\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u201c\u5b8c\u6210\u201d\u6216\u201c\u9519\u8bef\u201d\u4e8b\u4ef6\u3002   Params   transaction (Transaction): The transaction object constructed above\uff08\u4e0a\u9762\u521b\u5efa\u7684\u4ea4\u6613\u5bf9\u8c61\u3002\uff09   Returns\uff08\u4e00\u4e2a\u4e8b\u4ef6\u5904\u7406\uff0c\u53ef\u4ee5\u5173\u8054\u5230\u5e94\u7528\u7a0b\u5e8f\u4e8b\u4ef6\u5904\u7406\u5668\u7684\uff09   result (EventEmitter): an handle to allow the application to attach event handlers on\u201csubmitted\u201d, \u201ccomplete\u201d, and \u201cerror\u201d.", 
            "title": "6.2 \u94fe"
        }, 
        {
            "location": "/sdk-design_zh/#63", 
            "text": "\u7528\u6237\u7c7b\u4ee3\u8868\u5df2\u7ecf\u901a\u8fc7\u6ce8\u518c\u8bc1\u4e66\u6ce8\u518c\u548c\u7b7e\u540d\u5bc6\u94a5\u7b7e\u540d\u7684\u5df2\u767b\u8bb0\u7528\u6237\u3002\u6ce8\u518c\u8bc1\u4e66\u5fc5\u987b\u901a\u8fc7\u533a\u5757\u94fe\u7f51\u7edc\u914d\u7f6e\u4fe1\u4efb\u7684CA\u8bc1\u4e66\u7b7e\u540d\u3002\u5df2\u6ce8\u518c\u7528\u6237\uff08\u62e5\u6709\u5df2\u7b7e\u540d\u5bc6\u94a5\u548c\u6ce8\u518c\u8bc1\u4e66\uff09\u53ef\u4ee5\u5f15\u5bfcchaincode\u90e8\u7f72\uff0c\u4ea4\u6613\u548c\u94fe\u4e0a\u67e5\u8be2\u3002  \u7528\u6237\u6ce8\u518c\u8bc1\u4e66\u53ef\u4ee5\u4e8b\u5148\u4f5c\u4e3a\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u4eceCA\u83b7\u53d6\uff0c\u6216\u8005\u53ef\u4ee5\u901a\u8fc7\u5b83\u672c\u8eab\u7684\u767b\u8bb0\u7a0b\u5e8f\u4ece\u53ef\u9009\u7684fabric COP\u670d\u52a1\u83b7\u53d6\u3002  \u6709\u65f6\u7528\u6237\u8ba4\u8bc1\u548c\u8282\u70b9\u8ba4\u8bc1\u4f1a\u6df7\u6dc6\u3002\u56e0\u4e3a\u7528\u6237\u53ef\u4ee5\u5229\u7528\u79c1\u94a5\uff0c\u6240\u4ee5\u7528\u6237\u8eab\u4efd\u6709\u4ee3\u7406\u7b7e\u540d\u7684\u80fd\u529b\uff0c\u800c\u8282\u70b9\u5728\u5e94\u7528\u7a0b\u5e8f/SDKs\u4e0a\u4e0b\u6587\u4e2d\u53ea\u6709\u9a8c\u8bc1\u7b7e\u540d\u7684\u8ba4\u8bc1\u80fd\u529b\u3002\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u4f7f\u7528\u8282\u70b9\u8eab\u4efd\u6765\u7b7e\u540d\u56e0\u4e3a\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u5229\u7528\u8282\u70b9\u8eab\u4efd\u7684\u79c1\u94a5\u3002    get_name\uff08\u83b7\u53d6\u540d\u79f0\uff09  \u83b7\u53d6\u6210\u5458\u540d\u79f0\u3002\u4ece\u5bf9\u8c61\u5b9e\u4f8b\u8bf7\u6c42\u53c2\u6570\u3002  Returns (str):   The name of the user   get_roles\uff08\u83b7\u53d6\u89d2\u8272\uff09  \u83b7\u53d6\u7528\u6237\u7684\u89d2\u8272\u3002\u5b83\u53ef\u80fd\u662f\u201c\u5ba2\u6237\u7aef\u201d\u201c\u5ba1\u8ba1\u5458\u201d\u8fd9\u7c7b\u503c\u7684\u6570\u7ec4\u3002\u6210\u5458\u670d\u52a1\u591a\u5b9a\u4e49\u4e86\u4e24\u4e2a\u7684\u89d2\u8272\u7528\u6765\u4fdd\u5b58\u8282\u70b9\u6210\u5458\u5173\u7cfb\uff0c\u5982\u201c\u8282\u70b9\u201d\u548c\u201c\u9a8c\u8bc1\u8005\u201d\uff0c\u8fd9\u4e24\u4e2a\u6ca1\u6709\u66b4\u9732\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002    Returns (str[]):   The roles for this user     get_enrollment_certificate\uff08\u83b7\u53d6\u80cc\u4e66\u8bc1\u4e66\uff09  \u8fd4\u56de\u5e95\u5c42\u8ba4\u8bc1\u8bc1\u4e66\u4ee3\u8868\u7684\u7528\u6237\u8eab\u4efd\u8bc1\u4e66\u3002  Params: none  Returns:   Certificate in PEM format signed by the trusted CA\uff08\u8fd4\u56de\u5df2\u4fe1\u4efb\u7684CA\u6309PEM\u683c\u5f0f\u7b7e\u540d\u7684\u8bc1\u4e66\uff09     set_name\uff08\u8bbe\u7f6e\u540d\u79f0\uff09  \u8bbe\u7f6e\u7528\u6237\u7684\u540d\u79f0/ID\u3002  Params:   name (string[): The user name / id.     set_roles\uff08\u8bbe\u7f6e\u89d2\u8272\uff09  \u6309\u4e0a\u9762\u5b9a\u4e49\u7684\u89d2\u8272\u503c\u8bbe\u7f6e\u7528\u6237\u89d2\u8272\u3002  Params:   Roles (string[]): The list of roles for the user\uff08\u5165\u53c2\u7528\u6237\u7684\u89d2\u8272\u5217\u8868\u3002\uff09     set_enrollment_certificate\uff08\u8bbe\u7f6e\u80cc\u4e66\u8bc1\u4e66\uff09  \u8bbe\u7f6e\u7528\u6237\u7684\u80cc\u4e66\u8bc1\u4e66\u3002  Params:    Certificate : The certificate in PEM format signed by the trusted CA\uff08\u5165\u53c2\u662f\u88ab\u5df2\u4fe1\u4efb\u7684CA\u6309PEM\u683c\u5f0f\u7b7e\u540d\u7684\u8bc1\u4e66\uff09     generate_tcerts\uff08\u751f\u6210\u4ea4\u6613\u8bc1\u4e66\uff09  \u83b7\u53d6\u4e00\u7cfb\u5217TCert\uff0c\u53ef\u4ee5\u5728\u4ea4\u6613\u4e2d\u4f7f\u7528\u3002TCert\u548c\u4ea4\u6613\u4e4b\u95f4\u662f\u4e00\u5bf9\u4e00\u7684\u5173\u7cfb\u3002TCert\u53ef\u4ee5\u5728\u672c\u5730\u901a\u8fc7SDK\u4f7f\u7528\u7528\u6237\u7684\u52a0\u5bc6\u6570\u636e\u9879\u751f\u6210\u3002  Params   count (number): how many in the batch to obtain?\uff08\u83b7\u53d6\u7684\u4ea4\u6613\u8bc1\u4e66\u7684\u6570\u91cf\uff09  Attributes (string[]): list of attributes to include in the TCert\uff08TCert\u5305\u542b\u7684\u5c5e\u6027\u7684\u5217\u8868\uff09   Returns (TCert[]):   An array of TCerts", 
            "title": "6.3 \u7528\u6237"
        }, 
        {
            "location": "/sdk-design_zh/#64", 
            "text": "\u8282\u70b9\u7c7b\u4ee3\u8868\u4e86\u8fdc\u7a0b\u8282\u70b9\u548c\u5b83\u672c\u8eab\u7f51\u7edc\u6210\u5458\u7684\u6570\u636e\uff0c\u5373\u7528\u6765\u9a8c\u8bc1\u7b7e\u540d\u7684ECert\u3002\u8282\u70b9\u6210\u5458\u4ee3\u8868\u7ec4\u7ec7\uff0c\u4e0d\u50cf\u7528\u6237\u6210\u5458\u4ee3\u8868\u4e2a\u4f53\u3002  \u5f53\u8282\u70b9\u88ab\u521b\u5efa\u540e\uff0c\u53ea\u8981\u914d\u7f6e\u4e00\u4e2a\u540d\u4e3a\u201ceventSourceUrl\u201d\u7684\u5c5e\u6027\uff0c\u8282\u70b9\u5b9e\u4f8b\u5c31\u53ef\u4ee5\u88ab\u6307\u5b9a\u4e3a\u4e00\u4e2a\u4e8b\u4ef6\u6e90\u3002\u5141\u8bb8SDK\u81ea\u52a8\u5173\u8054\u4ea4\u6613\u4e8b\u4ef6\u76d1\u542c\u5668\u4e8b\u4ef6\u6d41\u3002  \u9700\u8981\u8bf4\u660e\u7684\u662f\u8282\u70b9\u4e8b\u4ef6\u6d41\u529f\u80fd\u5728\u8282\u70b9\u5c42\u6b21\uff0c\u4e0d\u5728\u94fe\u548cchaincode\u7684\u5c42\u6b21\u3002    connectEventSource\uff08\u8fde\u63a5\u4e8b\u4ef6\u6e90\uff09  \u7531\u4e8e\u51e0\u4e4e\u6240\u6709\u8282\u70b9\u90fd\u662f\u4e8b\u4ef6\u7684\u751f\u4ea7\u8005\uff0c\u5f53\u521b\u5efa\u4e00\u4e2a\u8282\u70b9\u5b9e\u4f8b\u65f6\uff0c\u5e94\u7528\u53ef\u4ee5\u6307\u5b9a\u5b83\u4f5c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u7684\u4e8b\u4ef6\u6e90\u3002\u53ea\u9700\u8981\u94fe\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9\u6210\u4e3a\u4e8b\u4ef6\u6e90\uff0c\u56e0\u4e3a\u94fe\u4e0a\u7684\u6240\u6709\u8282\u70b9\u4ea7\u751f\u7684\u4e8b\u4ef6\u76f8\u540c\u3002\u672c\u65b9\u6cd5\u544a\u8bc9SDK\u5bf9\u4e8e\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\u54ea\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u4e8b\u4ef6\u6e90\u4f7f\u7528\u3002\u7ba1\u7406\u4e0e\u8282\u70b9\u7684EventHub\u8fde\u63a5\u7684\u751f\u547d\u5468\u671f\u662fSDK\u7684\u8d23\u4efb\u3002\u7406\u89e3\u5e76\u901a\u77e5\u9009\u62e9\u7684\u8282\u70b9\u60f3\u63a5\u6536\u54ea\u79cd\u4e8b\u4ef6\u7c7b\u578b\u4ee5\u53ca\u60f3\u4f7f\u7528\u54ea\u4e2a\u56de\u8c03\u65b9\u6cd5\uff0c\u662f\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u7684\u8d23\u4efb\u3002  Params:   None   Result:   Promise/Future: this gives the app a handle to attach \u201csuccess\u201d and \u201cerror\u201d listeners\uff08\u5e94\u7528\u83b7\u5f97\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\u6765\u5173\u8054\u201c\u6210\u529f\u201d\u6216\u201c\u9519\u8bef\u201d\u7684\u76d1\u542c\u5668\uff09     is_event_listened\uff08\u4e8b\u4ef6\u662f\u5426\u5df2\u88ab\u76d1\u542c\u7684\u6807\u8bb0\uff09  \u7f51\u7edc\u8c03\u7528\u53ef\u4ee5\u663e\u793a\u51fa\u662f\u5426\u81f3\u5c11\u6709\u4e00\u4e2a\u76d1\u542c\u5668\u5df2\u7ecf\u8fde\u63a5\u5230\u4e8b\u4ef6\u7684\u76ee\u6807\u8282\u70b9\u3002\u8fd9\u80fd\u5e2e\u52a9\u5e94\u7528\u5b9e\u4f8b\u5728\u5d29\u6e83\u540e\u6062\u590d\u4e2d\u6216\u8005\u591a\u4e2a\u5b9e\u4f8b\u90e8\u7f72\u7684\u60c5\u51b5\u4e0b\u51b3\u5b9a\u662f\u5426\u9700\u8981\u8fde\u63a5\u4e8b\u4ef6\u6e90\u3002  \u5907\u6ce8\uff1a\u8fd9\u4e2a\u8bf7\u6c42\u5bf9\u8282\u70b9\u4e0a\u4e8b\u4ef6\u7684\u751f\u6210\u8005\u6709\u5f3a\u5316\u4f5c\u7528\u3002  Params:   eventName (string): required \uff08\u5fc5\u9700\u7684\uff09  chain (Chain): optional \uff08\u53ef\u9009\u7684\uff09   Result:\uff08\u662f\u5426\u5df2\u7ecf\u88ab\u94fe\u4e0a\u7684\u4e00\u4e9b\u5e94\u7528\u5b9e\u4f8b\u76d1\u542c\uff09   (boolean): whether the said event has been listened on by some application instance on that chain      addListener\uff08\u6dfb\u52a0\u76d1\u542c\u5668\uff09  \u65b9\u6cd5\u4e3a\u8fde\u63a5\u5230\u4e8b\u4ef6\u6e90\u7684\u8282\u70b9\u63d0\u4f9b\uff0c\u76d1\u542c\u5668\u6ce8\u518c\u5728EventCallBack\uff0c\u7528\u4ee5\u63a5\u6536\u4e8b\u4ef6\u7c7b\u578b\u96c6\u7684\u56de\u8c03\u3002\u6dfb\u52a0\u76d1\u542c\u5668\u7684\u65b9\u6cd5\u53ef\u4ee5\u88ab\u6267\u884c\u591a\u6b21\u6765\u652f\u6301\u4e0d\u540c\u7684EventCallBack\u65b9\u6cd5\u63a5\u6536\u4e0d\u540c\u7c7b\u578b\u7684\u4e8b\u4ef6\u3002  \u8bf4\u660e\uff1a\u4ee5\u4e0b\u7684\u53c2\u6570\u5728\u67d0\u4e9b\u8bed\u8a00\u91cc\u662f\u53ef\u9009\u7684\uff0c\u6bd4\u5982Java\uff0c\u4e3a\u76d1\u542c\u5668\u63a5\u53e3\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u628a\u8be5\u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u6570\u3002  Params:   eventType : ie. Block, Chaincode, Transaction \uff08\u4e8b\u4ef6\u7c7b\u578b\uff09  eventTypeData : Object Specific for event type as necessary, currently needed for \u201cChaincode\u201d event type, specifying a matching pattern to the event name set in the chaincode(s) being executed on the target Peer, and for \u201cTransaction\u201d event type, specifying the transaction ID \uff08\u4e8b\u4ef6\u7c7b\u578b\u6570\u636e\uff1a\u4e8b\u4ef6\u7c7b\u578b\u6709\u5fc5\u8981\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u5bf9\u8c61\uff0c\u5bf9\u4e8e\u201cchaincode\u201d\u4e8b\u4ef6\u7c7b\u578b\u8981\u6c42\u662f\uff0c\u5728\u76ee\u6807\u8282\u70b9\u4e0a\u6267\u884c\u7684chaincode\u4e2d\u8bbe\u7f6e\u4e00\u4e2a\u6307\u5b9a\u7684\u4e8b\u4ef6\u540d\u5339\u914d\u8303\u5f0f\uff1b\u5bf9\u4e8e\u201cTransaction\u201d\u4e8b\u4ef6\u7c7b\u578b\uff0c\u8981\u6307\u5b9a\u4ea4\u6613ID\u3002\uff09  eventCallback : Client Application class registering for the callback.\uff08\u4e8b\u4ef6\u56de\u8c03\uff1a\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u7c7b\u4e3a\u56de\u8c03\u800c\u6ce8\u518c\u7684\u3002\uff09   Returns:   [event-listener-ref] a reference to the event listener, some language uses an ID (javascript), others uses object reference (Java)\uff08\u8fd4\u56de\u503c\uff1a\u4e8b\u4ef6\u76d1\u542c\u5668\u7684\u5f15\u7528\uff0c\u6307\u5411\u4e8b\u4ef6\u76d1\u542c\u5668\u7684\u5f15\u7528\uff0c\u6709\u4e9b\u8bed\u8a00\uff08javascript\uff09\u4f7f\u7528ID\uff0c\u5176\u4ed6\u7684\u8bed\u8a00\uff08Java\uff09\u4f7f\u7528\u5bf9\u8c61\u5f15\u7528\u3002\uff09     removeListener\uff08\u79fb\u9664\u76d1\u542c\u5668\uff09  \u89e3\u6ce8\u518c\u76d1\u542c\u5668  Params:\uff08SDK\u8fd4\u56de\u4e8b\u4ef6\u76d1\u542c\u5668\u7684\u5f15\u7528\uff09   [event-listener-ref] : reference returned by SDK for event listener   Returns:   statusFlag: Success / Failure     get_name\uff08\u83b7\u53d6\u540d\u79f0\uff09  \u83b7\u53d6\u8282\u70b9\u540d\u79f0\u3002\u9700\u8981\u5bf9\u8c61\u5b9e\u4f8b\u7684\u53c2\u6570\u3002  Returns (str):   The name of the Peer     set_name\uff08\u8bbe\u7f6e\u540d\u79f0\uff09  Set the Peer name / id.  Params:   Name (string): The unique name / id of this Peer.     get_roles\uff08\u83b7\u53d6\u89d2\u8272\uff09  \u83b7\u53d6\u8282\u70b9\u53c2\u4e0e\u7684\u7528\u6237\u7684\u89d2\u8272\u3002\u53ef\u80fd\u7684\u7ed3\u679c\u662f\u201cclient\u201d\u548c\u201cauditor\u201d\u7684\u6570\u7ec4\u3002\u6210\u5458\u670d\u52a1\u591a\u5b9a\u4e49\u4e86\u4e24\u4e2a\u89d2\u8272\u6765\u4fdd\u5b58\u8282\u70b9\u6210\u5458\u5173\u7cfb\uff1a\u201cpeer\u201d\u548c\u201cvalidator\u201d\uff0c\u8fd9\u4e24\u4e2a\u6ca1\u6709\u66b4\u9732\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002  Returns (str[]):   The roles for this user     set_roles\uff08\u8bbe\u7f6e\u89d2\u8272\uff09  \u8bbe\u7f6e\u8282\u70b9\u53c2\u4e0e\u7684\u7528\u6237\u89d2\u8272\u3002\u503c\u9075\u4ece\u4e0a\u9762\u9884\u5b9a\u7684\u51e0\u4e2a\u503c\u3002  Params:   Roles (string[]): The list of roles for the user\uff08\u7528\u6237\u89d2\u8272\u5217\u8868\uff09     get_enrollment_certificate\uff08\u83b7\u53d6\u80cc\u4e66\u8bc1\u4e66\uff09  \u8fd4\u56de\u5e95\u5c42\u4ee3\u8868\u7528\u6237\u8eab\u4efd\u7684ECert\u3002  Params: none  Returns:   Certificate in PEM format signed by the trusted CA     set_enrollment_certificate\uff08\u8bbe\u7f6e\u80cc\u4e66\u8bc1\u4e66\uff09  Set the Peer\u2019s enrollment certificate.  Params:   Certificate: Certificate in PEM format signed by the trusted CA", 
            "title": "6.4 \u8282\u70b9"
        }, 
        {
            "location": "/sdk-design_zh/#65", 
            "text": "\u533a\u5757\u94fe\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u4fdd\u5b58\u72b6\u6001\uff0c\u5305\u542b\u7528\u6237\u767b\u8bb0\u6750\u6599\uff08\u79c1\u94a5\uff0cCA\u7b7e\u540d\u7684\u8bc1\u4e66\uff09\u3002\u8fd9\u4e9b\u72b6\u6001\u9700\u8981\u88ab\u6301\u4e45\u5316\u3002\u201cKeyValueStore\u201d\u7684\u63a5\u53e3\u4e3aSDK\u81ea\u52a8\u4fdd\u5b58\u72b6\u6001\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u673a\u5236\uff0c\u8fd9\u5bf9\u5e94\u7528\u7a0b\u5e8f\u662f\u6709\u76ca\u7684\u3002\n\u5982\u679c\u5e94\u7528\u4f7f\u7528\u57fa\u4e8e\u8f6f\u4ef6\u5bc6\u94a5\u751f\u6210\u5668\u5373CryptoSuite\u7684\u5b9e\u73b0\uff0c\u90a3\u4e48\u5b83\u9700\u8981\u952e\u503c\u5b58\u50a8\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u4e00\u4e2a\u5b58\u50a8\u7cfb\u7edf\uff0cSDK\u5e94\u8be5\u9ed8\u8ba4\u4f7f\u7528\u4e00\u4e2a\u5185\u5efa\u7684\u5b9e\u73b0\uff0c\u6bd4\u5982\u4e00\u4e2a\u57fa\u4e8e\u672c\u5730\u6587\u4ef6\u7cfb\u7edf\u7684\u5b9e\u73b0\u3002  SDK\u4e5f\u53ef\u4ee5\u5728\u8fd9\u4e2a\u952e\u503c\u5b58\u50a8\u7cfb\u7edf\u91cc\u9762\u4ee5\u53ef\u9009\u7f13\u5b58\u7684\u65b9\u5f0f\u4fdd\u5b58\u7528\u6237\u767b\u8bb0\u6750\u6599\u3002\u4f46\u662f\uff0c\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u6ca1\u6709\u914d\u7f6e\u4e00\u4e2a\u952e\u503c\u5b58\u50a8\u7cfb\u7edf\uff0cSDK\u4f1a\u628a\u5e94\u7528\u7a0b\u5e8f\u7406\u89e3\u6210\u9009\u62e9\u4e86\u603b\u662f\u4e3a\u4f1a\u8bdd\u8bbe\u7f6e\u4e0a\u4e0b\u6587\uff0c\u5e76\u4e14\u6ca1\u6709\u610f\u56fe\u4f7f\u7528\u9ed8\u8ba4\u7684\u952e\u503c\u5b58\u50a8\u3002    get_value\uff08\u83b7\u53d6\u503c\uff09  Retrieves a value given a key  Params   key (str): The name of the key   Returns   Result (Object): The value     set_value\uff08\u5b58\u5165\u503c\uff09  Sets the value  Params   Key  value   Returns   Acknowledgement of successful storage of the value", 
            "title": "6.5 \u952e\u503c\u5b58\u50a8\uff08\u63a5\u53e3\uff09"
        }, 
        {
            "location": "/sdk-design_zh/#66", 
            "text": "\u52a0\u5bc6\u6a21\u5757\u6253\u5305\u4e86\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5\u548c\u975e\u5bf9\u79f0\u52a0\u5bc6\u65b9\u6cd5\uff0c\u6d88\u606f\u5bf9\u79f0\u52a0\u5bc6\u65b9\u6cd5\uff0c\u548chash\u4ee5\u53caMAC\u3002\u8fd9\u662f\u4e3a\u533a\u5757\u94fe\u52a0\u5bc6\u670d\u52a1\u63d0\u4f9b\u8005\u63a5\u53e3\u7684\u4e00\u4e2a\u955c\u50cf\u8bbe\u8ba1\uff0c\u88abfabric\u52a0\u5bc6\u56e2\u961f\u53d1\u8868\u3002  Default implementation currently planned for the peer and COP, and must be implemented by the SDK\u2019s default implementation also:    ECDSA: curves \u201csecp256r1\u201d and \u201csecp384r1\u201d  AES: AES128, AES256 with CBC/CTR/GCM mode key length = 128 bits   SHA: SHA256, SHA384, SHA3_256, SHA3_384    generate_key\uff08\u751f\u6210\u5bc6\u94a5\uff09  Generate a key based on the options. The output can be a private key or a public key in an asymmetric algorithm, or a secret key of a symmetric algorithm.  Params   opts (Object): an object that encapsulates two properties, \u201calgorithm\u201d and\u201cephemeral\u201d.   Returns   Result (Key): The key object     deriveKey\uff08\u5bfc\u51fa\u5bc6\u94a5\uff09  Derives a key from k using opts.  Params   k (Key)  opts (Object)   Returns   (Key) derived key     importKey\uff08\u5bfc\u5165\u5bc6\u94a5\uff09  Imports a key from its raw representation using opts.  Params   k (Key)  opts (Object)   Returns   (Key) An instance of the Key class wrapping the raw key bytes     getKey\uff08\u83b7\u53d6\u5bc6\u94a5\uff09  Returns the key this CSP associates to the Subject Key Identifier ski .  Params   ski (byte[])   Returns   (Key) An instance of the Key class corresponding to the ski     hash\uff08hash\u5904\u7406\uff09  Hashes messages msg using options opts .  Params   msg (byte[])  opts (Object) an object that encapsulates property \u201calgorithm\u201d with values for hashing algorithms such as \u201cSHA2\u201d or \u201cSHA3\u201d   Returns   (Key) An instance of the Key class corresponding to the ski     encrypt\uff08\u52a0\u5bc6\uff09  Encrypt plain text.  Params   key (Key) public encryption key  plainText (byte[])  opts (Object)   Returns   (byte[]) Cipher text     decrypt\uff08\u89e3\u5bc6\uff09  Decrypt cipher text.  Params   key (Key) private decryption key  cipherText (byte[])  opts (Object)   Returns   (byte[]) Plain text     sign\uff08\u7b7e\u540d\uff09  Sign the data.  Params   Key (Key) private signing key  digest (byte[]) fixed-length digest of the target message to be signed  opts (function) hashing function to use   Returns   Result(Object):Signature object     verify\uff08\u9a8c\u8bc1\uff09  Verify the signature.  Params   key (Key) public verification key  signature (byte[]) signature  digest (byte[]) original digest that was signed   Returns   (bool): verification successful or not", 
            "title": "6.6 \u52a0\u5bc6\u6a21\u5757\uff08\u63a5\u53e3\uff09"
        }, 
        {
            "location": "/sdk-design_zh/#7", 
            "text": "\u5ba2\u6237\u7aefSDK\u548cfabric\u7528\u4e24\u4e2a\u65b9\u6cd5\u6c9f\u901a\uff1a\u65e0\u72b6\u6001\u7684HTTP\u8fde\u63a5\u548cHTTP\u957f\u8fde\u63a5\u3002  \u53d1\u9001\u63d0\u6848\u548c\u53d1\u9001\u4ea4\u6613\u8c03\u7528\u5728\u8bf7\u6c42/\u54cd\u5e94\u4e2d\u662f\u65e0\u72b6\u6001\u7684\u3002\u5982\u679c\u51fa\u73b0\u7f51\u7edc\u9519\u8bef\uff0c\u8c03\u7528\u4f1a\u8d85\u65f6\u3002SDK\u5e94\u8be5\u6709\u4e00\u4e2a\u53ef\u914d\u7f6e\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u65b9\u4fbf\u5e94\u7528\u7a0b\u5e8f\u57fa\u4e8e\u5bf9\u5ba2\u6237\u7aef\u5e94\u7528\u548cfabric\u8282\u70b9\u4e4b\u95f4\u7684\u7f51\u7edc\u7279\u5f81\u7684\u7406\u89e3\u63a7\u5236\u8c03\u7528\u7684\u52a8\u4f5c\u3002  \u53e6\u5916\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u80fd\u6709\u4e00\u4e2a\u91cd\u8bd5\u6b21\u6570\uff0c\u4ee5\u4fbf\u4e8eSDK\u6839\u636e\u8d85\u65f6\u9519\u8bef\u81ea\u52a8\u8bd5\u56fe\u91cd\u8fdeHTTP\u8c03\u7528\u3002\u8fd9\u4e9b\u91cd\u8bd5\u90fd\u5c1d\u8bd5\u5e76\u4e14\u4ecd\u7136\u53d1\u751f\u8d85\u65f6\u9519\u8bef\u4e4b\u540e\uff0c\u8fde\u63a5\u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u3002  \u53e6\u4e00\u65b9\u9762\uff0c\u4e8b\u4ef6\u6d41\u8fde\u63a5SDK\u548c\u4e8b\u4ef6\u6e90\u8282\u70b9\u662f\u957f\u8fde\u63a5\u3002\u7279\u522b\u5730\uff0c\u7531\u4e8e\u4e8b\u4ef6\u6d41\u63a5\u53e3\u88abfabric\u5b9a\u4e49\uff0c\u8fde\u63a5\u662f\u53cc\u5411\u7684\uff0c\u5141\u8bb8\u6d88\u606f\u53d1\u9001\u5230\u4e24\u65b9\u3002\u5bf9\u4e8e\u7f51\u7edc\u9519\u8bef\uff0c\u4ee5\u9632\u4e22\u5931\u4e8b\u4ef6\u548c\u4e0d\u80fd\u89e6\u53d1client\u5e94\u7528\u6ce8\u518c\u7684\u76d1\u542c\u5668\u7684\u7ed3\u679c\uff0c\u8fde\u63a5\u4f1a\u88ab\u65ad\u5f00\u3002  \u4e3a\u5e94\u7528\u7684\u5229\u76ca\u8003\u8651SDK\u5e94\u8be5\u8bd5\u56fe\u91cd\u65b0\u53d1\u8d77\u8fde\u63a5\u3002\u4f46\u662f\uff0c\u5982\u679c\u5728\u5c1d\u8bd5\u4e86\u91cd\u8fde\u6b21\u6570\u4e4b\u540e\u4e0d\u80fd\u6062\u590d\u8fde\u63a5\uff0c\u5e94\u8be5\u7528\u4e00\u4e2a\u9ad8\u7ea7\u522b\u7684\u4e25\u91cd\u9519\u8bef\u901a\u77e5\u5e94\u7528\u8fd9\u79cd\u60c5\u51b5\u3002", 
            "title": "7 \u5904\u7406\u7f51\u7edc\u9519\u8bef"
        }, 
        {
            "location": "/sdk-design_zh/#8", 
            "text": "1) Next-Consensus-Architecture_Proposal:\nhttps://github.com/hyperledger/fabric/blob/master/proposals/r1/Next-Consensus-Architec\nture-Proposal.md  2) Consensus endorsing, consenting, and committing model:\nhttps://jira.hyperledger.org/browse/FAB-37  3) Node.js SDK\nhttps://github.com/hyperledger/fabric-sdk-node  4) Fabric-Cop Design\nhttps://docs.google.com/document/d/1TRYHcaT8yMn8MZlDtreqzkDcXx0WI50AV2JpAcv\nAM5w  5) Next Hyperledger-Fabric Architecture Protocol messages\nhttps://docs.google.com/document/d/1qD2zOTxmPoss3Xop_pDdkSXHozIR4N27NEsym\nosW4Gk", 
            "title": "8 \u53c2\u8003"
        }, 
        {
            "location": "/makefile_zh/", 
            "text": "\u539f\u6587\n\n\n\u4f5c\u8005\n\n\n\u5ba1\u6838\u4fee\u6b63\n\n\n\n\n\n\n\n\n\n\n\u539f\u6587\n\n\nDijun Liu\n\n\n\n\n\n\n\n\n\n\n\u8be6\u7ec6\u5185\u5bb9\u8bf7\u770b\n\u8fd9\u91cc", 
            "title": "Makefile\u6587\u4ef6\u89e3\u6790"
        }
    ]
}